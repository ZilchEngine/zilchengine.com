{
  "docs/README.html": {
    "href": "docs/README.html",
    "title": "New to the Zilch community? Get started here! | ZilchEngine",
    "keywords": "Welcome to the Docs, home of all Zilch Engine related documentation. New to the Zilch community? Get started here! Get a quick glance at the engine's features here. Download the Engine Minimum System Requirements The Docs Zilch Engine Documentation The Zilch Engine Manual, Tutorials, and Code Reference Zilch Editor Documentation Zilch Manual Nada In Zilch Tutorials Tutorial Sequences Code Reference"
  },
  "docs/code_reference.html": {
    "href": "docs/code_reference.html",
    "title": "Class Reference | ZilchEngine",
    "keywords": "The Code Reference sub-sections are generated directly from the C++ source code and comments contained within the rZCORE repository. Class Reference All types bound to Nada. Class Reference Sorted By Tag All types bound to Nada, sorted by tags. Command Reference All commands available via the in editor search bar. Enum Reference All enums bound to Nada. Event Reference All bound event types. Flag Reference Nada Base Types"
  },
  "docs/code_reference/attribute_reference.html": {
    "href": "docs/code_reference/attribute_reference.html",
    "title": "function_attribute_reference | ZilchEngine",
    "keywords": "function_attribute_reference object_attribute_reference property_attribute_reference"
  },
  "docs/code_reference/attribute_reference/function_attribute_reference.html": {
    "href": "docs/code_reference/attribute_reference/function_attribute_reference.html",
    "title": "Display | ZilchEngine",
    "keywords": "Nada Attributes C++ Attributes Display Override Static Virtual Display nada-attribute allow-static Override nada-attribute Static nada-attribute allow-static Virtual nada-attribute"
  },
  "docs/code_reference/attribute_reference/object_attribute_reference.html": {
    "href": "docs/code_reference/attribute_reference/object_attribute_reference.html",
    "title": "Command | ZilchEngine",
    "keywords": "Nada Attributes C++ Attributes Command ComponentInterface Gizmo RunInEditor Shortcut Tags Tool Command nada-attribute ComponentInterface nada-attribute Gizmo nada-attribute RunInEditor nada-attribute Shortcut nada-attribute Tags nada-attribute Tool nada-attribute"
  },
  "docs/code_reference/attribute_reference/property_attribute_reference.html": {
    "href": "docs/code_reference/attribute_reference/property_attribute_reference.html",
    "title": "Dependency | ZilchEngine",
    "keywords": "Nada Attributes C++ Attributes Dependency Display Editable Group LocalModificationOverride NetPeerId NetProperty Override Property Range RenamedFrom ResourceProperty RuntimeClone Serialize Serialized ShaderInput Slider Static Virtual Dependency nada-attribute Display nada-attribute allow-static Editable nada-attribute allow-static Group nada-attribute allow-static LocalModificationOverride nada-attribute NetPeerId nada-attribute NetProperty nada-attribute Override nada-attribute Property nada-attribute Range nada-attribute allow-static RenamedFrom nada-attribute ResourceProperty nada-attribute RuntimeClone nada-attribute allow-static Serialize nada-attribute Serialized nada-attribute ShaderInput nada-attribute allow-multiple Slider nada-attribute allow-static Static nada-attribute allow-static Virtual nada-attribute"
  },
  "docs/code_reference/class_reference.html": {
    "href": "docs/code_reference/class_reference.html",
    "title": "| ZilchEngine",
    "keywords": "aabb acquirenethostinfo action actiondelay actiongroup actions actionsequence actionset actionspace actionsystem additivesynthnode addnoisenode addobjectwidget addresourcewindow adsrenvelope alternatesearchcompletedevent anchoringsubtool animation animationbuilder animationclip animationclips animationeditor animationeditordata animationgraph animationgraphevent animationnode animationsettings animationtrackview archetype archetyped archetypeinstance area areaevent arrayhandleofmaterial arrayhandleofrendergroup arrowgizmo asyncprocess asyncprocessevent atlas audio audiobytedataevent audiocontent audiofloatdataevent audiooptions audiosettings autocompletepopup backgroundtaskevent backgroundtasks bandpassnode basecastfilter basecollisionevent basescrollarea basesprite basetextbuilder basicanimation basicdirectioneffect basicpointeffect binarybuilder binarycontent bitstream blendsettings blendsettingsmrt blockingtaskevent blockingwebrequest bone boundingboxbroadphase boundingspherebroadphase boxcollider boxparticleemitter bugreporterresponse buildercomponent buildinfo buoyancyeffect buttonbase calltippopup camera cameraviewport capsulecollider carwheelarray carwheelref castfilter castfilterevent castresult castresults castresultsarrayrange castresultsrange chainnode checkbox childrendergrouplist chorusnode chrome chromepopupevent cog cogarchetypeextension cogarchetypepropertyfilter cogcommand cogcomponentmeta coghashsetrange coginitializer coginitializerevent cogmetadatainheritance cogmetadisplay cogmetaoperations cogmetaserialization cogmetatransform cognamerange cogpath cogpathevent cogpathmetaserialization cogreplaceevent cogserializationfilter collider collisionendblock collisionevent collisionfilter collisionfilterblock collisiongroup collisiongroupevent collisionpersistedblock collisionstartblock collisiontable colorevent colorgradient colorscheme colortargetmrt combobox command commandevent commandexecuter commandmanager commandupdateevent component composite compressornode conflictoptions connectiondata connectionevent consoletextevent consoleui constraintconfigblock contactblock contactgraphedge contactpoint contactpointrange contactrange contentcomponent contentcomposition contentconfig contentcopyright contenteditoroptions contenthistory contentitem contentitemmetaoperations contentlibrary contentlibraryreference contentlibraryreferencearray contentnotes contentpackage contentsystem contentsystemevent contenttags contextmenuentry contextmenuentrychildrenrange contextmenuentrycommand contextmenuentrydivider contextmenuentrymenu contextmenuevent convexmesh convexmeshcollider createdestroytool creationtool crossblend curvecontrolpoint curvedraggable curveevent curvetangent customaudionode customaudionodeevent customcollisioneventtracker customconstraintinfo customjoint customjointblock customjointevent customphysicseffect customphysicseffectevent cylindercollider databuilder datacontent dataevent datareplaceevent dataresource dataresourceinheritance debugarc debugbox debugcapsule debugcircle debugcone debugcylinder debugdraw debugengineevent debugfrustum debuggraphical debuggraphicalprimitive debuggraphicaltext debuggraphicalthickline debugline debuglinecross debugobb debugsettings debugsphere debugtext debugtriangle defaultgamesetup definitionset delaynode depthsettings developerconfig directblend directproperty docklayout document documentationlibrary documenteditor documentmanager documentresource drageffect dragselectsubtool dualblendchainnode dualblendcrossblend dualblenddirectblend dualblendselectivenode dynamicaabbtreebroadphase dynamicbroadphasepropertyextension dynamicmotor edgedocklayout editingamefilter editor editorcameracontroller editorconfig editorevent editorflags editorindexedstringarray editormain editorpackageloader editorpropertyextension editorrange editorrotationbasis editorsettings editorslider editorviewport edittext ellipsoidcollider engine environment equalizernode event eventbundle eventdirectorywatcher eventobject eventrange expandernode factory fileeditevent filllayout fixedanglejoint fixedanglejointblock flangernode flattentool floatingcomposite floweffect focusevent font fontbuilder fontcontent forceeffect formattedinplacetext frameratesettings frustum gameevent gamepad gamepadevent gamepads gamesession gamesessionrange gamewidget gearjoint gearjointblock generalsearchview generatedarchetype generatedwavenode genericphysicsmesh geometrycontent geometryimport geometryoptions geometryresourceentry gizmo gizmocreator gizmodrag gizmoevent gizmoraytestevent gizmospace gizmoupdateevent granularsynthnode graphical graphicalentry graphicalentryrange graphicalevent graphicalrangeinterface graphicalsortevent graphics graphicsdriversupport graphicsengine graphicsraycastprovider graphicsspace gravityeffect griddraw gridlayout handleableevent heightmanipulationtool heightmap heightmapcollider heightmapevent heightmapimporter heightmapmodel heightmapsource heightmapsubtool heightmaptool heightpatch hidebasefilter hierarchy hierarchycomposition hierarchyevent hierarchylistrange hierarchylistreverserange hierarchynamerange hierarchyrange hierarchyspline highlightborderevent highpassnode hotkeyeditor ibroadphase iconbutton ignorespaceeffects imagecontent imagedefinition imageoptions imagewidget importbutton importoptions indexbuffer indexedhalfedge indexedhalfedgeface indexedhalfedgefaceedgeindexarray indexedhalfedgefaceedgeindexarrayrange indexedhalfedgemesh indexedhalfedgemeshedgearray indexedhalfedgemeshedgearrayrange indexedhalfedgemeshfacearray indexedhalfedgemeshfacearrayrange indexedhalfedgemeshvertexarray indexedhalfedgemeshvertexarrayrange inplacetexteditor inputdeviceevent ipaddress item itemgroup itemlist job joint jointconfigoverride jointcreator jointdebugdrawconfig jointevent jointgraphedge jointlimit jointmotor jointrange jointspring jointtool joystick joystickevent joystickrange joysticks keyboard keyboardevent keyboardtextevent keyframeevent label layout layoutarea level libraryview linearaxisjoint linearaxisjointblock linearparticleanimator linkid listbox localmodifications lowpassnode mainconfig mainpropertyview mainwindow mainwindowtransformevent manipulatorjoint manipulatorjointblock manipulatortool manipulatortoolevent massoverride material materialblock materialblockproxy materialfactory materiallist menubar menubaritem mesh meshbuilder meshcollider meshparticleemitter messageboxevent metaarray metaarraywrapper metaattribute metacomposition metacompositionwrapper metacustomui metadatainheritance metadatainheritanceroot metadependency metadisplay metadropevent metaeditorgizmo metaeditorresource metaeditorscriptobject metagroup metainterface metalibraryevent metanetproperty metaoperations metaowner metapropertybasicfilter metapropertyeditor metapropertyfilter metapropertyrename metaresource metascriptshortcutattribute metascripttagattribute metaselection metaselectionrange metaserialization metaserializedproperty metashaderinput metastringserialization metatransform microphoneinputnode midievent modal modalbuttonevent modalconfirmevent model modulationnode mouse mousecapture mousedragevent mouseevent mousefiledropevent mousemanipulation multiconvexmesh multiconvexmeshcollider multiconvexmesheditor multiconvexmeshindexdata multiconvexmeshindexrange multiconvexmeshpoint multiconvexmeshpropertyviewinfo multiconvexmeshsubmeshdata multiconvexmeshsubmeshrange multiconvexmeshvertexdata multiconvexmeshvertexrange multidock multilinetext multimanager multirendertarget multisprite multispriteentry multispriteentryrange named netchannel netchannelconfig netchannelpropertychange netchanneltype neteventreceived neteventsent netgamestarted nethost nethostlistupdate nethostrange nethostrecord nethostrecordevent nethostupdate netlevelstarted netlinkconnected netlinkdisconnected netobject netobjectoffline netobjectonline netpeer netpeerclosed netpeeropened netpeerreceivedconnectrequest netpeerreceivedconnectresponse netpeerreceiveduseraddrequest netpeerreceiveduseraddresponse netpeersentconnectrequest netpeersentconnectresponse netpeersentuseraddrequest netpeersentuseraddresponse netproperty netpropertyconfig netpropertyinfo netpropertyinfos netpropertytype netspace netuser netuseracquiredobjectownership netuserlostobjectownership netuserownerchanged netuserrange nodeinfolistrange nodeprintinfo notifyevent nsquaredbroadphase objectconnectingtool objectevent objectlink objectlinkanchor objectlinkedge objectlinkevent objectlinkpointchangedevent objectlinkrange objectpollevent objectrotategizmo objectrotatetool objectscalegizmo objectscaletool objectstore objecttrack objecttransformgizmo objecttransformgizmoevent objecttransformtool objecttranslategizmo objecttranslatetool objectview operation operationbatch operationlistrange operationqueue operationqueueevent orientation orientationbasisgizmo osfileselection osmousedropevent osmouseevent osshell oswindow oswindowevent panningnode parentingtool particle particleanimator particleattractor particlecollisionheightmap particlecollisionplane particlecoloranimator particleemitter particleemittershared particleevent particlelistrange particlesystem particletwister particlewander phygunjoint phygunjointblock physicscar physicscarwheel physicscarwheelbasisgizmo physicseffect physicsengine physicsmaterial physicsmesh physicsmeshbuilder physicsmeshindexdata physicsmeshindexrange physicsmeshvertexdata physicsmeshvertexrange physicsraycastprovider physicssolverconfig physicsspace pitchnode plane pointforceeffect pointgravityeffect pointmassselectorsubtool pointselectorsubtool popup posenode positionjoint positionjointblock postaddresourceevent presolveblock presolveevent previewwidget previewwidgetfactory prismaticjoint prismaticjoint2d prismaticjoint2dblock prismaticjointblock progressbar progressevent projectdescription projectsettings propertyevent propertyoperation propertypath propertyview propertywidget propertywidgetobject pulleyjoint pulleyjointblock querymodifiedsaveevent quickhull3d raiselowertool randomcontext ratiolayout rawcontrolmapping ray raycaster raycastprovider reactive reactivespace reactiveviewport receiveddataevent recentprojects recordingnode rectangle referencecountedempty referencecountedeventobject referencecountedobject referencecountedsafeid32 referencecountedsafeid32eventobject referencecountedsafeid32object referencecountedsafeid64 referencecountedsafeid64eventobject referencecountedsafeid64object referencecountedthreadsafeid32 referencecountedthreadsafeid32eventobject referencecountedthreadsafeid32object referencecountedthreadsafeid64 referencecountedthreadsafeid64eventobject referencecountedthreadsafeid64object region relativevelocityjoint relativevelocityjointblock removedentry rendergroup rendergrouphierarchies rendergrouplist rendersettings rendertarget rendertasksevent resourcedisplayfunctions resourceeditors resourceevent resourcelibrary resourcelistevent resourcemetaoperations resourcemetaserialization resourcepackage resourcepackagedisplay resourcesystem resourcetable resourcetableentry resourcetableentryrange resourcetemplate resourcetemplatedisplay resourcetemplatesearch resourcetypesearch reverbnode revision revisions revolutebasisgizmo revolutejoint revolutejoint2d revolutejoint2dblock revolutejointblock richanimation richanimationbuilder rigidbody ringgizmo ringgizmoevent rootwidget ropecreatorsubtool rotategizmo rotategizmoupdateevent rotationbasisgizmo rotationbasisgizmoaabbqueryevent rotationbasisgizmoinitializationevent rotationbasisgizmometatransform safeid32 safeid32eventobject safeid32object safeid64 safeid64eventobject safeid64object samplecurve samplersettings sapbroadphase saveaudionode savingevent scalegizmo scalegizmoupdateevent scenegraphsource scrollarea searchview searchviewelement searchviewevent segment selectionchangedevent selectionicon selectivenode selectorbutton selectorspringsubtool selecttool selecttoolfrustumevent sendableevent serializationfilter shaderinputs shaderinputsevent sharedcontent shortcuts showgammacorrectionfilter shownormalgenerationoptionsfilter showpremultipliedalphafilter simpleanimation simpledebuggerlistener simplegizmobase simplesocket simplesound sizepolicies skeleton skinnedmodel sliceddefinition slider smoothsharpentool sound soundattenuator soundattenuatordisplay soundbuffer soundbuilder soundcue soundcuedisplay sounddisplay soundemitter soundemitterdisplay soundentry soundentrydisplay soundevent soundinstance soundinstanceevent soundinstancerange soundlistener soundnode sounds soundspace soundtag soundtagdisplay soundtagentry soundtagentrydisplay soundtags space spacemapvaluerange spaceobjects spacer spacerange sphere spherecollider sphericalparticleemitter spline splinebakedpoint splinebakedpoints splinecontrolpoint splinecontrolpoints splineevent splineparticleanimator splineparticleemitter splinesampledata splitter springcreatorsubtool springpointproxy springpointproxyproperty springselectorsubtool springsubtool sprite spritedata spriteframe spriteparticlesystem spritepreview spritesheetimporter spritesource spritesourcebuilder spritesourceeditor spritetext squaregizmo stacklayout staticaabbtreebroadphase stickjoint stickjointblock stresstest stresstestdialog stringcombobox stringnamedisplay subconvexmesh subrendergrouppass sweepresult sweepresultrange system tabarea tabmodifiedevent tabrenamedevent tagevent tcpsocket text textblock textbox textbuilder textbutton textcheckbox textcontent textdefinition texteditor texteditorconfig texteditorevent texterrorevent textevent textupdatedevent texture texturebuilder texturecontent texturedata textureinfo textureview thickness threadedwebrequest threadsafeid32 threadsafeid32eventobject threadsafeid64 threadsafeid64eventobject threadsafeid64object threadsafereferencecounted thrusteffect tileeditor2d tileeditor2ddrawtool tileeditor2dselecttool tileeditor2dsubtool tilemap tilemapsource tilepalettesource tilepalettesprite tilepaletteview tileview tileviewevent tileviewwidget timespace timesystem toggleiconbutton tool toolcontrol toolgizmoevent tooltip tooluievent torqueeffect tracker trackevent tracknode transform transformmetatransform translategizmo translategizmoupdateevent treeevent treerow treeview treeviewheaderaddedevent tweakables typeevent typenamedisplay uidocklayout uifilllayout uifocusevent uilayout uilegacytooltip uirootwidget uistacklayout uitransformupdateevent uiwidget uiwidgetcastresultsrange uiwidgetcomponenthierarchy uiwidgetrange unittestmousedropevent unittestmouseevent universaljoint universaljointblock updateevent uprightjoint uprightjointblock userconfig valueeditorfactory valueevent vertexbuffer vertexsemanticrange viewport viewportmouseevent viewporttextwidget volumenode vortexeffect webbrowser webbrowserconsoleevent webbrowsercursorevent webbrowserdownloadevent webbrowserevent webbrowsermanager webbrowserpointqueryevent webbrowserpopupcreateevent webbrowsersetup webbrowsertextevent webbrowserurlevent webbrowserwidget webrequester webresponseevent weightedcomposite weightpaintertool weldjoint weldjointblock wheeljoint wheeljoint2d wheeljoint2dblock wheeljointblock widget widgetmanager windeffect window windowlaunchsettings windowsoswindow windowtabevent zero zerometaarrayanimationclips zerometaarraycontentlibraryreferencearray zerometaarraynetpropertyinfos zerometaarrayrevisions zerometaarraysounds zerometaarraysoundtags nadacompiledevent nadacompileevent nadacompilefragmentevent nadacomponent nadadocumentresource nadaevent nadafragment nadafragmentbuilder nadalibraryresource nadaobject nadapluginbuilder nadapluginconfig nadapluginlibrary nadapluginsource nadaprecompilationevent nadascript nadascriptbuilder"
  },
  "docs/code_reference/class_reference/aabb.html": {
    "href": "docs/code_reference/class_reference/aabb.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Constructor Center ContainsPoint Extents Expand HalfExtents Overlap Max Overlaps Min Set SurfaceArea SetInvalid Volume ZeroOut Properties Center : real3 var Center : Real3 Extents : real3 var Extents : Real3 HalfExtents : real3 var HalfExtents : Real3 Max : real3 var Max : Real3 Min : real3 var Min : Real3 SurfaceArea : real read-only var SurfaceArea : Real Volume : real read-only var Volume : Real Methods Aabb : Void constructor Name Type Description function Aabb() Aabb : Void constructor Name Type Description p0 aabb function Aabb(p0 : Aabb) Aabb : Void constructor Name Type Description center real3 halfExtents real3 function Aabb(center : Real3, halfExtents : Real3) ContainsPoint : boolean Does this aabb contain the given point? |Name|Type|Description| |---|---|---| |p0|real3| | function ContainsPoint(p0 : Real3) : Boolean Expand : Void Expand this aabb to contain the given aabb. |Name|Type|Description| |---|---|---| |p0|aabb| | function Expand(p0 : Aabb) Expand : aabb static Creates an aabb that contains the two given aabbs. |Name|Type|Description| |---|---|---| |p0|aabb| | |p1|aabb| | function Expand(p0 : Aabb, p1 : Aabb) : Aabb Expand : aabb static Creates an aabb that contains the given aabb and point. |Name|Type|Description| |---|---|---| |p0|aabb| | |p1|real3| | function Expand(p0 : Aabb, p1 : Real3) : Aabb Expand : Void Expand this aabb to contain the given point. |Name|Type|Description| |---|---|---| |p0|real3| | function Expand(p0 : Real3) Overlap : boolean This function is deprecated. Use Overlaps instead |Name|Type|Description| |---|---|---| |p0|aabb| | function Overlap(p0 : Aabb) : Boolean Overlaps : boolean Does this aabb overlap/intersect the given aabb? |Name|Type|Description| |---|---|---| |p0|aabb| | function Overlaps(p0 : Aabb) : Boolean Set : Void Name Type Description point real3 function Set(point : Real3) Set : Void Name Type Description center real3 halfExtents real3 function Set(center : Real3, halfExtents : Real3) SetInvalid : Void Sets this aabb to an invalid aabb (Real3.PositiveMax, Real3.NegativeMin)). This also makes expansion easier. |Name|Type|Description| |---|---|---| function SetInvalid() ZeroOut : Void Name Type Description function ZeroOut()"
  },
  "docs/code_reference/class_reference/acquirenethostinfo.html": {
    "href": "docs/code_reference/class_reference/acquirenethostinfo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched when the net peer host is acquiring project-specific host information. Methods Properties Base Classes Derived Classes ReturnHostInfo event Properties ReturnHostInfo : eventbundle Return: Our bundled host info event data. var ReturnHostInfo : EventBundle Methods"
  },
  "docs/code_reference/class_reference/action.html": {
    "href": "docs/code_reference/class_reference/action.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) Base action class. Methods Properties Base Classes Derived Classes Cancel Active referencecountedeventobject actiondelay Completed actionset Started Properties Active : boolean read-only The action is queued and not stared or running. var Active : Boolean Completed : boolean read-only The action ran until it completed. var Completed : Boolean Started : boolean read-only Has the action started? var Started : Boolean Methods Cancel : Void Cancel the action and all child actions. |Name|Type|Description| |---|---|---| function Cancel()"
  },
  "docs/code_reference/class_reference/actiondelay.html": {
    "href": "docs/code_reference/class_reference/actiondelay.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) Delay action. Delays by time in seconds. Methods Properties Base Classes Derived Classes TimeLeft action Properties TimeLeft : real var TimeLeft : Real Methods"
  },
  "docs/code_reference/class_reference/actiongroup.html": {
    "href": "docs/code_reference/class_reference/actiongroup.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) A group of actions that run in parallel with each other. Methods Properties Base Classes Derived Classes actionset Properties Methods"
  },
  "docs/code_reference/class_reference/actions.html": {
    "href": "docs/code_reference/class_reference/actions.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) The collection of actions queued up on an object. Methods Properties Base Classes Derived Classes actionset Properties Methods"
  },
  "docs/code_reference/class_reference/actionsequence.html": {
    "href": "docs/code_reference/class_reference/actionsequence.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) A group of actions that run in serial. The first child action will block the second from running and so on. Methods Properties Base Classes Derived Classes actionset Properties Methods"
  },
  "docs/code_reference/class_reference/actionset.html": {
    "href": "docs/code_reference/class_reference/actionset.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) Base class for ActionGroup and ActionSequence. Stores a set of sub-actions. Methods Properties Base Classes Derived Classes action actiongroup actions actionsequence Properties Methods"
  },
  "docs/code_reference/class_reference/actionspace.html": {
    "href": "docs/code_reference/class_reference/actionspace.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine Methods Properties Base Classes Derived Classes Constructor component Properties Methods ActionSpace : Void constructor Name Type Description function ActionSpace()"
  },
  "docs/code_reference/class_reference/actionsystem.html": {
    "href": "docs/code_reference/class_reference/actionsystem.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes system Properties Methods"
  },
  "docs/code_reference/class_reference/additivesynthnode.html": {
    "href": "docs/code_reference/class_reference/additivesynthnode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Generates audio using additive synthesis. Methods Properties Base Classes Derived Classes AddHarmonic soundnode NoteOff NoteOn RemoveAllHarmonics StopAllNotes Properties Methods AddHarmonic : Void Adds a new harmonic to the additive synth notes. The first value is the multiplier that will be applied to the base frequency, the second is the volume of this harmonic, and the third (the AdsrEnvelope object) contains the envelope-related values. |Name|Type|Description| |---|---|---| |frequencyMultiplier|real| | |volume|real| | |envelope|adsrenvelope| | |type|SynthWaveType| | function AddHarmonic(frequencyMultiplier : Real, volume : Real, envelope : AdsrEnvelope, type : SynthWaveType) NoteOff : Void Stops playing all current notes at the specified MIDI value. |Name|Type|Description| |---|---|---| |midiNote|real| | function NoteOff(midiNote : Real) NoteOn : Void Starts playing a new note. The first parameter is the MIDI note value (range is 0 to 127), and the second is the volume modification that should be applied to this note (a value of 1.0 does not change the volume, while 0.0 would be silence). |Name|Type|Description| |---|---|---| |midiNote|real| | |volume|real| | function NoteOn(midiNote : Real, volume : Real) RemoveAllHarmonics : Void Removes all current harmonics. You must add at least one harmonic before playing a note. |Name|Type|Description| |---|---|---| function RemoveAllHarmonics() StopAllNotes : Void Stops playing all current notes. |Name|Type|Description| |---|---|---| function StopAllNotes()"
  },
  "docs/code_reference/class_reference/addnoisenode.html": {
    "href": "docs/code_reference/class_reference/addnoisenode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Adds random noise (static) to audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes AdditiveCutoff soundnode AdditiveGain MultiplicativeCutoff MultiplicativeGain Properties AdditiveCutoff : real The cutoff frequency used for the additive noise component, in Hz. var AdditiveCutoff : Real AdditiveGain : real The gain of the additive noise component, in decibels. var AdditiveGain : Real MultiplicativeCutoff : real The cutoff frequency used for the multiplicative noise component, in Hz. var MultiplicativeCutoff : Real MultiplicativeGain : real The gain of the multiplicative noise component, in decibels. var MultiplicativeGain : Real Methods"
  },
  "docs/code_reference/class_reference/addobjectwidget.html": {
    "href": "docs/code_reference/class_reference/addobjectwidget.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes propertywidget Properties Methods"
  },
  "docs/code_reference/class_reference/addresourcewindow.html": {
    "href": "docs/code_reference/class_reference/addresourcewindow.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/adsrenvelope.html": {
    "href": "docs/code_reference/class_reference/adsrenvelope.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Used to control harmonics of notes played by the AdditiveSynthNode. Methods Properties Base Classes Derived Classes Constructor AttackTime DecayTime DelayTime ReleaseTime SustainLevel SustainTime Properties AttackTime : real var AttackTime : Real DecayTime : real var DecayTime : Real DelayTime : real var DelayTime : Real ReleaseTime : real var ReleaseTime : Real SustainLevel : real var SustainLevel : Real SustainTime : real var SustainTime : Real Methods AdsrEnvelope : Void constructor Name Type Description function AdsrEnvelope()"
  },
  "docs/code_reference/class_reference/alternatesearchcompletedevent.html": {
    "href": "docs/code_reference/class_reference/alternatesearchcompletedevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/anchoringsubtool.html": {
    "href": "docs/code_reference/class_reference/anchoringsubtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes AnchoredPointMassColor pointmassselectorsubtool DrawAnchoredPoints Properties AnchoredPointMassColor : real4 var AnchoredPointMassColor : Real4 DrawAnchoredPoints : boolean var DrawAnchoredPoints : Boolean Methods"
  },
  "docs/code_reference/class_reference/animation.html": {
    "href": "docs/code_reference/class_reference/animation.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Engine (NOTE) The Animation resource class is used to store animations of game objects and their properties. Methods Properties Base Classes Derived Classes Duration Resource Properties Duration : real read-only Duration of the animation in seconds. var Duration : Real Methods"
  },
  "docs/code_reference/class_reference/animationbuilder.html": {
    "href": "docs/code_reference/class_reference/animationbuilder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Constructor Clips buildercomponent Properties Clips : animationclips var Clips : AnimationClips Methods AnimationBuilder : Void constructor Name Type Description function AnimationBuilder()"
  },
  "docs/code_reference/class_reference/animationclip.html": {
    "href": "docs/code_reference/class_reference/animationclip.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes AnimationIndex Object EndFrame Name StartFrame Properties AnimationIndex : integer var AnimationIndex : Integer EndFrame : integer var EndFrame : Integer Name : string var Name : String StartFrame : integer var StartFrame : Integer Methods"
  },
  "docs/code_reference/class_reference/animationclips.html": {
    "href": "docs/code_reference/class_reference/animationclips.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/animationeditor.html": {
    "href": "docs/code_reference/class_reference/animationeditor.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/animationeditordata.html": {
    "href": "docs/code_reference/class_reference/animationeditordata.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/animationgraph.html": {
    "href": "docs/code_reference/class_reference/animationgraph.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) The AnimationGraph component controls animation for an individual game object. It stores all needed per instance (vs what is shared in the animation resource) manages the current time and enumerates the animation sets. The AnimationGraph can animate multiple child objects and properties enabling bone animation, and other hierarchical animations. Methods Properties Base Classes Derived Classes Constructor Active component CreateBasicNode ActiveNode CreateChainNode TimeScale CreateCrossBlendNode CreateDirectBlendNode CreateSelectiveNode IsPlayingInGraph PrintGraph Update Properties Active : boolean Is the animGraph animating? var Active : Boolean ActiveNode : animationnode The current root animation node. var ActiveNode : AnimationNode TimeScale : real A scalar to the entire animation graph. var TimeScale : Real Methods AnimationGraph : Void constructor Constructor / destructor. |Name|Type|Description| |---|---|---| function AnimationGraph() CreateBasicNode : basicanimation Node creation functions. |Name|Type|Description| |---|---|---| |animation|animation| | |mode|AnimationPlayMode| | function CreateBasicNode(animation : Animation, mode : AnimationPlayMode) : BasicAnimation CreateChainNode : chainnode Name Type Description function CreateChainNode() : ChainNode CreateCrossBlendNode : crossblend Name Type Description function CreateCrossBlendNode() : CrossBlend CreateDirectBlendNode : directblend Name Type Description function CreateDirectBlendNode() : DirectBlend CreateSelectiveNode : selectivenode Name Type Description function CreateSelectiveNode() : SelectiveNode IsPlayingInGraph : boolean Name Type Description animation animation function IsPlayingInGraph(animation : Animation) : Boolean PrintGraph : Void Name Type Description function PrintGraph() Update : Void Updates the root node on each from and applies it to the object tree. |Name|Type|Description| |---|---|---| |dt|real| | function Update(dt : Real)"
  },
  "docs/code_reference/class_reference/animationgraphevent.html": {
    "href": "docs/code_reference/class_reference/animationgraphevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes Animation event Node PlayMode Properties Animation : animation read-only Only set when the animation node has a single animation. var Animation : Animation Node : animationnode read-only var Node : AnimationNode PlayMode : AnimationPlayMode read-only var PlayMode : AnimationPlayMode Methods"
  },
  "docs/code_reference/class_reference/animationnode.html": {
    "href": "docs/code_reference/class_reference/animationnode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Clone CollapseToPoseOnFinish referencecountedeventobject basicanimation CollapseToPose Duration dualblendchainnode GetNormalizedTime Paused dualblendcrossblend IsActive Time dualblenddirectblend PrintNode TimeScale dualblendselectivenode SetNormalizedTime posenode Properties CollapseToPoseOnFinish : boolean Whether or not to collapse to a pose node when finished playing. var CollapseToPoseOnFinish : Boolean Duration : real The duration of the node. var Duration : Real Paused : boolean Whether or not the node is currently paused. var Paused : Boolean Time : real The current time in the node. var Time : Real TimeScale : real A scalar to dt when updating the node. var TimeScale : Real Methods Clone : animationnode Name Type Description function Clone() : AnimationNode CollapseToPose : Void Collapses all children to a pose node on the next Update. |Name|Type|Description| |---|---|---| function CollapseToPose() GetNormalizedTime : real Name Type Description function GetNormalizedTime() : Real IsActive : boolean Name Type Description function IsActive() : Boolean PrintNode : Void Name Type Description tabs integer function PrintNode(tabs : Integer) SetNormalizedTime : Void A value between [0-1]. |Name|Type|Description| |---|---|---| |normalizedTime|real| | function SetNormalizedTime(normalizedTime : Real)"
  },
  "docs/code_reference/class_reference/animationsettings.html": {
    "href": "docs/code_reference/class_reference/animationsettings.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes AutoFocus AutoKey EditFps OnionSkinning PlaybackSpeed PreviewMode SnappingX SnappingY TimeDisplay Properties AutoFocus : boolean var AutoFocus : Boolean AutoKey : boolean var AutoKey : Boolean EditFps : integer var EditFps : Integer OnionSkinning : boolean var OnionSkinning : Boolean PlaybackSpeed : real var PlaybackSpeed : Real PreviewMode : integer var PreviewMode : Integer SnappingX : boolean var SnappingX : Boolean SnappingY : boolean var SnappingY : Boolean TimeDisplay : TimeDisplay var TimeDisplay : TimeDisplay Methods"
  },
  "docs/code_reference/class_reference/animationtrackview.html": {
    "href": "docs/code_reference/class_reference/animationtrackview.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/archetype.html": {
    "href": "docs/code_reference/class_reference/archetype.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Engine (NOTE) An archetype is a resource containing the serialized data definition of an object. The archetype stores a binary cache of the serialization data and the source file for debugging and for archetype updating. Methods Properties Base Classes Derived Classes StoredType Resource Properties StoredType : boundtype An Archetype can be a Cog, Space, or GameSession. It's okay for this to be a raw BoundType* because native types will never be destructed. var StoredType : BoundType Methods"
  },
  "docs/code_reference/class_reference/archetyped.html": {
    "href": "docs/code_reference/class_reference/archetyped.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine Methods Properties Base Classes Derived Classes component Properties Methods"
  },
  "docs/code_reference/class_reference/archetypeinstance.html": {
    "href": "docs/code_reference/class_reference/archetypeinstance.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/area.html": {
    "href": "docs/code_reference/class_reference/area.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine Methods Properties Base Classes Derived Classes Constructor BottomCenter component GetLocalLocation BottomLeft GetWorldLocation BottomRight LocalOffsetOf Center SetLocalLocation CenterLeft SetWorldLocation CenterRight LocalBottom LocalBottomCenter LocalBottomLeft LocalBottomRight LocalCenter LocalCenterLeft LocalCenterRight LocalLeft LocalRectangle LocalRight LocalTop LocalTopCenter LocalTopLeft LocalTopRight Origin Size TopCenter TopLeft TopRight WorldBottom WorldBottomCenter WorldBottomLeft WorldBottomRight WorldCenter WorldCenterLeft WorldCenterRight WorldLeft WorldRectangle WorldRight WorldTop WorldTopCenter WorldTopLeft WorldTopRight Properties BottomCenter : real2 read-only var BottomCenter : Real2 BottomLeft : real2 read-only var BottomLeft : Real2 BottomRight : real2 read-only var BottomRight : Real2 Center : real2 read-only var Center : Real2 CenterLeft : real2 read-only var CenterLeft : Real2 CenterRight : real2 read-only var CenterRight : Real2 LocalBottom : real var LocalBottom : Real LocalBottomCenter : real2 read-only var LocalBottomCenter : Real2 LocalBottomLeft : real2 read-only var LocalBottomLeft : Real2 LocalBottomRight : real2 read-only var LocalBottomRight : Real2 LocalCenter : real2 read-only var LocalCenter : Real2 LocalCenterLeft : real2 read-only var LocalCenterLeft : Real2 LocalCenterRight : real2 read-only var LocalCenterRight : Real2 LocalLeft : real var LocalLeft : Real LocalRectangle : rectangle Rectangle representing the area relative to parent. var LocalRectangle : Rectangle LocalRight : real var LocalRight : Real LocalTop : real var LocalTop : Real LocalTopCenter : real2 read-only var LocalTopCenter : Real2 LocalTopLeft : real2 read-only var LocalTopLeft : Real2 LocalTopRight : real2 read-only var LocalTopRight : Real2 Origin : Location Location of the Origin of the Area. var Origin : Location Size : real2 Size of the Area. var Size : Real2 TopCenter : real2 read-only var TopCenter : Real2 TopLeft : real2 read-only var TopLeft : Real2 TopRight : real2 read-only var TopRight : Real2 WorldBottom : real var WorldBottom : Real WorldBottomCenter : real2 read-only var WorldBottomCenter : Real2 WorldBottomLeft : real2 read-only var WorldBottomLeft : Real2 WorldBottomRight : real2 read-only var WorldBottomRight : Real2 WorldCenter : real2 read-only var WorldCenter : Real2 WorldCenterLeft : real2 read-only var WorldCenterLeft : Real2 WorldCenterRight : real2 read-only var WorldCenterRight : Real2 WorldLeft : real var WorldLeft : Real WorldRectangle : rectangle Rectangle representing the area in world space. var WorldRectangle : Rectangle WorldRight : real var WorldRight : Real WorldTop : real var WorldTop : Real WorldTopCenter : real2 read-only var WorldTopCenter : Real2 WorldTopLeft : real2 read-only var WorldTopLeft : Real2 WorldTopRight : real2 read-only var WorldTopRight : Real2 Methods Area : Void constructor Name Type Description function Area() GetLocalLocation : real2 Name Type Description location Location function GetLocalLocation(location : Location) : Real2 GetWorldLocation : real2 Name Type Description location Location function GetWorldLocation(location : Location) : Real2 LocalOffsetOf : real2 Offset of the given location in local space. |Name|Type|Description| |---|---|---| |location|Location| | function LocalOffsetOf(location : Location) : Real2 SetLocalLocation : Void Name Type Description location Location localTranslation real2 function SetLocalLocation(location : Location, localTranslation : Real2) SetWorldLocation : Void Name Type Description location Location worldTranslation real2 function SetWorldLocation(location : Location, worldTranslation : Real2)"
  },
  "docs/code_reference/class_reference/areaevent.html": {
    "href": "docs/code_reference/class_reference/areaevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine (NOTE) Sent when an area component's size or origin changes. Methods Properties Base Classes Derived Classes Area event Properties Area : area The area component that triggered this event. var Area : Area Methods"
  },
  "docs/code_reference/class_reference/arrayhandleofmaterial.html": {
    "href": "docs/code_reference/class_reference/arrayhandleofmaterial.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : arrayhandleofmaterial read-only var All : ArrayHandleOfMaterial Current : material read-only var Current : Material IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods ArrayHandleOfMaterial : Void constructor Name Type Description function ArrayHandleOfMaterial() ArrayHandleOfMaterial : Void constructor Name Type Description p0 arrayhandleofmaterial function ArrayHandleOfMaterial(p0 : ArrayHandleOfMaterial) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/arrayhandleofrendergroup.html": {
    "href": "docs/code_reference/class_reference/arrayhandleofrendergroup.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : arrayhandleofrendergroup read-only var All : ArrayHandleOfRenderGroup Current : rendergroup read-only var Current : RenderGroup IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods ArrayHandleOfRenderGroup : Void constructor Name Type Description function ArrayHandleOfRenderGroup() ArrayHandleOfRenderGroup : Void constructor Name Type Description p0 arrayhandleofrendergroup function ArrayHandleOfRenderGroup(p0 : ArrayHandleOfRenderGroup) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/arrowgizmo.html": {
    "href": "docs/code_reference/class_reference/arrowgizmo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor DualHeads simplegizmobase FilledHeads HeadSize HeadType Length LineDrawWidth SelectRadius Properties DualHeads : boolean var DualHeads : Boolean FilledHeads : boolean var FilledHeads : Boolean HeadSize : real var HeadSize : Real HeadType : ArrowHeadType var HeadType : ArrowHeadType Length : real var Length : Real LineDrawWidth : real var LineDrawWidth : Real SelectRadius : real var SelectRadius : Real Methods ArrowGizmo : Void constructor Name Type Description function ArrowGizmo()"
  },
  "docs/code_reference/class_reference/asyncprocess.html": {
    "href": "docs/code_reference/class_reference/asyncprocess.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) A process class that asynchronously reads from standard output and standard error and sends out partial read events. Additionally, the full buffer can be stored for each stream. This makes it possible to read the output of a process in a single-threaded context without having to block on output. Methods Properties Base Classes Derived Classes Close StandardError referencecountedeventobject Create StandardInput IsRunning StandardOutput Start StoreStandardErrorData Terminate StoreStandardOutputData WaitForClose Properties StandardError : string read-only The cached total results from standard error. Will be empty if StoreStandardErrorData is false. var StandardError : String StandardInput : filestream var StandardInput : FileStream StandardOutput : string read-only The cached total results from standard output. Will be empty if StoreStandardOutputData is false. var StandardOutput : String StoreStandardErrorData : boolean Should the results from standard error be accumulated and stored? If a lot of data is output it may be good to turn this off and use the partial data callback events instead. var StoreStandardErrorData : Boolean StoreStandardOutputData : boolean Should the results from standard output be accumulated and stored? If a lot of data is output it may be good to turn this off and use the partial data callback events instead. var StoreStandardOutputData : Boolean Methods Close : Void Closes the wrapper around the process, does not close the process launched. |Name|Type|Description| |---|---|---| function Close() Create : asyncprocess static Construct a new process. This does not start the process. |Name|Type|Description| |---|---|---| function Create() : AsyncProcess IsRunning : boolean Returns true if the process is still running, false otherwise. |Name|Type|Description| |---|---|---| function IsRunning() : Boolean Start : boolean Begins the execution of another process using the given parameters. Throws an exception if the process cannot be started. |Name|Type|Description| |---|---|---| |startInfo|processstartinfo| | function Start(startInfo : ProcessStartInfo) : Boolean Terminate : Void Attempts to manually shut down the process. This is not safe for the other process or what it's handling. |Name|Type|Description| |---|---|---| function Terminate() WaitForClose : integer Waits for a process to close, this will block until the process closes. |Name|Type|Description| |---|---|---| function WaitForClose() : Integer WaitForClose : integer Waits for a process to close up to a given number of milliseconds. This can take up to 3 * milliseconds due to waiting for the output streams to close. |Name|Type|Description| |---|---|---| |milliseconds|integer| | function WaitForClose(milliseconds : Integer) : Integer"
  },
  "docs/code_reference/class_reference/asyncprocessevent.html": {
    "href": "docs/code_reference/class_reference/asyncprocessevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine (NOTE) Sent out when AsyncProcess completes a partial read for a stream or the stream has finished reading all data. Methods Properties Base Classes Derived Classes Constructor Bytes event StreamType Properties Bytes : string Bytes being read from a stream. Note: These bytes may not form a valid string if the stream type was non ascii (e.g. utf-8). var Bytes : String StreamType : StreamType The type of stream that sent this event. var StreamType : StreamType Methods AsyncProcessEvent : Void constructor Name Type Description function AsyncProcessEvent()"
  },
  "docs/code_reference/class_reference/atlas.html": {
    "href": "docs/code_reference/class_reference/atlas.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Graphics Methods Properties Base Classes Derived Classes Resource Properties Methods"
  },
  "docs/code_reference/class_reference/audio.html": {
    "href": "docs/code_reference/class_reference/audio.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes AdditiveSynthNode DispatchMicrophoneCompressedByteData system AddNoiseNode DispatchMicrophoneUncompressedFloatData BandPassNode LatencySetting ChorusNode MuteAllAudio CompressorNode OutputChannels CustomAudioNode PeakInputLevel DelayNode PeakOutputLevel EqualizerNode RMSOutputLevel ExpanderNode SystemVolume FlangerNode GeneratedWaveNode GetNodeGraphInfo GranularSynthNode HighPassNode LowPassNode MicrophoneInputNode ModulationNode PanningNode PitchNode RecordingNode ReverbNode SaveAudioNode SoundBuffer VolumeNode Properties DispatchMicrophoneCompressedByteData : boolean var DispatchMicrophoneCompressedByteData : Boolean DispatchMicrophoneUncompressedFloatData : boolean var DispatchMicrophoneUncompressedFloatData : Boolean LatencySetting : AudioLatency var LatencySetting : AudioLatency MuteAllAudio : boolean var MuteAllAudio : Boolean OutputChannels : integer read-only var OutputChannels : Integer PeakInputLevel : real read-only var PeakInputLevel : Real PeakOutputLevel : real read-only var PeakOutputLevel : Real RMSOutputLevel : real read-only var RMSOutputLevel : Real SystemVolume : real var SystemVolume : Real Methods AdditiveSynthNode : additivesynthnode static Name Type Description function AdditiveSynthNode() : AdditiveSynthNode AddNoiseNode : addnoisenode static Name Type Description function AddNoiseNode() : AddNoiseNode BandPassNode : bandpassnode static Name Type Description function BandPassNode() : BandPassNode ChorusNode : chorusnode static Name Type Description function ChorusNode() : ChorusNode CompressorNode : compressornode static Name Type Description function CompressorNode() : CompressorNode CustomAudioNode : customaudionode static Name Type Description function CustomAudioNode() : CustomAudioNode DelayNode : delaynode static Name Type Description function DelayNode() : DelayNode EqualizerNode : equalizernode static Name Type Description function EqualizerNode() : EqualizerNode ExpanderNode : expandernode static Name Type Description function ExpanderNode() : ExpanderNode FlangerNode : flangernode static Name Type Description function FlangerNode() : FlangerNode GeneratedWaveNode : generatedwavenode static Name Type Description function GeneratedWaveNode() : GeneratedWaveNode GetNodeGraphInfo : nodeinfolistrange Name Type Description function GetNodeGraphInfo() : NodeInfoListRange GranularSynthNode : granularsynthnode static Name Type Description function GranularSynthNode() : GranularSynthNode HighPassNode : highpassnode static Name Type Description function HighPassNode() : HighPassNode LowPassNode : lowpassnode static Name Type Description function LowPassNode() : LowPassNode MicrophoneInputNode : microphoneinputnode static Name Type Description function MicrophoneInputNode() : MicrophoneInputNode ModulationNode : modulationnode static Name Type Description function ModulationNode() : ModulationNode PanningNode : panningnode static Name Type Description function PanningNode() : PanningNode PitchNode : pitchnode static Name Type Description function PitchNode() : PitchNode RecordingNode : recordingnode static Name Type Description function RecordingNode() : RecordingNode ReverbNode : reverbnode static Name Type Description function ReverbNode() : ReverbNode SaveAudioNode : saveaudionode static Name Type Description function SaveAudioNode() : SaveAudioNode SoundBuffer : soundbuffer static Name Type Description function SoundBuffer() : SoundBuffer VolumeNode : volumenode static Name Type Description function VolumeNode() : VolumeNode"
  },
  "docs/code_reference/class_reference/audiobytedataevent.html": {
    "href": "docs/code_reference/class_reference/audiobytedataevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Sound Methods Properties Base Classes Derived Classes [[zilch_engine_documentation/code_reference/class_reference/audiobytedataevent/#audiodata-array[byte] AudioData]] event Properties AudioData : Array[byte] var AudioData : Array[Byte] Methods"
  },
  "docs/code_reference/class_reference/audiocontent.html": {
    "href": "docs/code_reference/class_reference/audiocontent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes contentcomposition Properties Methods"
  },
  "docs/code_reference/class_reference/audiofloatdataevent.html": {
    "href": "docs/code_reference/class_reference/audiofloatdataevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Sound Methods Properties Base Classes Derived Classes [[zilch_engine_documentation/code_reference/class_reference/audiofloatdataevent/#audiodata-array[real] AudioData]] event Channels Properties AudioData : Array[real] var AudioData : Array[Real] Channels : integer var Channels : Integer Methods"
  },
  "docs/code_reference/class_reference/audiooptions.html": {
    "href": "docs/code_reference/class_reference/audiooptions.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes GenerateCue Object GroupCueName StreamingMode Properties GenerateCue : AudioCueImport var GenerateCue : AudioCueImport GroupCueName : string var GroupCueName : String StreamingMode : AudioFileLoadType var StreamingMode : AudioFileLoadType Methods"
  },
  "docs/code_reference/class_reference/audiosettings.html": {
    "href": "docs/code_reference/class_reference/audiosettings.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Sound Methods Properties Base Classes Derived Classes Constructor LatencySetting component MinVolumeThreshold MixType MuteAllAudio SystemVolume Properties LatencySetting : AudioLatency Using the high latency setting can fix some audio problems (such as clicks and static) but can lead to a slight delay in the audio. var LatencySetting : AudioLatency MinVolumeThreshold : real Sets the volume threshold at which sounds will be virtualized (they will continue tracking their position and all data but will not process audio). This is a floating point volume number, not decibels. var MinVolumeThreshold : Real MixType : AudioMixTypes Sets the number of channels the audio system uses when creating audio. See the enum descriptions. If your selection is different from the output device, it will be automatically translated to match the number of channels needed for output. var MixType : AudioMixTypes MuteAllAudio : boolean When true, audio will be processed normally but will be silent. var MuteAllAudio : Boolean SystemVolume : real An overall volume modifier that is applied to all audio produced by Zilch. var SystemVolume : Real Methods AudioSettings : Void constructor Name Type Description function AudioSettings()"
  },
  "docs/code_reference/class_reference/autocompletepopup.html": {
    "href": "docs/code_reference/class_reference/autocompletepopup.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes popup Properties Methods"
  },
  "docs/code_reference/class_reference/backgroundtaskevent.html": {
    "href": "docs/code_reference/class_reference/backgroundtaskevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/backgroundtasks.html": {
    "href": "docs/code_reference/class_reference/backgroundtasks.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/bandpassnode.html": {
    "href": "docs/code_reference/class_reference/bandpassnode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Applies a band pass filter to audio generated by its input SoundNodes (removes low and high frequencies) Methods Properties Base Classes Derived Classes CentralFrequency soundnode QualityFactor Properties CentralFrequency : real The center frequency of the band. Frequencies above and below this band will be attenuated. var CentralFrequency : Real QualityFactor : real The Q number of the band pass filter: higher numbers make the band smaller, while smaller numbers make it wider. The default value is 0.669. var QualityFactor : Real Methods"
  },
  "docs/code_reference/class_reference/basecastfilter.html": {
    "href": "docs/code_reference/class_reference/basecastfilter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) Used to filter objects during cast operations. Methods Properties Base Classes Derived Classes IgnoreChildren castfilter IgnoreDynamic IgnoreGhost IgnoreKinematic IgnoreStatic Properties IgnoreChildren : boolean This flag is currently only used for SweepCollider tests on PhysicsSpace. This is used to ignore all objects that are a child of the Collider that is being swept. var IgnoreChildren : Boolean IgnoreDynamic : boolean Should Colliders with RigidBodies marked Dynamic be ignored during casts? var IgnoreDynamic : Boolean IgnoreGhost : boolean Should Colliders marked Ghost be ignored during casts? var IgnoreGhost : Boolean IgnoreKinematic : boolean Should Colliders with RigidBodies marked Kinematic be ignored during casts? var IgnoreKinematic : Boolean IgnoreStatic : boolean Should Colliders with RigidBodies marked Static be ignored during casts? Note: Collider's with no RigidBody are treated as static. var IgnoreStatic : Boolean Methods"
  },
  "docs/code_reference/class_reference/basecollisionevent.html": {
    "href": "docs/code_reference/class_reference/basecollisionevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Physics (NOTE) Common interface for all collision events. Contains shared methods to access contact information for a collision. Methods Properties Base Classes Derived Classes ContactPointCount event collisionevent ContactPoints collisiongroupevent IsGhost presolveevent Object OtherObject Properties ContactPointCount : integer read-only The number of contact points in this collision. var ContactPointCount : Integer ContactPoints : contactpointrange read-only A range for iterating through all contact points. var ContactPoints : ContactPointRange IsGhost : boolean read-only If this was a ghost collision (detected but not resolved). var IsGhost : Boolean Object : cog read-only The object that this event was sent to. var Object : Cog OtherObject : cog read-only The other object in this collision. var OtherObject : Cog Methods"
  },
  "docs/code_reference/class_reference/basescrollarea.html": {
    "href": "docs/code_reference/class_reference/basescrollarea.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite scrollarea texteditor Properties Methods"
  },
  "docs/code_reference/class_reference/basesprite.html": {
    "href": "docs/code_reference/class_reference/basesprite.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Common interface for 2D Sprite based graphicals. Methods Properties Base Classes Derived Classes GeometryMode graphical multisprite VertexColor sprite spritetext Properties GeometryMode : SpriteGeometryMode How the Sprite should be oriented in 3D space. var GeometryMode : SpriteGeometryMode VertexColor : real4 Color attribute of the generated vertices accessible in the vertex shader. var VertexColor : Real4 Methods"
  },
  "docs/code_reference/class_reference/basetextbuilder.html": {
    "href": "docs/code_reference/class_reference/basetextbuilder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes buildercomponent textbuilder nadafragmentbuilder nadascriptbuilder Properties Methods"
  },
  "docs/code_reference/class_reference/basicanimation.html": {
    "href": "docs/code_reference/class_reference/basicanimation.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Animation animationnode PlayMode Properties Animation : animation var Animation : Animation PlayMode : AnimationPlayMode var PlayMode : AnimationPlayMode Methods"
  },
  "docs/code_reference/class_reference/basicdirectioneffect.html": {
    "href": "docs/code_reference/class_reference/basicdirectioneffect.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Common interface for all directional force effects. Used to group together all common logic/variables for the force/gravity variants. Methods Properties Base Classes Derived Classes Direction physicseffect forceeffect LocalSpaceDirection gravityeffect Strength WorldDirection Properties Direction : real3 The direction that the effect will be applied in (may be in local or world space depending on the LocalSpaceDirection property). var Direction : Real3 LocalSpaceDirection : boolean Determines if the direction that the effect is applied is in local or world space. This vector is normalized when calculating forces. var LocalSpaceDirection : Boolean Strength : real The magnitude of the force to apply. var Strength : Real WorldDirection : real3 read-only The world direction of the effect. If the effect is not in local space then this is the same as Direction. var WorldDirection : Real3 Methods"
  },
  "docs/code_reference/class_reference/basicpointeffect.html": {
    "href": "docs/code_reference/class_reference/basicpointeffect.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Common interface for all point effects. Used to attract or repel objects towards a central point. The strength of the effect is calculated as an interpolation between two strength values at two radial distances. Methods Properties Base Classes Derived Classes EndCondition physicseffect pointforceeffect InterpolationType pointgravityeffect LocalPositionOffset MaxDistance MinDistance StrengthAtMax StrengthAtMin Properties EndCondition : PhysicsEffectEndCondition How the interpolation should be handled after max distance. ClampToMax will clamp to StrengthAtMax. NoEffect will ignore the effect. ContinueFalloff will continue the interpolation (this may go negative). var EndCondition : PhysicsEffectEndCondition InterpolationType : PhysicsEffectInterpolationType The type of interpolation used (e.g. Linear, Quadratic) for the effect. var InterpolationType : PhysicsEffectInterpolationType LocalPositionOffset : real3 The offset from the transform position (in local space) that the point effect will be applied at. var LocalPositionOffset : Real3 MaxDistance : real The max distance that attenuation will happen at. If an object is between min and max distance, the value will be attenuated. If the object is further away, the effect strength will be determined by EndCondition. var MaxDistance : Real MinDistance : real The first distance at which attenuation will start. If an object is under the min distance, StrengthAtMin will be used. If an object is in between min and max, then it will attenuate. var MinDistance : Real StrengthAtMax : real The strength that this effect applies at the max distance. var StrengthAtMax : Real StrengthAtMin : real The strength that this effect applies at the min distance. var StrengthAtMin : Real Methods"
  },
  "docs/code_reference/class_reference/binarybuilder.html": {
    "href": "docs/code_reference/class_reference/binarybuilder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Constructor buildercomponent Properties Methods BinaryBuilder : Void constructor Name Type Description function BinaryBuilder()"
  },
  "docs/code_reference/class_reference/binarycontent.html": {
    "href": "docs/code_reference/class_reference/binarycontent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes contentcomposition Properties Methods"
  },
  "docs/code_reference/class_reference/bitstream.html": {
    "href": "docs/code_reference/class_reference/bitstream.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking (NOTE) Bit-packed data stream. Methods Properties Base Classes Derived Classes Constructor CanReadBoolean CanReadDoubleInteger CanReadDoubleIntegerQuantized CanReadDoubleReal CanReadDoubleRealQuantized CanReadInteger CanReadInteger2 CanReadInteger2Quantized CanReadInteger3 CanReadInteger3Quantized CanReadInteger4 CanReadInteger4Quantized CanReadIntegerQuantized CanReadQuaternion CanReadReal CanReadReal2 CanReadReal2Half CanReadReal2Quantized CanReadReal3 CanReadReal3Half CanReadReal3Quantized CanReadReal4 CanReadReal4Half CanReadReal4Quantized CanReadRealHalf CanReadRealQuantized CanReadString Clear ClearBitsRead ClearBitsWritten GetBitCapacity GetBitsRead GetBitsUnread GetBitsUnwritten GetBitsWritten GetByteCapacity GetBytesRead GetBytesUnread GetBytesUnwritten GetBytesWritten IsEmpty MeasureBoolean MeasureDoubleInteger MeasureDoubleIntegerQuantized MeasureDoubleReal MeasureDoubleRealQuantized MeasureInteger MeasureInteger2 MeasureInteger2Quantized MeasureInteger3 MeasureInteger3Quantized MeasureInteger4 MeasureInteger4Quantized MeasureIntegerQuantized MeasureQuaternion MeasureReal MeasureReal2 MeasureReal2Half MeasureReal2Quantized MeasureReal3 MeasureReal3Half MeasureReal3Quantized MeasureReal4 MeasureReal4Half MeasureReal4Quantized MeasureRealHalf MeasureRealQuantized MeasureString ReadBoolean ReadDoubleInteger ReadDoubleIntegerQuantized ReadDoubleReal ReadDoubleRealQuantized ReadInteger ReadInteger2 ReadInteger2Quantized ReadInteger3 ReadInteger3Quantized ReadInteger4 ReadInteger4Quantized ReadIntegerQuantized ReadQuaternion ReadReal ReadReal2 ReadReal2Half ReadReal2Quantized ReadReal3 ReadReal3Half ReadReal3Quantized ReadReal4 ReadReal4Half ReadReal4Quantized ReadRealHalf ReadRealQuantized ReadString Reserve SetBitsRead SetBitsWritten SetBytesRead SetBytesWritten Unread WriteBoolean WriteDoubleInteger WriteDoubleIntegerQuantized WriteDoubleReal WriteDoubleRealQuantized WriteInteger WriteInteger2 WriteInteger2Quantized WriteInteger3 WriteInteger3Quantized WriteInteger4 WriteInteger4Quantized WriteIntegerQuantized WriteQuaternion WriteReal WriteReal2 WriteReal2Half WriteReal2Quantized WriteReal3 WriteReal3Half WriteReal3Quantized WriteReal4 WriteReal4Half WriteReal4Quantized WriteRealHalf WriteRealQuantized WriteString Properties Methods BitStream : Void constructor Default Constructor. |Name|Type|Description| |---|---|---| function BitStream() CanReadBoolean : boolean Name Type Description function CanReadBoolean() : Boolean CanReadDoubleInteger : boolean Name Type Description function CanReadDoubleInteger() : Boolean CanReadDoubleIntegerQuantized : boolean Name Type Description doubleinteger doubleinteger function CanReadDoubleIntegerQuantized( : DoubleInteger, : DoubleInteger) : Boolean CanReadDoubleIntegerQuantized : boolean Name Type Description doubleinteger doubleinteger doubleinteger function CanReadDoubleIntegerQuantized( : DoubleInteger, : DoubleInteger, : DoubleInteger) : Boolean CanReadDoubleReal : boolean Name Type Description function CanReadDoubleReal() : Boolean CanReadDoubleRealQuantized : boolean Name Type Description doublereal doublereal function CanReadDoubleRealQuantized( : DoubleReal, : DoubleReal) : Boolean CanReadDoubleRealQuantized : boolean Name Type Description doublereal doublereal doublereal function CanReadDoubleRealQuantized( : DoubleReal, : DoubleReal, : DoubleReal) : Boolean CanReadInteger : boolean Name Type Description function CanReadInteger() : Boolean CanReadInteger2 : boolean Name Type Description function CanReadInteger2() : Boolean CanReadInteger2Quantized : boolean Name Type Description integer2 integer2 function CanReadInteger2Quantized( : Integer2, : Integer2) : Boolean CanReadInteger2Quantized : boolean Name Type Description integer2 integer2 integer2 function CanReadInteger2Quantized( : Integer2, : Integer2, : Integer2) : Boolean CanReadInteger3 : boolean Name Type Description function CanReadInteger3() : Boolean CanReadInteger3Quantized : boolean Name Type Description integer3 integer3 function CanReadInteger3Quantized( : Integer3, : Integer3) : Boolean CanReadInteger3Quantized : boolean Name Type Description integer3 integer3 integer3 function CanReadInteger3Quantized( : Integer3, : Integer3, : Integer3) : Boolean CanReadInteger4 : boolean Name Type Description function CanReadInteger4() : Boolean CanReadInteger4Quantized : boolean Name Type Description integer4 integer4 function CanReadInteger4Quantized( : Integer4, : Integer4) : Boolean CanReadInteger4Quantized : boolean Name Type Description integer4 integer4 integer4 function CanReadInteger4Quantized( : Integer4, : Integer4, : Integer4) : Boolean CanReadIntegerQuantized : boolean Name Type Description integer integer function CanReadIntegerQuantized( : Integer, : Integer) : Boolean CanReadIntegerQuantized : boolean Name Type Description integer integer integer function CanReadIntegerQuantized( : Integer, : Integer, : Integer) : Boolean CanReadQuaternion : boolean Name Type Description function CanReadQuaternion() : Boolean CanReadReal : boolean Name Type Description function CanReadReal() : Boolean CanReadReal2 : boolean Name Type Description function CanReadReal2() : Boolean CanReadReal2Half : boolean Name Type Description function CanReadReal2Half() : Boolean CanReadReal2Quantized : boolean Name Type Description real2 real2 function CanReadReal2Quantized( : Real2, : Real2) : Boolean CanReadReal2Quantized : boolean Name Type Description real2 real2 real2 function CanReadReal2Quantized( : Real2, : Real2, : Real2) : Boolean CanReadReal3 : boolean Name Type Description function CanReadReal3() : Boolean CanReadReal3Half : boolean Name Type Description function CanReadReal3Half() : Boolean CanReadReal3Quantized : boolean Name Type Description real3 real3 function CanReadReal3Quantized( : Real3, : Real3) : Boolean CanReadReal3Quantized : boolean Name Type Description real3 real3 real3 function CanReadReal3Quantized( : Real3, : Real3, : Real3) : Boolean CanReadReal4 : boolean Name Type Description function CanReadReal4() : Boolean CanReadReal4Half : boolean Name Type Description function CanReadReal4Half() : Boolean CanReadReal4Quantized : boolean Name Type Description real4 real4 function CanReadReal4Quantized( : Real4, : Real4) : Boolean CanReadReal4Quantized : boolean Name Type Description real4 real4 real4 function CanReadReal4Quantized( : Real4, : Real4, : Real4) : Boolean CanReadRealHalf : boolean Name Type Description function CanReadRealHalf() : Boolean CanReadRealQuantized : boolean Name Type Description real real function CanReadRealQuantized( : Real, : Real) : Boolean CanReadRealQuantized : boolean Name Type Description real real real function CanReadRealQuantized( : Real, : Real, : Real) : Boolean CanReadString : boolean Name Type Description function CanReadString() : Boolean Clear : Void Clears all data written and resets the bitstream, optionally freeing reserved memory. |Name|Type|Description| |---|---|---| |freeMemory|boolean| | function Clear(freeMemory : Boolean) ClearBitsRead : Void Clears the number of bits read. |Name|Type|Description| |---|---|---| function ClearBitsRead() ClearBitsWritten : Void Clears the number of bits written. |Name|Type|Description| |---|---|---| function ClearBitsWritten() GetBitCapacity : integer Returns the data array capacity in bits. |Name|Type|Description| |---|---|---| function GetBitCapacity() : Integer GetBitsRead : integer Returns the number of bits read. |Name|Type|Description| |---|---|---| function GetBitsRead() : Integer GetBitsUnread : integer Returns the number of bits unread. |Name|Type|Description| |---|---|---| function GetBitsUnread() : Integer GetBitsUnwritten : integer Returns the number of bits unwritten. |Name|Type|Description| |---|---|---| function GetBitsUnwritten() : Integer GetBitsWritten : integer Returns the number of bits written. |Name|Type|Description| |---|---|---| function GetBitsWritten() : Integer GetByteCapacity : integer Returns the data array capacity in bytes. |Name|Type|Description| |---|---|---| function GetByteCapacity() : Integer GetBytesRead : integer Returns the number of bytes read (Rounded up, ex. 12 bits = 2 bytes) |Name|Type|Description| |---|---|---| function GetBytesRead() : Integer GetBytesUnread : integer Returns the number of bytes unread (Rounded up, ex. 12 bits = 2 bytes) |Name|Type|Description| |---|---|---| function GetBytesUnread() : Integer GetBytesUnwritten : integer Returns the number of bytes unwritten (Rounded up, ex. 12 bits = 2 bytes) |Name|Type|Description| |---|---|---| function GetBytesUnwritten() : Integer GetBytesWritten : integer Returns the number of bytes written (Rounded up, ex. 12 bits = 2 bytes) |Name|Type|Description| |---|---|---| function GetBytesWritten() : Integer IsEmpty : boolean Returns true if the BitStream is empty (0 bits written), else false. |Name|Type|Description| |---|---|---| function IsEmpty() : Boolean MeasureBoolean : integer static Name Type Description function MeasureBoolean() : Integer MeasureDoubleInteger : integer static Name Type Description function MeasureDoubleInteger() : Integer MeasureDoubleIntegerQuantized : integer static Name Type Description doubleinteger doubleinteger function MeasureDoubleIntegerQuantized( : DoubleInteger, : DoubleInteger) : Integer MeasureDoubleIntegerQuantized : integer static Name Type Description doubleinteger doubleinteger doubleinteger function MeasureDoubleIntegerQuantized( : DoubleInteger, : DoubleInteger, : DoubleInteger) : Integer MeasureDoubleReal : integer static Name Type Description function MeasureDoubleReal() : Integer MeasureDoubleRealQuantized : integer static Name Type Description doublereal doublereal function MeasureDoubleRealQuantized( : DoubleReal, : DoubleReal) : Integer MeasureDoubleRealQuantized : integer static Name Type Description doublereal doublereal doublereal function MeasureDoubleRealQuantized( : DoubleReal, : DoubleReal, : DoubleReal) : Integer MeasureInteger : integer static Name Type Description function MeasureInteger() : Integer MeasureInteger2 : integer static Name Type Description function MeasureInteger2() : Integer MeasureInteger2Quantized : integer static Name Type Description integer2 integer2 function MeasureInteger2Quantized( : Integer2, : Integer2) : Integer MeasureInteger2Quantized : integer static Name Type Description integer2 integer2 integer2 function MeasureInteger2Quantized( : Integer2, : Integer2, : Integer2) : Integer MeasureInteger3 : integer static Name Type Description function MeasureInteger3() : Integer MeasureInteger3Quantized : integer static Name Type Description integer3 integer3 function MeasureInteger3Quantized( : Integer3, : Integer3) : Integer MeasureInteger3Quantized : integer static Name Type Description integer3 integer3 integer3 function MeasureInteger3Quantized( : Integer3, : Integer3, : Integer3) : Integer MeasureInteger4 : integer static Name Type Description function MeasureInteger4() : Integer MeasureInteger4Quantized : integer static Name Type Description integer4 integer4 function MeasureInteger4Quantized( : Integer4, : Integer4) : Integer MeasureInteger4Quantized : integer static Name Type Description integer4 integer4 integer4 function MeasureInteger4Quantized( : Integer4, : Integer4, : Integer4) : Integer MeasureIntegerQuantized : integer static Name Type Description integer integer function MeasureIntegerQuantized( : Integer, : Integer) : Integer MeasureIntegerQuantized : integer static Name Type Description integer integer integer function MeasureIntegerQuantized( : Integer, : Integer, : Integer) : Integer MeasureQuaternion : integer static Name Type Description function MeasureQuaternion() : Integer MeasureReal : integer static Name Type Description function MeasureReal() : Integer MeasureReal2 : integer static Name Type Description function MeasureReal2() : Integer MeasureReal2Half : integer static Name Type Description function MeasureReal2Half() : Integer MeasureReal2Quantized : integer static Name Type Description real2 real2 function MeasureReal2Quantized( : Real2, : Real2) : Integer MeasureReal2Quantized : integer static Name Type Description real2 real2 real2 function MeasureReal2Quantized( : Real2, : Real2, : Real2) : Integer MeasureReal3 : integer static Name Type Description function MeasureReal3() : Integer MeasureReal3Half : integer static Name Type Description function MeasureReal3Half() : Integer MeasureReal3Quantized : integer static Name Type Description real3 real3 function MeasureReal3Quantized( : Real3, : Real3) : Integer MeasureReal3Quantized : integer static Name Type Description real3 real3 real3 function MeasureReal3Quantized( : Real3, : Real3, : Real3) : Integer MeasureReal4 : integer static Name Type Description function MeasureReal4() : Integer MeasureReal4Half : integer static Name Type Description function MeasureReal4Half() : Integer MeasureReal4Quantized : integer static Name Type Description real4 real4 function MeasureReal4Quantized( : Real4, : Real4) : Integer MeasureReal4Quantized : integer static Name Type Description real4 real4 real4 function MeasureReal4Quantized( : Real4, : Real4, : Real4) : Integer MeasureRealHalf : integer static Name Type Description function MeasureRealHalf() : Integer MeasureRealQuantized : integer static Name Type Description real real function MeasureRealQuantized( : Real, : Real) : Integer MeasureRealQuantized : integer static Name Type Description real real real function MeasureRealQuantized( : Real, : Real, : Real) : Integer MeasureString : integer static Name Type Description function MeasureString() : Integer MeasureString : integer static Name Type Description string function MeasureString( : String) : Integer ReadBoolean : boolean Name Type Description function ReadBoolean() : Boolean ReadDoubleInteger : doubleinteger Name Type Description function ReadDoubleInteger() : DoubleInteger ReadDoubleIntegerQuantized : doubleinteger Name Type Description doubleinteger doubleinteger function ReadDoubleIntegerQuantized( : DoubleInteger, : DoubleInteger) : DoubleInteger ReadDoubleIntegerQuantized : doubleinteger Name Type Description doubleinteger doubleinteger doubleinteger function ReadDoubleIntegerQuantized( : DoubleInteger, : DoubleInteger, : DoubleInteger) : DoubleInteger ReadDoubleReal : doublereal Name Type Description function ReadDoubleReal() : DoubleReal ReadDoubleRealQuantized : doublereal Name Type Description doublereal doublereal function ReadDoubleRealQuantized( : DoubleReal, : DoubleReal) : DoubleReal ReadDoubleRealQuantized : doublereal Name Type Description doublereal doublereal doublereal function ReadDoubleRealQuantized( : DoubleReal, : DoubleReal, : DoubleReal) : DoubleReal ReadInteger : integer Name Type Description function ReadInteger() : Integer ReadInteger2 : integer2 Name Type Description function ReadInteger2() : Integer2 ReadInteger2Quantized : integer2 Name Type Description integer2 integer2 function ReadInteger2Quantized( : Integer2, : Integer2) : Integer2 ReadInteger2Quantized : integer2 Name Type Description integer2 integer2 integer2 function ReadInteger2Quantized( : Integer2, : Integer2, : Integer2) : Integer2 ReadInteger3 : integer3 Name Type Description function ReadInteger3() : Integer3 ReadInteger3Quantized : integer3 Name Type Description integer3 integer3 function ReadInteger3Quantized( : Integer3, : Integer3) : Integer3 ReadInteger3Quantized : integer3 Name Type Description integer3 integer3 integer3 function ReadInteger3Quantized( : Integer3, : Integer3, : Integer3) : Integer3 ReadInteger4 : integer4 Name Type Description function ReadInteger4() : Integer4 ReadInteger4Quantized : integer4 Name Type Description integer4 integer4 function ReadInteger4Quantized( : Integer4, : Integer4) : Integer4 ReadInteger4Quantized : integer4 Name Type Description integer4 integer4 integer4 function ReadInteger4Quantized( : Integer4, : Integer4, : Integer4) : Integer4 ReadIntegerQuantized : integer Name Type Description integer integer function ReadIntegerQuantized( : Integer, : Integer) : Integer ReadIntegerQuantized : integer Name Type Description integer integer integer function ReadIntegerQuantized( : Integer, : Integer, : Integer) : Integer ReadQuaternion : quaternion Name Type Description function ReadQuaternion() : Quaternion ReadReal : real Name Type Description function ReadReal() : Real ReadReal2 : real2 Name Type Description function ReadReal2() : Real2 ReadReal2Half : real2 Name Type Description function ReadReal2Half() : Real2 ReadReal2Quantized : real2 Name Type Description real2 real2 function ReadReal2Quantized( : Real2, : Real2) : Real2 ReadReal2Quantized : real2 Name Type Description real2 real2 real2 function ReadReal2Quantized( : Real2, : Real2, : Real2) : Real2 ReadReal3 : real3 Name Type Description function ReadReal3() : Real3 ReadReal3Half : real3 Name Type Description function ReadReal3Half() : Real3 ReadReal3Quantized : real3 Name Type Description real3 real3 function ReadReal3Quantized( : Real3, : Real3) : Real3 ReadReal3Quantized : real3 Name Type Description real3 real3 real3 function ReadReal3Quantized( : Real3, : Real3, : Real3) : Real3 ReadReal4 : real4 Name Type Description function ReadReal4() : Real4 ReadReal4Half : real4 Name Type Description function ReadReal4Half() : Real4 ReadReal4Quantized : real4 Name Type Description real4 real4 function ReadReal4Quantized( : Real4, : Real4) : Real4 ReadReal4Quantized : real4 Name Type Description real4 real4 real4 function ReadReal4Quantized( : Real4, : Real4, : Real4) : Real4 ReadRealHalf : real Name Type Description function ReadRealHalf() : Real ReadRealQuantized : real Name Type Description real real function ReadRealQuantized( : Real, : Real) : Real ReadRealQuantized : real Name Type Description real real real function ReadRealQuantized( : Real, : Real, : Real) : Real ReadString : string Name Type Description function ReadString() : String Reserve : Void Name Type Description integer function Reserve( : Integer) SetBitsRead : Void Name Type Description integer function SetBitsRead( : Integer) SetBitsWritten : Void Name Type Description integer function SetBitsWritten( : Integer) SetBytesRead : Void Name Type Description integer function SetBytesRead( : Integer) SetBytesWritten : Void Name Type Description integer function SetBytesWritten( : Integer) Unread : Void Name Type Description integer function Unread( : Integer) WriteBoolean : Void Name Type Description boolean function WriteBoolean( : Boolean) WriteDoubleInteger : Void Name Type Description doubleinteger function WriteDoubleInteger( : DoubleInteger) WriteDoubleIntegerQuantized : Void Name Type Description doubleinteger doubleinteger doubleinteger function WriteDoubleIntegerQuantized( : DoubleInteger, : DoubleInteger, : DoubleInteger) WriteDoubleIntegerQuantized : Void Name Type Description doubleinteger doubleinteger doubleinteger doubleinteger function WriteDoubleIntegerQuantized( : DoubleInteger, : DoubleInteger, : DoubleInteger, : DoubleInteger) WriteDoubleReal : Void Name Type Description doublereal function WriteDoubleReal( : DoubleReal) WriteDoubleRealQuantized : Void Name Type Description doublereal doublereal doublereal function WriteDoubleRealQuantized( : DoubleReal, : DoubleReal, : DoubleReal) WriteDoubleRealQuantized : Void Name Type Description doublereal doublereal doublereal doublereal function WriteDoubleRealQuantized( : DoubleReal, : DoubleReal, : DoubleReal, : DoubleReal) WriteInteger : Void Name Type Description integer function WriteInteger( : Integer) WriteInteger2 : Void Name Type Description integer2 function WriteInteger2( : Integer2) WriteInteger2Quantized : Void Name Type Description integer2 integer2 integer2 function WriteInteger2Quantized( : Integer2, : Integer2, : Integer2) WriteInteger2Quantized : Void Name Type Description integer2 integer2 integer2 integer2 function WriteInteger2Quantized( : Integer2, : Integer2, : Integer2, : Integer2) WriteInteger3 : Void Name Type Description integer3 function WriteInteger3( : Integer3) WriteInteger3Quantized : Void Name Type Description integer3 integer3 integer3 function WriteInteger3Quantized( : Integer3, : Integer3, : Integer3) WriteInteger3Quantized : Void Name Type Description integer3 integer3 integer3 integer3 function WriteInteger3Quantized( : Integer3, : Integer3, : Integer3, : Integer3) WriteInteger4 : Void Name Type Description integer4 function WriteInteger4( : Integer4) WriteInteger4Quantized : Void Name Type Description integer4 integer4 integer4 function WriteInteger4Quantized( : Integer4, : Integer4, : Integer4) WriteInteger4Quantized : Void Name Type Description integer4 integer4 integer4 integer4 function WriteInteger4Quantized( : Integer4, : Integer4, : Integer4, : Integer4) WriteIntegerQuantized : Void Name Type Description integer integer integer function WriteIntegerQuantized( : Integer, : Integer, : Integer) WriteIntegerQuantized : Void Name Type Description integer integer integer integer function WriteIntegerQuantized( : Integer, : Integer, : Integer, : Integer) WriteQuaternion : Void Name Type Description quaternion function WriteQuaternion( : Quaternion) WriteReal : Void Name Type Description real function WriteReal( : Real) WriteReal2 : Void Name Type Description real2 function WriteReal2( : Real2) WriteReal2Half : Void Name Type Description real2 function WriteReal2Half( : Real2) WriteReal2Quantized : Void Name Type Description real2 real2 real2 function WriteReal2Quantized( : Real2, : Real2, : Real2) WriteReal2Quantized : Void Name Type Description real2 real2 real2 real2 function WriteReal2Quantized( : Real2, : Real2, : Real2, : Real2) WriteReal3 : Void Name Type Description real3 function WriteReal3( : Real3) WriteReal3Half : Void Name Type Description real3 function WriteReal3Half( : Real3) WriteReal3Quantized : Void Name Type Description real3 real3 real3 function WriteReal3Quantized( : Real3, : Real3, : Real3) WriteReal3Quantized : Void Name Type Description real3 real3 real3 real3 function WriteReal3Quantized( : Real3, : Real3, : Real3, : Real3) WriteReal4 : Void Name Type Description real4 function WriteReal4( : Real4) WriteReal4Half : Void Name Type Description real4 function WriteReal4Half( : Real4) WriteReal4Quantized : Void Name Type Description real4 real4 real4 function WriteReal4Quantized( : Real4, : Real4, : Real4) WriteReal4Quantized : Void Name Type Description real4 real4 real4 real4 function WriteReal4Quantized( : Real4, : Real4, : Real4, : Real4) WriteRealHalf : Void Name Type Description real function WriteRealHalf( : Real) WriteRealQuantized : Void Name Type Description real real real function WriteRealQuantized( : Real, : Real, : Real) WriteRealQuantized : Void Name Type Description real real real real function WriteRealQuantized( : Real, : Real, : Real, : Real) WriteString : Void Name Type Description string function WriteString( : String)"
  },
  "docs/code_reference/class_reference/blendsettings.html": {
    "href": "docs/code_reference/class_reference/blendsettings.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics (NOTE) Settings for how pixel shader outputs are combined with the RenderTarget's current values. Methods Properties Base Classes Derived Classes Constructor BlendEquation BlendEquationAlpha BlendMode DestFactor DestFactorAlpha SourceFactor SourceFactorAlpha Properties BlendEquation : BlendEquation var BlendEquation : BlendEquation BlendEquationAlpha : BlendEquation var BlendEquationAlpha : BlendEquation BlendMode : BlendMode var BlendMode : BlendMode DestFactor : BlendFactor var DestFactor : BlendFactor DestFactorAlpha : BlendFactor var DestFactorAlpha : BlendFactor SourceFactor : BlendFactor var SourceFactor : BlendFactor SourceFactorAlpha : BlendFactor var SourceFactorAlpha : BlendFactor Methods BlendSettings : Void constructor Name Type Description function BlendSettings() BlendSettings : Void constructor Name Type Description other blendsettings function BlendSettings(other : BlendSettings)"
  },
  "docs/code_reference/class_reference/blendsettingsmrt.html": {
    "href": "docs/code_reference/class_reference/blendsettingsmrt.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics (NOTE) Indexable interface for settings BlendSettings. Methods Properties Base Classes Derived Classes Get threadsafereferencecounted Set Properties Methods Get : blendsettings Get the current BlendSettings for a color target at the given index. |Name|Type|Description| |---|---|---| |index|integer| | function Get(index : Integer) : BlendSettings Set : Void Set the BlendSettings for a color target at the given index. |Name|Type|Description| |---|---|---| |index|integer| | |blendSettings|blendsettings| | function Set(index : Integer, blendSettings : BlendSettings)"
  },
  "docs/code_reference/class_reference/blockingtaskevent.html": {
    "href": "docs/code_reference/class_reference/blockingtaskevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/blockingwebrequest.html": {
    "href": "docs/code_reference/class_reference/blockingwebrequest.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking Methods Properties Base Classes Derived Classes Url eventobject Properties Url : string var Url : String Methods"
  },
  "docs/code_reference/class_reference/bone.html": {
    "href": "docs/code_reference/class_reference/bone.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Used by Skeleton to identify child objects whose transforms can be used for mesh skinning. Methods Properties Base Classes Derived Classes Constructor component Properties Methods Bone : Void constructor Name Type Description function Bone()"
  },
  "docs/code_reference/class_reference/boundingboxbroadphase.html": {
    "href": "docs/code_reference/class_reference/boundingboxbroadphase.html",
    "title": "Properties | ZilchEngine",
    "keywords": "SpatialPartition Methods Properties Base Classes Derived Classes ibroadphase Properties Methods"
  },
  "docs/code_reference/class_reference/boundingspherebroadphase.html": {
    "href": "docs/code_reference/class_reference/boundingspherebroadphase.html",
    "title": "Properties | ZilchEngine",
    "keywords": "SpatialPartition Methods Properties Base Classes Derived Classes ibroadphase Properties Methods"
  },
  "docs/code_reference/class_reference/boxcollider.html": {
    "href": "docs/code_reference/class_reference/boxcollider.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Defines the collision volume of a box defined by a size on each axis. Methods Properties Base Classes Derived Classes Constructor HalfSize collider Size WorldSize Properties HalfSize : real3 The half size (from the center to the upper-right corner) on each axis of the box in local space. Used to make the box's size match a model or some other volume without needing to scale the transform (also avoids non-uniform scale issues). var HalfSize : Real3 Size : real3 The size (from min to max) on each axis of the box in local space. Used to make the box's size match a model or some other volume without needing to scale the transform (also avoids non-uniform scale issues). var Size : Real3 WorldSize : real3 read-only The size of the box after the transform is applied (scale and rotation). var WorldSize : Real3 Methods BoxCollider : Void constructor Name Type Description function BoxCollider()"
  },
  "docs/code_reference/class_reference/boxparticleemitter.html": {
    "href": "docs/code_reference/class_reference/boxparticleemitter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Emits particles inside a box. Methods Properties Base Classes Derived Classes Constructor particleemittershared Properties Methods BoxParticleEmitter : Void constructor Name Type Description function BoxParticleEmitter()"
  },
  "docs/code_reference/class_reference/bugreporterresponse.html": {
    "href": "docs/code_reference/class_reference/bugreporterresponse.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes Response event Properties Response : string var Response : String Methods"
  },
  "docs/code_reference/class_reference/buildercomponent.html": {
    "href": "docs/code_reference/class_reference/buildercomponent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes contentcomponent animationbuilder basetextbuilder binarybuilder databuilder fontbuilder meshbuilder physicsmeshbuilder richanimationbuilder soundbuilder spritesourcebuilder texturebuilder Properties Methods"
  },
  "docs/code_reference/class_reference/buildinfo.html": {
    "href": "docs/code_reference/class_reference/buildinfo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Constructor Object Properties Methods BuildInfo : Void constructor Name Type Description function BuildInfo()"
  },
  "docs/code_reference/class_reference/buoyancyeffect.html": {
    "href": "docs/code_reference/class_reference/buoyancyeffect.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Applies a buoyancy force to an object in a given direction. Methods Properties Base Classes Derived Classes Constructor DebugDrawRuntime physicseffect Density Detail Gravity Properties DebugDrawRuntime : boolean Draw the points used to compute the buoyancy during run-time. This helps in debugging, but should be left off during normal run. var DebugDrawRuntime : Boolean Density : real The density of the fluid. var Density : Real Detail : integer The amount of points to subdivide each object into for sampling (total points is Detail^3) var Detail : Integer Gravity : real3 The direction of gravity in world-space. var Gravity : Real3 Methods BuoyancyEffect : Void constructor Name Type Description function BuoyancyEffect()"
  },
  "docs/code_reference/class_reference/buttonbase.html": {
    "href": "docs/code_reference/class_reference/buttonbase.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite iconbutton textbutton Properties Methods"
  },
  "docs/code_reference/class_reference/calltippopup.html": {
    "href": "docs/code_reference/class_reference/calltippopup.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes popup Properties Methods"
  },
  "docs/code_reference/class_reference/camera.html": {
    "href": "docs/code_reference/class_reference/camera.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Represents a viewpoint for rendering. Methods Properties Base Classes Derived Classes Constructor CameraViewportCog component GetFrustum FarPlane FieldOfView NearPlane PerspectiveMode Size WorldDirection WorldTranslation WorldUp Properties CameraViewportCog : cog read-only The object that has a CameraViewport component using this Camera, if any. var CameraViewportCog : Cog FarPlane : real The far clipping plane, always positive and in the view direction. var FarPlane : Real FieldOfView : real The vertical field of view of the Camera, in degrees. Horizontal fov derived from aspect ratio (Hor+). var FieldOfView : Real NearPlane : real The near clipping plane, always positive and in the view direction. var NearPlane : Real PerspectiveMode : PerspectiveMode How the scene is projected on to the view plane. var PerspectiveMode : PerspectiveMode Size : real Size (width and height) of the orthographic projection, in world units. var Size : Real WorldDirection : real3 read-only Direction the Camera is facing, in world space. var WorldDirection : Real3 WorldTranslation : real3 read-only Translation of the Camera, in world space. var WorldTranslation : Real3 WorldUp : real3 read-only The upright direction of the Camera(perpendicular to facing direction), in world space. var WorldUp : Real3 Methods Camera : Void constructor Name Type Description function Camera() GetFrustum : frustum Creates a frustum using the Camera's settings along with the given aspect ratio. |Name|Type|Description| |---|---|---| |aspect|real| | function GetFrustum(aspect : Real) : Frustum"
  },
  "docs/code_reference/class_reference/cameraviewport.html": {
    "href": "docs/code_reference/class_reference/cameraviewport.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Gameplay (NOTE) Manages all setup between Camera, Renderer, and viewport UI that is required to define how anything is to be rendered. Methods Properties Base Classes Derived Classes Constructor Camera component ScreenToViewport CameraPath ScreenToWorldPlane FinalTexture ScreenToWorldRay ForwardViewportEvents ScreenToWorldViewPlane Frustum ScreenToWorldZPlane MarginColor ViewPlaneSize MouseWorldRay ViewportTakeFocus NormalizedOffset ViewportToScreen NormalizedSize WorldToScreen RendererPath RenderInEditor RenderInGame RenderOrder RenderToViewport ResolutionOrAspect ViewportHasFocus ViewportOffset ViewportOffsetWithMargin ViewportResolution ViewportResolutionWithMargin ViewportScaling ViewToPerspective WorldToPerspective WorldToView Properties Camera : camera read-only Find the Camera component from the CameraPath (or null if it doesn't exist). var Camera : Camera CameraPath : cogpath Object with the Camera component to be used for rendering. A Camera can only be used by one CameraViewport, if already used by another usage will be stolen when assigned. var CameraPath : CogPath FinalTexture : texture read-only Texture that contains the end result of this CameraViewport's rendering. Must be explicitly written to in renderer script. var FinalTexture : Texture ForwardViewportEvents : boolean Forwards mouse events to viewports underneath this viewport. var ForwardViewportEvents : Boolean Frustum : frustum read-only Creates a frustum using the CameraViewport's settings (including aspect ratio). If the Camera is null, then this will throw an exception. var Frustum : Frustum MarginColor : real4 Color to used for letterbox/scaling margins. var MarginColor : Real4 MouseWorldRay : ray read-only Get the world ray starting from the mouse. var MouseWorldRay : Ray NormalizedOffset : real2 Offset of the viewport in normalized UI coordinates. var NormalizedOffset : Real2 NormalizedSize : real2 Size of viewport in normalized UI coordinates. var NormalizedSize : Real2 RendererPath : cogpath Object with renderer script that connects to RenderTasksUpdate that determines what rendering will be done. var RendererPath : CogPath RenderInEditor : boolean If rendering will be ran in edit mode. var RenderInEditor : Boolean RenderInGame : boolean If rendering will be ran in play game mode. var RenderInGame : Boolean RenderOrder : integer The order that rendering should be done relative to other CameraViewports, lowest to highest. var RenderOrder : Integer RenderToViewport : boolean If the rendering result in FinalTexture should also be placed on the UI viewport. var RenderToViewport : Boolean ResolutionOrAspect : integer2 var ResolutionOrAspect : Integer2 ViewportHasFocus : boolean read-only If the viewport created by this CameraViewport, if rendering to one, has focus. var ViewportHasFocus : Boolean ViewportOffset : real2 read-only The current offset of the viewport, in pixels. var ViewportOffset : Real2 ViewportOffsetWithMargin : real2 read-only The current offset of the viewport's margin, in pixels. var ViewportOffsetWithMargin : Real2 ViewportResolution : real2 read-only The current resolution of the viewport. var ViewportResolution : Real2 ViewportResolutionWithMargin : real2 read-only The current resolution of the viewport including margin. var ViewportResolutionWithMargin : Real2 ViewportScaling : ViewportScaling Method to use for sizing the viewport. var ViewportScaling : ViewportScaling ViewToPerspective : real4x4 read-only Transformation that defines how the view frustum is mapped to normalized coordinates, pre W divide. var ViewToPerspective : Real4x4 WorldToPerspective : real4x4 read-only Concatenation of the WorldToView and ViewToPerspective transformations. var WorldToPerspective : Real4x4 WorldToView : real4x4 read-only Transformation that defines view space as the Camera at the origin and the view direction as -Z. var WorldToView : Real4x4 Methods CameraViewport : Void constructor Name Type Description function CameraViewport() ScreenToViewport : real2 Convert a screen point to a point relative to the viewport. |Name|Type|Description| |---|---|---| |screenPoint|real2| | function ScreenToViewport(screenPoint : Real2) : Real2 ScreenToWorldPlane : real3 Convert the screen point to a position on a given plane. |Name|Type|Description| |---|---|---| |screenPoint|real2| | |worldPlaneNormal|real3| | |worldPlanePosition|real3| | function ScreenToWorldPlane(screenPoint : Real2, worldPlaneNormal : Real3, worldPlanePosition : Real3) : Real3 ScreenToWorldRay : ray Convert a screen point to a ray. |Name|Type|Description| |---|---|---| |screenPoint|real2| | function ScreenToWorldRay(screenPoint : Real2) : Ray ScreenToWorldViewPlane : real3 Convert the screen point to a position on the view plane at a given depth. |Name|Type|Description| |---|---|---| |screenPoint|real2| | |viewDepth|real| | function ScreenToWorldViewPlane(screenPoint : Real2, viewDepth : Real) : Real3 ScreenToWorldZPlane : real3 Convert the screen point to a position on the z plane at a given depth. |Name|Type|Description| |---|---|---| |screenPoint|real2| | |worldDepth|real| | function ScreenToWorldZPlane(screenPoint : Real2, worldDepth : Real) : Real3 ViewPlaneSize : real2 Size of the screen at a Depth. |Name|Type|Description| |---|---|---| |viewDepth|real| | function ViewPlaneSize(viewDepth : Real) : Real2 ViewportTakeFocus : boolean Returns whether or not it succeeded in taking focus. Will always fail if RenderToViewport is false. |Name|Type|Description| |---|---|---| function ViewportTakeFocus() : Boolean ViewportToScreen : real2 Convert a viewport point to a screen point. |Name|Type|Description| |---|---|---| |viewportPoint|real2| | function ViewportToScreen(viewportPoint : Real2) : Real2 WorldToScreen : real2 Convert a world point to a screen point. |Name|Type|Description| |---|---|---| |worldPoint|real3| | function WorldToScreen(worldPoint : Real3) : Real2"
  },
  "docs/code_reference/class_reference/capsulecollider.html": {
    "href": "docs/code_reference/class_reference/capsulecollider.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Defines the collision volume for a capsule defined by a height and radius. A capsule can be thought of as a cylinder with spherical end caps. Methods Properties Base Classes Derived Classes Constructor Direction collider Height Radius ScalingMode WorldCylinderHeight WorldRadius Properties Direction : AxisDirection The direction that the height is defined along. Allows the user to change whether the capsule's height is along the local-space x, y, or z axis. var Direction : AxisDirection Height : real The local space distance from the center of one sphere to another. var Height : Real Radius : real The local space radius of the spheres at the capsule edges. var Radius : Real ScalingMode : CapsuleScalingMode How should non-uniform scale affect the capsules size. Should a scale of 2 on the height axis double the total capsule size or should it double the capsule height? var ScalingMode : CapsuleScalingMode WorldCylinderHeight : real read-only The full height of the capsule's cylinder after the scale is applied (world distance from one sphere to another). var WorldCylinderHeight : Real WorldRadius : real read-only The radius of the sphere caps after scale is applied. var WorldRadius : Real Methods CapsuleCollider : Void constructor Name Type Description function CapsuleCollider()"
  },
  "docs/code_reference/class_reference/carwheelarray.html": {
    "href": "docs/code_reference/class_reference/carwheelarray.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) An array interface to the cog paths of wheels that this car uses. This array is read-only. Methods Properties Base Classes Derived Classes Get Count safeid32object Properties Count : integer read-only How many wheels this car owns. var Count : Integer Methods Get : cog Get the cog for a wheel by index. |Name|Type|Description| |---|---|---| |index|integer| | function Get(index : Integer) : Cog"
  },
  "docs/code_reference/class_reference/carwheelref.html": {
    "href": "docs/code_reference/class_reference/carwheelref.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Object Properties Methods"
  },
  "docs/code_reference/class_reference/castfilter.html": {
    "href": "docs/code_reference/class_reference/castfilter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) Filter for casting operations in physics. Allows basic filtering such as static or dynamic objects, advanced filters such as collision groups, and custom filters via an event callback. Methods Properties Base Classes Derived Classes Constructor CallbackEventName basecastfilter CallbackObject CollisionGroup IgnoreCog Properties CallbackEventName : string The name of the event to invoke on the callback object. var CallbackEventName : String CallbackObject : Object An object to invoke a callback on (via the callback name) to see if an object in a cast should be skipped. var CallbackObject : Object CollisionGroup : collisiongroup Should this cast behave like it belongs to a collision group? Uses the current space's CollisionTable for filtering logic. var CollisionGroup : CollisionGroup IgnoreCog : cog A cog to ignore during casts. var IgnoreCog : Cog Methods CastFilter : Void constructor Name Type Description function CastFilter() CastFilter : Void constructor Name Type Description castfilter function CastFilter( : CastFilter)"
  },
  "docs/code_reference/class_reference/castfilterevent.html": {
    "href": "docs/code_reference/class_reference/castfilterevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Physics (NOTE) Allows a user to filter out an object during any cast in physics. Methods Properties Base Classes Derived Classes FilterState event Object Properties FilterState : CastFilterState When filtering should we accept or reject this cog? Alternatively we can let the default cast filter logic run. var FilterState : CastFilterState Object : cog read-only The object being tested in this cast. var Object : Cog Methods"
  },
  "docs/code_reference/class_reference/castresult.html": {
    "href": "docs/code_reference/class_reference/castresult.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) A result from a cast operation on a PhysicsSpace. Methods Properties Base Classes Derived Classes Constructor Collider GetLocalPosition Distance Normal ObjectHit WorldPosition Properties Collider : collider read-only The collider hit by the cast. var Collider : Collider Distance : real read-only The distance from the ray/segment start to the point of intersection. Invalid on a volume cast. var Distance : Real Normal : real3 read-only The normal of the object at the intersection point (world space). Invalid on a volume cast. var Normal : Real3 ObjectHit : cog read-only The cog hit by the cast. var ObjectHit : Cog WorldPosition : real3 read-only Returns the world-space position that the object was hit. Invalid on a volume cast. var WorldPosition : Real3 Methods CastResult : Void constructor Name Type Description function CastResult() CastResult : Void constructor Name Type Description rhs castresult function CastResult(rhs : CastResult) GetLocalPosition : real3 Returns the local-space position that the object was hit. The point index is used to get the first or last point of intersection. Invalid on volume casts. |Name|Type|Description| |---|---|---| |pointIndex|integer| | function GetLocalPosition(pointIndex : Integer) : Real3"
  },
  "docs/code_reference/class_reference/castresults.html": {
    "href": "docs/code_reference/class_reference/castresults.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes All Clear Empty Properties Methods All : castresultsarrayrange Name Type Description function All() : CastResultsArrayRange Clear : Void Name Type Description function Clear() Empty : boolean Name Type Description function Empty() : Boolean"
  },
  "docs/code_reference/class_reference/castresultsarrayrange.html": {
    "href": "docs/code_reference/class_reference/castresultsarrayrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : castresultsarrayrange read-only var All : CastResultsArrayRange Current : castresult read-only var Current : CastResult IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods CastResultsArrayRange : Void constructor Name Type Description function CastResultsArrayRange() CastResultsArrayRange : Void constructor Name Type Description p0 castresultsarrayrange function CastResultsArrayRange(p0 : CastResultsArrayRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/castresultsrange.html": {
    "href": "docs/code_reference/class_reference/castresultsrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : castresultsrange read-only var All : CastResultsRange Current : castresult read-only var Current : CastResult IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods CastResultsRange : Void constructor Name Type Description function CastResultsRange() CastResultsRange : Void constructor Name Type Description p0 castresultsrange function CastResultsRange(p0 : CastResultsRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/chainnode.html": {
    "href": "docs/code_reference/class_reference/chainnode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes dualblendchainnode Properties Methods"
  },
  "docs/code_reference/class_reference/checkbox.html": {
    "href": "docs/code_reference/class_reference/checkbox.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/childrendergrouplist.html": {
    "href": "docs/code_reference/class_reference/childrendergrouplist.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes rendergrouplist Properties Methods"
  },
  "docs/code_reference/class_reference/chorusnode.html": {
    "href": "docs/code_reference/class_reference/chorusnode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Applies a chorus filter to audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes FeedbackPercent soundnode FeedbackValue MaxDelayMillisec MinDelayMillisec ModulationFrequency OffsetMillisec Properties FeedbackPercent : real DEPRECATED The FeedbackValue property should be used instead. var FeedbackPercent : Real FeedbackValue : real The percentage of output (0 - 1.0) which is fed back into the filter as input. var FeedbackValue : Real MaxDelayMillisec : real The maximum delay reached by the modulation. It will oscillate between the MinDelayMillisec value and this value at the frequency set by the ModulationFrequency property. var MaxDelayMillisec : Real MinDelayMillisec : real The minimum delay reached by the modulation. It will oscillate between the this value and the MaxDelayMillisec value at the frequency set by the ModulationFrequency property. var MinDelayMillisec : Real ModulationFrequency : real The frequency of the oscillator which varies the modulation. var ModulationFrequency : Real OffsetMillisec : real The offset value of the chorus filter, in milliseconds. var OffsetMillisec : Real Methods"
  },
  "docs/code_reference/class_reference/chrome.html": {
    "href": "docs/code_reference/class_reference/chrome.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes threadsafeid32eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/chromepopupevent.html": {
    "href": "docs/code_reference/class_reference/chromepopupevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Gameplay Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/cog.html": {
    "href": "docs/code_reference/class_reference/cog.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) Game Object Composition class. This class is the foundational object for all dynamic objects in the game world. The Cog is a piece of logical interactive content and the primary mechanism game systems (Graphics, Physics, Etc.) provide functionality and communicate. A Cog can be anything from physical objects like trees, tanks, players to logical objects like teams, triggers, or AI objects. Methods Properties Base Classes Derived Classes AddComponentByName Actions Object gamesession AddComponentByType Archetype space AttachTo BaseArchetype AttachToPreserveLocal ChildCount ClearArchetype Children Clone ComponentCount Constructor EditorViewportHidden DebugDraw GameSession Destroy LevelSettings Detach Locked DetachPreserveLocal MarkedForDestruction DispatchDown Name DispatchEvent ObjectViewHidden DispatchUp Parent FindAllChildrenByName Persistent FindChildByName RuntimeId FindDirectChildByName Space FindNearestArchetype Transient FindNextInOrder FindNextSibling FindPreviousInOrder FindPreviousSibling FindRoot FindRootArchetype GetComponentByIndex GetComponentByName GetComponentIndex IsAncestorOf IsDescendant IsDescendantOf IsModifiedFromArchetype PlaceAfterSibling PlaceBeforeSibling RemoveComponentByName RemoveComponentByType ReplaceChild SanitizeName UploadToArchetype Properties Actions : actions read-only var Actions : Actions Archetype : archetype Getter / setter for Archetype. var Archetype : Archetype BaseArchetype : archetype read-only Returns the Archetype our Archetype inherits from. var BaseArchetype : Archetype ChildCount : integer read-only Returns the amount of children on this Cog. Note that this function has to iterate over all children to calculate the count. var ChildCount : Integer Children : hierarchylistrange read-only Returns a range of all direct children on this Cog. var Children : HierarchyListRange ComponentCount : integer read-only Returns how many Components are on this Cog. var ComponentCount : Integer EditorViewportHidden : boolean Hidden from view used for editor. var EditorViewportHidden : Boolean GameSession : gamesession read-only Get the GameSession that owns us and our Space. var GameSession : GameSession LevelSettings : cog read-only Get the object named 'LevelSettings', a special convenience object where we can put general functionality for our Level. var LevelSettings : Cog Locked : boolean Not able to be modified or selected in the viewport. var Locked : Boolean MarkedForDestruction : boolean read-only Has this Cog already been destroyed and is waiting for the frame to end (delayed destruction). This allows us to do custom logic when an object is still not null, but about to be destroyed (e.g. we don't want to render Cogs marked for deletion). var MarkedForDestruction : Boolean Name : string Name of the Object. var Name : String ObjectViewHidden : boolean If the object needs to not show up in the object view. var ObjectViewHidden : Boolean Parent : cog read-only Get the parent of this object in the Hierarchy. var Parent : Cog Persistent : boolean Object will not be destroyed on level load or change. var Persistent : Boolean RuntimeId : integer read-only Gets a unique integer for this object (used primarily for debugging) var RuntimeId : Integer Space : space read-only Returns the Space that this object lives in. var Space : Space Transient : boolean Object will not be saved. var Transient : Boolean Methods AddComponentByName : boolean Add a component by name. |Name|Type|Description| |---|---|---| |name|string| | function AddComponentByName(name : String) : Boolean AddComponentByType : boolean Add a component of the given type. |Name|Type|Description| |---|---|---| |componentType|boundtype| | function AddComponentByType(componentType : BoundType) : Boolean AttachTo : boolean Attach to a parent object and compute the new transform so that the objects are relative. |Name|Type|Description| |---|---|---| |parent|cog| | function AttachTo(parent : Cog) : Boolean AttachToPreserveLocal : boolean Attach to a parent object. |Name|Type|Description| |---|---|---| |parent|cog| | function AttachToPreserveLocal(parent : Cog) : Boolean ClearArchetype : Void Removes our association with the current Archetype. |Name|Type|Description| |---|---|---| function ClearArchetype() Clone : cog Clones this cog. The cloned object will be parented to this objects parent (if it exists). |Name|Type|Description| |---|---|---| function Clone() : Cog Cog : Void constructor Constructor / destructor. |Name|Type|Description| |---|---|---| function Cog() DebugDraw : Void Calls DebugDraw on all components in this cog. |Name|Type|Description| |---|---|---| function DebugDraw() Destroy : Void Queues the cog up for delayed destruction (at the end of the frame). If the object is marked as Protected, this will do nothing. |Name|Type|Description| |---|---|---| function Destroy() Detach : Void Detach from a parent object and compute the new transform so that the objects are relative. |Name|Type|Description| |---|---|---| function Detach() DetachPreserveLocal : Void Detach from a parent object. |Name|Type|Description| |---|---|---| function DetachPreserveLocal() DispatchDown : Void Dispatches an event down the tree on all children recursively (pre-order traversal) |Name|Type|Description| |---|---|---| |eventId|string| | |event|event| | function DispatchDown(eventId : String, event : Event) DispatchEvent : Void Dispatches an event on this object. |Name|Type|Description| |---|---|---| |eventId|string| | |event|event| | function DispatchEvent(eventId : String, event : Event) DispatchUp : Void Dispatches an event up the tree on each parent recursively (pre-order traversal) |Name|Type|Description| |---|---|---| |eventId|string| | |event|event| | function DispatchUp(eventId : String, event : Event) FindAllChildrenByName : hierarchynamerange Returns a range of all children with the given name. |Name|Type|Description| |---|---|---| |name|string| | function FindAllChildrenByName(name : String) : HierarchyNameRange FindChildByName : cog Depth first search of all children. |Name|Type|Description| |---|---|---| |name|string| | function FindChildByName(name : String) : Cog FindDirectChildByName : cog Checks only direct children. |Name|Type|Description| |---|---|---| |name|string| | function FindDirectChildByName(name : String) : Cog FindNearestArchetype : cog Same as FindNearestParentArchetype except that it includes this Cog. |Name|Type|Description| |---|---|---| function FindNearestArchetype() : Cog FindNextInOrder : cog Finds the next Cog in depth first post-order. |Name|Type|Description| |---|---|---| function FindNextInOrder() : Cog FindNextSibling : cog Returns the sibling Cog after this in the parents child list. Returns null if it's the last child. If the Cog doesn't have a parent, it will return the Cog after it in the Space. |Name|Type|Description| |---|---|---| function FindNextSibling() : Cog FindPreviousInOrder : cog Finds the previous Cog in reverse depth first post-order (the opposite of FindNextInOrder). |Name|Type|Description| |---|---|---| function FindPreviousInOrder() : Cog FindPreviousSibling : cog Returns the sibling Cog before this in the parents child list. Returns null if it's the first child. If the Cog doesn't have a parent, it will return the Cog before it in the Space. |Name|Type|Description| |---|---|---| function FindPreviousSibling() : Cog FindRoot : cog Searches up the hierarchy for the root Cog. |Name|Type|Description| |---|---|---| function FindRoot() : Cog FindRootArchetype : cog Finds the top most Archetype in the Hierarchy. |Name|Type|Description| |---|---|---| function FindRootArchetype() : Cog GetComponentByIndex : component Returns the Component at the given index. |Name|Type|Description| |---|---|---| |index|integer| | function GetComponentByIndex(index : Integer) : Component GetComponentByName : component Finds the Components with the given type name. |Name|Type|Description| |---|---|---| |componentTypeName|string| | function GetComponentByName(componentTypeName : String) : Component GetComponentIndex : integer Finds the index of the given Component type. Returns uint max if the Component didn't exist. |Name|Type|Description| |---|---|---| |componentType|boundtype| | function GetComponentIndex(componentType : BoundType) : Integer IsAncestorOf : boolean Returns whether or not we are an ancestor of the given Cog. |Name|Type|Description| |---|---|---| |descendant|cog| | function IsAncestorOf(descendant : Cog) : Boolean IsDescendant : boolean Returns whether or not the given cog is a descendant of us. |Name|Type|Description| |---|---|---| |cog|cog| | function IsDescendant(cog : Cog) : Boolean IsDescendantOf : boolean Returns whether or not we are a descendant of the given Cog. |Name|Type|Description| |---|---|---| |ancestor|cog| | function IsDescendantOf(ancestor : Cog) : Boolean IsModifiedFromArchetype : boolean Returns whether or not we have any local modifications from our Archetype. This does not account for properties with LocalModificationOverride (such as Transform modifications). |Name|Type|Description| |---|---|---| function IsModifiedFromArchetype() : Boolean PlaceAfterSibling : Void Moves this Cog after the given sibling. Assumes they have the same parent. |Name|Type|Description| |---|---|---| |sibling|cog| | function PlaceAfterSibling(sibling : Cog) PlaceBeforeSibling : Void Moves this Cog before the given sibling. Assumes they have the same parent. |Name|Type|Description| |---|---|---| |sibling|cog| | function PlaceBeforeSibling(sibling : Cog) RemoveComponentByName : boolean Remove a component by name. Returns true if the component existed. |Name|Type|Description| |---|---|---| |typeName|string| | function RemoveComponentByName(typeName : String) : Boolean RemoveComponentByType : boolean Remove a component by type. Returns true if the component existed. |Name|Type|Description| |---|---|---| |componentType|boundtype| | function RemoveComponentByType(componentType : BoundType) : Boolean ReplaceChild : Void Places the new child at the same place as the old child in the Hierarchy. This detaches but does not destroy the old child. |Name|Type|Description| |---|---|---| |oldChild|cog| | |newChild|cog| | function ReplaceChild(oldChild : Cog, newChild : Cog) SanitizeName : string static Cleans an object name of invalid runes. |Name|Type|Description| |---|---|---| |newName|string| | function SanitizeName(newName : String) : String UploadToArchetype : Void Upload this objects data to the archetype and marks this object as not modified. This function does not rebuild all other Cogs with the same Archetype. See ArchetypeRebuilder for more information about how to rebuild Archetypes. |Name|Type|Description| |---|---|---| function UploadToArchetype()"
  },
  "docs/code_reference/class_reference/cogarchetypeextension.html": {
    "href": "docs/code_reference/class_reference/cogarchetypeextension.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes editorpropertyextension Properties Methods"
  },
  "docs/code_reference/class_reference/cogarchetypepropertyfilter.html": {
    "href": "docs/code_reference/class_reference/cogarchetypepropertyfilter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metapropertyfilter Properties Methods"
  },
  "docs/code_reference/class_reference/cogcommand.html": {
    "href": "docs/code_reference/class_reference/cogcommand.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes command Properties Methods"
  },
  "docs/code_reference/class_reference/cogcomponentmeta.html": {
    "href": "docs/code_reference/class_reference/cogcomponentmeta.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes referencecountedeventobject Properties Methods"
  },
  "docs/code_reference/class_reference/coghashsetrange.html": {
    "href": "docs/code_reference/class_reference/coghashsetrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : coghashsetrange read-only var All : CogHashSetRange Current : cog read-only var Current : Cog IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods CogHashSetRange : Void constructor Name Type Description function CogHashSetRange() CogHashSetRange : Void constructor Name Type Description p0 coghashsetrange function CogHashSetRange(p0 : CogHashSetRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/coginitializer.html": {
    "href": "docs/code_reference/class_reference/coginitializer.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes DispatchEvent GameSession safeid32eventobject Parent Space Properties GameSession : gamesession read-only var GameSession : GameSession Parent : cog read-only var Parent : Cog Space : space read-only var Space : Space Methods DispatchEvent : Void Name Type Description p0 string p1 event function DispatchEvent(p0 : String, p1 : Event)"
  },
  "docs/code_reference/class_reference/coginitializerevent.html": {
    "href": "docs/code_reference/class_reference/coginitializerevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes CogInitializer event Properties CogInitializer : coginitializer var CogInitializer : CogInitializer Methods"
  },
  "docs/code_reference/class_reference/cogmetadatainheritance.html": {
    "href": "docs/code_reference/class_reference/cogmetadatainheritance.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metadatainheritanceroot Properties Methods"
  },
  "docs/code_reference/class_reference/cogmetadisplay.html": {
    "href": "docs/code_reference/class_reference/cogmetadisplay.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metadisplay Properties Methods"
  },
  "docs/code_reference/class_reference/cogmetaoperations.html": {
    "href": "docs/code_reference/class_reference/cogmetaoperations.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metaoperations Properties Methods"
  },
  "docs/code_reference/class_reference/cogmetaserialization.html": {
    "href": "docs/code_reference/class_reference/cogmetaserialization.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metaserialization Properties Methods"
  },
  "docs/code_reference/class_reference/cogmetatransform.html": {
    "href": "docs/code_reference/class_reference/cogmetatransform.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metatransform Properties Methods"
  },
  "docs/code_reference/class_reference/cognamerange.html": {
    "href": "docs/code_reference/class_reference/cognamerange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : cognamerange read-only var All : CogNameRange Current : cog read-only var Current : Cog IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods CogNameRange : Void constructor Name Type Description function CogNameRange() CogNameRange : Void constructor Name Type Description p0 cognamerange function CogNameRange(p0 : CogNameRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/cogpath.html": {
    "href": "docs/code_reference/class_reference/cogpath.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Clone Cog Object Constructor DirectCog ComputePath ErrorOnDirectLinkFail Refresh ErrorOnPathCantCompute RefreshIfNull ErrorOnResolveToNull Resolve Path PathPreference0 PathPreference1 PathPreference2 RelativeTo UpdateCogOnInitialize UpdateCogOnPathChange UpdatePathOnCogChange Properties Cog : cog Setting the cog manually may recompute the path if the option is set Getting the cog will attempt to resolve the cog if we don't already have one (or if the path options is set, it will always resolve) var Cog : Cog DirectCog : cog Setting the cog manually may recompute the path if the option is set Getting the cog will return whatever cog we already resolved, or null (it will not attempt to resolve) var DirectCog : Cog ErrorOnDirectLinkFail : boolean Is it an exception/notification if a direct link to the object cannot be resolved? var ErrorOnDirectLinkFail : Boolean ErrorOnPathCantCompute : boolean Is it an exception/notification if the path to an object cannot be computed? var ErrorOnPathCantCompute : Boolean ErrorOnResolveToNull : boolean Is an exception thrown if you try to access the Cog when it's invalid or not found? var ErrorOnResolveToNull : Boolean Path : string Setting the path will invalidate the object until the next call to GetCog. var Path : String PathPreference0 : CogPathPreference var PathPreference0 : CogPathPreference PathPreference1 : CogPathPreference var PathPreference1 : CogPathPreference PathPreference2 : CogPathPreference var PathPreference2 : CogPathPreference RelativeTo : cog The cog that we compute paths relative to. var RelativeTo : Cog UpdateCogOnInitialize : boolean Whether the cog path attempts to resolve an object when the object is fully initialized. var UpdateCogOnInitialize : Boolean UpdateCogOnPathChange : boolean When we set the cog path, should we try and resolve the object (this also detects parse errors) var UpdateCogOnPathChange : Boolean UpdatePathOnCogChange : boolean When we set the cog, should we try and recompute a path to the object? var UpdatePathOnCogChange : Boolean Methods Clone : cogpath Creates a new copy of a cog path (since cog paths are reference counted and shared) |Name|Type|Description| |---|---|---| function Clone() : CogPath CogPath : Void constructor Name Type Description function CogPath() CogPath : Void constructor Name Type Description cogpath function CogPath( : CogPath) CogPath : Void constructor Name Type Description path string function CogPath(path : String) ComputePath : string static Computes a path from one object to another (or an absolute path if specified - 'from' can be null) If computing the path fails, this will return an empty string. |Name|Type|Description| |---|---|---| |from|cog| | |to|cog| | |pref|CogPathPreference| | function ComputePath(from : Cog, to : Cog, pref : CogPathPreference) : String Refresh : boolean Returns true if the object changes, false otherwise. |Name|Type|Description| |---|---|---| function Refresh() : Boolean RefreshIfNull : boolean Returns true if the object changes, false otherwise. |Name|Type|Description| |---|---|---| function RefreshIfNull() : Boolean Resolve : cog static Resolves a cog from a path and a a relative object (or null for absolute paths) Returns null if it fails to find the cog, and will not throw an exception or assert. |Name|Type|Description| |---|---|---| |startFrom|cog| | |path|string| | function Resolve(startFrom : Cog, path : String) : Cog"
  },
  "docs/code_reference/class_reference/cogpathevent.html": {
    "href": "docs/code_reference/class_reference/cogpathevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes CogPath event Properties CogPath : cogpath var CogPath : CogPath Methods"
  },
  "docs/code_reference/class_reference/cogpathmetaserialization.html": {
    "href": "docs/code_reference/class_reference/cogpathmetaserialization.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metaserialization Properties Methods"
  },
  "docs/code_reference/class_reference/cogreplaceevent.html": {
    "href": "docs/code_reference/class_reference/cogreplaceevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes datareplaceevent Properties Methods"
  },
  "docs/code_reference/class_reference/cogserializationfilter.html": {
    "href": "docs/code_reference/class_reference/cogserializationfilter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes serializationfilter Properties Methods"
  },
  "docs/code_reference/class_reference/collider.html": {
    "href": "docs/code_reference/class_reference/collider.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A collider controls how collision detection is performed for an object. A collider also gives mass properties to a RigidBody(via the material and volume). If there is no RigidBody associated with this collider then it is considered static. Note: colliders without RigidBodies should not be moved at run-time! Methods Properties Base Classes Derived Classes ComputeVolume ActiveBody component boxcollider GetPointVelocity CollisionGroup capsulecollider ContactCount convexmeshcollider Contacts cylindercollider Ghost ellipsoidcollider JointCount heightmapcollider Joints meshcollider Material multiconvexmeshcollider Offset spherecollider SendsEvents WorldAabb WorldBoundingSphere Properties ActiveBody : rigidbody read-only The rigid body that \"owns\" this collider. This is the body that forces/impulses/etc... should be applied to. var ActiveBody : RigidBody CollisionGroup : collisiongroup The collision group is a tag used to alter collision behavior based upon the space's CollisionTable. var CollisionGroup : CollisionGroup ContactCount : integer read-only The current number of contacts/collisions with this collider. var ContactCount : Integer Contacts : contactrange read-only A range of all contacts for this collider. var Contacts : ContactRange Ghost : boolean Ghosted colliders do not resolve collision. They do still detect collisions and send events. Ghosted colliders are typically used for trigger regions. var Ghost : Boolean JointCount : integer read-only The number of joints attached to this collider. var JointCount : Integer Joints : jointrange read-only A range of all joints attached to this collider. var Joints : JointRange Material : physicsmaterial The material used to determine the density, restitution, and friction of this collider. var Material : PhysicsMaterial Offset : real3 Moves the physics defined center of the object away from the transform's translation. Used to move physics to match a model. var Offset : Real3 SendsEvents : boolean Determines if this object will send collision events. Used mainly for increasing performance by not sending unnecessary collision events. var SendsEvents : Boolean WorldAabb : aabb read-only Returns the world-space axis aligned bounding box (Aabb) of this collider. var WorldAabb : Aabb WorldBoundingSphere : sphere read-only Returns the world-space bounding sphere of this collider. var WorldBoundingSphere : Sphere Methods ComputeVolume : real Compute the world-space volume of this collider. |Name|Type|Description| |---|---|---| function ComputeVolume() : Real GetPointVelocity : real3 Returns the point velocity of a world-space point with respect to the current rigid body's linear and angular velocity. If there is no rigid body this returns zero. |Name|Type|Description| |---|---|---| |worldPoint|real3| | function GetPointVelocity(worldPoint : Real3) : Real3"
  },
  "docs/code_reference/class_reference/collisionendblock.html": {
    "href": "docs/code_reference/class_reference/collisionendblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) CollisionFilterBlock for CollisionEnded events. Methods Properties Base Classes Derived Classes Constructor collisionfilterblock Properties Methods CollisionEndBlock : Void constructor Name Type Description function CollisionEndBlock()"
  },
  "docs/code_reference/class_reference/collisionevent.html": {
    "href": "docs/code_reference/class_reference/collisionevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Physics (NOTE) Information about a collision in physics. Sent when collisions start, persist, or end. Methods Properties Base Classes Derived Classes FirstPoint basecollisionevent Properties FirstPoint : contactpoint read-only Convenience function to return the first ContactPoint. Some logic only cares about one point of information. In a more general case all points should be iterated over. var FirstPoint : ContactPoint Methods"
  },
  "docs/code_reference/class_reference/collisionfilter.html": {
    "href": "docs/code_reference/class_reference/collisionfilter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) A filter for storing the relationship between a pair of groups. Stores flags for the kind of filter this is, as well as what events to send out and to whom. Methods Properties Base Classes Derived Classes Constructor CollisionFlag safeid32eventobject CollisionGroupA CollisionGroupB Properties CollisionFlag : CollisionFilterCollisionFlags The collision state between the two types. Controls whether the types skip detection, skip resolution, or resolve as normal. var CollisionFlag : CollisionFilterCollisionFlags CollisionGroupA : collisiongroup read-only var CollisionGroupA : CollisionGroup CollisionGroupB : collisiongroup read-only var CollisionGroupB : CollisionGroup Methods CollisionFilter : Void constructor Name Type Description function CollisionFilter()"
  },
  "docs/code_reference/class_reference/collisionfilterblock.html": {
    "href": "docs/code_reference/class_reference/collisionfilterblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) Used to specify which collision group events should be sent out for a CollisionFilter. Allows customizing who gets events (in the filter pair) and what event name is sent out. Methods Properties Base Classes Derived Classes BlockType safeid32object collisionendblock EventOverride collisionpersistedblock SendEventsToA collisionstartblock SendEventsToB presolveblock SendEventsToSpace Properties BlockType : CollisionFilterBlockType read-only What type of collision filter block is this? var BlockType : CollisionFilterBlockType EventOverride : string What event name to send out when this block triggers. If left empty the default name will be used (e.g. GroupCollisionStarted). var EventOverride : String SendEventsToA : boolean Does the first object in the filter get this event type sent to it? var SendEventsToA : Boolean SendEventsToB : boolean Does the second object in the filter get this event type sent to it? var SendEventsToB : Boolean SendEventsToSpace : boolean Does the active space of the objects get this event type sent to it? var SendEventsToSpace : Boolean Methods"
  },
  "docs/code_reference/class_reference/collisiongroup.html": {
    "href": "docs/code_reference/class_reference/collisiongroup.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Physics (NOTE) Represents a label for a Collider to be used with a CollisionTable. Methods Properties Base Classes Derived Classes CreateRuntime dataresource RuntimeClone Properties Methods CreateRuntime : collisiongroup static Creates a CollisionGroup for run-time modifications. |Name|Type|Description| |---|---|---| function CreateRuntime() : CollisionGroup RuntimeClone : collisiongroup Creates a clone of this CollisionGroup for run-time modifications. |Name|Type|Description| |---|---|---| function RuntimeClone() : CollisionGroup"
  },
  "docs/code_reference/class_reference/collisiongroupevent.html": {
    "href": "docs/code_reference/class_reference/collisiongroupevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Physics (NOTE) An event sent out when specified by a CollisionFilter in a CollisionTable. Used to hook up events based upon certain CollisionGroup types colliding. Methods Properties Base Classes Derived Classes FirstPoint basecollisionevent TypeAName TypeBName Properties FirstPoint : contactpoint read-only var FirstPoint : ContactPoint TypeAName : string read-only Returns the CollisionGroup name of object A. var TypeAName : String TypeBName : string read-only Returns the CollisionGroup name of object B. var TypeBName : String Methods"
  },
  "docs/code_reference/class_reference/collisionpersistedblock.html": {
    "href": "docs/code_reference/class_reference/collisionpersistedblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) CollisionFilterBlock for CollisionPersisted events. Methods Properties Base Classes Derived Classes Constructor collisionfilterblock Properties Methods CollisionPersistedBlock : Void constructor Name Type Description function CollisionPersistedBlock()"
  },
  "docs/code_reference/class_reference/collisionstartblock.html": {
    "href": "docs/code_reference/class_reference/collisionstartblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) CollisionFilterBlock for CollisionStarted events. Methods Properties Base Classes Derived Classes Constructor collisionfilterblock Properties Methods CollisionStartBlock : Void constructor Name Type Description function CollisionStartBlock()"
  },
  "docs/code_reference/class_reference/collisiontable.html": {
    "href": "docs/code_reference/class_reference/collisiontable.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Physics (NOTE) Defines filter pairs between CollisionGroups. These filters are used to control if collision detection and resolution happens between Colliders. Additionally, CollisionFilterBlocks can be defined on filters to send out extra events. Methods Properties Base Classes Derived Classes CreateRuntime dataresource FindFilter RuntimeClone Properties Methods CreateRuntime : collisiontable static Creates a CollisionTable for run-time modifications. |Name|Type|Description| |---|---|---| function CreateRuntime() : CollisionTable FindFilter : collisionfilter Finds the filter between the pair of collision groups. |Name|Type|Description| |---|---|---| |groupA|collisiongroup| | |groupB|collisiongroup| | function FindFilter(groupA : CollisionGroup, groupB : CollisionGroup) : CollisionFilter RuntimeClone : collisiontable Creates a clone of this CollisionTable for run-time modifications. |Name|Type|Description| |---|---|---| function RuntimeClone() : CollisionTable"
  },
  "docs/code_reference/class_reference/colorevent.html": {
    "href": "docs/code_reference/class_reference/colorevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/colorgradient.html": {
    "href": "docs/code_reference/class_reference/colorgradient.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Engine (NOTE) Specifies a range of colors that are interpolated when sampled. Methods Properties Base Classes Derived Classes Sample dataresource Properties Methods Sample : real4 Sample the curve at the given t. |Name|Type|Description| |---|---|---| |t|real| | function Sample(t : Real) : Real4"
  },
  "docs/code_reference/class_reference/colorscheme.html": {
    "href": "docs/code_reference/class_reference/colorscheme.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Save ActiveScheme eventobject Background ClassName Comment Default Error FunctionName Gutter GutterText Keyword LineSelection Link Number Operator SaveName Selection SpecialWords StringLiteral TextMatchHighlight TextMatchIndicator TextMatchOutlineAlpha Whitespace Properties ActiveScheme : string var ActiveScheme : String Background : real4 var Background : Real4 ClassName : real4 var ClassName : Real4 Comment : real4 var Comment : Real4 Default : real4 var Default : Real4 Error : real4 var Error : Real4 FunctionName : real4 var FunctionName : Real4 Gutter : real4 var Gutter : Real4 GutterText : real4 var GutterText : Real4 Keyword : real4 var Keyword : Real4 LineSelection : real4 var LineSelection : Real4 Link : real4 var Link : Real4 Number : real4 var Number : Real4 Operator : real4 var Operator : Real4 SaveName : string var SaveName : String Selection : real4 var Selection : Real4 SpecialWords : real4 var SpecialWords : Real4 StringLiteral : real4 var StringLiteral : Real4 TextMatchHighlight : real4 var TextMatchHighlight : Real4 TextMatchIndicator : real4 var TextMatchIndicator : Real4 TextMatchOutlineAlpha : real var TextMatchOutlineAlpha : Real Whitespace : real4 var Whitespace : Real4 Methods Save : Void Name Type Description function Save()"
  },
  "docs/code_reference/class_reference/colortargetmrt.html": {
    "href": "docs/code_reference/class_reference/colortargetmrt.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics (NOTE) Indexable interface for settings ColorTargets. Methods Properties Base Classes Derived Classes Set threadsafereferencecounted Properties Methods Set : Void Set the RenderTarget to use for the given index. |Name|Type|Description| |---|---|---| |index|integer| | |colorTarget|rendertarget| | function Set(index : Integer, colorTarget : RenderTarget)"
  },
  "docs/code_reference/class_reference/combobox.html": {
    "href": "docs/code_reference/class_reference/combobox.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite stringcombobox Properties Methods"
  },
  "docs/code_reference/class_reference/command.html": {
    "href": "docs/code_reference/class_reference/command.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes safeid32eventobject cogcommand Properties Methods"
  },
  "docs/code_reference/class_reference/commandevent.html": {
    "href": "docs/code_reference/class_reference/commandevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget Methods Properties Base Classes Derived Classes Space objectevent Properties Space : space read-only Gives context to where the command was executed. var Space : Space Methods"
  },
  "docs/code_reference/class_reference/commandexecuter.html": {
    "href": "docs/code_reference/class_reference/commandexecuter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes Object Properties Methods"
  },
  "docs/code_reference/class_reference/commandmanager.html": {
    "href": "docs/code_reference/class_reference/commandmanager.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/commandupdateevent.html": {
    "href": "docs/code_reference/class_reference/commandupdateevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget Methods Properties Base Classes Derived Classes objectevent Properties Methods"
  },
  "docs/code_reference/class_reference/component.html": {
    "href": "docs/code_reference/class_reference/component.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) A component is an atomic piece of functionality that is composed into a Cog to form game objects. Methods Properties Base Classes Derived Classes Constructor GameSession Object actionspace DebugDraw LevelSettings animationgraph Owner archetyped Space area audiosettings bone camera cameraviewport collider ComponentProxy contentconfig creationtool customcollisioneventtracker debugsettings defaultgamesetup developerconfig dynamicmotor editorcameracontroller editorconfig editorflags editorsettings frameratesettings gizmo gizmocreator gizmodrag gizmospace GjkDebug graphical graphicsspace griddraw heightmap HeightMapAabbChecker HeightMapDebugDrawer heightmaptool hierarchy hierarchyspline ignorespaceeffects joint jointconfigoverride jointdebugdrawconfig jointlimit jointmotor jointspring LauncherConfig LauncherLegacySettings linkid mainconfig manipulatortool massoverride MeshDebug mousecapture named netobject objectconnectingtool objectlink objectlinkanchor objecttransformgizmo objecttransformtool orientation orientationbasisgizmo particleanimator particleemitter physicscar physicscarwheel physicscarwheelbasisgizmo physicseffect physicsspace projectdescription projectsettings randomcontext reactive reactivespace recentprojects region revolutebasisgizmo rigidbody rotategizmo rotationbasisgizmo scalegizmo selectionicon selecttool sharedcontent simpleanimation simplegizmobase simplesocket simplesound skeleton soundemitter soundlistener soundspace spaceobjects SpringSystem SpringTools texteditorconfig tileeditor2d tilemap TimeOfImpactDebug timespace transform translategizmo uilayout uiwidgetcomponenthierarchy userconfig webrequester windowlaunchsettings nadacomponent nadapluginconfig Properties GameSession : gamesession read-only Get the GameSession that owns us and our space. var GameSession : GameSession LevelSettings : cog read-only Get the object named 'LevelSettings', a special object where we can put components for our level. var LevelSettings : Cog Owner : cog read-only Get the Cog this Component is owned by (not the parent of this composition). var Owner : Cog Space : space read-only The Space where the object is located. var Space : Space Methods Component : Void constructor Constructor / Destructor. |Name|Type|Description| |---|---|---| function Component() DebugDraw : Void Base debug draw for a component. Special for the each type of component. |Name|Type|Description| |---|---|---| function DebugDraw()"
  },
  "docs/code_reference/class_reference/composite.html": {
    "href": "docs/code_reference/class_reference/composite.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes widget addresourcewindow animationeditor animationtrackview basescrollarea BugReporter buttonbase checkbox combobox editorviewport floatingcomposite gamewidget generalsearchview heightmapimporter hotkeyeditor importbutton inplacetexteditor itemlist label LauncherOpenProjectComposite libraryview listbox mainpropertyview menubar menubaritem modal multiconvexmesheditor multidock multilinetext objectview previewwidget progressbar propertyview propertywidget rendergrouphierarchies resourcetemplatedisplay resourcetemplatesearch resourcetypesearch rootwidget searchview searchviewelement selectorbutton slider splitter spritepreview spritesheetimporter spritesourceeditor stresstestdialog tabarea textbox textcheckbox tilepalettesprite tilepaletteview tileview tileviewwidget toolcontrol tooltip treerow viewport webbrowserwidget weightedcomposite window Properties Methods"
  },
  "docs/code_reference/class_reference/compressornode.html": {
    "href": "docs/code_reference/class_reference/compressornode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes AttackMillisec soundnode InputGainDecibels KneeWidth OutputGainDecibels Ratio ReleaseMillisec ThresholdDecibels Properties AttackMillisec : real The time for the compressor to ramp to full effect after the input reaches the threshold. var AttackMillisec : Real InputGainDecibels : real The volume adjustment applied to the audio input, in decibels. var InputGainDecibels : Real KneeWidth : real The knee width of the compressor, in decibels. var KneeWidth : Real OutputGainDecibels : real The volume adjustment applied to the compressor output, in decibels. var OutputGainDecibels : Real Ratio : real The ratio of the volume reduction applied by the compressor. var Ratio : Real ReleaseMillisec : real The time for the compressor to ramp from full effect to off after the input drops below the threshold. var ReleaseMillisec : Real ThresholdDecibels : real The threshold, in decibels, at which the volume of the input is affected by the compressor. var ThresholdDecibels : Real Methods"
  },
  "docs/code_reference/class_reference/conflictoptions.html": {
    "href": "docs/code_reference/class_reference/conflictoptions.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Action Object Properties Action : ConflictAction var Action : ConflictAction Methods"
  },
  "docs/code_reference/class_reference/connectiondata.html": {
    "href": "docs/code_reference/class_reference/connectiondata.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking Methods Properties Base Classes Derived Classes Address Host Incoming Index Port Properties Address : integer var Address : Integer Host : string var Host : String Incoming : boolean var Incoming : Boolean Index : integer var Index : Integer Port : integer var Port : Integer Methods"
  },
  "docs/code_reference/class_reference/connectionevent.html": {
    "href": "docs/code_reference/class_reference/connectionevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking Methods Properties Base Classes Derived Classes Address event receiveddataevent Host Incoming Index Port Properties Address : integer var Address : Integer Host : string var Host : String Incoming : boolean var Incoming : Boolean Index : integer var Index : Integer Port : integer var Port : Integer Methods"
  },
  "docs/code_reference/class_reference/consoletextevent.html": {
    "href": "docs/code_reference/class_reference/consoletextevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/consoleui.html": {
    "href": "docs/code_reference/class_reference/consoleui.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes texteditor Properties Methods"
  },
  "docs/code_reference/class_reference/constraintconfigblock.html": {
    "href": "docs/code_reference/class_reference/constraintconfigblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) A block of information for solving a joint (or constraint) type. This is used to configure how one joint is solved independently of another joint. Methods Properties Base Classes Derived Classes AngularBaumgarte safeid32object contactblock AngularErrorCorrection customjointblock LinearBaumgarte fixedanglejointblock LinearErrorCorrection gearjointblock PositionCorrectionType linearaxisjointblock Slop manipulatorjointblock phygunjointblock positionjointblock prismaticjoint2dblock prismaticjointblock pulleyjointblock relativevelocityjointblock revolutejoint2dblock revolutejointblock stickjointblock universaljointblock uprightjointblock weldjointblock wheeljoint2dblock wheeljointblock Properties AngularBaumgarte : real The exponential constant for correcting angular error with a penalty impulse. var AngularBaumgarte : Real AngularErrorCorrection : real The max amount of error that can be corrected by the angular portion of any constraint in one frame (only for PostStabilization). var AngularErrorCorrection : Real LinearBaumgarte : real The exponential constant for correcting linear error with a penalty impulse. var LinearBaumgarte : Real LinearErrorCorrection : real The max amount of error that can be corrected by the linear portion of any constraint in one frame (only for PostStabilization). var LinearErrorCorrection : Real PositionCorrectionType : ConstraintPositionCorrection What method should be used to fix errors in joints. var PositionCorrectionType : ConstraintPositionCorrection Slop : real The amount of error allowed before position correction takes effect. var Slop : Real Methods"
  },
  "docs/code_reference/class_reference/contactblock.html": {
    "href": "docs/code_reference/class_reference/contactblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods ContactBlock : Void constructor Name Type Description function ContactBlock()"
  },
  "docs/code_reference/class_reference/contactgraphedge.html": {
    "href": "docs/code_reference/class_reference/contactgraphedge.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) A bi-directional graph edge between a collider and a contact. Exposes some internals to Contact which currently can't be exposed. Methods Properties Base Classes Derived Classes Constructor ContactPointCount BaseConstraintGraphEdgePhysics::Contact,Physics::ContactEdge ContactPoints FirstPoint IsGhost Object OtherObject Properties ContactPointCount : integer read-only How many points of contact were in this collision. var ContactPointCount : Integer ContactPoints : contactpointrange read-only Returns a range of all contact points in the collision. var ContactPoints : ContactPointRange FirstPoint : contactpoint read-only Convenience function to return the first ContactPoint. Some logic only cares about one point of information. In a more general case all points should be iterated over. var FirstPoint : ContactPoint IsGhost : boolean read-only Was this a ghost collision? var IsGhost : Boolean Object : cog read-only var Object : Cog OtherObject : cog read-only var OtherObject : Cog Methods ContactGraphEdge : Void constructor Name Type Description function ContactGraphEdge() ContactGraphEdge : Void constructor Name Type Description contactgraphedge function ContactGraphEdge( : ContactGraphEdge)"
  },
  "docs/code_reference/class_reference/contactpoint.html": {
    "href": "docs/code_reference/class_reference/contactpoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) Information about one point of contact in a collision. This is useful for evaluating info about the collision after it happened such as where the objects hit. WARNING: Do not hold onto this after an event is sent out. Methods Properties Base Classes Derived Classes Constructor ComplexImpulse FrictionImpulse LocalPoint NormalImpulse OtherLocalPoint Penetration RelativeVelocity WorldNormalTowardsOther WorldPoint Properties ComplexImpulse : real3 read-only The total impulse this object applied (only for more complicated logic). The impulse is a Vector3 of the values (normal, friction1, friction2). var ComplexImpulse : Real3 FrictionImpulse : real read-only The total friction impulse that this object applied. var FrictionImpulse : Real LocalPoint : real3 read-only The point in local space of myself in this collision. var LocalPoint : Real3 NormalImpulse : real read-only The total impulse that this object applied in the direction of the normal. var NormalImpulse : Real OtherLocalPoint : real3 read-only The point in local space of the other object in this collision. var OtherLocalPoint : Real3 Penetration : real read-only The penetration of this contact point in the direction of the normal. Note: penetration is always positive and is not flipped for object A or object B. var Penetration : Real RelativeVelocity : real read-only The relative velocity of this point in the direction of the normal. The relative point velocity is defined as Dot(p1 - p0, n) where p1 and p0 are the velocities of the contact points in the collision of myself and the other object respectively. This value can be used to see how fast the objects are now separating. Also, in pre-collision this value can be used to approximate the impulse of the collision since the impulse values will not have been calculated yet in pre-collision. var RelativeVelocity : Real WorldNormalTowardsOther : real3 read-only The world space normal that points from myself towards the other object. var WorldNormalTowardsOther : Real3 WorldPoint : real3 read-only The point in world space of this contact point. var WorldPoint : Real3 Methods ContactPoint : Void constructor Name Type Description function ContactPoint() ContactPoint : Void constructor Name Type Description contactpoint function ContactPoint( : ContactPoint)"
  },
  "docs/code_reference/class_reference/contactpointrange.html": {
    "href": "docs/code_reference/class_reference/contactpointrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : contactpointrange read-only var All : ContactPointRange Current : contactpoint read-only var Current : ContactPoint IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods ContactPointRange : Void constructor Name Type Description function ContactPointRange() ContactPointRange : Void constructor Name Type Description p0 contactpointrange function ContactPointRange(p0 : ContactPointRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/contactrange.html": {
    "href": "docs/code_reference/class_reference/contactrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : contactrange read-only var All : ContactRange Current : contactgraphedge read-only var Current : ContactGraphEdge IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods ContactRange : Void constructor Name Type Description function ContactRange() ContactRange : Void constructor Name Type Description p0 contactrange function ContactRange(p0 : ContactRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/contentcomponent.html": {
    "href": "docs/code_reference/class_reference/contentcomponent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes eventobject buildercomponent contentcopyright contenteditoroptions contenthistory contentnotes contenttags generatedarchetype geometryimport resourcetemplate texturecontent textureinfo Properties Methods"
  },
  "docs/code_reference/class_reference/contentcomposition.html": {
    "href": "docs/code_reference/class_reference/contentcomposition.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes contentitem audiocontent binarycontent datacontent fontcontent geometrycontent imagecontent textcontent Properties Methods"
  },
  "docs/code_reference/class_reference/contentconfig.html": {
    "href": "docs/code_reference/class_reference/contentconfig.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) Configuration component for content system. Used to find content paths and what default libraries to load. Methods Properties Base Classes Derived Classes Constructor component Properties Methods ContentConfig : Void constructor Name Type Description function ContentConfig()"
  },
  "docs/code_reference/class_reference/contenteditoroptions.html": {
    "href": "docs/code_reference/class_reference/contenteditoroptions.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Constructor ShowInEditor contentcomponent Properties ShowInEditor : boolean var ShowInEditor : Boolean Methods ContentEditorOptions : Void constructor Name Type Description function ContentEditorOptions()"
  },
  "docs/code_reference/class_reference/contenthistory.html": {
    "href": "docs/code_reference/class_reference/contenthistory.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Constructor Revisions contentcomponent Properties Revisions : revisions var Revisions : Revisions Methods ContentHistory : Void constructor Name Type Description function ContentHistory()"
  },
  "docs/code_reference/class_reference/contentitem.html": {
    "href": "docs/code_reference/class_reference/contentitem.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Name eventobject contentcomposition Properties Name : string read-only var Name : String Methods"
  },
  "docs/code_reference/class_reference/contentitemmetaoperations.html": {
    "href": "docs/code_reference/class_reference/contentitemmetaoperations.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes metaoperations Properties Methods"
  },
  "docs/code_reference/class_reference/contentlibrary.html": {
    "href": "docs/code_reference/class_reference/contentlibrary.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Object Properties Methods"
  },
  "docs/code_reference/class_reference/contentlibraryreference.html": {
    "href": "docs/code_reference/class_reference/contentlibraryreference.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes ContentLibraryName safeid32object Properties ContentLibraryName : string var ContentLibraryName : String Methods"
  },
  "docs/code_reference/class_reference/contentlibraryreferencearray.html": {
    "href": "docs/code_reference/class_reference/contentlibraryreferencearray.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/contentnotes.html": {
    "href": "docs/code_reference/class_reference/contentnotes.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Constructor Notes contentcomponent Properties Notes : string var Notes : String Methods ContentNotes : Void constructor Name Type Description function ContentNotes()"
  },
  "docs/code_reference/class_reference/contentpackage.html": {
    "href": "docs/code_reference/class_reference/contentpackage.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Author eventobject Description Name Tags Properties Author : string var Author : String Description : string var Description : String Name : string var Name : String Tags : string var Tags : String Methods"
  },
  "docs/code_reference/class_reference/contentsystem.html": {
    "href": "docs/code_reference/class_reference/contentsystem.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/contentsystemevent.html": {
    "href": "docs/code_reference/class_reference/contentsystemevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event ContentMeta Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/contenttags.html": {
    "href": "docs/code_reference/class_reference/contenttags.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Constructor contentcomponent Properties Methods ContentTags : Void constructor Name Type Description function ContentTags()"
  },
  "docs/code_reference/class_reference/contextmenuentry.html": {
    "href": "docs/code_reference/class_reference/contextmenuentry.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes AddCommandByName Icon safeid32eventobject contextmenuentrycommand AddDivider Name contextmenuentrydivider AddEntry contextmenuentrymenu Constructor Entries GetEntry RemoveEntry Properties Icon : string var Icon : String Name : string var Name : String Methods AddCommandByName : contextmenuentry Name Type Description commandName string function AddCommandByName(commandName : String) : ContextMenuEntry AddDivider : contextmenuentry Name Type Description function AddDivider() : ContextMenuEntry AddEntry : contextmenuentry Adds a new entry with the provided name with an icon if one is provided to this menu entries children. |Name|Type|Description| |---|---|---| |name|string| | function AddEntry(name : String) : ContextMenuEntry ContextMenuEntry : Void constructor Name Type Description function ContextMenuEntry() Entries : contextmenuentrychildrenrange Name Type Description function Entries() : ContextMenuEntryChildrenRange GetEntry : contextmenuentry Returns the children entry with the provided name if it exists and null otherwise. |Name|Type|Description| |---|---|---| |name|string| | function GetEntry(name : String) : ContextMenuEntry RemoveEntry : Void Remove the entry with the provided name from this menu entries children. |Name|Type|Description| |---|---|---| |name|string| | function RemoveEntry(name : String)"
  },
  "docs/code_reference/class_reference/contextmenuentrychildrenrange.html": {
    "href": "docs/code_reference/class_reference/contextmenuentrychildrenrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : contextmenuentrychildrenrange read-only var All : ContextMenuEntryChildrenRange Current : contextmenuentry read-only var Current : ContextMenuEntry IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods ContextMenuEntryChildrenRange : Void constructor Name Type Description function ContextMenuEntryChildrenRange() ContextMenuEntryChildrenRange : Void constructor Name Type Description p0 contextmenuentrychildrenrange function ContextMenuEntryChildrenRange(p0 : ContextMenuEntryChildrenRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/contextmenuentrycommand.html": {
    "href": "docs/code_reference/class_reference/contextmenuentrycommand.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes Constructor CommandName contextmenuentry Properties CommandName : string var CommandName : String Methods ContextMenuEntryCommand : Void constructor Name Type Description commandName string function ContextMenuEntryCommand(commandName : String)"
  },
  "docs/code_reference/class_reference/contextmenuentrydivider.html": {
    "href": "docs/code_reference/class_reference/contextmenuentrydivider.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes Constructor contextmenuentry Properties Methods ContextMenuEntryDivider : Void constructor Name Type Description function ContextMenuEntryDivider()"
  },
  "docs/code_reference/class_reference/contextmenuentrymenu.html": {
    "href": "docs/code_reference/class_reference/contextmenuentrymenu.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes Constructor MenuName contextmenuentry Properties MenuName : string var MenuName : String Methods ContextMenuEntryMenu : Void constructor Name Type Description menuName string function ContextMenuEntryMenu(menuName : String)"
  },
  "docs/code_reference/class_reference/contextmenuevent.html": {
    "href": "docs/code_reference/class_reference/contextmenuevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/convexmesh.html": {
    "href": "docs/code_reference/class_reference/convexmesh.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Physics (NOTE) A convex mesh meant for use with dynamic rigid bodies. Computes efficient contact information compared to a regular physics mesh. This mesh also defines a volume which means mass properties can be computed. Methods Properties Base Classes Derived Classes Constructor genericphysicsmesh CreateRuntime RuntimeClone Properties Methods ConvexMesh : Void constructor Name Type Description function ConvexMesh() CreateRuntime : convexmesh static Creates a ConvexMesh for run-time modifications. |Name|Type|Description| |---|---|---| function CreateRuntime() : ConvexMesh RuntimeClone : convexmesh Creates a clone of this mesh for run-time modifications. |Name|Type|Description| |---|---|---| function RuntimeClone() : ConvexMesh"
  },
  "docs/code_reference/class_reference/convexmeshcollider.html": {
    "href": "docs/code_reference/class_reference/convexmeshcollider.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Defines the collision volume for a convex mesh ( ConvexMesh resource). This collider has a volume and hence is able to work with a RigidBody. Methods Properties Base Classes Derived Classes Constructor ConvexMesh collider Properties ConvexMesh : convexmesh The convex mesh resource that defines the collision volume of this collider. var ConvexMesh : ConvexMesh Methods ConvexMeshCollider : Void constructor Name Type Description function ConvexMeshCollider()"
  },
  "docs/code_reference/class_reference/createdestroytool.html": {
    "href": "docs/code_reference/class_reference/createdestroytool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes BaseHeight heightmapsubtool PerlinAmplitude PerlinFrequency UsePerlinNoise Properties BaseHeight : real var BaseHeight : Real PerlinAmplitude : real var PerlinAmplitude : Real PerlinFrequency : real var PerlinFrequency : Real UsePerlinNoise : boolean var UsePerlinNoise : Boolean Methods"
  },
  "docs/code_reference/class_reference/creationtool.html": {
    "href": "docs/code_reference/class_reference/creationtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor Depth component DepthPlane ObjectToSpawn Offset PlacementMode Raycaster SnapDistance Snapping Properties Depth : real var Depth : Real DepthPlane : real var DepthPlane : Real ObjectToSpawn : archetype var ObjectToSpawn : Archetype Offset : real3 var Offset : Real3 PlacementMode : Placement var PlacementMode : Placement Raycaster : raycaster var Raycaster : Raycaster SnapDistance : real var SnapDistance : Real Snapping : boolean var Snapping : Boolean Methods CreationTool : Void constructor Name Type Description function CreationTool()"
  },
  "docs/code_reference/class_reference/crossblend.html": {
    "href": "docs/code_reference/class_reference/crossblend.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes SetNormalizedTimeScale Mode dualblendcrossblend SyncCadence TimeScaleFrom TimeScaleTo Type Properties Mode : AnimationBlendMode var Mode : AnimationBlendMode TimeScaleFrom : real var TimeScaleFrom : Real TimeScaleTo : real var TimeScaleTo : Real Type : AnimationBlendType var Type : AnimationBlendType Methods SetNormalizedTimeScale : Void Name Type Description p0 real p1 real p2 real function SetNormalizedTimeScale(p0 : Real, p1 : Real, p2 : Real) SyncCadence : Void Name Type Description function SyncCadence()"
  },
  "docs/code_reference/class_reference/curvecontrolpoint.html": {
    "href": "docs/code_reference/class_reference/curvecontrolpoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes curvedraggable Properties Methods"
  },
  "docs/code_reference/class_reference/curvedraggable.html": {
    "href": "docs/code_reference/class_reference/curvedraggable.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes widget curvecontrolpoint curvetangent Properties Methods"
  },
  "docs/code_reference/class_reference/curveevent.html": {
    "href": "docs/code_reference/class_reference/curveevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/curvetangent.html": {
    "href": "docs/code_reference/class_reference/curvetangent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes curvedraggable Properties Methods"
  },
  "docs/code_reference/class_reference/customaudionode.html": {
    "href": "docs/code_reference/class_reference/customaudionode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Uses a SoundBuffer to send audio data directly to the audio engine. Methods Properties Base Classes Derived Classes SendBuffer Channels soundnode SendMicCompressedData MinimumBufferSize SendMicUncompressedData SystemSampleRate SendPartialBuffer Properties Channels : integer The number of audio channels that will be in the buffer. var Channels : Integer MinimumBufferSize : integer read-only The minimum number of samples that should be sent when a NeedMoreSamples event is received. var MinimumBufferSize : Integer SystemSampleRate : integer read-only The sample rate currently being used by the audio system. var SystemSampleRate : Integer Methods SendBuffer : Void Sends a buffer of audio samples to the audio system for output. |Name|Type|Description| |---|---|---| |buffer|soundbuffer| | function SendBuffer(buffer : SoundBuffer) SendMicCompressedData : Void Name Type Description Array[byte] function SendMicCompressedData( : Array[Byte]) SendMicUncompressedData : Void Name Type Description Array[real] function SendMicUncompressedData( : Array[Real]) SendPartialBuffer : Void Sends a partial buffer of audio samples to the audio system for output. |Name|Type|Description| |---|---|---| |buffer|soundbuffer| | |startAtIndex|integer| | |howManySamples|integer| | function SendPartialBuffer(buffer : SoundBuffer, startAtIndex : Integer, howManySamples : Integer)"
  },
  "docs/code_reference/class_reference/customaudionodeevent.html": {
    "href": "docs/code_reference/class_reference/customaudionodeevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Sound Methods Properties Base Classes Derived Classes SamplesNeeded event Properties SamplesNeeded : integer var SamplesNeeded : Integer Methods"
  },
  "docs/code_reference/class_reference/customcollisioneventtracker.html": {
    "href": "docs/code_reference/class_reference/customcollisioneventtracker.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Allows a user to send out collision events that do not originate from the physics system. This includes determining when to send start/persisted/end events. This is primarily intended for use with a swept character controller where you never actually come into contact with objects. The objects you would have hit can be added to this so that the same logic can be used for swept and non-swept collision. Methods Properties Base Classes Derived Classes AddCollision component Constructor SendEvents Properties Methods AddCollision : Void Add a collision for this frame between ourself and the passed in collider. |Name|Type|Description| |---|---|---| |otherCollider|collider| | |worldPoint|real3| | |worldNormalTowardsOther|real3| | function AddCollision(otherCollider : Collider, worldPoint : Real3, worldNormalTowardsOther : Real3) CustomCollisionEventTracker : Void constructor Name Type Description function CustomCollisionEventTracker() SendEvents : Void Send out all of the events that have been queued up. This includes determining what should be started/persisted/ended events. These events are sent with the prefix that is passed in, e.g. if you pass in 'Collision' then CollisionStarted, CollisionPersisted, and CollisionEnded will be the event names. |Name|Type|Description| |---|---|---| |eventPrefix|string| | function SendEvents(eventPrefix : String)"
  },
  "docs/code_reference/class_reference/customconstraintinfo.html": {
    "href": "docs/code_reference/class_reference/customconstraintinfo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) Information to represent a constraint to be solved. The main information that needs to be set here is the Jacobian and error. A constraint will enforce that the relative velocities along the Jacobian are equal to zero (ignoring error correction or motors). Methods Properties Base Classes Derived Classes ComputeMotor Active referencecountedeventobject ComputeSpring Angular0 DetachFromOwner Angular1 IsOwned Baumgarte SetErrorAndBias Bias SetJacobian EffectiveMass Error Gamma Impulse Linear0 Linear1 MaxImpulse MinImpulse Owner SolvePosition Properties Active : boolean Is this constraint currently active? var Active : Boolean Angular0 : real3 Angular portion of objectA's Jacobian. var Angular0 : Real3 Angular1 : real3 Angular portion of objectB's Jacobian. var Angular1 : Real3 Baumgarte : real The baumgarte term used to correct error. This should typically be set in initialization (per constraint) and then left alone. Default value is 5. var Baumgarte : Real Bias : real The bias is used to apply energy into the system. Typically, bias is combined with Error and Baumgarte to fix error. Bias is also used for motors and springs to drive the constraint. var Bias : Real EffectiveMass : real The effective mass of the constraint. This is typically set by calling SetJacobian. var EffectiveMass : Real Error : real The error of the constraint. This should typically be set via the SetError function. var Error : Real Gamma : real Gamma is used to soften constraints. This should typically never be manually set. Instead, it is set when configuring the constraint to act like a spring. var Gamma : Real Impulse : real The total accumulated impulse of this constraint. If you want to not use warm-starting then clear this value every frame. var Impulse : Real Linear0 : real3 Linear portion of objectA's Jacobian. var Linear0 : Real3 Linear1 : real3 Linear portion of objectB's Jacobian. var Linear1 : Real3 MaxImpulse : real The max impulse magnitude allowed for the constraint. var MaxImpulse : Real MinImpulse : real The min impulse magnitude allowed for the constraint. var MinImpulse : Real Owner : customjoint read-only What joint currently owns this constraint. var Owner : CustomJoint SolvePosition : boolean Should this constraint solve position directly or use baumgarte correction? Toggling SolvePosition should be done before setting any other values (ideally in initialization). Setting a constraint to be a motor or a spring will turn off position correction as an error bias must be used to solve those scenarios. var SolvePosition : Boolean Methods ComputeMotor : Void Sets this constraint as a motor (i.e. a constraint that drives movement along the Jacobian direction at a certain speed). The motor has a min and max impulse value that can be solved (typically -value, +value). If you set this as a motor, you should do so last. Motors should typically be their own constraint unlike springs. |Name|Type|Description| |---|---|---| |targetSpeed|real| | |minImpulse|real| | |maxImpulse|real| | function ComputeMotor(targetSpeed : Real, minImpulse : Real, maxImpulse : Real) ComputeSpring : Void Given the currently set mass and error, fix the constraint to be soft (i.e. solve the constraint like a spring). The spring fixes the constraint using the given frequency (oscillations per second) and damping ratio (0 is no damping, 1 is critical damping). |Name|Type|Description| |---|---|---| |frequencyHz|real| | |dampRatio|real| | function ComputeSpring(frequencyHz : Real, dampRatio : Real) DetachFromOwner : Void Remove this constraint from whatever joint owns it. This is equivalent to \"this.Owner.RemoveConstraint(this)\". |Name|Type|Description| |---|---|---| function DetachFromOwner() IsOwned : boolean Is this constraint currently owned by a joint? (Equivalent to \"this.Owner != null\"). |Name|Type|Description| |---|---|---| function IsOwned() : Boolean SetErrorAndBias : Void Set the position error of the constraint. This also sets the bias of the constraint (used to actually correct the error). If you want to set this constraint as a motor you should not call this function (or call it first). If you want to set this as a spring then make sure you call this first. |Name|Type|Description| |---|---|---| |error|real| | function SetErrorAndBias(error : Real) SetJacobian : Void Set the Jacobian of this constraint (and the effective mass). |Name|Type|Description| |---|---|---| |linear0|real3| | |angular0|real3| | |linear1|real3| | |angular1|real3| | function SetJacobian(linear0 : Real3, angular0 : Real3, linear1 : Real3, angular1 : Real3)"
  },
  "docs/code_reference/class_reference/customjoint.html": {
    "href": "docs/code_reference/class_reference/customjoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A customizable joint that can be configured in script. The user can create constraints belonging to this joint and set the required values to solve them. Some basic constraint understanding is required. To compute constraints you should listen to Events.ComputeCustomJointInfo. Methods Properties Base Classes Derived Classes AddConstraint ConstraintCount joint ClearConstraints CreateConstraint Constructor GetConstraint RemoveConstraint Properties ConstraintCount : integer read-only Returns how many constraints this joint owns. var ConstraintCount : Integer Methods AddConstraint : Void Add a constraint to this joint. This will assert if a joint already owns this constraint. |Name|Type|Description| |---|---|---| |constraint|customconstraintinfo| | function AddConstraint(constraint : CustomConstraintInfo) ClearConstraints : Void Clear all constraints from this joint (so none will solve). |Name|Type|Description| |---|---|---| function ClearConstraints() CreateConstraint : customconstraintinfo Create a constraint that is attached to this joint. |Name|Type|Description| |---|---|---| function CreateConstraint() : CustomConstraintInfo CustomJoint : Void constructor Name Type Description function CustomJoint() GetConstraint : customconstraintinfo Returns the constraint at the given index. Will assert if the index is outside the constraint count range. |Name|Type|Description| |---|---|---| |index|integer| | function GetConstraint(index : Integer) : CustomConstraintInfo RemoveConstraint : Void If the given constraint belongs to this joint then remove it from the constraints to solve. |Name|Type|Description| |---|---|---| |constraint|customconstraintinfo| | function RemoveConstraint(constraint : CustomConstraintInfo)"
  },
  "docs/code_reference/class_reference/customjointblock.html": {
    "href": "docs/code_reference/class_reference/customjointblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods CustomJointBlock : Void constructor Name Type Description function CustomJointBlock()"
  },
  "docs/code_reference/class_reference/customjointevent.html": {
    "href": "docs/code_reference/class_reference/customjointevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Physics (NOTE) Sent by CustomJoint before solving constraints. Used to configure constraints before the physics system begins solving. Methods Properties Base Classes Derived Classes Dt event Owner Properties Dt : real The current frame's delta time. Use to setup the constraint if necessary. var Dt : Real Owner : customjoint The joint that sent this event. var Owner : CustomJoint Methods"
  },
  "docs/code_reference/class_reference/customphysicseffect.html": {
    "href": "docs/code_reference/class_reference/customphysicseffect.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A physics effect that sends events out so users can apply custom logic for forces. Methods Properties Base Classes Derived Classes Constructor physicseffect Properties Methods CustomPhysicsEffect : Void constructor Name Type Description function CustomPhysicsEffect()"
  },
  "docs/code_reference/class_reference/customphysicseffectevent.html": {
    "href": "docs/code_reference/class_reference/customphysicseffectevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Physics (NOTE) Event data for applying custom physics effects. Methods Properties Base Classes Derived Classes Constructor Dt event Effect RigidBody Properties Dt : real The timestep of the current physics frame (in seconds). var Dt : Real Effect : customphysicseffect The effect that sent out this event. var Effect : CustomPhysicsEffect RigidBody : rigidbody The RigidBody to apply forces to. var RigidBody : RigidBody Methods CustomPhysicsEffectEvent : Void constructor Name Type Description function CustomPhysicsEffectEvent()"
  },
  "docs/code_reference/class_reference/cylindercollider.html": {
    "href": "docs/code_reference/class_reference/cylindercollider.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Defines the collision volume for a cylinder defined by a height and radius. Methods Properties Base Classes Derived Classes Constructor Direction collider Height Radius WorldHeight WorldRadius Properties Direction : AxisDirection The direction that the height is defined along. Allows the user to change whether the cylinder's height is along the x, y, or z axis. var Direction : AxisDirection Height : real The local space distance from the top of the cylinder to the bottom. var Height : Real Radius : real The local space radius of the cylinder. var Radius : Real WorldHeight : real read-only The full height of the cylinder after scale is applied. var WorldHeight : Real WorldRadius : real read-only The radius of the cylinder after scale is applied. var WorldRadius : Real Methods CylinderCollider : Void constructor Name Type Description function CylinderCollider()"
  },
  "docs/code_reference/class_reference/databuilder.html": {
    "href": "docs/code_reference/class_reference/databuilder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes buildercomponent nadapluginbuilder Properties Methods"
  },
  "docs/code_reference/class_reference/datacontent.html": {
    "href": "docs/code_reference/class_reference/datacontent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes contentcomposition Properties Methods"
  },
  "docs/code_reference/class_reference/dataevent.html": {
    "href": "docs/code_reference/class_reference/dataevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/datareplaceevent.html": {
    "href": "docs/code_reference/class_reference/datareplaceevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes event cogreplaceevent Properties Methods"
  },
  "docs/code_reference/class_reference/dataresource.html": {
    "href": "docs/code_reference/class_reference/dataresource.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Engine (NOTE) A resource that is stored in our serialization data format and is directly edited by the editor. Methods Properties Base Classes Derived Classes Resource collisiongroup collisiontable colorgradient material netchannelconfig netpropertyconfig physicsmaterial physicssolverconfig rendergroup resourcetable samplecurve soundattenuator soundcue soundtag nadapluginsource Properties Methods"
  },
  "docs/code_reference/class_reference/dataresourceinheritance.html": {
    "href": "docs/code_reference/class_reference/dataresourceinheritance.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metadatainheritanceroot Properties Methods"
  },
  "docs/code_reference/class_reference/debugarc.html": {
    "href": "docs/code_reference/class_reference/debugarc.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Constructor Color End Mid OnTop Start ViewAligned ViewScaled ViewScaleOffset Properties Color : real4 var Color : Real4 End : real3 var End : Real3 Mid : real3 var Mid : Real3 OnTop : boolean var OnTop : Boolean Start : real3 var Start : Real3 ViewAligned : boolean var ViewAligned : Boolean ViewScaled : boolean var ViewScaled : Boolean ViewScaleOffset : real3 var ViewScaleOffset : Real3 Methods DebugArc : Void constructor Name Type Description function DebugArc() DebugArc : Void constructor Name Type Description start real3 mid real3 end real3 function DebugArc(start : Real3, mid : Real3, end : Real3)"
  },
  "docs/code_reference/class_reference/debugbox.html": {
    "href": "docs/code_reference/class_reference/debugbox.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Constructor Color Filled HalfExtents OnTop Position Rotation ViewAligned ViewScaled ViewScaleOffset Properties Color : real4 var Color : Real4 Filled : boolean var Filled : Boolean HalfExtents : real2 var HalfExtents : Real2 OnTop : boolean var OnTop : Boolean Position : real3 var Position : Real3 Rotation : quaternion var Rotation : Quaternion ViewAligned : boolean var ViewAligned : Boolean ViewScaled : boolean var ViewScaled : Boolean ViewScaleOffset : real3 var ViewScaleOffset : Real3 Methods DebugBox : Void constructor Name Type Description function DebugBox() DebugBox : Void constructor Name Type Description aabb aabb function DebugBox(aabb : Aabb) DebugBox : Void constructor Name Type Description position real3 halfExtents real function DebugBox(position : Real3, halfExtents : Real) DebugBox : Void constructor Name Type Description position real3 halfExtents real rotation quaternion function DebugBox(position : Real3, halfExtents : Real, rotation : Quaternion) DebugBox : Void constructor Name Type Description position real3 halfExtents real2 function DebugBox(position : Real3, halfExtents : Real2) DebugBox : Void constructor Name Type Description position real3 halfExtents real2 rotation quaternion function DebugBox(position : Real3, halfExtents : Real2, rotation : Quaternion)"
  },
  "docs/code_reference/class_reference/debugcapsule.html": {
    "href": "docs/code_reference/class_reference/debugcapsule.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Constructor Color End OnTop Radius Start ViewAligned ViewScaled ViewScaleOffset Properties Color : real4 var Color : Real4 End : real3 var End : Real3 OnTop : boolean var OnTop : Boolean Radius : real var Radius : Real Start : real3 var Start : Real3 ViewAligned : boolean var ViewAligned : Boolean ViewScaled : boolean var ViewScaled : Boolean ViewScaleOffset : real3 var ViewScaleOffset : Real3 Methods DebugCapsule : Void constructor Name Type Description function DebugCapsule() DebugCapsule : Void constructor Name Type Description start real3 end real3 radius real function DebugCapsule(start : Real3, end : Real3, radius : Real) DebugCapsule : Void constructor Name Type Description position real3 axis real3 height real radius real function DebugCapsule(position : Real3, axis : Real3, height : Real, radius : Real)"
  },
  "docs/code_reference/class_reference/debugcircle.html": {
    "href": "docs/code_reference/class_reference/debugcircle.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Constructor Axis Color OnTop Position Radius ViewAligned ViewScaled ViewScaleOffset Properties Axis : real3 var Axis : Real3 Color : real4 var Color : Real4 OnTop : boolean var OnTop : Boolean Position : real3 var Position : Real3 Radius : real var Radius : Real ViewAligned : boolean var ViewAligned : Boolean ViewScaled : boolean var ViewScaled : Boolean ViewScaleOffset : real3 var ViewScaleOffset : Real3 Methods DebugCircle : Void constructor Name Type Description function DebugCircle() DebugCircle : Void constructor Name Type Description position real3 axis real3 radius real function DebugCircle(position : Real3, axis : Real3, radius : Real)"
  },
  "docs/code_reference/class_reference/debugcone.html": {
    "href": "docs/code_reference/class_reference/debugcone.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Constructor Color Direction Length OnTop Position Radius ViewAligned ViewScaled ViewScaleOffset Properties Color : real4 var Color : Real4 Direction : real3 var Direction : Real3 Length : real var Length : Real OnTop : boolean var OnTop : Boolean Position : real3 var Position : Real3 Radius : real var Radius : Real ViewAligned : boolean var ViewAligned : Boolean ViewScaled : boolean var ViewScaled : Boolean ViewScaleOffset : real3 var ViewScaleOffset : Real3 Methods DebugCone : Void constructor Name Type Description function DebugCone() DebugCone : Void constructor Name Type Description position real3 direction real3 length real radius real function DebugCone(position : Real3, direction : Real3, length : Real, radius : Real)"
  },
  "docs/code_reference/class_reference/debugcylinder.html": {
    "href": "docs/code_reference/class_reference/debugcylinder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Constructor Color End OnTop Radius Start ViewAligned ViewScaled ViewScaleOffset Properties Color : real4 var Color : Real4 End : real3 var End : Real3 OnTop : boolean var OnTop : Boolean Radius : real var Radius : Real Start : real3 var Start : Real3 ViewAligned : boolean var ViewAligned : Boolean ViewScaled : boolean var ViewScaled : Boolean ViewScaleOffset : real3 var ViewScaleOffset : Real3 Methods DebugCylinder : Void constructor Name Type Description function DebugCylinder() DebugCylinder : Void constructor Name Type Description start real3 end real3 radius real function DebugCylinder(start : Real3, end : Real3, radius : Real) DebugCylinder : Void constructor Name Type Description position real3 axis real3 height real radius real function DebugCylinder(position : Real3, axis : Real3, height : Real, radius : Real)"
  },
  "docs/code_reference/class_reference/debugdraw.html": {
    "href": "docs/code_reference/class_reference/debugdraw.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Add Properties Methods Add : Void static Name Type Description debugarc function Add( : DebugArc) Add : Void static Name Type Description debugbox function Add( : DebugBox) Add : Void static Name Type Description debugcapsule function Add( : DebugCapsule) Add : Void static Name Type Description debugcircle function Add( : DebugCircle) Add : Void static Name Type Description debugcone function Add( : DebugCone) Add : Void static Name Type Description debugcylinder function Add( : DebugCylinder) Add : Void static Name Type Description debugfrustum function Add( : DebugFrustum) Add : Void static Name Type Description debugline function Add( : DebugLine) Add : Void static Name Type Description debuglinecross function Add( : DebugLineCross) Add : Void static Name Type Description debugobb function Add( : DebugObb) Add : Void static Name Type Description debugsphere function Add( : DebugSphere) Add : Void static Name Type Description debugtext function Add( : DebugText) Add : Void static Name Type Description debugtriangle function Add( : DebugTriangle) Add : Void static Name Type Description space debugarc function Add( : Space, : DebugArc) Add : Void static Name Type Description space debugbox function Add( : Space, : DebugBox) Add : Void static Name Type Description space debugcapsule function Add( : Space, : DebugCapsule) Add : Void static Name Type Description space debugcircle function Add( : Space, : DebugCircle) Add : Void static Name Type Description space debugcone function Add( : Space, : DebugCone) Add : Void static Name Type Description space debugcylinder function Add( : Space, : DebugCylinder) Add : Void static Name Type Description space debugfrustum function Add( : Space, : DebugFrustum) Add : Void static Name Type Description space debugline function Add( : Space, : DebugLine) Add : Void static Name Type Description space debuglinecross function Add( : Space, : DebugLineCross) Add : Void static Name Type Description space debugobb function Add( : Space, : DebugObb) Add : Void static Name Type Description space debugsphere function Add( : Space, : DebugSphere) Add : Void static Name Type Description space debugtext function Add( : Space, : DebugText) Add : Void static Name Type Description space debugtriangle function Add( : Space, : DebugTriangle)"
  },
  "docs/code_reference/class_reference/debugengineevent.html": {
    "href": "docs/code_reference/class_reference/debugengineevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/debugfrustum.html": {
    "href": "docs/code_reference/class_reference/debugfrustum.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Constructor Color OnTop ViewAligned ViewScaled ViewScaleOffset Properties Color : real4 var Color : Real4 OnTop : boolean var OnTop : Boolean ViewAligned : boolean var ViewAligned : Boolean ViewScaled : boolean var ViewScaled : Boolean ViewScaleOffset : real3 var ViewScaleOffset : Real3 Methods DebugFrustum : Void constructor Name Type Description function DebugFrustum() DebugFrustum : Void constructor Name Type Description p0 frustum function DebugFrustum(p0 : Frustum)"
  },
  "docs/code_reference/class_reference/debuggraphical.html": {
    "href": "docs/code_reference/class_reference/debuggraphical.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics Methods Properties Base Classes Derived Classes graphical debuggraphicalprimitive debuggraphicaltext Properties Methods"
  },
  "docs/code_reference/class_reference/debuggraphicalprimitive.html": {
    "href": "docs/code_reference/class_reference/debuggraphicalprimitive.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics Methods Properties Base Classes Derived Classes Constructor debuggraphical debuggraphicalthickline Properties Methods DebugGraphicalPrimitive : Void constructor Name Type Description function DebugGraphicalPrimitive()"
  },
  "docs/code_reference/class_reference/debuggraphicaltext.html": {
    "href": "docs/code_reference/class_reference/debuggraphicaltext.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics Methods Properties Base Classes Derived Classes Constructor debuggraphical Properties Methods DebugGraphicalText : Void constructor Name Type Description function DebugGraphicalText()"
  },
  "docs/code_reference/class_reference/debuggraphicalthickline.html": {
    "href": "docs/code_reference/class_reference/debuggraphicalthickline.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics Methods Properties Base Classes Derived Classes Constructor debuggraphicalprimitive Properties Methods DebugGraphicalThickLine : Void constructor Name Type Description function DebugGraphicalThickLine()"
  },
  "docs/code_reference/class_reference/debugline.html": {
    "href": "docs/code_reference/class_reference/debugline.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Constructor BoxHeads Color DualHeads End Filled HeadSize OnTop Start ViewAligned ViewScaled ViewScaleOffset Properties BoxHeads : boolean var BoxHeads : Boolean Color : real4 var Color : Real4 DualHeads : boolean var DualHeads : Boolean End : real3 var End : Real3 Filled : boolean var Filled : Boolean HeadSize : real var HeadSize : Real OnTop : boolean var OnTop : Boolean Start : real3 var Start : Real3 ViewAligned : boolean var ViewAligned : Boolean ViewScaled : boolean var ViewScaled : Boolean ViewScaleOffset : real3 var ViewScaleOffset : Real3 Methods DebugLine : Void constructor Name Type Description function DebugLine() DebugLine : Void constructor Name Type Description ray ray function DebugLine(ray : Ray) DebugLine : Void constructor Name Type Description ray ray t real function DebugLine(ray : Ray, t : Real) DebugLine : Void constructor Name Type Description start real3 end real3 function DebugLine(start : Real3, end : Real3) DebugLine : Void constructor Name Type Description start real3 end real3 headSize real function DebugLine(start : Real3, end : Real3, headSize : Real) DebugLine : Void constructor Name Type Description segment segment function DebugLine(segment : Segment)"
  },
  "docs/code_reference/class_reference/debuglinecross.html": {
    "href": "docs/code_reference/class_reference/debuglinecross.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Constructor Color HalfExtents OnTop Position ViewAligned ViewScaled ViewScaleOffset Properties Color : real4 var Color : Real4 HalfExtents : real var HalfExtents : Real OnTop : boolean var OnTop : Boolean Position : real3 var Position : Real3 ViewAligned : boolean var ViewAligned : Boolean ViewScaled : boolean var ViewScaled : Boolean ViewScaleOffset : real3 var ViewScaleOffset : Real3 Methods DebugLineCross : Void constructor Name Type Description function DebugLineCross() DebugLineCross : Void constructor Name Type Description position real3 halfExtents real function DebugLineCross(position : Real3, halfExtents : Real)"
  },
  "docs/code_reference/class_reference/debugobb.html": {
    "href": "docs/code_reference/class_reference/debugobb.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Constructor Color Corners Filled HalfExtents OnTop Position Rotation ViewAligned ViewScaled ViewScaleOffset Properties Color : real4 var Color : Real4 Corners : boolean var Corners : Boolean Filled : boolean var Filled : Boolean HalfExtents : real3 var HalfExtents : Real3 OnTop : boolean var OnTop : Boolean Position : real3 var Position : Real3 Rotation : quaternion var Rotation : Quaternion ViewAligned : boolean var ViewAligned : Boolean ViewScaled : boolean var ViewScaled : Boolean ViewScaleOffset : real3 var ViewScaleOffset : Real3 Methods DebugObb : Void constructor Name Type Description function DebugObb() DebugObb : Void constructor Name Type Description aabb aabb function DebugObb(aabb : Aabb) DebugObb : Void constructor Name Type Description position real3 halfExtents real function DebugObb(position : Real3, halfExtents : Real) DebugObb : Void constructor Name Type Description position real3 halfExtents real rotation quaternion function DebugObb(position : Real3, halfExtents : Real, rotation : Quaternion) DebugObb : Void constructor Name Type Description position real3 halfExtents real3 function DebugObb(position : Real3, halfExtents : Real3) DebugObb : Void constructor Name Type Description position real3 halfExtents real3 rotation quaternion function DebugObb(position : Real3, halfExtents : Real3, rotation : Quaternion) DebugObb : Void constructor Name Type Description position real3 halfExtents real3 rotation real3x3 function DebugObb(position : Real3, halfExtents : Real3, rotation : Real3x3)"
  },
  "docs/code_reference/class_reference/debugsettings.html": {
    "href": "docs/code_reference/class_reference/debugsettings.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine Methods Properties Base Classes Derived Classes Constructor MaxDebugObjects component Properties MaxDebugObjects : integer Maximum number of debug objects allowed at any one time to prevent accidentally running out of memory. var MaxDebugObjects : Integer Methods DebugSettings : Void constructor Name Type Description function DebugSettings()"
  },
  "docs/code_reference/class_reference/debugsphere.html": {
    "href": "docs/code_reference/class_reference/debugsphere.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Constructor Color Colored OnTop Position Radius ViewAligned ViewScaled ViewScaleOffset Properties Color : real4 var Color : Real4 Colored : boolean var Colored : Boolean OnTop : boolean var OnTop : Boolean Position : real3 var Position : Real3 Radius : real var Radius : Real ViewAligned : boolean var ViewAligned : Boolean ViewScaled : boolean var ViewScaled : Boolean ViewScaleOffset : real3 var ViewScaleOffset : Real3 Methods DebugSphere : Void constructor Name Type Description function DebugSphere() DebugSphere : Void constructor Name Type Description sphere debugsphere function DebugSphere(sphere : DebugSphere) DebugSphere : Void constructor Name Type Description position real3 radius real function DebugSphere(position : Real3, radius : Real)"
  },
  "docs/code_reference/class_reference/debugtext.html": {
    "href": "docs/code_reference/class_reference/debugtext.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Constructor Centered Color OnTop Position Rotation Text TextHeight ViewAligned ViewScaled ViewScaleOffset Properties Centered : boolean var Centered : Boolean Color : real4 var Color : Real4 OnTop : boolean var OnTop : Boolean Position : real3 var Position : Real3 Rotation : quaternion var Rotation : Quaternion Text : string var Text : String TextHeight : real var TextHeight : Real ViewAligned : boolean var ViewAligned : Boolean ViewScaled : boolean var ViewScaled : Boolean ViewScaleOffset : real3 var ViewScaleOffset : Real3 Methods DebugText : Void constructor Name Type Description function DebugText() DebugText : Void constructor Name Type Description position real3 textHeight real text string function DebugText(position : Real3, textHeight : Real, text : String)"
  },
  "docs/code_reference/class_reference/debugtriangle.html": {
    "href": "docs/code_reference/class_reference/debugtriangle.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Constructor Color Filled OnTop Point0 Point1 Point2 ViewAligned ViewScaled ViewScaleOffset Properties Color : real4 var Color : Real4 Filled : boolean var Filled : Boolean OnTop : boolean var OnTop : Boolean Point0 : real3 var Point0 : Real3 Point1 : real3 var Point1 : Real3 Point2 : real3 var Point2 : Real3 ViewAligned : boolean var ViewAligned : Boolean ViewScaled : boolean var ViewScaled : Boolean ViewScaleOffset : real3 var ViewScaleOffset : Real3 Methods DebugTriangle : Void constructor Name Type Description function DebugTriangle() DebugTriangle : Void constructor Name Type Description p0 real3 p1 real3 p2 real3 function DebugTriangle(p0 : Real3, p1 : Real3, p2 : Real3)"
  },
  "docs/code_reference/class_reference/defaultgamesetup.html": {
    "href": "docs/code_reference/class_reference/defaultgamesetup.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Gameplay (NOTE) Create the starting space and load the starting level into that space. Methods Properties Base Classes Derived Classes Constructor LoadEditingLevel component StartingLevel StartingSpace Properties LoadEditingLevel : boolean var LoadEditingLevel : Boolean StartingLevel : level var StartingLevel : Level StartingSpace : archetype var StartingSpace : Archetype Methods DefaultGameSetup : Void constructor Name Type Description function DefaultGameSetup()"
  },
  "docs/code_reference/class_reference/definitionset.html": {
    "href": "docs/code_reference/class_reference/definitionset.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Graphics Methods Properties Base Classes Derived Classes Resource Properties Methods"
  },
  "docs/code_reference/class_reference/delaynode.html": {
    "href": "docs/code_reference/class_reference/delaynode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Applies a delay filter to audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes InterpolateWetPercent Delay soundnode InterpolateWetValue FeedbackPercent FeedbackValue WetPercent WetValue Properties Delay : real The length of the delay, in seconds. var Delay : Real FeedbackPercent : real DEPRECATED The FeedbackValue property should be used instead. var FeedbackPercent : Real FeedbackValue : real The percentage of output (from 0 to 1.0f) which is fed back into the filter as input, creating an echo-like effect. var FeedbackValue : Real WetPercent : real DEPRECATED The WetValue property should be used instead. var WetPercent : Real WetValue : real The percentage of the node's output (0 - 1.0) which has the delay filter applied to it. var WetValue : Real Methods InterpolateWetPercent : Void DEPRECATED The InterpolateWetValue method should be used instead. |Name|Type|Description| |---|---|---| |wetPercent|real| | |time|real| | function InterpolateWetPercent(wetPercent : Real, time : Real) InterpolateWetValue : Void Interpolates the WetValue property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |wetPercent|real| | |time|real| | function InterpolateWetValue(wetPercent : Real, time : Real)"
  },
  "docs/code_reference/class_reference/depthsettings.html": {
    "href": "docs/code_reference/class_reference/depthsettings.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics (NOTE) Settings for how the depth buffer should control pixel output. Methods Properties Base Classes Derived Classes Constructor DepthCompareFunc DepthFailOp DepthFailOpBackFace DepthMode DepthPassOp DepthPassOpBackFace StencilCompareFunc StencilCompareFuncBackFace StencilFailOp StencilFailOpBackFace StencilMode StencilReadMask StencilReadMaskBackFace StencilTestValue StencilTestValueBackFace StencilWriteMask StencilWriteMaskBackFace Properties DepthCompareFunc : TextureCompareFunc var DepthCompareFunc : TextureCompareFunc DepthFailOp : StencilOp var DepthFailOp : StencilOp DepthFailOpBackFace : StencilOp var DepthFailOpBackFace : StencilOp DepthMode : DepthMode var DepthMode : DepthMode DepthPassOp : StencilOp var DepthPassOp : StencilOp DepthPassOpBackFace : StencilOp var DepthPassOpBackFace : StencilOp StencilCompareFunc : TextureCompareFunc var StencilCompareFunc : TextureCompareFunc StencilCompareFuncBackFace : TextureCompareFunc var StencilCompareFuncBackFace : TextureCompareFunc StencilFailOp : StencilOp var StencilFailOp : StencilOp StencilFailOpBackFace : StencilOp var StencilFailOpBackFace : StencilOp StencilMode : StencilMode var StencilMode : StencilMode StencilReadMask : byte Bit mask for buffer value and test value when being compared. var StencilReadMask : Byte StencilReadMaskBackFace : byte Bit mask for buffer value and test value when being compared, for triangle back faces if in separate mode. var StencilReadMaskBackFace : Byte StencilTestValue : byte Value that will be used to compare against the stencil buffer for all pixels. var StencilTestValue : Byte StencilTestValueBackFace : byte Value that will be used to compare against the stencil buffer for all pixels, for triangle back faces if in separate mode. var StencilTestValueBackFace : Byte StencilWriteMask : byte Bit mask for which bits in the buffer can be modified. var StencilWriteMask : Byte StencilWriteMaskBackFace : byte Bit mask for which bits in the buffer can be modified, for triangle back faces if in separate mode. var StencilWriteMaskBackFace : Byte Methods DepthSettings : Void constructor Name Type Description function DepthSettings() DepthSettings : Void constructor Name Type Description other depthsettings function DepthSettings(other : DepthSettings)"
  },
  "docs/code_reference/class_reference/developerconfig.html": {
    "href": "docs/code_reference/class_reference/developerconfig.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) Configuration component that Contains developer settings. Used to indicate a user is a developer. Methods Properties Base Classes Derived Classes Constructor CanModifyReadOnlyResources component DoubleEscapeQuit ProxyObjectsInPreviews Properties CanModifyReadOnlyResources : boolean Allows editing and saving of read only resources. var CanModifyReadOnlyResources : Boolean DoubleEscapeQuit : boolean Double escape to close the engine. var DoubleEscapeQuit : Boolean ProxyObjectsInPreviews : boolean Whether or not script objects are proxied in the preview windows. var ProxyObjectsInPreviews : Boolean Methods DeveloperConfig : Void constructor Name Type Description function DeveloperConfig()"
  },
  "docs/code_reference/class_reference/directblend.html": {
    "href": "docs/code_reference/class_reference/directblend.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes dualblenddirectblend Properties Methods"
  },
  "docs/code_reference/class_reference/directproperty.html": {
    "href": "docs/code_reference/class_reference/directproperty.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes propertywidget Properties Methods"
  },
  "docs/code_reference/class_reference/docklayout.html": {
    "href": "docs/code_reference/class_reference/docklayout.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes layout Properties Methods"
  },
  "docs/code_reference/class_reference/document.html": {
    "href": "docs/code_reference/class_reference/document.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/documentationlibrary.html": {
    "href": "docs/code_reference/class_reference/documentationlibrary.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/documenteditor.html": {
    "href": "docs/code_reference/class_reference/documenteditor.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes texteditor Properties Methods"
  },
  "docs/code_reference/class_reference/documentmanager.html": {
    "href": "docs/code_reference/class_reference/documentmanager.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/documentresource.html": {
    "href": "docs/code_reference/class_reference/documentresource.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Engine (NOTE) Resource that can be edited as text and is searchable. Methods Properties Base Classes Derived Classes Resource textblock nadadocumentresource Properties Methods"
  },
  "docs/code_reference/class_reference/drageffect.html": {
    "href": "docs/code_reference/class_reference/drageffect.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Applies drag or damping forces to slow down an object's linear and angular velocity. Drag is computed as a simple linear approximation of the drag force. Damping is a linear approximation of a drag acceleration. This means that damping affects all objects the same (mass independent). Methods Properties Base Classes Derived Classes Constructor AngularDamping physicseffect AngularDrag LinearDamping LinearDrag Properties AngularDamping : real Angular damping coefficient for applying an angular drag acceleration (accel = -kw). Note: this affects objects the same regardless of mass. var AngularDamping : Real AngularDrag : real The angular drag coefficient for applying an angular drag force (T = -kw). var AngularDrag : Real LinearDamping : real Linear damping coefficient for applying a linear drag acceleration (accel = -bv). Note: this affects objects the same regardless of mass. var LinearDamping : Real LinearDrag : real The linear drag coefficient for applying a linear drag force (F = -bv). var LinearDrag : Real Methods DragEffect : Void constructor Name Type Description function DragEffect()"
  },
  "docs/code_reference/class_reference/dragselectsubtool.html": {
    "href": "docs/code_reference/class_reference/dragselectsubtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes springsubtool selectorspringsubtool Properties Methods"
  },
  "docs/code_reference/class_reference/dualblendchainnode.html": {
    "href": "docs/code_reference/class_reference/dualblendchainnode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes From animationnode chainnode To Properties From : animationnode var From : AnimationNode To : animationnode var To : AnimationNode Methods"
  },
  "docs/code_reference/class_reference/dualblendcrossblend.html": {
    "href": "docs/code_reference/class_reference/dualblendcrossblend.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes From animationnode crossblend To Properties From : animationnode var From : AnimationNode To : animationnode var To : AnimationNode Methods"
  },
  "docs/code_reference/class_reference/dualblenddirectblend.html": {
    "href": "docs/code_reference/class_reference/dualblenddirectblend.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes From animationnode directblend To Properties From : animationnode var From : AnimationNode To : animationnode var To : AnimationNode Methods"
  },
  "docs/code_reference/class_reference/dualblendselectivenode.html": {
    "href": "docs/code_reference/class_reference/dualblendselectivenode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes From animationnode selectivenode To Properties From : animationnode var From : AnimationNode To : animationnode var To : AnimationNode Methods"
  },
  "docs/code_reference/class_reference/dynamicaabbtreebroadphase.html": {
    "href": "docs/code_reference/class_reference/dynamicaabbtreebroadphase.html",
    "title": "Properties | ZilchEngine",
    "keywords": "SpatialPartition Methods Properties Base Classes Derived Classes ibroadphase Properties Methods"
  },
  "docs/code_reference/class_reference/dynamicbroadphasepropertyextension.html": {
    "href": "docs/code_reference/class_reference/dynamicbroadphasepropertyextension.html",
    "title": "Properties | ZilchEngine",
    "keywords": "SpatialPartition Methods Properties Base Classes Derived Classes editorindexedstringarray Properties Methods"
  },
  "docs/code_reference/class_reference/dynamicmotor.html": {
    "href": "docs/code_reference/class_reference/dynamicmotor.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Controls an object's movement using joints. This allows creating a physics based character controller that reacts to physics (joints, forces, collisions, etc...). The motor controls relative velocity with respect to a target object frame. Methods Properties Base Classes Derived Classes Constructor Active component MoveInDirection MaxMoveImpulse SetReferenceFrameToObject SetReferenceFrameToWorld Properties Active : boolean Should physics restrict the movement of this object? var Active : Boolean MaxMoveImpulse : real What is the max impulse allowed for controlling movement. var MaxMoveImpulse : Real Methods DynamicMotor : Void constructor Name Type Description function DynamicMotor() MoveInDirection : Void Attempts to move the body in the given direction. |Name|Type|Description| |---|---|---| |direction|real3| | |up|real3| | function MoveInDirection(direction : Real3, up : Real3) SetReferenceFrameToObject : Void Compute the relative velocity with respect to a target object. Used to control movement on moving platforms. |Name|Type|Description| |---|---|---| |object|cog| | function SetReferenceFrameToObject(object : Cog) SetReferenceFrameToWorld : Void Compute relative velocity with respect to the world. Used to signify that an absolute world speed is desired. |Name|Type|Description| |---|---|---| function SetReferenceFrameToWorld()"
  },
  "docs/code_reference/class_reference/edgedocklayout.html": {
    "href": "docs/code_reference/class_reference/edgedocklayout.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes layout Properties Methods"
  },
  "docs/code_reference/class_reference/editingamefilter.html": {
    "href": "docs/code_reference/class_reference/editingamefilter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking Methods Properties Base Classes Derived Classes metapropertyfilter Properties Methods"
  },
  "docs/code_reference/class_reference/editor.html": {
    "href": "docs/code_reference/class_reference/editor.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes AddResource Actions multidock editormain AddResourceType EditGameSession CreateDockableWindow EditLevel DisplayGameSession EditSpace EditGameSpaces OperationQueue EditResource ProjectCog ExecuteCommand Selection PauseGame PlayGame PlayNewGame PlaySingleGame SelectPrimary SelectTool SetFocus SetGamePaused SetMainPropertyViewObject StepGame StopGame ToggleGamePaused ZoomOnGame Properties Actions : actions read-only var Actions : Actions EditGameSession : gamesession read-only var EditGameSession : GameSession EditLevel : level read-only var EditLevel : Level EditSpace : space read-only var EditSpace : Space OperationQueue : operationqueue read-only var OperationQueue : OperationQueue ProjectCog : cog read-only var ProjectCog : Cog Selection : metaselection read-only var Selection : MetaSelection Methods AddResource : Void Name Type Description function AddResource() AddResourceType : Void Name Type Description p0 boundtype p1 string function AddResourceType(p0 : BoundType, p1 : String) CreateDockableWindow : Void Name Type Description p0 string p1 cameraviewport p2 real2 p3 boolean p4 DockArea function CreateDockableWindow(p0 : String, p1 : CameraViewport, p2 : Real2, p3 : Boolean, p4 : DockArea) DisplayGameSession : Void Name Type Description p0 string p1 gamesession function DisplayGameSession(p0 : String, p1 : GameSession) EditGameSpaces : Void Name Type Description function EditGameSpaces() EditResource : Void Name Type Description p0 Resource function EditResource(p0 : Resource) ExecuteCommand : Void Name Type Description p0 string function ExecuteCommand(p0 : String) PauseGame : Void Name Type Description function PauseGame() PlayGame : gamesession Name Type Description p0 PlayGameOptions p1 boolean p2 boolean function PlayGame(p0 : PlayGameOptions, p1 : Boolean, p2 : Boolean) : GameSession PlayNewGame : gamesession Name Type Description function PlayNewGame() : GameSession PlaySingleGame : gamesession Name Type Description function PlaySingleGame() : GameSession SelectPrimary : Void Name Type Description p0 anyhandle function SelectPrimary(p0 : AnyHandle) SelectTool : Void Name Type Description p0 string function SelectTool(p0 : String) SetFocus : Void Name Type Description p0 space function SetFocus(p0 : Space) SetGamePaused : Void Name Type Description p0 boolean function SetGamePaused(p0 : Boolean) SetMainPropertyViewObject : Void Name Type Description p0 Object function SetMainPropertyViewObject(p0 : Object) StepGame : Void Name Type Description function StepGame() StopGame : Void Name Type Description function StopGame() ToggleGamePaused : Void Name Type Description function ToggleGamePaused() ZoomOnGame : Void Name Type Description p0 gamesession function ZoomOnGame(p0 : GameSession)"
  },
  "docs/code_reference/class_reference/editorcameracontroller.html": {
    "href": "docs/code_reference/class_reference/editorcameracontroller.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor ControlMode component Reset HorizontalAngle LookDistance LookTarget MoveSensitivity VerticalAngle Properties ControlMode : ControlMode var ControlMode : ControlMode HorizontalAngle : real var HorizontalAngle : Real LookDistance : real var LookDistance : Real LookTarget : real3 var LookTarget : Real3 MoveSensitivity : real var MoveSensitivity : Real VerticalAngle : real var VerticalAngle : Real Methods EditorCameraController : Void constructor Name Type Description function EditorCameraController() Reset : Void Name Type Description function Reset()"
  },
  "docs/code_reference/class_reference/editorconfig.html": {
    "href": "docs/code_reference/class_reference/editorconfig.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) Configuration for the editor. Methods Properties Base Classes Derived Classes Constructor ZilchHubUsername component Properties ZilchHubUsername : string var ZilchHubUsername : String Methods EditorConfig : Void constructor Name Type Description function EditorConfig()"
  },
  "docs/code_reference/class_reference/editorevent.html": {
    "href": "docs/code_reference/class_reference/editorevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes Editor event Properties Editor : editor var Editor : Editor Methods"
  },
  "docs/code_reference/class_reference/editorflags.html": {
    "href": "docs/code_reference/class_reference/editorflags.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine Methods Properties Base Classes Derived Classes component Properties Methods"
  },
  "docs/code_reference/class_reference/editorindexedstringarray.html": {
    "href": "docs/code_reference/class_reference/editorindexedstringarray.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes editorpropertyextension dynamicbroadphasepropertyextension StaticBroadphasePropertyExtension Properties Methods"
  },
  "docs/code_reference/class_reference/editormain.html": {
    "href": "docs/code_reference/class_reference/editormain.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes editor Properties Methods"
  },
  "docs/code_reference/class_reference/editorpackageloader.html": {
    "href": "docs/code_reference/class_reference/editorpackageloader.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/editorpropertyextension.html": {
    "href": "docs/code_reference/class_reference/editorpropertyextension.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes metaattribute cogarchetypeextension CompositionLabelExtension editorindexedstringarray editorrange editorrotationbasis metaeditorresource Properties Methods"
  },
  "docs/code_reference/class_reference/editorrange.html": {
    "href": "docs/code_reference/class_reference/editorrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Increment editorpropertyextension editorslider Max Min Properties Increment : real var Increment : Real Max : real var Max : Real Min : real var Min : Real Methods"
  },
  "docs/code_reference/class_reference/editorrotationbasis.html": {
    "href": "docs/code_reference/class_reference/editorrotationbasis.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes editorpropertyextension Properties Methods"
  },
  "docs/code_reference/class_reference/editorsettings.html": {
    "href": "docs/code_reference/class_reference/editorsettings.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine Methods Properties Base Classes Derived Classes Constructor AutoUpdateContentChanges component ViewCube ViewCubeSize Properties AutoUpdateContentChanges : boolean var AutoUpdateContentChanges : Boolean ViewCube : boolean Show/hide the orientation view cube. var ViewCube : Boolean ViewCubeSize : real Size in pixels of the viewport the view cube is shown in. var ViewCubeSize : Real Methods EditorSettings : Void constructor Constructor. |Name|Type|Description| |---|---|---| function EditorSettings()"
  },
  "docs/code_reference/class_reference/editorslider.html": {
    "href": "docs/code_reference/class_reference/editorslider.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes editorrange Properties Methods"
  },
  "docs/code_reference/class_reference/editorviewport.html": {
    "href": "docs/code_reference/class_reference/editorviewport.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/edittext.html": {
    "href": "docs/code_reference/class_reference/edittext.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes widget Properties Methods"
  },
  "docs/code_reference/class_reference/ellipsoidcollider.html": {
    "href": "docs/code_reference/class_reference/ellipsoidcollider.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Defines the collision volume for an ellipsoid (3 dimensional ellipse) defined by three radius values. Methods Properties Base Classes Derived Classes Constructor Radii collider WorldRadii Properties Radii : real3 The x, y, and z radius of the ellipsoid. var Radii : Real3 WorldRadii : real3 read-only The radii of the ellipsoid after transform is applied (scale and rotation). var WorldRadii : Real3 Methods EllipsoidCollider : Void constructor Name Type Description function EllipsoidCollider()"
  },
  "docs/code_reference/class_reference/engine.html": {
    "href": "docs/code_reference/class_reference/engine.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes CrashEngine GameSessions eventobject CreateGameSession CreateGameSessionFromArchetype DebugBreak GetCurrentInputDevice RebuildArchetypes Terminate Properties GameSessions : gamesessionrange read-only var GameSessions : GameSessionRange Methods CrashEngine : Void Name Type Description function CrashEngine() CreateGameSession : gamesession Name Type Description function CreateGameSession() : GameSession CreateGameSessionFromArchetype : gamesession Name Type Description p0 archetype function CreateGameSessionFromArchetype(p0 : Archetype) : GameSession DebugBreak : Void Name Type Description function DebugBreak() GetCurrentInputDevice : InputDevice Name Type Description function GetCurrentInputDevice() : InputDevice RebuildArchetypes : Void Name Type Description p0 archetype function RebuildArchetypes(p0 : Archetype) Terminate : Void Name Type Description function Terminate()"
  },
  "docs/code_reference/class_reference/environment.html": {
    "href": "docs/code_reference/class_reference/environment.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes GetEnvironmentalVariable CommandLine Object GetParsedArgument Properties CommandLine : string var CommandLine : String Methods GetEnvironmentalVariable : string Name Type Description p0 string function GetEnvironmentalVariable(p0 : String) : String GetParsedArgument : string Name Type Description p0 string function GetParsedArgument(p0 : String) : String"
  },
  "docs/code_reference/class_reference/equalizernode.html": {
    "href": "docs/code_reference/class_reference/equalizernode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Applied volume changes to specific frequency bands in the audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes InterpolateAllBands Band1Gain soundnode Band2Gain Band3Gain HighPassGain LowPassGain Properties Band1Gain : real The volume adjustment applied to frequencies within the band centered at 150 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them. var Band1Gain : Real Band2Gain : real The volume adjustment applied to frequencies within the band centered at 600 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them. var Band2Gain : Real Band3Gain : real The volume adjustment applied to frequencies within the band centered at 2500 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them. var Band3Gain : Real HighPassGain : real The volume adjustment applied to frequencies above 5000 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them. var HighPassGain : Real LowPassGain : real The volume adjustment applied to frequencies below 80 Hz in the node's input. Values above 1.0 will boost these frequencies while values less than 1.0 will reduce them. var LowPassGain : Real Methods InterpolateAllBands : Void Sets the volume adjustment of all bands (the parameters in order are low pass, band 1, band 2, band 3, high pass) over the number of seconds passed in as the final parameter. |Name|Type|Description| |---|---|---| |lowPass|real| | |band1|real| | |band2|real| | |band3|real| | |highPass|real| | |timeToInterpolate|real| | function InterpolateAllBands(lowPass : Real, band1 : Real, band2 : Real, band3 : Real, highPass : Real, timeToInterpolate : Real)"
  },
  "docs/code_reference/class_reference/event.html": {
    "href": "docs/code_reference/class_reference/event.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Meta (NOTE) Base event class. All events types inherit from this class. Methods Properties Base Classes Derived Classes Terminate EventId ThreadSafeId32Object acquirenethostinfo alternatesearchcompletedevent animationgraphevent areaevent asyncprocessevent audiobytedataevent audiofloatdataevent backgroundtaskevent basecollisionevent blockingtaskevent bugreporterresponse castfilterevent chromepopupevent coginitializerevent cogpathevent colorevent CommandCaptureContextEvent connectionevent consoletextevent contentsystemevent contextmenuevent curveevent customaudionodeevent customjointevent customphysicseffectevent dataevent datareplaceevent debugengineevent editorevent fileeditevent focusevent gameevent gamepadevent gizmoevent gizmoraytestevent graphicalevent graphicalsortevent handleableevent heightmapevent hierarchyevent highlightborderevent inputdeviceevent jointevent joystickevent keyboardevent keyboardtextevent keyframeevent mainwindowtransformevent messageboxevent metadropevent metalibraryevent midievent modalbuttonevent modalconfirmevent mouseevent netchannelpropertychange neteventreceived neteventsent netgamestarted nethostlistupdate nethostrecordevent nethostupdate netlevelstarted netlinkconnected netlinkdisconnected netobjectoffline netobjectonline netpeerclosed netpeeropened netpeerreceivedconnectrequest netpeerreceivedconnectresponse netpeerreceiveduseraddrequest netpeerreceiveduseraddresponse netpeersentconnectrequest netpeersentconnectresponse netpeersentuseraddrequest netpeersentuseraddresponse netuseracquiredobjectownership netuserlostobjectownership netuserownerchanged notifyevent objectevent objectlinkevent objectlinkpointchangedevent objectpollevent operationqueueevent osfileselection osmouseevent oswindowevent particleevent postaddresourceevent progressevent propertyevent querymodifiedsaveevent RegisterCppNetProperties rendertasksevent resourceevent resourcelistevent savingevent searchviewevent selectionchangedevent selecttoolfrustumevent sendableevent shaderinputsevent soundevent soundinstanceevent splineevent tabmodifiedevent tabrenamedevent tagevent texteditorevent textevent textupdatedevent tileviewevent toolgizmoevent tooluievent trackevent treeevent treeviewheaderaddedevent typeevent uifocusevent uitransformupdateevent updateevent valueevent webbrowserevent webresponseevent nadacompiledevent nadacompileevent nadacompilefragmentevent nadaevent nadaprecompilationevent Properties EventId : string read-only var EventId : String Methods Terminate : Void Stops the event from being sent to any other connections. |Name|Type|Description| |---|---|---| function Terminate()"
  },
  "docs/code_reference/class_reference/eventbundle.html": {
    "href": "docs/code_reference/class_reference/eventbundle.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking (NOTE) Event Bundle. Serialized event storage container. Methods Properties Base Classes Derived Classes AddEvent GameSession Object Clear IsEmpty Constructor GetEvents RemoveEvent Properties GameSession : gamesession Returns the game session. var GameSession : GameSession IsEmpty : boolean read-only Returns true if the event bundle is empty (doesn't contain any events), else false. var IsEmpty : Boolean Methods AddEvent : boolean Adds the event to back of the event bundle. Returns true if successful, else false (an event of that type has already been added). |Name|Type|Description| |---|---|---| |event|event| | function AddEvent(event : Event) : Boolean Clear : Void Clears the event bundle. |Name|Type|Description| |---|---|---| function Clear() EventBundle : Void constructor Constructors. |Name|Type|Description| |---|---|---| function EventBundle() EventBundle : Void constructor Constructors. |Name|Type|Description| |---|---|---| |event|event| | function EventBundle(event : Event) EventBundle : Void constructor Constructors. |Name|Type|Description| |---|---|---| |rhs|eventbundle| | function EventBundle(rhs : EventBundle) EventBundle : Void constructor Constructors. |Name|Type|Description| |---|---|---| |gameSession|gamesession| | function EventBundle(gameSession : GameSession) EventBundle : Void constructor Constructors. |Name|Type|Description| |---|---|---| |gameSession|gamesession| | |event|event| | function EventBundle(gameSession : GameSession, event : Event) GetEvents : eventrange Returns all the events that have been added to the event bundle. |Name|Type|Description| |---|---|---| function GetEvents() : EventRange RemoveEvent : boolean Removes the event specified from the event bundle. Returns true if successful, else false (an event of that type has already been added). |Name|Type|Description| |---|---|---| |event|event| | function RemoveEvent(event : Event) : Boolean RemoveEvent : boolean Removes the event specified from the event bundle. Returns true if successful, else false (an event of that type has already been added). |Name|Type|Description| |---|---|---| ||string| | function RemoveEvent( : String) : Boolean"
  },
  "docs/code_reference/class_reference/eventdirectorywatcher.html": {
    "href": "docs/code_reference/class_reference/eventdirectorywatcher.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/eventobject.html": {
    "href": "docs/code_reference/class_reference/eventobject.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Object animationeditordata backgroundtasks blockingwebrequest colorscheme commandmanager contentcomponent contentitem contentpackage contentsystem document documentationlibrary documentmanager editorpackageloader engine eventdirectorywatcher gamepad gamepads importoptions job joystick joysticks keyboard LauncherDebuggerCommunication LauncherSingletonCommunication mouse multiconvexmeshpropertyviewinfo multimanager referencecountedeventobject referencecountedsafeid32eventobject referencecountedsafeid64eventobject referencecountedthreadsafeid32eventobject referencecountedthreadsafeid64eventobject resourcesystem richanimation safeid32eventobject safeid64eventobject shortcuts simpledebuggerlistener springpointproxy stresstest system tcpsocket threadsafeid32eventobject threadsafeid64eventobject tool tracknode tweakables webbrowsermanager widget widgetmanager nadaobject Properties Methods"
  },
  "docs/code_reference/class_reference/eventrange.html": {
    "href": "docs/code_reference/class_reference/eventrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : eventrange read-only var All : EventRange Current : event read-only var Current : Event IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods EventRange : Void constructor Name Type Description function EventRange() EventRange : Void constructor Name Type Description p0 eventrange function EventRange(p0 : EventRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/expandernode.html": {
    "href": "docs/code_reference/class_reference/expandernode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes AttackMillisec soundnode InputGainDecibels KneeWidth OutputGainDecibels Ratio ReleaseMillisec ThresholdDecibels Properties AttackMillisec : real The time for the expander to ramp to full effect after the input reaches the threshold. var AttackMillisec : Real InputGainDecibels : real The volume adjustment applied to the audio input, in decibels. var InputGainDecibels : Real KneeWidth : real The knee width of the expander, in decibels. var KneeWidth : Real OutputGainDecibels : real The volume adjustment applied to the expander output, in decibels. var OutputGainDecibels : Real Ratio : real The ratio of the volume reduction applied by the expander. var Ratio : Real ReleaseMillisec : real The time for the expander to ramp from full effect to off after the input goes above the threshold. var ReleaseMillisec : Real ThresholdDecibels : real The threshold, in decibels, at which the volume of the input is affected by the expander. var ThresholdDecibels : Real Methods"
  },
  "docs/code_reference/class_reference/factory.html": {
    "href": "docs/code_reference/class_reference/factory.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes system Properties Methods"
  },
  "docs/code_reference/class_reference/fileeditevent.html": {
    "href": "docs/code_reference/class_reference/fileeditevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/filllayout.html": {
    "href": "docs/code_reference/class_reference/filllayout.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes layout Properties Methods"
  },
  "docs/code_reference/class_reference/fixedanglejoint.html": {
    "href": "docs/code_reference/class_reference/fixedanglejoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Locks the orientation of two objects together. Used when two objects should always rotate in unison. Typically not used by itself, but useful as a proof of concept for joints that use this functionality internally. Limits, motors, and springs should most likely not be used on this. Add on definitions: Limit: A limit will provide a min/max angle on every axis that the objects must be between. Motor: A motor will attempt to drive the rotation on every axis forward. Spring: A spring will make the rotations on every axis at the bounds springy. Methods Properties Base Classes Derived Classes Constructor LocalBasisA joint LocalBasisB Properties LocalBasisA : quaternion The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . var LocalBasisA : Quaternion LocalBasisB : quaternion The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . var LocalBasisB : Quaternion Methods FixedAngleJoint : Void constructor Name Type Description function FixedAngleJoint()"
  },
  "docs/code_reference/class_reference/fixedanglejointblock.html": {
    "href": "docs/code_reference/class_reference/fixedanglejointblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods FixedAngleJointBlock : Void constructor Name Type Description function FixedAngleJointBlock()"
  },
  "docs/code_reference/class_reference/flangernode.html": {
    "href": "docs/code_reference/class_reference/flangernode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Applies a flanger filter to audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes FeedbackPercent soundnode FeedbackValue MaxDelayMillisec ModulationFrequency Properties FeedbackPercent : real DEPRECATED The FeedbackValue property should be used instead. var FeedbackPercent : Real FeedbackValue : real The percentage of output (0 - 1.0) which is fed back into the filter as input. var FeedbackValue : Real MaxDelayMillisec : real The maximum delay reached by the modulation. It will oscillate between 0 and this value at the frequency set by the ModulationFrequency property. var MaxDelayMillisec : Real ModulationFrequency : real The frequency of the oscillator which varies the modulation. var ModulationFrequency : Real Methods"
  },
  "docs/code_reference/class_reference/flattentool.html": {
    "href": "docs/code_reference/class_reference/flattentool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Height heightmanipulationtool SampleNormal SampleOnMouseDown SlopeNormal Properties Height : real var Height : Real SampleNormal : boolean var SampleNormal : Boolean SampleOnMouseDown : boolean var SampleOnMouseDown : Boolean SlopeNormal : real3 var SlopeNormal : Real3 Methods"
  },
  "docs/code_reference/class_reference/floatingcomposite.html": {
    "href": "docs/code_reference/class_reference/floatingcomposite.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite popup Properties Methods"
  },
  "docs/code_reference/class_reference/floweffect.html": {
    "href": "docs/code_reference/class_reference/floweffect.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Applies a force to make an object move at a target speed in a given direction. This can also be used to pull the object towards the center of the flow (the axis in the flow direction centered at the effect). Used to model a river or a tractor beam. Methods Properties Base Classes Derived Classes Constructor AttractSpeed physicseffect AttractToFlowCenter FlowDirection FlowSpeed LocalForce MaxAttractForce MaxFlowForce WorldFlowDirection Properties AttractSpeed : real The target speed for an object to be pulled towards the center of the flow. var AttractSpeed : Real AttractToFlowCenter : boolean Determines if the flow field will attract objects towards the center of the field. This can be used to create a tractor beam effect that will keep the object inside of the flow field. var AttractToFlowCenter : Boolean FlowDirection : real3 The direction that the field is flowing. This can be defined in world or local space. var FlowDirection : Real3 FlowSpeed : real The target speed of objects in the flow field. var FlowSpeed : Real LocalForce : boolean Determines if the flow direction is in the local space of the object. var LocalForce : Boolean MaxAttractForce : real The max force that can be used to reach the target attract speed. var MaxAttractForce : Real MaxFlowForce : real The max force that can be used to reach the target flow speed. var MaxFlowForce : Real WorldFlowDirection : real3 read-only The direction that the field is flowing in world space. var WorldFlowDirection : Real3 Methods FlowEffect : Void constructor Name Type Description function FlowEffect()"
  },
  "docs/code_reference/class_reference/focusevent.html": {
    "href": "docs/code_reference/class_reference/focusevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/font.html": {
    "href": "docs/code_reference/class_reference/font.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Graphics Methods Properties Base Classes Derived Classes Resource Properties Methods"
  },
  "docs/code_reference/class_reference/fontbuilder.html": {
    "href": "docs/code_reference/class_reference/fontbuilder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes buildercomponent Properties Methods"
  },
  "docs/code_reference/class_reference/fontcontent.html": {
    "href": "docs/code_reference/class_reference/fontcontent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes contentcomposition Properties Methods"
  },
  "docs/code_reference/class_reference/forceeffect.html": {
    "href": "docs/code_reference/class_reference/forceeffect.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A force effect that is applied in a given direction (local or world space). This is used to create force regions that will push objects in a given direction. This can also be used on a rigid body to push an object in it's forward direction (e.g a missile) if applied locally. Note: this is always applied at the center of mass of the object. If a more rocket like effect is desired see ThrustEffect. Methods Properties Base Classes Derived Classes Constructor basicdirectioneffect Properties Methods ForceEffect : Void constructor Name Type Description function ForceEffect()"
  },
  "docs/code_reference/class_reference/formattedinplacetext.html": {
    "href": "docs/code_reference/class_reference/formattedinplacetext.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Constructor Properties Methods FormattedInPlaceText : Void constructor Name Type Description function FormattedInPlaceText() FormattedInPlaceText : Void constructor Name Type Description p0 formattedinplacetext function FormattedInPlaceText(p0 : FormattedInPlaceText)"
  },
  "docs/code_reference/class_reference/frameratesettings.html": {
    "href": "docs/code_reference/class_reference/frameratesettings.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) Settings for how the frame rate of the engine should be controlled. Methods Properties Base Classes Derived Classes Constructor FrameRate component LimitFrameRate VerticalSync Properties FrameRate : integer How many frames per second the engine should be limited at. var FrameRate : Integer LimitFrameRate : boolean If the engine should limit the frame rate. var LimitFrameRate : Boolean VerticalSync : boolean If the frame rate should sync with the monitor's refresh rate, superseded by LimitFrameRate. var VerticalSync : Boolean Methods FrameRateSettings : Void constructor Name Type Description function FrameRateSettings()"
  },
  "docs/code_reference/class_reference/frustum.html": {
    "href": "docs/code_reference/class_reference/frustum.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Constructor Get GetAabb Set Properties Methods Frustum : Void constructor Name Type Description function Frustum() Frustum : Void constructor Name Type Description p0 frustum function Frustum(p0 : Frustum) Get : plane Name Type Description p0 integer function Get(p0 : Integer) : Plane GetAabb : aabb Name Type Description function GetAabb() : Aabb Set : Void Name Type Description p0 integer p1 plane function Set(p0 : Integer, p1 : Plane)"
  },
  "docs/code_reference/class_reference/gameevent.html": {
    "href": "docs/code_reference/class_reference/gameevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine (NOTE) Event type used by the GameSession. Methods Properties Base Classes Derived Classes Game event Handled LevelName Space Properties Game : gamesession GameSession Object. var Game : GameSession Handled : boolean Has this event been handled? Used to for the engine to poll for Request Quit and other operations. var Handled : Boolean LevelName : string var LevelName : String Space : space Space related to his event. var Space : Space Methods"
  },
  "docs/code_reference/class_reference/gamepad.html": {
    "href": "docs/code_reference/class_reference/gamepad.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) Game pad is a object for getting game pad input. Methods Properties Base Classes Derived Classes IsButtonHeld GamepadIndex eventobject IsButtonPressed IsActive IsButtonReleased LeftStick TimeButtonHeld LeftStickDelta Vibrate LeftTrigger RightStick RightStickDelta RightTrigger Properties GamepadIndex : integer Index of this gamepad. var GamepadIndex : Integer IsActive : boolean Is this controller turned on and plugged in. var IsActive : Boolean LeftStick : real2 Current offset [-1,1] from the center of the left stick. var LeftStick : Real2 LeftStickDelta : real2 Change in the left stick this frame. var LeftStickDelta : Real2 LeftTrigger : real Value of how much the Left Trigger is down. Range [0,1]. var LeftTrigger : Real RightStick : real2 Current offset [-1,1] from the center of the right stick. var RightStick : Real2 RightStickDelta : real2 Change in the right stick this frame. var RightStickDelta : Real2 RightTrigger : real Value of how much the Right Trigger is down. Range [0,1]. var RightTrigger : Real Methods IsButtonHeld : boolean Is the button currently being held down. |Name|Type|Description| |---|---|---| |index|integer| | function IsButtonHeld(index : Integer) : Boolean IsButtonPressed : boolean Has the button just been pressed this frame. |Name|Type|Description| |---|---|---| |index|integer| | function IsButtonPressed(index : Integer) : Boolean IsButtonReleased : boolean Is the button just been released. |Name|Type|Description| |---|---|---| |index|integer| | function IsButtonReleased(index : Integer) : Boolean TimeButtonHeld : real How long has this button been held down. |Name|Type|Description| |---|---|---| |index|integer| | function TimeButtonHeld(index : Integer) : Real Vibrate : Void Vibrate this controller for a given time. Speed is a value between zero and one. |Name|Type|Description| |---|---|---| |time|real| | |LeftSpeed|real| | |RightSpeed|real| | function Vibrate(time : Real, LeftSpeed : Real, RightSpeed : Real)"
  },
  "docs/code_reference/class_reference/gamepadevent.html": {
    "href": "docs/code_reference/class_reference/gamepadevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine (NOTE) Gamepad events are send when a game pad button state is changed. Methods Properties Base Classes Derived Classes Button event FlickDirection FlickedStick Gamepad Properties Button : integer Button that was just pressed down or released up. var Button : Integer FlickDirection : real2 The direction of the stick that was flicked (normalized) var FlickDirection : Real2 FlickedStick : FlickedStick When responding to the 'GamepadStickFlicked' event, this will be set to the stick that was flicked. var FlickedStick : FlickedStick Gamepad : gamepad Gamepad that generated this event. var Gamepad : Gamepad Methods"
  },
  "docs/code_reference/class_reference/gamepads.html": {
    "href": "docs/code_reference/class_reference/gamepads.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) Gamepads is a collection of gamepads. Methods Properties Base Classes Derived Classes GetGamePad MaxGamepadCount eventobject PauseVibration ResumeVibration Properties MaxGamepadCount : integer read-only Gets the maximum number of supported gamepads. var MaxGamepadCount : Integer Methods GetGamePad : gamepad Get the gamepad for a given index from [0, GamepadCount]. |Name|Type|Description| |---|---|---| |gamepadIndex|integer| | function GetGamePad(gamepadIndex : Integer) : Gamepad PauseVibration : Void Pause Vibration on all gamepads. |Name|Type|Description| |---|---|---| function PauseVibration() ResumeVibration : Void Resume vibration on all gamepads. |Name|Type|Description| |---|---|---| function ResumeVibration()"
  },
  "docs/code_reference/class_reference/gamesession.html": {
    "href": "docs/code_reference/class_reference/gamesession.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) The GameSession manages all spaces and data for a a game. Methods Properties Base Classes Derived Classes CreateNamedSpace AllSpaces cog CreateSpace Focused FindAllSpacesByName FullScreen FindSpaceByName Paused Constructor Resolution IsEditorMode Pause Quit RequestQuit Start Properties AllSpaces : spacemapvaluerange read-only var AllSpaces : SpaceMapValueRange Focused : boolean read-only var Focused : Boolean FullScreen : boolean read-only var FullScreen : Boolean Paused : boolean Controls if the game session is paused which prevents updates to all spaces owned by this game. var Paused : Boolean Resolution : real2 read-only var Resolution : Real2 Methods CreateNamedSpace : space Create a space from an archetype with the given name. |Name|Type|Description| |---|---|---| |name|string| | |archetype|archetype| | function CreateNamedSpace(name : String, archetype : Archetype) : Space CreateSpace : space Create a space in the game. Use the archetype's name. |Name|Type|Description| |---|---|---| |archetype|archetype| | function CreateSpace(archetype : Archetype) : Space FindAllSpacesByName : spacemapvaluerange Name Type Description name string function FindAllSpacesByName(name : String) : SpaceMapValueRange FindSpaceByName : space Find a named space. |Name|Type|Description| |---|---|---| |name|string| | function FindSpaceByName(name : String) : Space GameSession : Void constructor Name Type Description function GameSession() IsEditorMode : boolean Name Type Description function IsEditorMode() : Boolean Pause : Void Pauses the game session which prevents updates to all spaces owned by this game. |Name|Type|Description| |---|---|---| function Pause() Quit : Void Quit the game and exit the engine if not in editor. |Name|Type|Description| |---|---|---| function Quit() RequestQuit : Void Request to quit sending out the GameRequestQuit event. |Name|Type|Description| |---|---|---| function RequestQuit() Start : Void Start the game. |Name|Type|Description| |---|---|---| function Start()"
  },
  "docs/code_reference/class_reference/gamesessionrange.html": {
    "href": "docs/code_reference/class_reference/gamesessionrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : gamesessionrange read-only var All : GameSessionRange Current : gamesession read-only var Current : GameSession IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods GameSessionRange : Void constructor Name Type Description function GameSessionRange() GameSessionRange : Void constructor Name Type Description p0 gamesessionrange function GameSessionRange(p0 : GameSessionRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/gamewidget.html": {
    "href": "docs/code_reference/class_reference/gamewidget.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/gearjoint.html": {
    "href": "docs/code_reference/class_reference/gearjoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A gear connects two joints on two objects together. Either joint can be a prismatic or a revolute. A gear ratio is used to bind the two joints together. Limits, motors, and springs should not be used on this. Methods Properties Base Classes Derived Classes Constructor Constant joint JointA JointAPath JointB JointBPath Ratio Properties Constant : real The initial offset of the gear ratio. var Constant : Real JointA : cog The joint connected to ObjectA that the gear operates on. var JointA : Cog JointAPath : cogpath The joint connected to ObjectA that the gear operates on. var JointAPath : CogPath JointB : cog The joint connected to ObjectB that the gear operates on. var JointB : Cog JointBPath : cogpath The joint connected to ObjectB that the gear operates on. var JointBPath : CogPath Ratio : real The gear ratio that the two constraints are bound with. var Ratio : Real Methods GearJoint : Void constructor Name Type Description function GearJoint()"
  },
  "docs/code_reference/class_reference/gearjointblock.html": {
    "href": "docs/code_reference/class_reference/gearjointblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods GearJointBlock : Void constructor Name Type Description function GearJointBlock()"
  },
  "docs/code_reference/class_reference/generalsearchview.html": {
    "href": "docs/code_reference/class_reference/generalsearchview.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/generatedarchetype.html": {
    "href": "docs/code_reference/class_reference/generatedarchetype.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Constructor contentcomponent Properties Methods GeneratedArchetype : Void constructor Name Type Description function GeneratedArchetype()"
  },
  "docs/code_reference/class_reference/generatedwavenode.html": {
    "href": "docs/code_reference/class_reference/generatedwavenode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Plays audio using the specified type of generated wave. Methods Properties Base Classes Derived Classes InterpolateDecibels Decibels soundnode InterpolateVolume SquareWavePulseValue InterpolateWaveFrequency Volume Play WaveFrequency Stop WaveType Properties Decibels : real The volume adjustment, in decibels, that will be applied to the sound when it plays. A value of 0 does not affect the sound; 6 will double the sound's volume, -6 will halve it, and -100 is effectively the same as a Volume of 0. var Decibels : Real SquareWavePulseValue : real The percentage of the square wave (from 0 to 1.0) which should be up. This will have no effect if a different wave type is chosen. var SquareWavePulseValue : Real Volume : real The volume adjustment that will be applied to the sound when it plays. A value of 1 does not affect the sound; 2 will double the sound's volume, 0.5 will halve it, and 0 will make the sound inaudible. var Volume : Real WaveFrequency : real The frequency of the generated sound wave. This value will have no effect if the Noise type is chosen. var WaveFrequency : Real WaveType : SynthWaveType The type of sound wave used to generate the audio. Possible types are Sine, Square, Saw, Triangle, and Noise (randomly generated white noise). var WaveType : SynthWaveType Methods InterpolateDecibels : Void Interpolates the Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |decibels|real| | |interpolationTime|real| | function InterpolateDecibels(decibels : Real, interpolationTime : Real) InterpolateVolume : Void Interpolates the Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |volume|real| | |interpolationTime|real| | function InterpolateVolume(volume : Real, interpolationTime : Real) InterpolateWaveFrequency : Void Interpolates the WaveFrequency property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. This method will have no effect if the Noise type is chosen. |Name|Type|Description| |---|---|---| |frequency|real| | |time|real| | function InterpolateWaveFrequency(frequency : Real, time : Real) Play : Void Starts playing the generated audio. |Name|Type|Description| |---|---|---| function Play() Stop : Void Stops playing the generated audio. |Name|Type|Description| |---|---|---| function Stop()"
  },
  "docs/code_reference/class_reference/genericphysicsmesh.html": {
    "href": "docs/code_reference/class_reference/genericphysicsmesh.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Physics (NOTE) Base class of mesh type physics resources. Stores the actual mesh (no optimization structures) and information about the mesh such as mass and inertia. Methods Properties Base Classes Derived Classes UpdateAndNotifyIfModified Indices Resource convexmesh Validate Vertices physicsmesh Properties Indices : physicsmeshindexdata read-only The index buffer data of this mesh. var Indices : PhysicsMeshIndexData Vertices : physicsmeshvertexdata read-only The vertex buffer data of this mesh. var Vertices : PhysicsMeshVertexData Methods UpdateAndNotifyIfModified : Void Rebuild all extra mesh information if it is currently modified. This includes things like the center of mass, volume, aabb, edge info and more (some derived types may have a mid-phase, etc...) |Name|Type|Description| |---|---|---| function UpdateAndNotifyIfModified() Validate : boolean Check if the mesh is valid. Optionally throw a script exception if it is invalid. |Name|Type|Description| |---|---|---| |throwExceptionIfInvalid|boolean| | function Validate(throwExceptionIfInvalid : Boolean) : Boolean"
  },
  "docs/code_reference/class_reference/geometrycontent.html": {
    "href": "docs/code_reference/class_reference/geometrycontent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes contentcomposition Properties Methods"
  },
  "docs/code_reference/class_reference/geometryimport.html": {
    "href": "docs/code_reference/class_reference/geometryimport.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Constructor ChangeBasis contentcomponent CollapsePivots OriginOffset ScaleFactor XBasisTo YBasisTo ZBasisTo Properties ChangeBasis : boolean var ChangeBasis : Boolean CollapsePivots : boolean var CollapsePivots : Boolean OriginOffset : real3 var OriginOffset : Real3 ScaleFactor : real var ScaleFactor : Real XBasisTo : BasisType var XBasisTo : BasisType YBasisTo : BasisType var YBasisTo : BasisType ZBasisTo : BasisType var ZBasisTo : BasisType Methods GeometryImport : Void constructor Name Type Description function GeometryImport()"
  },
  "docs/code_reference/class_reference/geometryoptions.html": {
    "href": "docs/code_reference/class_reference/geometryoptions.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes ChangeBasis Object CollapsePivots CreateArchetype FlipWindingOrder GenerateSmoothNormals GenerateTangentSpace ImportAnimations ImportMeshes ImportTextures InvertUvYAxis OriginOffset PhysicsImport ScaleConversion ScaleFactor SmoothingAngleDegreesThreshold XBasisTo YBasisTo ZBasisTo Properties ChangeBasis : boolean var ChangeBasis : Boolean CollapsePivots : boolean var CollapsePivots : Boolean CreateArchetype : boolean var CreateArchetype : Boolean FlipWindingOrder : boolean var FlipWindingOrder : Boolean GenerateSmoothNormals : boolean var GenerateSmoothNormals : Boolean GenerateTangentSpace : boolean var GenerateTangentSpace : Boolean ImportAnimations : boolean var ImportAnimations : Boolean ImportMeshes : boolean var ImportMeshes : Boolean ImportTextures : boolean var ImportTextures : Boolean InvertUvYAxis : boolean var InvertUvYAxis : Boolean OriginOffset : real3 var OriginOffset : Real3 PhysicsImport : PhysicsImport var PhysicsImport : PhysicsImport ScaleConversion : ScaleConversion var ScaleConversion : ScaleConversion ScaleFactor : real var ScaleFactor : Real SmoothingAngleDegreesThreshold : real var SmoothingAngleDegreesThreshold : Real XBasisTo : BasisType var XBasisTo : BasisType YBasisTo : BasisType var YBasisTo : BasisType ZBasisTo : BasisType var ZBasisTo : BasisType Methods"
  },
  "docs/code_reference/class_reference/geometryresourceentry.html": {
    "href": "docs/code_reference/class_reference/geometryresourceentry.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Object Properties Methods"
  },
  "docs/code_reference/class_reference/gizmo.html": {
    "href": "docs/code_reference/class_reference/gizmo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor (NOTE) Registers itself with the GizmoSpace. This allows GizmoSpace to keep track of which Gizmo the mouse is over, as well as send other input events directly to Gizmos. Methods Properties Base Classes Derived Classes Constructor Active component EditingObject ForwardEventsToChildren MouseOver Properties Active : boolean If set to false, it will not receive input events. var Active : Boolean EditingObject : cog read-only Needed? var EditingObject : Cog ForwardEventsToChildren : boolean You may want to manually forward the input events to specific children. var ForwardEventsToChildren : Boolean MouseOver : boolean read-only Whether or not the mouse is currently over the gizmo. var MouseOver : Boolean Methods Gizmo : Void constructor Constructor. |Name|Type|Description| |---|---|---| function Gizmo()"
  },
  "docs/code_reference/class_reference/gizmocreator.html": {
    "href": "docs/code_reference/class_reference/gizmocreator.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor GizmoArchetype component Properties GizmoArchetype : archetype var GizmoArchetype : Archetype Methods GizmoCreator : Void constructor Name Type Description function GizmoCreator()"
  },
  "docs/code_reference/class_reference/gizmodrag.html": {
    "href": "docs/code_reference/class_reference/gizmodrag.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor AutoDrag component DragActive DragDistance DragMode GrabMode GrabPoint LineDirection NormalInWorld PlaneNormal Properties AutoDrag : boolean var AutoDrag : Boolean DragActive : boolean read-only var DragActive : Boolean DragDistance : real var DragDistance : Real DragMode : GizmoDragMode var DragMode : GizmoDragMode GrabMode : GizmoGrabMode var GrabMode : GizmoGrabMode GrabPoint : real3 read-only var GrabPoint : Real3 LineDirection : real3 var LineDirection : Real3 NormalInWorld : boolean var NormalInWorld : Boolean PlaneNormal : real3 var PlaneNormal : Real3 Methods GizmoDrag : Void constructor Name Type Description function GizmoDrag()"
  },
  "docs/code_reference/class_reference/gizmoevent.html": {
    "href": "docs/code_reference/class_reference/gizmoevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes Finished event gizmoupdateevent Gizmo objecttransformgizmoevent OperationQueue Source ViewportMouseEvent Properties Finished : boolean read-only var Finished : Boolean Gizmo : cog read-only var Gizmo : Cog OperationQueue : operationqueue read-only var OperationQueue : OperationQueue Source : component read-only var Source : Component ViewportMouseEvent : viewportmouseevent read-only var ViewportMouseEvent : ViewportMouseEvent Methods"
  },
  "docs/code_reference/class_reference/gizmoraytestevent.html": {
    "href": "docs/code_reference/class_reference/gizmoraytestevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/gizmospace.html": {
    "href": "docs/code_reference/class_reference/gizmospace.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor component Properties Methods GizmoSpace : Void constructor Name Type Description function GizmoSpace()"
  },
  "docs/code_reference/class_reference/gizmoupdateevent.html": {
    "href": "docs/code_reference/class_reference/gizmoupdateevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes ConstrainedWorldDelta gizmoevent ringgizmoevent ConstrainedWorldMovement rotategizmoupdateevent InitialGrabPoint scalegizmoupdateevent MouseWorldDelta translategizmoupdateevent MouseWorldMovement Properties ConstrainedWorldDelta : real3 var ConstrainedWorldDelta : Real3 ConstrainedWorldMovement : real3 var ConstrainedWorldMovement : Real3 InitialGrabPoint : real3 var InitialGrabPoint : Real3 MouseWorldDelta : real3 var MouseWorldDelta : Real3 MouseWorldMovement : real3 var MouseWorldMovement : Real3 Methods"
  },
  "docs/code_reference/class_reference/granularsynthnode.html": {
    "href": "docs/code_reference/class_reference/granularsynthnode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes Play BufferScanRate soundnode SetSound GrainDelay Stop GrainDelayVariance GrainLength GrainLengthVariance GrainPanningValue GrainPanningVariance GrainResampleRate GrainResampleRateVariance GrainVolume GrainVolumeVariance RandomLocationValue WindowAttack WindowRelease WindowType Properties BufferScanRate : real The rate at which the synthesizer scans the buffer as it creates grains. A value of 1.0 will move through the audio data at the same rate as it would normally be played, 0.5 will move at half speed, and -1.0 will move at normal speed backward. A value of 0.0 will make the synthesizer repeat the same audio continuously. var BufferScanRate : Real GrainDelay : integer The number of milliseconds to wait before playing another grain. var GrainDelay : Integer GrainDelayVariance : integer The variance for randomizing the grain delay, in milliseconds. var GrainDelayVariance : Integer GrainLength : integer The length of a grain, in milliseconds. var GrainLength : Integer GrainLengthVariance : integer The variance for randomizing the grain length, in milliseconds. var GrainLengthVariance : Integer GrainPanningValue : real The value used to pan the grains left or right. A value of 0 will be heard equally from the left and right, 1.0 will be heard only on the right, and -1.0 will be only left. var GrainPanningValue : Real GrainPanningVariance : real The variance for randomizing the grain panning value. var GrainPanningVariance : Real GrainResampleRate : real The rate at which grains resample their audio data. A value of 1.0 will play normally, 0.5 will play at half speed, and -1.0 will play at normal speed backward. Cannot be 0. var GrainResampleRate : Real GrainResampleRateVariance : real The variance for randomizing the grain resample rate. var GrainResampleRateVariance : Real GrainVolume : real The volume modifier applied to the grains. var GrainVolume : Real GrainVolumeVariance : real The variance for randomizing the grain volume. var GrainVolumeVariance : Real RandomLocationValue : real The value for controlling how many grains have randomized starting positions in the audio. A value of 0 will be completely sequential, while 1.0 will be completely random. var RandomLocationValue : Real WindowAttack : integer The window attack time, in milliseconds. Does not have an effect on some windows. var WindowAttack : Integer WindowRelease : integer The window release time, in milliseconds. Does not have an effect on some windows. var WindowRelease : Integer WindowType : GranularSynthWindows The type of window, or volume envelope, used for each grain. var WindowType : GranularSynthWindows Methods Play : Void Starts playing new grains. |Name|Type|Description| |---|---|---| function Play() SetSound : Void Sets the Sound resource that will be used for the grains, along with an optional start and stop time. If the stopTime is 0.0, all audio from the Sound will be used. |Name|Type|Description| |---|---|---| |sound|sound| | |startTime|real| | |stopTime|real| | function SetSound(sound : Sound, startTime : Real, stopTime : Real) Stop : Void Stops playing new grains but continues to play current ones. |Name|Type|Description| |---|---|---| function Stop()"
  },
  "docs/code_reference/class_reference/graphical.html": {
    "href": "docs/code_reference/class_reference/graphical.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Base interface for components that require rendering. Methods Properties Base Classes Derived Classes GroupSortValue component basesprite LocalAabbCenter debuggraphical LocalAabbHalfExtents heightmapmodel Material model OverrideBoundingBox particlesystem ShaderInputs skinnedmodel ViewCulling VisibilityEvents Visible WorldAabb Properties GroupSortValue : integer Can be used by a RenderGroup to define draw order, from lowest to highest. var GroupSortValue : Integer LocalAabbCenter : real3 Center of the bounding box defined in local space, world transform will be applied. var LocalAabbCenter : Real3 LocalAabbHalfExtents : real3 Half extents of the bounding box defined in local space, world transform will be applied. var LocalAabbHalfExtents : Real3 Material : material The composition of shader fragments that determines how the graphical is rendered. var Material : Material OverrideBoundingBox : boolean Manually set the bounding box that is used for frustum culling. var OverrideBoundingBox : Boolean ShaderInputs : shaderinputs List of shader inputs to be manually overridden only on this object. var ShaderInputs : ShaderInputs ViewCulling : boolean If the graphical should not be drawn when its bounding volume is outside of the view frustum. var ViewCulling : Boolean VisibilityEvents : boolean If object receives events when entering/exiting the view of an active camera. var VisibilityEvents : Boolean Visible : boolean If the graphical should be drawn. var Visible : Boolean WorldAabb : aabb read-only The world space axis aligned bounding volume that is used for frustum culling. var WorldAabb : Aabb Methods"
  },
  "docs/code_reference/class_reference/graphicalentry.html": {
    "href": "docs/code_reference/class_reference/graphicalentry.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes SetGraphicalSortValue Cog Properties Cog : cog read-only var Cog : Cog Methods SetGraphicalSortValue : Void Name Type Description p0 integer function SetGraphicalSortValue(p0 : Integer)"
  },
  "docs/code_reference/class_reference/graphicalentryrange.html": {
    "href": "docs/code_reference/class_reference/graphicalentryrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : graphicalentryrange read-only var All : GraphicalEntryRange Current : graphicalentry read-only var Current : GraphicalEntry IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods GraphicalEntryRange : Void constructor Name Type Description function GraphicalEntryRange() GraphicalEntryRange : Void constructor Name Type Description p0 graphicalentryrange function GraphicalEntryRange(p0 : GraphicalEntryRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/graphicalevent.html": {
    "href": "docs/code_reference/class_reference/graphicalevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Graphics (NOTE) Event for changes of visibility state. Methods Properties Base Classes Derived Classes ViewingObject event Properties ViewingObject : cog The viewing CameraViewport for EnterView/ExitView. var ViewingObject : Cog Methods"
  },
  "docs/code_reference/class_reference/graphicalrangeinterface.html": {
    "href": "docs/code_reference/class_reference/graphicalrangeinterface.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics (NOTE) A list for custom specifying which Graphicals and in what draw order for a RenderPass. Methods Properties Base Classes Derived Classes Add Count Clear Constructor Properties Count : integer read-only Current number of Graphicals in the list. var Count : Integer Methods Add : Void Add a Graphical to the list. |Name|Type|Description| |---|---|---| |graphical|graphical| | function Add(graphical : Graphical) Clear : Void Remove all Graphicals from the list. |Name|Type|Description| |---|---|---| function Clear() GraphicalRangeInterface : Void constructor Name Type Description function GraphicalRangeInterface() GraphicalRangeInterface : Void constructor Name Type Description graphicalrangeinterface function GraphicalRangeInterface( : GraphicalRangeInterface)"
  },
  "docs/code_reference/class_reference/graphicalsortevent.html": {
    "href": "docs/code_reference/class_reference/graphicalsortevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Graphics Methods Properties Base Classes Derived Classes GraphicalEntries event RenderGroup Properties GraphicalEntries : graphicalentryrange read-only var GraphicalEntries : GraphicalEntryRange RenderGroup : rendergroup read-only var RenderGroup : RenderGroup Methods"
  },
  "docs/code_reference/class_reference/graphics.html": {
    "href": "docs/code_reference/class_reference/graphics.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes DriverSupport Properties DriverSupport : graphicsdriversupport read-only static var DriverSupport : GraphicsDriverSupport Methods"
  },
  "docs/code_reference/class_reference/graphicsdriversupport.html": {
    "href": "docs/code_reference/class_reference/graphicsdriversupport.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes MultiTargetBlend SamplerObjects TextureCompression Properties MultiTargetBlend : boolean read-only var MultiTargetBlend : Boolean SamplerObjects : boolean read-only var SamplerObjects : Boolean TextureCompression : boolean read-only var TextureCompression : Boolean Methods"
  },
  "docs/code_reference/class_reference/graphicsengine.html": {
    "href": "docs/code_reference/class_reference/graphicsengine.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes system Properties Methods"
  },
  "docs/code_reference/class_reference/graphicsraycastprovider.html": {
    "href": "docs/code_reference/class_reference/graphicsraycastprovider.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes Constructor MultiSelectGraphical raycastprovider VisibleOnly Properties MultiSelectGraphical : boolean var MultiSelectGraphical : Boolean VisibleOnly : boolean var VisibleOnly : Boolean Methods GraphicsRaycastProvider : Void constructor Name Type Description function GraphicsRaycastProvider()"
  },
  "docs/code_reference/class_reference/graphicsspace.html": {
    "href": "docs/code_reference/class_reference/graphicsspace.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Core space component that manages all interactions between graphics related objects. Methods Properties Base Classes Derived Classes Constructor Active component RandomSeed Seed Properties Active : boolean If graphics for this Space should be running. var Active : Boolean RandomSeed : boolean If the random number generator used by graphics objects should be seeded randomly. var RandomSeed : Boolean Seed : integer Value to seed the random number generator with. var Seed : Integer Methods GraphicsSpace : Void constructor Name Type Description function GraphicsSpace()"
  },
  "docs/code_reference/class_reference/gravityeffect.html": {
    "href": "docs/code_reference/class_reference/gravityeffect.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A constant acceleration that is applied in the given direction (mass is ignored). This is useful for creating gravity (either on the entire world or in a region) that will push/pull objects in a given direction at a constant acceleration. Methods Properties Base Classes Derived Classes Constructor basicdirectioneffect Properties Methods GravityEffect : Void constructor Name Type Description function GravityEffect()"
  },
  "docs/code_reference/class_reference/griddraw.html": {
    "href": "docs/code_reference/class_reference/griddraw.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor (NOTE) A component used for drawing a grid. Methods Properties Base Classes Derived Classes Constructor Active component AlwaysDrawInEditor Axis CellSize DrawAxisOrigins DrawInGame FollowEditorCamera GridColor GridHighlight HalfCellOffset HighlightInterval Lines Properties Active : boolean var Active : Boolean AlwaysDrawInEditor : boolean Always draw the grid in editor (not just when it's selected) var AlwaysDrawInEditor : Boolean Axis : AxisDirection var Axis : AxisDirection CellSize : real The deltas in the grid (how far apart we draw grid lines) var CellSize : Real DrawAxisOrigins : boolean Changes the line color to. var DrawAxisOrigins : Boolean DrawInGame : boolean Draw the grid in the game. var DrawInGame : Boolean FollowEditorCamera : boolean Move with the editor camera? var FollowEditorCamera : Boolean GridColor : real4 Color of grid lines. var GridColor : Real4 GridHighlight : real4 var GridHighlight : Real4 HalfCellOffset : boolean Is the grid offset by half a unit? var HalfCellOffset : Boolean HighlightInterval : integer How often should cells be activated. var HighlightInterval : Integer Lines : integer The number of lines to draw. var Lines : Integer Methods GridDraw : Void constructor Name Type Description function GridDraw()"
  },
  "docs/code_reference/class_reference/gridlayout.html": {
    "href": "docs/code_reference/class_reference/gridlayout.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes layout Properties Methods"
  },
  "docs/code_reference/class_reference/handleableevent.html": {
    "href": "docs/code_reference/class_reference/handleableevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget (NOTE) Basic event that can be \"handled\" to override default engine behavior. Methods Properties Base Classes Derived Classes Handled event windowtabevent Properties Handled : boolean var Handled : Boolean Methods"
  },
  "docs/code_reference/class_reference/heightmanipulationtool.html": {
    "href": "docs/code_reference/class_reference/heightmanipulationtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes FeatherRadius heightmapsubtool flattentool Radius raiselowertool smoothsharpentool Properties FeatherRadius : real var FeatherRadius : Real Radius : real var Radius : Real Methods"
  },
  "docs/code_reference/class_reference/heightmap.html": {
    "href": "docs/code_reference/class_reference/heightmap.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) A common class that represents height map data. Methods Properties Base Classes Derived Classes Constructor Source component UnitsPerPatch Properties Source : heightmapsource read-only Get source for height map. var Source : HeightMapSource UnitsPerPatch : real Gets/sets the number of units per patch. var UnitsPerPatch : Real Methods HeightMap : Void constructor Constructor. |Name|Type|Description| |---|---|---| function HeightMap()"
  },
  "docs/code_reference/class_reference/heightmapcollider.html": {
    "href": "docs/code_reference/class_reference/heightmapcollider.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Defines collision for a height map. Methods Properties Base Classes Derived Classes ClearCachedEdgeAdjacency Thickness collider Constructor Properties Thickness : real How thick the surface of the height map is. Used to avoid tunneling problems. var Thickness : Real Methods ClearCachedEdgeAdjacency : Void Clear the cached information used to avoid catching edges. Typically called internally by physics, but is exposed for manual triggering. |Name|Type|Description| |---|---|---| function ClearCachedEdgeAdjacency() HeightMapCollider : Void constructor Name Type Description function HeightMapCollider()"
  },
  "docs/code_reference/class_reference/heightmapevent.html": {
    "href": "docs/code_reference/class_reference/heightmapevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine (NOTE) Used by any height map event. Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/heightmapimporter.html": {
    "href": "docs/code_reference/class_reference/heightmapimporter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes BaseHeight composite ImportMode MaxHeightRange MinHeightRange Name PatchColumns PatchRows PatchSize Properties BaseHeight : real var BaseHeight : Real ImportMode : ImportMode var ImportMode : ImportMode MaxHeightRange : real var MaxHeightRange : Real MinHeightRange : real var MinHeightRange : Real Name : string var Name : String PatchColumns : integer var PatchColumns : Integer PatchRows : integer var PatchRows : Integer PatchSize : integer var PatchSize : Integer Methods"
  },
  "docs/code_reference/class_reference/heightmapmodel.html": {
    "href": "docs/code_reference/class_reference/heightmapmodel.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Generates a graphical mesh from every patch of height data in the HeightMap component. Methods Properties Base Classes Derived Classes Constructor graphical Properties Methods HeightMapModel : Void constructor Name Type Description function HeightMapModel()"
  },
  "docs/code_reference/class_reference/heightmapsource.html": {
    "href": "docs/code_reference/class_reference/heightmapsource.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Engine (NOTE) HeightMapSource stores data needed for height maps. Data is stored on PatchData which are indexed by x,y. Each PatchData stores layers that represent different data. The primary layer is height and paint values but additional layers can be added to store data like foliage or custom game data. Methods Properties Base Classes Derived Classes Resource Properties Methods"
  },
  "docs/code_reference/class_reference/heightmapsubtool.html": {
    "href": "docs/code_reference/class_reference/heightmapsubtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Object createdestroytool heightmanipulationtool weightpaintertool Properties Methods"
  },
  "docs/code_reference/class_reference/heightmaptool.html": {
    "href": "docs/code_reference/class_reference/heightmaptool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor CellIndexType component CurrentTool ShowCellIndex ShowPatchIndex SubTool Properties CellIndexType : CellIndexType var CellIndexType : CellIndexType CurrentTool : HeightTool var CurrentTool : HeightTool ShowCellIndex : boolean var ShowCellIndex : Boolean ShowPatchIndex : boolean var ShowPatchIndex : Boolean SubTool : heightmapsubtool var SubTool : HeightMapSubTool Methods HeightMapTool : Void constructor Name Type Description function HeightMapTool()"
  },
  "docs/code_reference/class_reference/heightpatch.html": {
    "href": "docs/code_reference/class_reference/heightpatch.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/hidebasefilter.html": {
    "href": "docs/code_reference/class_reference/hidebasefilter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes metapropertyfilter Properties Methods"
  },
  "docs/code_reference/class_reference/hierarchy.html": {
    "href": "docs/code_reference/class_reference/hierarchy.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) Component that gives an game object the ability to have child objects and Contains a list of children. Methods Properties Base Classes Derived Classes Constructor Children component Properties Children : hierarchylistrange read-only var Children : HierarchyListRange Methods Hierarchy : Void constructor Name Type Description function Hierarchy()"
  },
  "docs/code_reference/class_reference/hierarchycomposition.html": {
    "href": "docs/code_reference/class_reference/hierarchycomposition.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metacomposition Properties Methods"
  },
  "docs/code_reference/class_reference/hierarchyevent.html": {
    "href": "docs/code_reference/class_reference/hierarchyevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes Child event Parent Properties Child : cog var Child : Cog Parent : cog var Parent : Cog Methods"
  },
  "docs/code_reference/class_reference/hierarchylistrange.html": {
    "href": "docs/code_reference/class_reference/hierarchylistrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : hierarchylistrange read-only var All : HierarchyListRange Current : cog read-only var Current : Cog IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods HierarchyListRange : Void constructor Name Type Description function HierarchyListRange() HierarchyListRange : Void constructor Name Type Description p0 hierarchylistrange function HierarchyListRange(p0 : HierarchyListRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/hierarchylistreverserange.html": {
    "href": "docs/code_reference/class_reference/hierarchylistreverserange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : hierarchylistreverserange read-only var All : HierarchyListReverseRange Current : cog read-only var Current : Cog IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods HierarchyListReverseRange : Void constructor Name Type Description function HierarchyListReverseRange() HierarchyListReverseRange : Void constructor Name Type Description p0 hierarchylistreverserange function HierarchyListReverseRange(p0 : HierarchyListReverseRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/hierarchynamerange.html": {
    "href": "docs/code_reference/class_reference/hierarchynamerange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : hierarchynamerange read-only var All : HierarchyNameRange Current : cog read-only var Current : Cog IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods HierarchyNameRange : Void constructor Name Type Description function HierarchyNameRange() HierarchyNameRange : Void constructor Name Type Description p0 hierarchynamerange function HierarchyNameRange(p0 : HierarchyNameRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/hierarchyrange.html": {
    "href": "docs/code_reference/class_reference/hierarchyrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : hierarchyrange read-only var All : HierarchyRange Current : cog read-only var Current : Cog IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods HierarchyRange : Void constructor Name Type Description function HierarchyRange() HierarchyRange : Void constructor Name Type Description p0 hierarchyrange function HierarchyRange(p0 : HierarchyRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/hierarchyspline.html": {
    "href": "docs/code_reference/class_reference/hierarchyspline.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) A spline that builds its control points from all child cogs that have Transforms. Methods Properties Base Classes Derived Classes ForceRebuild Closed component Constructor DebugDrawSpline RebuildIfModified Error Spline SplineColor SplineType Properties Closed : boolean Does the spline loop back on itself? var Closed : Boolean DebugDrawSpline : boolean Should the spline draw every frame? Mainly used for debugging purposes. var DebugDrawSpline : Boolean Error : real The max number of units that a line segment is allowed to deviate from the curve. var Error : Real Spline : spline read-only The internal spline data. var Spline : Spline SplineColor : real4 What color should that spline be drawn with. var SplineColor : Real4 SplineType : SplineType The kind of spline (Linear, BSpline, CatmullRom). Determines how the control points affect the curve. var SplineType : SplineType Methods ForceRebuild : Void Forcibly rebuilds the baked points for the spline. |Name|Type|Description| |---|---|---| function ForceRebuild() HierarchySpline : Void constructor Name Type Description function HierarchySpline() RebuildIfModified : Void Rebuild the baked points if there are any changes to the spline's control points. This should never need to be manually called. |Name|Type|Description| |---|---|---| function RebuildIfModified()"
  },
  "docs/code_reference/class_reference/highlightborderevent.html": {
    "href": "docs/code_reference/class_reference/highlightborderevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/highpassnode.html": {
    "href": "docs/code_reference/class_reference/highpassnode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Applies a high pass filter to audio generated by its input SoundNodes (removes low frequencies) Methods Properties Base Classes Derived Classes CutoffFrequency soundnode Properties CutoffFrequency : real Frequencies below this number in the node's input will be attenuated. Setting this value to 20.0 or lower will skip all filter calculations. var CutoffFrequency : Real Methods"
  },
  "docs/code_reference/class_reference/hotkeyeditor.html": {
    "href": "docs/code_reference/class_reference/hotkeyeditor.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/ibroadphase.html": {
    "href": "docs/code_reference/class_reference/ibroadphase.html",
    "title": "Properties | ZilchEngine",
    "keywords": "SpatialPartition Methods Properties Base Classes Derived Classes AvlDynamicAabbTreeBroadPhase boundingboxbroadphase boundingspherebroadphase dynamicaabbtreebroadphase nsquaredbroadphase sapbroadphase staticaabbtreebroadphase Properties Methods"
  },
  "docs/code_reference/class_reference/iconbutton.html": {
    "href": "docs/code_reference/class_reference/iconbutton.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes buttonbase toggleiconbutton Properties Methods"
  },
  "docs/code_reference/class_reference/ignorespaceeffects.html": {
    "href": "docs/code_reference/class_reference/ignorespaceeffects.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Allows a cog to ignore certain effect types (such as gravity or drag) that are being applied to the entire space (effects on Space or LevelSettings). Methods Properties Base Classes Derived Classes GetIgnoreState IgnoreBuoyancy component Constructor IgnoreCustom SetIgnoreState IgnoreDrag IgnoreFlow IgnoreForce IgnoreGravity IgnorePointForce IgnorePointGravity IgnoreThrust IgnoreTorque IgnoreVortex IgnoreWind Properties IgnoreBuoyancy : boolean Whether or not to ignore buoyancy effects. var IgnoreBuoyancy : Boolean IgnoreCustom : boolean Whether or not to ignore custom effects. var IgnoreCustom : Boolean IgnoreDrag : boolean Whether or not to ignore drag effects. var IgnoreDrag : Boolean IgnoreFlow : boolean Whether or not to ignore flow effects. var IgnoreFlow : Boolean IgnoreForce : boolean Whether or not to ignore force effects. var IgnoreForce : Boolean IgnoreGravity : boolean Whether or not to ignore gravity effects. var IgnoreGravity : Boolean IgnorePointForce : boolean Whether or not to ignore point force effects. var IgnorePointForce : Boolean IgnorePointGravity : boolean Whether or not to ignore point gravity effects. var IgnorePointGravity : Boolean IgnoreThrust : boolean Whether or not to ignore thrust effects. var IgnoreThrust : Boolean IgnoreTorque : boolean Whether or not to ignore torque effects. var IgnoreTorque : Boolean IgnoreVortex : boolean Whether or not to ignore vortex effects. var IgnoreVortex : Boolean IgnoreWind : boolean Whether or not to ignore wind effects. var IgnoreWind : Boolean Methods GetIgnoreState : boolean Should the given effect type be ignored? |Name|Type|Description| |---|---|---| |effectType|PhysicsEffectType| | function GetIgnoreState(effectType : PhysicsEffectType) : Boolean IgnoreSpaceEffects : Void constructor Name Type Description function IgnoreSpaceEffects() SetIgnoreState : Void Set if an effect type should be ignored. |Name|Type|Description| |---|---|---| |effectType|PhysicsEffectType| | |ignore|boolean| | function SetIgnoreState(effectType : PhysicsEffectType, ignore : Boolean)"
  },
  "docs/code_reference/class_reference/imagecontent.html": {
    "href": "docs/code_reference/class_reference/imagecontent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes contentcomposition Properties Methods"
  },
  "docs/code_reference/class_reference/imagedefinition.html": {
    "href": "docs/code_reference/class_reference/imagedefinition.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Graphics Methods Properties Base Classes Derived Classes sliceddefinition Properties Methods"
  },
  "docs/code_reference/class_reference/imageoptions.html": {
    "href": "docs/code_reference/class_reference/imageoptions.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes ImportImages Object Properties ImportImages : ImageImport var ImportImages : ImageImport Methods"
  },
  "docs/code_reference/class_reference/imagewidget.html": {
    "href": "docs/code_reference/class_reference/imagewidget.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes widget Properties Methods"
  },
  "docs/code_reference/class_reference/importbutton.html": {
    "href": "docs/code_reference/class_reference/importbutton.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/importoptions.html": {
    "href": "docs/code_reference/class_reference/importoptions.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes AudioOptions eventobject ConflictOptions GeometryOptions ImageOptions Properties AudioOptions : audiooptions var AudioOptions : AudioOptions ConflictOptions : conflictoptions var ConflictOptions : ConflictOptions GeometryOptions : geometryoptions var GeometryOptions : GeometryOptions ImageOptions : imageoptions var ImageOptions : ImageOptions Methods"
  },
  "docs/code_reference/class_reference/indexbuffer.html": {
    "href": "docs/code_reference/class_reference/indexbuffer.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics (NOTE) Indices used to define non-sequential primitive construction from vertices, such as shared vertices. Methods Properties Base Classes Derived Classes Add Count safeid32 Clear Get Properties Count : integer Number of vertex indices currently in buffer. Can be set manually to invoke vertex shading that number of times, with or without vertex data. var Count : Integer Methods Add : Void Add a vertex index to the buffer. |Name|Type|Description| |---|---|---| |value|integer| | function Add(value : Integer) Clear : Void Clears all stored indices so that new ones can be added. |Name|Type|Description| |---|---|---| function Clear() Get : integer Returns the vertex index that is stored at the given index of this buffer. |Name|Type|Description| |---|---|---| |index|integer| | function Get(index : Integer) : Integer"
  },
  "docs/code_reference/class_reference/indexedhalfedge.html": {
    "href": "docs/code_reference/class_reference/indexedhalfedge.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes Constructor FaceIndex safeid32object TwinIndex VertexIndex Properties FaceIndex : integer read-only var FaceIndex : Integer TwinIndex : integer read-only var TwinIndex : Integer VertexIndex : integer read-only var VertexIndex : Integer Methods IndexedHalfEdge : Void constructor Name Type Description function IndexedHalfEdge() IndexedHalfEdge : Void constructor Name Type Description p0 indexedhalfedge function IndexedHalfEdge(p0 : IndexedHalfEdge)"
  },
  "docs/code_reference/class_reference/indexedhalfedgeface.html": {
    "href": "docs/code_reference/class_reference/indexedhalfedgeface.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes Constructor Edges safeid32object Properties Edges : indexedhalfedgefaceedgeindexarray read-only var Edges : IndexedHalfEdgeFaceEdgeIndexArray Methods IndexedHalfEdgeFace : Void constructor Name Type Description function IndexedHalfEdgeFace() IndexedHalfEdgeFace : Void constructor Name Type Description p0 indexedhalfedgeface function IndexedHalfEdgeFace(p0 : IndexedHalfEdgeFace)"
  },
  "docs/code_reference/class_reference/indexedhalfedgefaceedgeindexarray.html": {
    "href": "docs/code_reference/class_reference/indexedhalfedgefaceedgeindexarray.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes Get All safeid32object Count Properties All : indexedhalfedgefaceedgeindexarrayrange read-only var All : IndexedHalfEdgeFaceEdgeIndexArrayRange Count : integer read-only var Count : Integer Methods Get : integer Name Type Description integer function Get( : Integer) : Integer"
  },
  "docs/code_reference/class_reference/indexedhalfedgefaceedgeindexarrayrange.html": {
    "href": "docs/code_reference/class_reference/indexedhalfedgefaceedgeindexarrayrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : indexedhalfedgefaceedgeindexarrayrange read-only var All : IndexedHalfEdgeFaceEdgeIndexArrayRange Current : integer read-only var Current : Integer IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods IndexedHalfEdgeFaceEdgeIndexArrayRange : Void constructor Name Type Description function IndexedHalfEdgeFaceEdgeIndexArrayRange() IndexedHalfEdgeFaceEdgeIndexArrayRange : Void constructor Name Type Description p0 indexedhalfedgefaceedgeindexarrayrange function IndexedHalfEdgeFaceEdgeIndexArrayRange(p0 : IndexedHalfEdgeFaceEdgeIndexArrayRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/indexedhalfedgemesh.html": {
    "href": "docs/code_reference/class_reference/indexedhalfedgemesh.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes Constructor Edges referencecountedobject Faces Vertices Properties Edges : indexedhalfedgemeshedgearray read-only var Edges : IndexedHalfEdgeMeshEdgeArray Faces : indexedhalfedgemeshfacearray read-only var Faces : IndexedHalfEdgeMeshFaceArray Vertices : indexedhalfedgemeshvertexarray read-only var Vertices : IndexedHalfEdgeMeshVertexArray Methods IndexedHalfEdgeMesh : Void constructor Name Type Description function IndexedHalfEdgeMesh() IndexedHalfEdgeMesh : Void constructor Name Type Description p0 indexedhalfedgemesh function IndexedHalfEdgeMesh(p0 : IndexedHalfEdgeMesh)"
  },
  "docs/code_reference/class_reference/indexedhalfedgemeshedgearray.html": {
    "href": "docs/code_reference/class_reference/indexedhalfedgemeshedgearray.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes Get All safeid32object Count Properties All : indexedhalfedgemeshedgearrayrange read-only var All : IndexedHalfEdgeMeshEdgeArrayRange Count : integer read-only var Count : Integer Methods Get : indexedhalfedge Name Type Description integer function Get( : Integer) : IndexedHalfEdge"
  },
  "docs/code_reference/class_reference/indexedhalfedgemeshedgearrayrange.html": {
    "href": "docs/code_reference/class_reference/indexedhalfedgemeshedgearrayrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : indexedhalfedgemeshedgearrayrange read-only var All : IndexedHalfEdgeMeshEdgeArrayRange Current : indexedhalfedge read-only var Current : IndexedHalfEdge IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods IndexedHalfEdgeMeshEdgeArrayRange : Void constructor Name Type Description function IndexedHalfEdgeMeshEdgeArrayRange() IndexedHalfEdgeMeshEdgeArrayRange : Void constructor Name Type Description p0 indexedhalfedgemeshedgearrayrange function IndexedHalfEdgeMeshEdgeArrayRange(p0 : IndexedHalfEdgeMeshEdgeArrayRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/indexedhalfedgemeshfacearray.html": {
    "href": "docs/code_reference/class_reference/indexedhalfedgemeshfacearray.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes Get All safeid32object Count Properties All : indexedhalfedgemeshfacearrayrange read-only var All : IndexedHalfEdgeMeshFaceArrayRange Count : integer read-only var Count : Integer Methods Get : indexedhalfedgeface Name Type Description integer function Get( : Integer) : IndexedHalfEdgeFace"
  },
  "docs/code_reference/class_reference/indexedhalfedgemeshfacearrayrange.html": {
    "href": "docs/code_reference/class_reference/indexedhalfedgemeshfacearrayrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : indexedhalfedgemeshfacearrayrange read-only var All : IndexedHalfEdgeMeshFaceArrayRange Current : indexedhalfedgeface read-only var Current : IndexedHalfEdgeFace IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods IndexedHalfEdgeMeshFaceArrayRange : Void constructor Name Type Description function IndexedHalfEdgeMeshFaceArrayRange() IndexedHalfEdgeMeshFaceArrayRange : Void constructor Name Type Description p0 indexedhalfedgemeshfacearrayrange function IndexedHalfEdgeMeshFaceArrayRange(p0 : IndexedHalfEdgeMeshFaceArrayRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/indexedhalfedgemeshvertexarray.html": {
    "href": "docs/code_reference/class_reference/indexedhalfedgemeshvertexarray.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes Get All safeid32object Count Properties All : indexedhalfedgemeshvertexarrayrange read-only var All : IndexedHalfEdgeMeshVertexArrayRange Count : integer read-only var Count : Integer Methods Get : real3 Name Type Description integer function Get( : Integer) : Real3"
  },
  "docs/code_reference/class_reference/indexedhalfedgemeshvertexarrayrange.html": {
    "href": "docs/code_reference/class_reference/indexedhalfedgemeshvertexarrayrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : indexedhalfedgemeshvertexarrayrange read-only var All : IndexedHalfEdgeMeshVertexArrayRange Current : real3 read-only var Current : Real3 IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods IndexedHalfEdgeMeshVertexArrayRange : Void constructor Name Type Description function IndexedHalfEdgeMeshVertexArrayRange() IndexedHalfEdgeMeshVertexArrayRange : Void constructor Name Type Description p0 indexedhalfedgemeshvertexarrayrange function IndexedHalfEdgeMeshVertexArrayRange(p0 : IndexedHalfEdgeMeshVertexArrayRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/inplacetexteditor.html": {
    "href": "docs/code_reference/class_reference/inplacetexteditor.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/inputdeviceevent.html": {
    "href": "docs/code_reference/class_reference/inputdeviceevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine (NOTE) An event to inform which input device is being used by the user. Methods Properties Base Classes Derived Classes Device event LastDevice Properties Device : InputDevice var Device : InputDevice LastDevice : InputDevice var LastDevice : InputDevice Methods"
  },
  "docs/code_reference/class_reference/ipaddress.html": {
    "href": "docs/code_reference/class_reference/ipaddress.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta (NOTE) IPv4/IPv6 network host identifier Provided for convenience Note: This class is not slice-able, it has extra data. Methods Properties Base Classes Derived Classes Clear Hash SocketAddress Constructor Host InternetProtocol IsValid Port PortString String Properties Hash : integer read-only var Hash : Integer Host : string Returns the valid IP address host as a numeric string, else String() var Host : String InternetProtocol : InternetProtocol read-only Returns the valid IP address protocol version, else InternetProtocol::Unspecified. var InternetProtocol : InternetProtocol IsValid : boolean read-only Returns true if this is a non-empty IPv4/IPv6 address, else false. var IsValid : Boolean Port : integer Returns the valid IP address port, else 0. var Port : Integer PortString : string read-only Returns the valid IP address port as a numeric string, else String() var PortString : String String : string read-only Returns the valid IP address as a numeric \"host:port\" string, else String() var String : String Methods Clear : Void Clears the IP address. |Name|Type|Description| |---|---|---| function Clear() IpAddress : Void constructor Creates an empty IP address. |Name|Type|Description| |---|---|---| function IpAddress() IpAddress : Void constructor Copy Constructors. |Name|Type|Description| |---|---|---| |rhs|ipaddress| | function IpAddress(rhs : IpAddress) IpAddress : Void constructor Creates an empty IP address. |Name|Type|Description| |---|---|---| |host|string| | |port|integer| | function IpAddress(host : String, port : Integer) IpAddress : Void constructor Creates an empty IP address. |Name|Type|Description| |---|---|---| |host|string| | |port|integer| | |internetProtocol|InternetProtocol| | function IpAddress(host : String, port : Integer, internetProtocol : InternetProtocol)"
  },
  "docs/code_reference/class_reference/item.html": {
    "href": "docs/code_reference/class_reference/item.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes weightedcomposite Properties Methods"
  },
  "docs/code_reference/class_reference/itemgroup.html": {
    "href": "docs/code_reference/class_reference/itemgroup.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes weightedcomposite Properties Methods"
  },
  "docs/code_reference/class_reference/itemlist.html": {
    "href": "docs/code_reference/class_reference/itemlist.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/job.html": {
    "href": "docs/code_reference/class_reference/job.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/joint.html": {
    "href": "docs/code_reference/class_reference/joint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Joints connect two objects together with one or more constraints. A constraint is a mathematical rule that restricts object movement, typically defined in terms of the position and velocities of the objects involved. Methods Properties Base Classes Derived Classes GetCog Active component customjoint GetOtherObject AutoSnaps fixedanglejoint Constructor CollideConnected gearjoint MaxImpulse linearaxisjoint SendsEvents manipulatorjoint phygunjoint positionjoint prismaticjoint prismaticjoint2d pulleyjoint relativevelocityjoint revolutejoint revolutejoint2d stickjoint universaljoint uprightjoint weldjoint wheeljoint wheeljoint2d Properties Active : boolean Determines if this joint is currently active. Used for runtime enabling/disabling of joints. var Active : Boolean AutoSnaps : boolean Determines if this joint will automatically delete itself if any of its constraints reach the max impulse value. This will still send an event if it snaps. var AutoSnaps : Boolean CollideConnected : boolean Determines if the two objects connected by this joint can collide. If any joint between this pair does not collide, then the pair does not collide. All joints have to be set to true in order to have the objects collide. var CollideConnected : Boolean MaxImpulse : real The maximum impulse (instantaneous force) that this joint can apply to correct itself. var MaxImpulse : Real SendsEvents : boolean Determines if this joint will send any events. Used for a small efficiency boost and for reducing the number of events. var SendsEvents : Boolean Methods GetCog : cog Returns the cog associated with an index. Index of 0 is ObjectA, index 1 is ObjectB. Used to write more streamline functions where you index into the objects in a loop. |Name|Type|Description| |---|---|---| |index|integer| | function GetCog(index : Integer) : Cog GetOtherObject : cog If the passed in object is ObjectA, returns ObjectB. Provides easier logic for traversing across joints. |Name|Type|Description| |---|---|---| |cog|cog| | function GetOtherObject(cog : Cog) : Cog Joint : Void constructor Name Type Description function Joint()"
  },
  "docs/code_reference/class_reference/jointconfigoverride.html": {
    "href": "docs/code_reference/class_reference/jointconfigoverride.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Overrides a joint's configuration values of slop, linear/angular Baumgarte, and linear/angular error correction. Slop is the amount of error allowed before position correction takes effect. Baumgarte is used to correct error with a penalty impulse. Baumgarte is split into linear and angular portions because of stability. Error correction is only used when the joint is solved with post stabilization. Methods Properties Base Classes Derived Classes Constructor AngularBaumgarte component AngularErrorCorrection LinearBaumgarte LinearErrorCorrection PositionCorrectionType Slop Properties AngularBaumgarte : real The exponential constant for correcting angular error with a penalty impulse. var AngularBaumgarte : Real AngularErrorCorrection : real The max amount of error that can be corrected by the angular portion of any constraint in one frame (only for PostStabilization). var AngularErrorCorrection : Real LinearBaumgarte : real The exponential constant for correcting linear error with a penalty impulse. var LinearBaumgarte : Real LinearErrorCorrection : real The max amount of error that can be corrected by the linear portion of any constraint in one frame (only for PostStabilization). var LinearErrorCorrection : Real PositionCorrectionType : ConstraintPositionCorrection The kind of position correction that this joint should use. var PositionCorrectionType : ConstraintPositionCorrection Slop : real The amount of error allowed before position correction takes effect. var Slop : Real Methods JointConfigOverride : Void constructor Name Type Description function JointConfigOverride()"
  },
  "docs/code_reference/class_reference/jointcreator.html": {
    "href": "docs/code_reference/class_reference/jointcreator.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) A helper class to create joints of various configurations. Each joint is configured from two points. Any other specific joint properties are calculated from these two points. Methods Properties Base Classes Derived Classes AddJointLimit AttachToCommonParent AddJointMotor AttachToWorld AddJointSpring AutoSnaps Create OverrideLength CreateLocalPoints UseCenter CreateWorldPoints Constructor Properties AttachToCommonParent : boolean Should the cog of the joint be added as a child of the common parent of the two given cogs? Useful for putting the joint in the same hierarchy so that archetypes can be created. var AttachToCommonParent : Boolean AttachToWorld : boolean Used to create a connection to a dummy object. Instead of connecting to object B, the connection will be between object A and \"the world\". var AttachToWorld : Boolean AutoSnaps : boolean Should the joint auto-snap when the force limit is reached? var AutoSnaps : Boolean OverrideLength : boolean Should the length of the joint be overridden or computed from the two points? Mainly used for StickJoint. var OverrideLength : Boolean UseCenter : boolean Should the center of each object be used instead of the given points? var UseCenter : Boolean Methods AddJointLimit : jointlimit Add a JointLimit to the given joint cog. |Name|Type|Description| |---|---|---| |joint|cog| | function AddJointLimit(joint : Cog) : JointLimit AddJointMotor : jointmotor Add a JointMotor to the given joint cog. |Name|Type|Description| |---|---|---| |joint|cog| | function AddJointMotor(joint : Cog) : JointMotor AddJointSpring : jointspring Add a JointSpring to the given joint cog. |Name|Type|Description| |---|---|---| |joint|cog| | function AddJointSpring(joint : Cog) : JointSpring Create : cog Create a joint (by archetype) attached to the two given cogs. |Name|Type|Description| |---|---|---| |objectA|cog| | |objectB|cog| | |jointArchetype|archetype| | function Create(objectA : Cog, objectB : Cog, jointArchetype : Archetype) : Cog Create : cog Create a joint (by component name) attached to the two given cogs. |Name|Type|Description| |---|---|---| |objectA|cog| | |objectB|cog| | |jointName|string| | function Create(objectA : Cog, objectB : Cog, jointName : String) : Cog CreateLocalPoints : cog Create a joint (by archetype) attached to the two given cogs. |Name|Type|Description| |---|---|---| |objectA|cog| | |objectB|cog| | |jointArchetype|archetype| | |localPointA|real3| | |localPointB|real3| | function CreateLocalPoints(objectA : Cog, objectB : Cog, jointArchetype : Archetype, localPointA : Real3, localPointB : Real3) : Cog CreateLocalPoints : cog Create a joint (by component name) attached to the two given cogs. |Name|Type|Description| |---|---|---| |objectA|cog| | |objectB|cog| | |jointName|string| | |localPointA|real3| | |localPointB|real3| | function CreateLocalPoints(objectA : Cog, objectB : Cog, jointName : String, localPointA : Real3, localPointB : Real3) : Cog CreateWorldPoints : cog Create a joint (by archetype) attached to the two given cogs. Both world points on the joint are set to the same world point value. |Name|Type|Description| |---|---|---| |objectA|cog| | |objectB|cog| | |jointArchetype|archetype| | |bothWorldPoints|real3| | function CreateWorldPoints(objectA : Cog, objectB : Cog, jointArchetype : Archetype, bothWorldPoints : Real3) : Cog CreateWorldPoints : cog Create a joint (by archetype) attached to the two given cogs. |Name|Type|Description| |---|---|---| |objectA|cog| | |objectB|cog| | |jointArchetype|archetype| | |worldPointA|real3| | |worldPointB|real3| | function CreateWorldPoints(objectA : Cog, objectB : Cog, jointArchetype : Archetype, worldPointA : Real3, worldPointB : Real3) : Cog CreateWorldPoints : cog Create a joint (by component name) attached to the two given cogs. Both world points on the joint are set to the same world point value. |Name|Type|Description| |---|---|---| |objectA|cog| | |objectB|cog| | |jointName|string| | |bothWorldPoints|real3| | function CreateWorldPoints(objectA : Cog, objectB : Cog, jointName : String, bothWorldPoints : Real3) : Cog CreateWorldPoints : cog Create a joint (by component name) attached to the two given cogs. |Name|Type|Description| |---|---|---| |objectA|cog| | |objectB|cog| | |jointName|string| | |worldPointA|real3| | |worldPointB|real3| | function CreateWorldPoints(objectA : Cog, objectB : Cog, jointName : String, worldPointA : Real3, worldPointB : Real3) : Cog JointCreator : Void constructor Name Type Description function JointCreator()"
  },
  "docs/code_reference/class_reference/jointdebugdrawconfig.html": {
    "href": "docs/code_reference/class_reference/jointdebugdrawconfig.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Allows the user to override parameters for debug drawing of joints. Primarily used to debug draw from different object perspectives and to change the size of drawn data. Methods Properties Base Classes Derived Classes Constructor Active component Detail ObjectAPerspective ObjectBPerspective Size Properties Active : boolean Whether or not this component is active. var Active : Boolean Detail : real The amount of detail to use when drawing. For example, the detail on a RevoluteJoint will increase the number of lines used to draw the arc of a circle. var Detail : Real ObjectAPerspective : boolean If we draw the joint's debug info from the perspective of ObjectA. Typically used when ObjectA is marked as a static object and ObjectB has free movement. var ObjectAPerspective : Boolean ObjectBPerspective : boolean If we draw the joint's debug info from the perspective of ObjectB. Typically used when ObjectB is marked as a static object and ObjectA has free movement. var ObjectBPerspective : Boolean Size : real A size modifier for the debug drawing. 1 is the base size. var Size : Real Methods JointDebugDrawConfig : Void constructor Name Type Description function JointDebugDrawConfig()"
  },
  "docs/code_reference/class_reference/jointevent.html": {
    "href": "docs/code_reference/class_reference/jointevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Physics (NOTE) Sent out when a joint reaches some condition. Currently sent out when a limit is reached or an impulse's limit is exceeded. Methods Properties Base Classes Derived Classes Joint event JointCog ObjectA ObjectB Properties Joint : joint read-only The Joint that triggered the event. var Joint : Joint JointCog : cog read-only The Cog of the Joint that signaled the event. var JointCog : Cog ObjectA : cog read-only ObjectA on the Joint. var ObjectA : Cog ObjectB : cog read-only ObjectB on the Joint. var ObjectB : Cog Methods"
  },
  "docs/code_reference/class_reference/jointgraphedge.html": {
    "href": "docs/code_reference/class_reference/jointgraphedge.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) A bi-directional graph edge between a collider and a joint. Exposes convenience functions for iterating over the graph. Methods Properties Base Classes Derived Classes Constructor Joint BaseJointGraphEdge<joint> Object OtherObject Owner Valid Properties Joint : joint read-only var Joint : Joint Object : cog read-only var Object : Cog OtherObject : cog read-only var OtherObject : Cog Owner : cog read-only var Owner : Cog Valid : boolean read-only var Valid : Boolean Methods JointGraphEdge : Void constructor Name Type Description function JointGraphEdge() JointGraphEdge : Void constructor Name Type Description jointgraphedge function JointGraphEdge( : JointGraphEdge)"
  },
  "docs/code_reference/class_reference/jointlimit.html": {
    "href": "docs/code_reference/class_reference/jointlimit.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Defines limit properties for a joint. Used to add a min/max bounds to a joint. When the joint is in between the min/max bounds, the \"limited\" portion will be ignored (The stick will not solve when it is in between the bounds, making it a rope). See each joint for a description of how it reacts to a limit. Methods Properties Base Classes Derived Classes Constructor Active component AtomIds LowerLimit UpperLimit Properties Active : boolean Determines if this limit is currently active. var Active : Boolean AtomIds : integer Signifies what atoms on the joint this affects. For internal use. var AtomIds : Integer LowerLimit : real The lower bound for this limit. var LowerLimit : Real UpperLimit : real The upper bound for this limit. var UpperLimit : Real Methods JointLimit : Void constructor Name Type Description function JointLimit()"
  },
  "docs/code_reference/class_reference/jointmotor.html": {
    "href": "docs/code_reference/class_reference/jointmotor.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Defines motor properties for a joint. Used to add energy to a joint. A motor defines a desired speed to move at as well as a max impulse that can be applied to reach that speed in a timestep. See each joint for a description of how it reacts to a motor. Methods Properties Base Classes Derived Classes Constructor Active component AtomIds MaxImpulse Reverse Speed Properties Active : boolean Determines if this motor is currently active. var Active : Boolean AtomIds : integer Signifies what atoms on the joint this affects. For internal use. var AtomIds : Integer MaxImpulse : real The maximum impulse that the motor can apply each frame to reach the target speed. var MaxImpulse : Real Reverse : boolean Determines if this motor should move in reverse. This is a convenient way to reverse a motor without having to negate the speed. var Reverse : Boolean Speed : real The desired speed for this motor. var Speed : Real Methods JointMotor : Void constructor Name Type Description function JointMotor()"
  },
  "docs/code_reference/class_reference/jointrange.html": {
    "href": "docs/code_reference/class_reference/jointrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : jointrange read-only var All : JointRange Current : jointgraphedge read-only var Current : JointGraphEdge IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods JointRange : Void constructor Name Type Description function JointRange() JointRange : Void constructor Name Type Description p0 jointrange function JointRange(p0 : JointRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/jointspring.html": {
    "href": "docs/code_reference/class_reference/jointspring.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Defines spring properties for a joint. Used to make a joint soft and therefore behave spring-like. A joint spring has a frequency in hertz at which to oscillate as well as a damping ratio. The ratio should vary from 0 to 1 where 0 is no damping and 1 is critical damping. See each joint for a description of how it reacts to a spring. Methods Properties Base Classes Derived Classes Constructor Active component AtomIds DampingRatio FrequencyHz Properties Active : boolean Determines if this spring is active. var Active : Boolean AtomIds : integer Signifies what atoms on the joint this affects. For internal use. var AtomIds : Integer DampingRatio : real The damping ratio of this spring. The value should range from 0 to 1 where 0 is no damping and 1 is critical damping. var DampingRatio : Real FrequencyHz : real The oscillation frequency of the spring in Hertz (cycles per second). var FrequencyHz : Real Methods JointSpring : Void constructor Name Type Description function JointSpring()"
  },
  "docs/code_reference/class_reference/jointtool.html": {
    "href": "docs/code_reference/class_reference/jointtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor AttachToCommonParent objectconnectingtool AttachToWorld AutoSnaps JointType Length MaxImpulse OverrideLength UseCenter Properties AttachToCommonParent : boolean var AttachToCommonParent : Boolean AttachToWorld : boolean var AttachToWorld : Boolean AutoSnaps : boolean var AutoSnaps : Boolean JointType : JointToolTypes var JointType : JointToolTypes Length : real var Length : Real MaxImpulse : real var MaxImpulse : Real OverrideLength : boolean var OverrideLength : Boolean UseCenter : boolean var UseCenter : Boolean Methods JointTool : Void constructor Name Type Description function JointTool()"
  },
  "docs/code_reference/class_reference/joystick.html": {
    "href": "docs/code_reference/class_reference/joystick.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) A Joystick is associated with a hardware joystick, and provides the ability to query axes and buttons. Methods Properties Base Classes Derived Classes Calibrating AxisCount eventobject EndCalibration ButtonCount GetAxisIndex DisabledValue GetAxisName IsActive GetAxisValue Name GetAxisValueByName GetButtonValue LoadInputMapping SaveInputMapping StartCalibration Properties AxisCount : integer read-only var AxisCount : Integer ButtonCount : integer read-only Get the number of buttons or axes. var ButtonCount : Integer DisabledValue : real read-only static A value that means a joystick axis is invalid. For example when a HAT-switch is not pressed down, it will return this value. var DisabledValue : Real IsActive : boolean read-only Gets whether or not the joystick is active. var IsActive : Boolean Name : string read-only Get the name of the Joystick. var Name : String Methods Calibrating : boolean Name Type Description function Calibrating() : Boolean EndCalibration : Void Name Type Description function EndCalibration() GetAxisIndex : integer Name Type Description name string function GetAxisIndex(name : String) : Integer GetAxisName : string Name Type Description index integer function GetAxisName(index : Integer) : String GetAxisValue : real Queries an axes and returns a value between [-1, 1]. The valid range of axes is between 0 and 'GetMaxAxes'. If the axis is not valid, then the value returned is 0. If the axis is disabled, then the value returned is Joystick.DisabledValue. |Name|Type|Description| |---|---|---| |index|integer| | function GetAxisValue(index : Integer) : Real GetAxisValueByName : real Name Type Description name string function GetAxisValueByName(name : String) : Real GetButtonValue : boolean Queries a button and returns true if it is down, false if it is up The valid range of buttons is between 0 and 'GetMaxButtons' If the button is not valid, then the value returned is false. |Name|Type|Description| |---|---|---| |index|integer| | function GetButtonValue(index : Integer) : Boolean LoadInputMapping : Void Load an input mapping. |Name|Type|Description| |---|---|---| |name|string| | function LoadInputMapping(name : String) SaveInputMapping : Void Name Type Description name string function SaveInputMapping(name : String) StartCalibration : Void Name Type Description function StartCalibration()"
  },
  "docs/code_reference/class_reference/joystickevent.html": {
    "href": "docs/code_reference/class_reference/joystickevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine (NOTE) Joystick events are sent when a game pad button state is changed. Methods Properties Base Classes Derived Classes Button event Joystick Properties Button : integer The button that was just pressed or released. var Button : Integer Joystick : joystick The joystick that generated this event. var Joystick : Joystick Methods"
  },
  "docs/code_reference/class_reference/joystickrange.html": {
    "href": "docs/code_reference/class_reference/joystickrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : joystickrange read-only var All : JoystickRange Current : joystick read-only var Current : Joystick IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods JoystickRange : Void constructor Name Type Description function JoystickRange() JoystickRange : Void constructor Name Type Description p0 joystickrange function JoystickRange(p0 : JoystickRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/joysticks.html": {
    "href": "docs/code_reference/class_reference/joysticks.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) Joysticks is a collection of all joysticks available. Methods Properties Base Classes Derived Classes JoystickCount eventobject Joysticks Properties JoystickCount : integer read-only Get the number of joysticks. var JoystickCount : Integer Joysticks : joystickrange read-only var Joysticks : JoystickRange Methods"
  },
  "docs/code_reference/class_reference/keyboard.html": {
    "href": "docs/code_reference/class_reference/keyboard.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) Keyboard representing the physical keyboard. Methods Properties Base Classes Derived Classes GetKeyName eventobject IsAnyKeyDown IsAnyNonModifierDown KeyIsDown KeyIsPressed KeyIsReleased KeyIsUp ToKey ToSymbol Valid Properties Methods GetKeyName : string Gets a string name of a particular key. |Name|Type|Description| |---|---|---| |key|Keys| | function GetKeyName(key : Keys) : String IsAnyKeyDown : boolean Is any key in the 'Keys' enum down (not including 'Keys::Unknown', e.g. PrintScreen). |Name|Type|Description| |---|---|---| function IsAnyKeyDown() : Boolean IsAnyNonModifierDown : boolean Excluding Ctrl, Shift, and Alt - is any key in the 'Keys' enum down (not including 'Keys::Unknown', e.g. PrintScreen). |Name|Type|Description| |---|---|---| function IsAnyNonModifierDown() : Boolean KeyIsDown : boolean Is the particular currently down. |Name|Type|Description| |---|---|---| |key|Keys| | function KeyIsDown(key : Keys) : Boolean KeyIsPressed : boolean Was the key pressed this frame. |Name|Type|Description| |---|---|---| |key|Keys| | function KeyIsPressed(key : Keys) : Boolean KeyIsReleased : boolean Was the key released this frame. |Name|Type|Description| |---|---|---| |key|Keys| | function KeyIsReleased(key : Keys) : Boolean KeyIsUp : boolean Is the particular currently up. |Name|Type|Description| |---|---|---| |key|Keys| | function KeyIsUp(key : Keys) : Boolean ToKey : Keys Counterpart to 'ToSymbol'. Converts a key's name or symbol to the key value. Returns Keys::Unknown if key is not found. |Name|Type|Description| |---|---|---| |key|string| | function ToKey(key : String) : Keys ToSymbol : string Convert key value to it's actual name or keyboard symbol, if it has one. Returns \"Unknown\" String if key is not found. |Name|Type|Description| |---|---|---| |key|Keys| | function ToSymbol(key : Keys) : String ToSymbol : string Convert a key name to it's keyboard symbol, if it has one. Returns input String if key is not found. |Name|Type|Description| |---|---|---| |keyName|string| | function ToSymbol(keyName : String) : String Valid : boolean Validate that the key is a Keys::Enum that is not 'Unknown', or 'None', or an integer value that doesn't map to a known Keys::Enum value. |Name|Type|Description| |---|---|---| |key|Keys| | function Valid(key : Keys) : Boolean Valid : boolean Validate that the input string can be mapped back to an enum. |Name|Type|Description| |---|---|---| |key|string| | function Valid(key : String) : Boolean"
  },
  "docs/code_reference/class_reference/keyboardevent.html": {
    "href": "docs/code_reference/class_reference/keyboardevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine (NOTE) Represents information about key state changes. Methods Properties Base Classes Derived Classes AltPressed event CtrlPressed HandledEvent Key Keyboard ModifierPressed OsKey ShiftPressed SpacePressed State Properties AltPressed : boolean var AltPressed : Boolean CtrlPressed : boolean var CtrlPressed : Boolean HandledEvent : boolean var HandledEvent : Boolean Key : Keys var Key : Keys Keyboard : keyboard read-only Get the keyboard that generated this event. var Keyboard : Keyboard ModifierPressed : boolean read-only var ModifierPressed : Boolean OsKey : integer var OsKey : Integer ShiftPressed : boolean var ShiftPressed : Boolean SpacePressed : boolean var SpacePressed : Boolean State : KeyState var State : KeyState Methods"
  },
  "docs/code_reference/class_reference/keyboardtextevent.html": {
    "href": "docs/code_reference/class_reference/keyboardtextevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine (NOTE) Gives the actual key value being typed. For example, holding Shift + 'a' will give 'A'. Methods Properties Base Classes Derived Classes Rune event Properties Rune : rune var Rune : Rune Methods"
  },
  "docs/code_reference/class_reference/keyframeevent.html": {
    "href": "docs/code_reference/class_reference/keyframeevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event ContentMeta Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/label.html": {
    "href": "docs/code_reference/class_reference/label.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/layout.html": {
    "href": "docs/code_reference/class_reference/layout.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes DoLayout Padding docklayout Measure edgedocklayout filllayout gridlayout ratiolayout stacklayout Properties Padding : thickness var Padding : Thickness Methods DoLayout : real2 Name Type Description p0 composite p1 layoutarea function DoLayout(p0 : Composite, p1 : LayoutArea) : Real2 Measure : real2 Name Type Description p0 composite p1 layoutarea function Measure(p0 : Composite, p1 : LayoutArea) : Real2"
  },
  "docs/code_reference/class_reference/layoutarea.html": {
    "href": "docs/code_reference/class_reference/layoutarea.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/level.html": {
    "href": "docs/code_reference/class_reference/level.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Engine (NOTE) A level is resource that stores a set of objects that can be loaded into a space. Level is different from most resource types in that it does not really store the level data on the object but always loads the data from the file system. Methods Properties Base Classes Derived Classes Resource Properties Methods"
  },
  "docs/code_reference/class_reference/libraryview.html": {
    "href": "docs/code_reference/class_reference/libraryview.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/linearaxisjoint.html": {
    "href": "docs/code_reference/class_reference/linearaxisjoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Legacy. A linear axis joint is used to keep an object locked on a plane that is defined by a normal. This was made to help make a dynamic character controller. Instead of locking translation along a plane, the constraint can be turned off with a motor attached to it which will drive movement in the direction of the plane normal. This can then be thought of as a \"move in direction\" constraint. Methods Properties Base Classes Derived Classes Constructor WorldAxis joint Properties WorldAxis : real3 The axis in world space that is constrained. var WorldAxis : Real3 Methods LinearAxisJoint : Void constructor Name Type Description function LinearAxisJoint()"
  },
  "docs/code_reference/class_reference/linearaxisjointblock.html": {
    "href": "docs/code_reference/class_reference/linearaxisjointblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods LinearAxisJointBlock : Void constructor Name Type Description function LinearAxisJointBlock()"
  },
  "docs/code_reference/class_reference/linearparticleanimator.html": {
    "href": "docs/code_reference/class_reference/linearparticleanimator.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Basic Particle Animation Effects. Methods Properties Base Classes Derived Classes Constructor Dampening particleanimator Force Growth RandomForce Torque Twist Properties Dampening : real Velocity dampening. var Dampening : Real Force : real3 Constance force applied to particles. var Force : Real3 Growth : real Rate of particle size growth. var Growth : Real RandomForce : real3 Random force applied to particles. var RandomForce : Real3 Torque : real Force that applies spin. var Torque : Real Twist : real3 Twist applies a twisting/tornado force to the particles. var Twist : Real3 Methods LinearParticleAnimator : Void constructor Name Type Description function LinearParticleAnimator()"
  },
  "docs/code_reference/class_reference/linkid.html": {
    "href": "docs/code_reference/class_reference/linkid.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine Methods Properties Base Classes Derived Classes component Properties Methods"
  },
  "docs/code_reference/class_reference/listbox.html": {
    "href": "docs/code_reference/class_reference/listbox.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/localmodifications.html": {
    "href": "docs/code_reference/class_reference/localmodifications.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/lowpassnode.html": {
    "href": "docs/code_reference/class_reference/lowpassnode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Applies a low pass filter to audio generated by its input SoundNodes (removes high frequencies) Methods Properties Base Classes Derived Classes CutoffFrequency soundnode Properties CutoffFrequency : real Frequencies above this number in the node's input will be attenuated. Setting this value to 20,000.00 or higher will skip all filter calculations. var CutoffFrequency : Real Methods"
  },
  "docs/code_reference/class_reference/mainconfig.html": {
    "href": "docs/code_reference/class_reference/mainconfig.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) Main configuration component. Methods Properties Base Classes Derived Classes Constructor ApplicationName component BuildDate BuildVersion Properties ApplicationName : string read-only var ApplicationName : String BuildDate : string read-only var BuildDate : String BuildVersion : string read-only var BuildVersion : String Methods MainConfig : Void constructor Name Type Description function MainConfig()"
  },
  "docs/code_reference/class_reference/mainpropertyview.html": {
    "href": "docs/code_reference/class_reference/mainpropertyview.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/mainwindow.html": {
    "href": "docs/code_reference/class_reference/mainwindow.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes rootwidget Properties Methods"
  },
  "docs/code_reference/class_reference/mainwindowtransformevent.html": {
    "href": "docs/code_reference/class_reference/mainwindowtransformevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget Methods Properties Base Classes Derived Classes NewScreenPosition event NewScreenSize OldScreenPosition OldScreenSize TargetWindow Properties NewScreenPosition : real2 read-only var NewScreenPosition : Real2 NewScreenSize : real2 read-only var NewScreenSize : Real2 OldScreenPosition : real2 read-only var OldScreenPosition : Real2 OldScreenSize : real2 read-only var OldScreenSize : Real2 TargetWindow : oswindow read-only var TargetWindow : OsWindow Methods"
  },
  "docs/code_reference/class_reference/manipulatorjoint.html": {
    "href": "docs/code_reference/class_reference/manipulatorjoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Legacy. A position joint that is designed to manipulate one object. The only difference between this and the position joint is that the manipulator always draws itself, draws differently, and configures the max impulse differently. Methods Properties Base Classes Derived Classes Constructor LocalPoint joint TargetPoint WorldPoint Properties LocalPoint : real3 The local space point on the object that the joint is connected to. var LocalPoint : Real3 TargetPoint : real3 The point in world space that the object's point is being moved towards. var TargetPoint : Real3 WorldPoint : real3 The world space point on the object that the joint is connected to. var WorldPoint : Real3 Methods ManipulatorJoint : Void constructor Name Type Description function ManipulatorJoint()"
  },
  "docs/code_reference/class_reference/manipulatorjointblock.html": {
    "href": "docs/code_reference/class_reference/manipulatorjointblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods ManipulatorJointBlock : Void constructor Name Type Description function ManipulatorJointBlock()"
  },
  "docs/code_reference/class_reference/manipulatortool.html": {
    "href": "docs/code_reference/class_reference/manipulatortool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor DuplicateOnCtrlDrag component GrabMode HoverColor IncludeMode SizeBoxCollider SnapDistance Snapping ToolColor Properties DuplicateOnCtrlDrag : boolean var DuplicateOnCtrlDrag : Boolean GrabMode : GizmoGrab var GrabMode : GizmoGrab HoverColor : real4 var HoverColor : Real4 IncludeMode : IncludeMode var IncludeMode : IncludeMode SizeBoxCollider : boolean var SizeBoxCollider : Boolean SnapDistance : real var SnapDistance : Real Snapping : boolean var Snapping : Boolean ToolColor : real4 var ToolColor : Real4 Methods ManipulatorTool : Void constructor Name Type Description function ManipulatorTool()"
  },
  "docs/code_reference/class_reference/manipulatortoolevent.html": {
    "href": "docs/code_reference/class_reference/manipulatortoolevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes EndWorldRectangle viewportmouseevent Finished GrabLocation OperationQueue StartWorldRectangle Properties EndWorldRectangle : rectangle var EndWorldRectangle : Rectangle Finished : boolean read-only var Finished : Boolean GrabLocation : Location read-only var GrabLocation : Location OperationQueue : operationqueue read-only var OperationQueue : OperationQueue StartWorldRectangle : rectangle read-only var StartWorldRectangle : Rectangle Methods"
  },
  "docs/code_reference/class_reference/massoverride.html": {
    "href": "docs/code_reference/class_reference/massoverride.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Takes a snap shot of the current mass and inertia and overrides the object's mass so it can be resized while keeping it's old mass. Methods Properties Base Classes Derived Classes Constructor Active component RecomputeMass AutoComputeCenterOfMass AutoComputeInertia InverseMass LocalCenterOfMass LocalInverseInertiaTensor Mass Properties Active : boolean Determines whether the RigidBody on this Cog will use the cached or actual mass and inertia. var Active : Boolean AutoComputeCenterOfMass : boolean Should the center of mass be auto computed or overwritten (via script). var AutoComputeCenterOfMass : Boolean AutoComputeInertia : boolean Should the inertia tensor be auto computed or overwritten (via script). var AutoComputeInertia : Boolean InverseMass : real The cached inverse mass of this object. var InverseMass : Real LocalCenterOfMass : real3 The center of mass in local space to override with. When set, the center of mass will be locked to this value until AutoComputeCenterOfMass is set to true. var LocalCenterOfMass : Real3 LocalInverseInertiaTensor : real3x3 The inverse inertia tensor this object is saved with. var LocalInverseInertiaTensor : Real3x3 Mass : real Overrides the mass of this body. Inertia is updated as a ratio of the new mass to the old mass. var Mass : Real Methods MassOverride : Void constructor Name Type Description function MassOverride() RecomputeMass : Void Takes a new snapshot of the current mass and inertia. |Name|Type|Description| |---|---|---| function RecomputeMass()"
  },
  "docs/code_reference/class_reference/material.html": {
    "href": "docs/code_reference/class_reference/material.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Graphics (NOTE) A composition of shader fragments that defines a shader program that is used when rendering Graphicals. Methods Properties Base Classes Derived Classes RuntimeClone CompositionLabel dataresource ReferencedByList RenderGroups Properties CompositionLabel : integer read-only var CompositionLabel : Integer ReferencedByList : rendergrouplist read-only var ReferencedByList : RenderGroupList RenderGroups : rendergrouplist read-only var RenderGroups : RenderGroupList Methods RuntimeClone : material Creates an anonymous copy that can be independently modified, destroyed when all references are gone. |Name|Type|Description| |---|---|---| function RuntimeClone() : Material"
  },
  "docs/code_reference/class_reference/materialblock.html": {
    "href": "docs/code_reference/class_reference/materialblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes Constructor Object materialblockproxy Properties Methods MaterialBlock : Void constructor Name Type Description function MaterialBlock() MaterialBlock : Void constructor Name Type Description p0 materialblock function MaterialBlock(p0 : MaterialBlock)"
  },
  "docs/code_reference/class_reference/materialblockproxy.html": {
    "href": "docs/code_reference/class_reference/materialblockproxy.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes materialblock Properties Methods"
  },
  "docs/code_reference/class_reference/materialfactory.html": {
    "href": "docs/code_reference/class_reference/materialfactory.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes metacomposition Properties Methods"
  },
  "docs/code_reference/class_reference/materiallist.html": {
    "href": "docs/code_reference/class_reference/materiallist.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes Add safeid32eventobject All Remove Properties Methods Add : Void Adds the Material to this RenderGroups's list. Runtime resources only. |Name|Type|Description| |---|---|---| |material|material| | function Add(material : Material) All : arrayhandleofmaterial Range of all resources in the list. |Name|Type|Description| |---|---|---| function All() : ArrayHandleOfMaterial Remove : Void Removes the Material from this RenderGroups's list. Runtime resources only. |Name|Type|Description| |---|---|---| |material|material| | function Remove(material : Material)"
  },
  "docs/code_reference/class_reference/menubar.html": {
    "href": "docs/code_reference/class_reference/menubar.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/menubaritem.html": {
    "href": "docs/code_reference/class_reference/menubaritem.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/mesh.html": {
    "href": "docs/code_reference/class_reference/mesh.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Graphics (NOTE) Data that represents a mesh in the way that is intended to be used by graphics hardware. Methods Properties Base Classes Derived Classes CreateRuntime Indices Resource RuntimeClone PrimitiveType Upload Vertices UploadNoRayCastInfo UploadNoRayCastInfoOrAabb Properties Indices : indexbuffer read-only Indices used to define non-sequential primitive construction from vertices, such as shared vertices. var Indices : IndexBuffer PrimitiveType : PrimitiveType The type of primitives to be made with the vertex data. var PrimitiveType : PrimitiveType Vertices : vertexbuffer read-only Vertex data and attribute semantics for defining data that can be uploaded to the gpu. var Vertices : VertexBuffer Methods CreateRuntime : mesh static Makes an anonymous Mesh resource that can be defined by script and uploaded to the gpu. |Name|Type|Description| |---|---|---| function CreateRuntime() : Mesh RuntimeClone : mesh Creates a clone of this Mesh. As a clone is expected to be modified, an upload function must be called before this mesh can be used. |Name|Type|Description| |---|---|---| function RuntimeClone() : Mesh Upload : Void Upload vertex buffer and index buffer data to the gpu. This will also build the aabb and information needed for raycasting. |Name|Type|Description| |---|---|---| function Upload() UploadNoRayCastInfo : Void Same as Upload except raycasting information will not be built. This avoids a possible spike when a custom mesh will never need to be raycasted against. |Name|Type|Description| |---|---|---| function UploadNoRayCastInfo() UploadNoRayCastInfoOrAabb : Void Same as Upload except raycasting information and the aabb will not be built. This should be used when the user is manually setting an aabb or frustum culling is disabled. |Name|Type|Description| |---|---|---| function UploadNoRayCastInfoOrAabb()"
  },
  "docs/code_reference/class_reference/meshbuilder.html": {
    "href": "docs/code_reference/class_reference/meshbuilder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Constructor FlipNormals buildercomponent FlipWindingOrder GenerateSmoothNormals GenerateTangentSpace InvertUvYAxis SmoothingAngleDegreesThreshold Properties FlipNormals : boolean var FlipNormals : Boolean FlipWindingOrder : boolean var FlipWindingOrder : Boolean GenerateSmoothNormals : boolean var GenerateSmoothNormals : Boolean GenerateTangentSpace : boolean var GenerateTangentSpace : Boolean InvertUvYAxis : boolean var InvertUvYAxis : Boolean SmoothingAngleDegreesThreshold : real var SmoothingAngleDegreesThreshold : Real Methods MeshBuilder : Void constructor Name Type Description function MeshBuilder()"
  },
  "docs/code_reference/class_reference/meshcollider.html": {
    "href": "docs/code_reference/class_reference/meshcollider.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Defines the collision for a generic mesh from a collection of triangles ( PhysicsMesh resource). This collider type is not expected to have a dynamic or kinematic RigidBody. Methods Properties Base Classes Derived Classes Constructor DrawEdges collider DrawFaceNormals DrawFaces PhysicsMesh Properties DrawEdges : boolean Whether to debug draw the edges of each triangle. var DrawEdges : Boolean DrawFaceNormals : boolean Whether to debug draw the normals of each triangle. var DrawFaceNormals : Boolean DrawFaces : boolean Whether to debug draw the faces of each triangle. var DrawFaces : Boolean PhysicsMesh : physicsmesh The mesh resource used to define collision. This mesh is just a surface mesh of triangles (no volume is defined). var PhysicsMesh : PhysicsMesh Methods MeshCollider : Void constructor Name Type Description function MeshCollider()"
  },
  "docs/code_reference/class_reference/meshparticleemitter.html": {
    "href": "docs/code_reference/class_reference/meshparticleemitter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Emits particles on a mesh surface. Methods Properties Base Classes Derived Classes Constructor Mesh particleemittershared MeshEmitMode NormalExtrude Properties Mesh : mesh Mesh used for this Model. var Mesh : Mesh MeshEmitMode : MeshEmitMode var MeshEmitMode : MeshEmitMode NormalExtrude : real Moved the spawn position along the normal scaled by this amount. var NormalExtrude : Real Methods MeshParticleEmitter : Void constructor Name Type Description function MeshParticleEmitter()"
  },
  "docs/code_reference/class_reference/messageboxevent.html": {
    "href": "docs/code_reference/class_reference/messageboxevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/metaarray.html": {
    "href": "docs/code_reference/class_reference/metaarray.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes referencecountedeventobject metaarraywrapper zerometaarrayanimationclips zerometaarraycontentlibraryreferencearray zerometaarraynetpropertyinfos zerometaarrayrevisions zerometaarraysounds zerometaarraysoundtags Properties Methods"
  },
  "docs/code_reference/class_reference/metaarraywrapper.html": {
    "href": "docs/code_reference/class_reference/metaarraywrapper.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes metaarray Properties Methods"
  },
  "docs/code_reference/class_reference/metaattribute.html": {
    "href": "docs/code_reference/class_reference/metaattribute.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes referencecountedeventobject editorpropertyextension metacustomui metadependency metaeditorgizmo metaeditorscriptobject metagroup metainterface metanetproperty metapropertyfilter metapropertyrename metascriptshortcutattribute metascripttagattribute metashaderinput Properties Methods"
  },
  "docs/code_reference/class_reference/metacomposition.html": {
    "href": "docs/code_reference/class_reference/metacomposition.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes referencecountedeventobject CogMetaComposition CogPathMetaComposition CollisionFilterMetaComposition ContentMetaComposition EngineMetaComposition EventBundleMetaComposition hierarchycomposition materialfactory metacompositionwrapper PhysicsSolverConfigMetaComposition RaycasterMetaComposition Properties Methods"
  },
  "docs/code_reference/class_reference/metacompositionwrapper.html": {
    "href": "docs/code_reference/class_reference/metacompositionwrapper.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes metacomposition Properties Methods"
  },
  "docs/code_reference/class_reference/metacustomui.html": {
    "href": "docs/code_reference/class_reference/metacustomui.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes metaattribute Properties Methods"
  },
  "docs/code_reference/class_reference/metadatainheritance.html": {
    "href": "docs/code_reference/class_reference/metadatainheritance.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes referencecountedeventobject ComponentMetaDataInheritance metadatainheritanceroot Properties Methods"
  },
  "docs/code_reference/class_reference/metadatainheritanceroot.html": {
    "href": "docs/code_reference/class_reference/metadatainheritanceroot.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes metadatainheritance cogmetadatainheritance dataresourceinheritance Properties Methods"
  },
  "docs/code_reference/class_reference/metadependency.html": {
    "href": "docs/code_reference/class_reference/metadependency.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metaattribute Properties Methods"
  },
  "docs/code_reference/class_reference/metadisplay.html": {
    "href": "docs/code_reference/class_reference/metadisplay.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes referencecountedeventobject cogmetadisplay resourcedisplayfunctions resourcepackagedisplay soundattenuatordisplay soundcuedisplay sounddisplay soundemitterdisplay soundentrydisplay soundtagdisplay soundtagentrydisplay stringnamedisplay typenamedisplay Properties Methods"
  },
  "docs/code_reference/class_reference/metadropevent.html": {
    "href": "docs/code_reference/class_reference/metadropevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor (NOTE) MetaDropEvent for dropping MetaObjects. Methods Properties Base Classes Derived Classes Failed event Handled MouseEvent MouseOverObject Object Position Result Testing ViewportMouseEvent Properties Failed : boolean var Failed : Boolean Handled : boolean var Handled : Boolean MouseEvent : mouseevent read-only var MouseEvent : MouseEvent MouseOverObject : anyhandle read-only var MouseOverObject : AnyHandle Object : anyhandle read-only var Object : AnyHandle Position : real2 var Position : Real2 Result : string var Result : String Testing : boolean var Testing : Boolean ViewportMouseEvent : viewportmouseevent read-only var ViewportMouseEvent : ViewportMouseEvent Methods"
  },
  "docs/code_reference/class_reference/metaeditorgizmo.html": {
    "href": "docs/code_reference/class_reference/metaeditorgizmo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes GizmoArchetype metaattribute Properties GizmoArchetype : string var GizmoArchetype : String Methods"
  },
  "docs/code_reference/class_reference/metaeditorresource.html": {
    "href": "docs/code_reference/class_reference/metaeditorresource.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes AllowAdd editorpropertyextension AllowNone FilterTag SearchPreview Properties AllowAdd : boolean var AllowAdd : Boolean AllowNone : boolean var AllowNone : Boolean FilterTag : string var FilterTag : String SearchPreview : boolean var SearchPreview : Boolean Methods"
  },
  "docs/code_reference/class_reference/metaeditorscriptobject.html": {
    "href": "docs/code_reference/class_reference/metaeditorscriptobject.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes AutoRegister metaattribute Properties AutoRegister : boolean var AutoRegister : Boolean Methods"
  },
  "docs/code_reference/class_reference/metagroup.html": {
    "href": "docs/code_reference/class_reference/metagroup.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Name metaattribute Properties Name : string var Name : String Methods"
  },
  "docs/code_reference/class_reference/metainterface.html": {
    "href": "docs/code_reference/class_reference/metainterface.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metaattribute Properties Methods"
  },
  "docs/code_reference/class_reference/metalibraryevent.html": {
    "href": "docs/code_reference/class_reference/metalibraryevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Meta Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/metanetproperty.html": {
    "href": "docs/code_reference/class_reference/metanetproperty.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking Methods Properties Base Classes Derived Classes NetChannelConfig metaattribute NetPropertyConfig Properties NetChannelConfig : string var NetChannelConfig : String NetPropertyConfig : string var NetPropertyConfig : String Methods"
  },
  "docs/code_reference/class_reference/metaoperations.html": {
    "href": "docs/code_reference/class_reference/metaoperations.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes referencecountedeventobject cogmetaoperations ComponentMetaOperations contentitemmetaoperations resourcemetaoperations Properties Methods"
  },
  "docs/code_reference/class_reference/metaowner.html": {
    "href": "docs/code_reference/class_reference/metaowner.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes referencecountedeventobject Properties Methods"
  },
  "docs/code_reference/class_reference/metapropertybasicfilter.html": {
    "href": "docs/code_reference/class_reference/metapropertybasicfilter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes metapropertyfilter Properties Methods"
  },
  "docs/code_reference/class_reference/metapropertyeditor.html": {
    "href": "docs/code_reference/class_reference/metapropertyeditor.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes referencecountedeventobject Properties Methods"
  },
  "docs/code_reference/class_reference/metapropertyfilter.html": {
    "href": "docs/code_reference/class_reference/metapropertyfilter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes metaattribute cogarchetypepropertyfilter editingamefilter hidebasefilter metapropertybasicfilter PropertyFilterArithmeticTypes PropertyFilterBoolean PropertyFilterDoubleInteger PropertyFilterDoubleReal PropertyFilterFloatingPointTypes PropertyFilterInteger PropertyFilterInteger2 PropertyFilterInteger3 PropertyFilterInteger4 PropertyFilterMultiPrimitiveTypes PropertyFilterOther PropertyFilterQuaternion PropertyFilterReal PropertyFilterReal2 PropertyFilterReal3 PropertyFilterReal4 PropertyFilterString showgammacorrectionfilter shownormalgenerationoptionsfilter showpremultipliedalphafilter Properties Methods"
  },
  "docs/code_reference/class_reference/metapropertyrename.html": {
    "href": "docs/code_reference/class_reference/metapropertyrename.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes metaattribute Properties Methods"
  },
  "docs/code_reference/class_reference/metaresource.html": {
    "href": "docs/code_reference/class_reference/metaresource.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes referencecountedeventobject Properties Methods"
  },
  "docs/code_reference/class_reference/metascriptshortcutattribute.html": {
    "href": "docs/code_reference/class_reference/metascriptshortcutattribute.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes Alt metaattribute Ctrl Key Shift Properties Alt : boolean var Alt : Boolean Ctrl : boolean var Ctrl : Boolean Key : string var Key : String Shift : boolean var Shift : Boolean Methods"
  },
  "docs/code_reference/class_reference/metascripttagattribute.html": {
    "href": "docs/code_reference/class_reference/metascripttagattribute.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes Tags metaattribute Properties Tags : string var Tags : String Methods"
  },
  "docs/code_reference/class_reference/metaselection.html": {
    "href": "docs/code_reference/class_reference/metaselection.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Add All referencecountedeventobject Clear Primary Contains Count Empty FinalSelectionChanged Remove Replace SelectOnly Properties All : metaselectionrange read-only var All : MetaSelectionRange Primary : anyhandle var Primary : AnyHandle Methods Add : Void Name Type Description p0 anyhandle function Add(p0 : AnyHandle) Clear : Void Name Type Description function Clear() Contains : boolean Name Type Description p0 anyhandle function Contains(p0 : AnyHandle) : Boolean Count : integer Name Type Description function Count() : Integer Empty : boolean Name Type Description function Empty() : Boolean FinalSelectionChanged : Void Name Type Description function FinalSelectionChanged() Remove : Void Name Type Description p0 anyhandle function Remove(p0 : AnyHandle) Replace : Void Name Type Description p0 anyhandle p1 anyhandle function Replace(p0 : AnyHandle, p1 : AnyHandle) SelectOnly : Void Name Type Description p0 anyhandle function SelectOnly(p0 : AnyHandle)"
  },
  "docs/code_reference/class_reference/metaselectionrange.html": {
    "href": "docs/code_reference/class_reference/metaselectionrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : metaselectionrange read-only var All : MetaSelectionRange Current : anyhandle read-only var Current : AnyHandle IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MetaSelectionRange : Void constructor Name Type Description function MetaSelectionRange() MetaSelectionRange : Void constructor Name Type Description p0 metaselectionrange function MetaSelectionRange(p0 : MetaSelectionRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/class_reference/metaserialization.html": {
    "href": "docs/code_reference/class_reference/metaserialization.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Serialization Methods Properties Base Classes Derived Classes referencecountedeventobject cogmetaserialization cogpathmetaserialization EnumMetaSerialization metastringserialization PrimitiveMetaSerializationBoolean PrimitiveMetaSerializationInteger PrimitiveMetaSerializationInteger2 PrimitiveMetaSerializationInteger3 PrimitiveMetaSerializationInteger4 PrimitiveMetaSerializationMat2 PrimitiveMetaSerializationMat3 PrimitiveMetaSerializationMat4 PrimitiveMetaSerializationQuat PrimitiveMetaSerializationReal PrimitiveMetaSerializationReal2 PrimitiveMetaSerializationReal3 PrimitiveMetaSerializationReal4 PrimitiveMetaSerializationString resourcemetaserialization Properties Methods"
  },
  "docs/code_reference/class_reference/metaserializedproperty.html": {
    "href": "docs/code_reference/class_reference/metaserializedproperty.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes referencecountedeventobject Properties Methods"
  },
  "docs/code_reference/class_reference/metashaderinput.html": {
    "href": "docs/code_reference/class_reference/metashaderinput.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes FragmentName metaattribute InputName Properties FragmentName : string var FragmentName : String InputName : string var InputName : String Methods"
  },
  "docs/code_reference/class_reference/metastringserialization.html": {
    "href": "docs/code_reference/class_reference/metastringserialization.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Serialization Methods Properties Base Classes Derived Classes metaserialization Properties Methods"
  },
  "docs/code_reference/class_reference/metatransform.html": {
    "href": "docs/code_reference/class_reference/metatransform.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes referencecountedeventobject cogmetatransform rotationbasisgizmometatransform transformmetatransform Properties Methods"
  },
  "docs/code_reference/class_reference/microphoneinputnode.html": {
    "href": "docs/code_reference/class_reference/microphoneinputnode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Receives input from a microphone and passes the audio data to its output SoundNodes. Methods Properties Base Classes Derived Classes Active soundnode Volume Properties Active : boolean Microphone input will only be played while the Active property is set to True. var Active : Boolean Volume : real The volume modifier applied to all audio data received from the microphone. var Volume : Real Methods"
  },
  "docs/code_reference/class_reference/midievent.html": {
    "href": "docs/code_reference/class_reference/midievent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Sound (NOTE) Sent when a MIDI message is received from a connected device. Methods Properties Base Classes Derived Classes Channel event MIDINumber Value Properties Channel : real var Channel : Real MIDINumber : real var MIDINumber : Real Value : real var Value : Real Methods"
  },
  "docs/code_reference/class_reference/modal.html": {
    "href": "docs/code_reference/class_reference/modal.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/modalbuttonevent.html": {
    "href": "docs/code_reference/class_reference/modalbuttonevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/modalconfirmevent.html": {
    "href": "docs/code_reference/class_reference/modalconfirmevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/model.html": {
    "href": "docs/code_reference/class_reference/model.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Renders a mesh. Methods Properties Base Classes Derived Classes Constructor Mesh graphical Properties Mesh : mesh Mesh that the graphical will render. var Mesh : Mesh Methods Model : Void constructor Name Type Description function Model()"
  },
  "docs/code_reference/class_reference/modulationnode.html": {
    "href": "docs/code_reference/class_reference/modulationnode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Applies either ring or amplitude modulation to audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes Frequency soundnode UseAmplitudeModulation WetPercent WetValue Properties Frequency : real The frequency of the sine wave used for the modulation. var Frequency : Real UseAmplitudeModulation : boolean If this property is true, the node will apply amplitude modulation (multiply the audio input with a unipolar sine wave with values from 0.0 to 1.0). If false, the node will apply ring modulation (multiply the input with a bipolar sine wave with values from -1.0 to 1.0). var UseAmplitudeModulation : Boolean WetPercent : real DEPRECATED The WetValue property should be used instead. var WetPercent : Real WetValue : real The percentage of the input (0 - 1.0) which should have the modulation applied to it. var WetValue : Real Methods"
  },
  "docs/code_reference/class_reference/mouse.html": {
    "href": "docs/code_reference/class_reference/mouse.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) Mouse object for Display System. Methods Properties Base Classes Derived Classes IsButtonDown ClientPosition eventobject ToggleTrapped Cursor CursorMovement RawMovement Trapped Properties ClientPosition : real2 read-only The position of the mouse cursor relative to the application's top-left corner in pixels. var ClientPosition : Real2 Cursor : Cursor Set the cursor of the mouse. var Cursor : Cursor CursorMovement : real2 read-only The movement of the mouse in pixels. var CursorMovement : Real2 RawMovement : real2 High precision raw movement of the mouse. var RawMovement : Real2 Trapped : boolean Trap the mouse preventing it from moving. var Trapped : Boolean Methods IsButtonDown : boolean Is a mouse button currently down? |Name|Type|Description| |---|---|---| |button|MouseButtons| | function IsButtonDown(button : MouseButtons) : Boolean ToggleTrapped : Void Toggles if the mouse is currently trapped. |Name|Type|Description| |---|---|---| function ToggleTrapped()"
  },
  "docs/code_reference/class_reference/mousecapture.html": {
    "href": "docs/code_reference/class_reference/mousecapture.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Gameplay Methods Properties Base Classes Derived Classes Capture IsCaptured component Constructor ReleaseCapture Properties IsCaptured : boolean read-only Returns whether or not this has an active mouse capture. var IsCaptured : Boolean Methods Capture : boolean Starts the mouse manipulation. All mouse events will now only go to the owner of this Component. Returns whether or not the manipulation can be started. |Name|Type|Description| |---|---|---| |e|viewportmouseevent| | function Capture(e : ViewportMouseEvent) : Boolean MouseCapture : Void constructor Name Type Description function MouseCapture() ReleaseCapture : Void Releases the mouse manipulation. |Name|Type|Description| |---|---|---| function ReleaseCapture() ReleaseCapture : Void Releases the mouse manipulation. |Name|Type|Description| |---|---|---| |e|viewportmouseevent| | function ReleaseCapture(e : ViewportMouseEvent)"
  },
  "docs/code_reference/class_reference/mousedragevent.html": {
    "href": "docs/code_reference/class_reference/mousedragevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget Methods Properties Base Classes Derived Classes mouseevent Properties Methods"
  },
  "docs/code_reference/class_reference/mouseevent.html": {
    "href": "docs/code_reference/class_reference/mouseevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget (NOTE) Mouse events for actions concerning the mouse. Methods Properties Base Classes Derived Classes IsButtonUp AltPressed event mousedragevent Button mousefiledropevent ButtonDown viewportmouseevent CtrlPressed HandledEvent Mouse Movement Position Scroll ShiftPressed Properties AltPressed : boolean var AltPressed : Boolean Button : MouseButtons var Button : MouseButtons ButtonDown : boolean State of all the mouse buttons. var ButtonDown : Boolean CtrlPressed : boolean var CtrlPressed : Boolean HandledEvent : boolean var HandledEvent : Boolean Mouse : mouse read-only var Mouse : Mouse Movement : real2 var Movement : Real2 Position : real2 var Position : Real2 Scroll : real2 var Scroll : Real2 ShiftPressed : boolean var ShiftPressed : Boolean Methods IsButtonUp : boolean Name Type Description button MouseButtons function IsButtonUp(button : MouseButtons) : Boolean"
  },
  "docs/code_reference/class_reference/mousefiledropevent.html": {
    "href": "docs/code_reference/class_reference/mousefiledropevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Gameplay Methods Properties Base Classes Derived Classes [[zilch_engine_documentation/code_reference/class_reference/mousefiledropevent/#files-array[string] Files]] mouseevent Properties Files : Array[string] var Files : Array[String] Methods"
  },
  "docs/code_reference/class_reference/mousemanipulation.html": {
    "href": "docs/code_reference/class_reference/mousemanipulation.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes widget Properties Methods"
  },
  "docs/code_reference/class_reference/multiconvexmesh.html": {
    "href": "docs/code_reference/class_reference/multiconvexmesh.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Physics (NOTE) Represents a collection of convex meshes that was decomposed from a mesh. Methods Properties Base Classes Derived Classes CreateRuntime Modified Resource RuntimeClone SubMeshes UpdateAndNotifyIfModified Valid Validate Vertices Properties Modified : boolean read-only Is the resource currently modified? var Modified : Boolean SubMeshes : multiconvexmeshsubmeshdata read-only A collection of sub-convex meshes. var SubMeshes : MultiConvexMeshSubMeshData Valid : boolean read-only Is the resource correctly setup? Typically involves a mis-match in indices and vertices. var Valid : Boolean Vertices : multiconvexmeshvertexdata read-only The vertex buffer data of this mesh. var Vertices : MultiConvexMeshVertexData Methods CreateRuntime : multiconvexmesh static Creates a MultiConvexMesh for run-time modifications. |Name|Type|Description| |---|---|---| function CreateRuntime() : MultiConvexMesh RuntimeClone : multiconvexmesh Creates a clone of this mesh for run-time modifications. |Name|Type|Description| |---|---|---| function RuntimeClone() : MultiConvexMesh UpdateAndNotifyIfModified : Void Rebuild all extra mesh information if it is currently modified. This includes things like the center of mass, volume, aabb, edge info and more. |Name|Type|Description| |---|---|---| function UpdateAndNotifyIfModified() Validate : boolean Check if the mesh is valid. Optionally throw a script exception if it is invalid. |Name|Type|Description| |---|---|---| |throwExceptionIfInvalid|boolean| | function Validate(throwExceptionIfInvalid : Boolean) : Boolean"
  },
  "docs/code_reference/class_reference/multiconvexmeshcollider.html": {
    "href": "docs/code_reference/class_reference/multiconvexmeshcollider.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Defines a collection of sub-convex meshes. This allows a non-convex object to be broken up into several convex pieces for efficient collision detection and use with rigid bodies. Methods Properties Base Classes Derived Classes Constructor Mesh collider Properties Mesh : multiconvexmesh The MultiConvexMesh resource that defines collision. var Mesh : MultiConvexMesh Methods MultiConvexMeshCollider : Void constructor Name Type Description function MultiConvexMeshCollider()"
  },
  "docs/code_reference/class_reference/multiconvexmesheditor.html": {
    "href": "docs/code_reference/class_reference/multiconvexmesheditor.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/multiconvexmeshindexdata.html": {
    "href": "docs/code_reference/class_reference/multiconvexmeshindexdata.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Add All safeid32object Clear Count Get Set Properties All : multiconvexmeshindexrange read-only var All : MultiConvexMeshIndexRange Count : integer read-only var Count : Integer Methods Add : Void Name Type Description integer function Add( : Integer) Clear : Void Name Type Description function Clear() Get : integer Name Type Description integer function Get( : Integer) : Integer Set : Void Name Type Description integer integer function Set( : Integer, : Integer)"
  },
  "docs/code_reference/class_reference/multiconvexmeshindexrange.html": {
    "href": "docs/code_reference/class_reference/multiconvexmeshindexrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : multiconvexmeshindexrange read-only var All : MultiConvexMeshIndexRange Current : integer read-only var Current : Integer IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() MultiConvexMeshIndexRange : Void constructor Name Type Description function MultiConvexMeshIndexRange() MultiConvexMeshIndexRange : Void constructor Name Type Description p0 multiconvexmeshindexrange function MultiConvexMeshIndexRange(p0 : MultiConvexMeshIndexRange)"
  },
  "docs/code_reference/class_reference/multiconvexmeshpoint.html": {
    "href": "docs/code_reference/class_reference/multiconvexmeshpoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes widget Properties Methods"
  },
  "docs/code_reference/class_reference/multiconvexmeshpropertyviewinfo.html": {
    "href": "docs/code_reference/class_reference/multiconvexmeshpropertyviewinfo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor (NOTE) Structure bound to the property view for the main editor. Contains the different settings that the user can modify. Methods Properties Base Classes Derived Classes AutoCompute AutoComputeMethod eventobject Constructor AutoComputeMode ClearColor DrawMode MeshThickness OuterContourColor SimplificationThreshold SpriteSource SurfaceLevelThreshold Properties AutoComputeMethod : MultiConvexMeshAutoComputeMethod What method of auto-computing should be used? Most likely 'pixel' is the mode that should be used. var AutoComputeMethod : MultiConvexMeshAutoComputeMethod AutoComputeMode : MultiConvexMeshAutoComputeMode Should the auto-computed mesh be calculated from the alpha or the intensity of the sprite? var AutoComputeMode : MultiConvexMeshAutoComputeMode ClearColor : real4 The clear color of the viewport used to render. var ClearColor : Real4 DrawMode : MultiConvexMeshDrawMode How should the collection of meshes be drawn? var DrawMode : MultiConvexMeshDrawMode MeshThickness : real Since the mesh is on a 2d plane, they need some thickness for their z-depth. This controls how thick the meshes are. var MeshThickness : Real OuterContourColor : real4 The color to draw edges with. var OuterContourColor : Real4 SimplificationThreshold : real A threshold to control when vertices should be removed (simplified). This value is related to the area of a triangle. var SimplificationThreshold : Real SpriteSource : spritesource The sprite source used as a reference for drawing the mesh. Note: this is not always what's visible as the user can drag in archetypes to view as well. var SpriteSource : SpriteSource SurfaceLevelThreshold : real When the sprite is sampled using the AutoComputeMode, what value should be used to determine where a surface is. var SurfaceLevelThreshold : Real Methods AutoCompute : Void Resets the points of the mesh to an approximation for the current sprite. |Name|Type|Description| |---|---|---| function AutoCompute() MultiConvexMeshPropertyViewInfo : Void constructor Name Type Description function MultiConvexMeshPropertyViewInfo()"
  },
  "docs/code_reference/class_reference/multiconvexmeshsubmeshdata.html": {
    "href": "docs/code_reference/class_reference/multiconvexmeshsubmeshdata.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Add All safeid32object Clear Count Get RemoveAt Properties All : multiconvexmeshsubmeshrange read-only var All : MultiConvexMeshSubMeshRange Count : integer read-only var Count : Integer Methods Add : subconvexmesh Create and add a new SubConvexMesh. Returns the new mesh for modification. |Name|Type|Description| |---|---|---| function Add() : SubConvexMesh Clear : Void Clears all sub-meshes. |Name|Type|Description| |---|---|---| function Clear() Get : subconvexmesh Name Type Description integer function Get( : Integer) : SubConvexMesh RemoveAt : Void Remove the sub-mesh at the given index. |Name|Type|Description| |---|---|---| |arrayIndex|integer| | function RemoveAt(arrayIndex : Integer)"
  },
  "docs/code_reference/class_reference/multiconvexmeshsubmeshrange.html": {
    "href": "docs/code_reference/class_reference/multiconvexmeshsubmeshrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : multiconvexmeshsubmeshrange read-only var All : MultiConvexMeshSubMeshRange Current : subconvexmesh read-only var Current : SubConvexMesh IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() MultiConvexMeshSubMeshRange : Void constructor Name Type Description function MultiConvexMeshSubMeshRange() MultiConvexMeshSubMeshRange : Void constructor Name Type Description p0 multiconvexmeshsubmeshrange function MultiConvexMeshSubMeshRange(p0 : MultiConvexMeshSubMeshRange)"
  },
  "docs/code_reference/class_reference/multiconvexmeshvertexdata.html": {
    "href": "docs/code_reference/class_reference/multiconvexmeshvertexdata.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Add All safeid32object Clear Count Get Set Properties All : multiconvexmeshvertexrange read-only var All : MultiConvexMeshVertexRange Count : integer read-only var Count : Integer Methods Add : Void Name Type Description real3 function Add( : Real3) Clear : Void Name Type Description function Clear() Get : real3 Name Type Description integer function Get( : Integer) : Real3 Set : Void Name Type Description integer real3 function Set( : Integer, : Real3)"
  },
  "docs/code_reference/class_reference/multiconvexmeshvertexrange.html": {
    "href": "docs/code_reference/class_reference/multiconvexmeshvertexrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : multiconvexmeshvertexrange read-only var All : MultiConvexMeshVertexRange Current : real3 read-only var Current : Real3 IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() MultiConvexMeshVertexRange : Void constructor Name Type Description function MultiConvexMeshVertexRange() MultiConvexMeshVertexRange : Void constructor Name Type Description p0 multiconvexmeshvertexrange function MultiConvexMeshVertexRange(p0 : MultiConvexMeshVertexRange)"
  },
  "docs/code_reference/class_reference/multidock.html": {
    "href": "docs/code_reference/class_reference/multidock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite editor Properties Methods"
  },
  "docs/code_reference/class_reference/multilinetext.html": {
    "href": "docs/code_reference/class_reference/multilinetext.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/multimanager.html": {
    "href": "docs/code_reference/class_reference/multimanager.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/multirendertarget.html": {
    "href": "docs/code_reference/class_reference/multirendertarget.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics (NOTE) Interface for configuring multiple color target outputs. Methods Properties Base Classes Derived Classes BlendSettings threadsafereferencecounted BlendSettings0 BlendSettings1 BlendSettings2 BlendSettings3 BlendSettings4 BlendSettings5 BlendSettings6 BlendSettings7 ColorTarget ColorTarget0 ColorTarget1 ColorTarget2 ColorTarget3 ColorTarget4 ColorTarget5 ColorTarget6 ColorTarget7 Properties BlendSettings : blendsettingsmrt read-only var BlendSettings : BlendSettingsMrt BlendSettings0 : blendsettings var BlendSettings0 : BlendSettings BlendSettings1 : blendsettings var BlendSettings1 : BlendSettings BlendSettings2 : blendsettings var BlendSettings2 : BlendSettings BlendSettings3 : blendsettings var BlendSettings3 : BlendSettings BlendSettings4 : blendsettings var BlendSettings4 : BlendSettings BlendSettings5 : blendsettings var BlendSettings5 : BlendSettings BlendSettings6 : blendsettings var BlendSettings6 : BlendSettings BlendSettings7 : blendsettings var BlendSettings7 : BlendSettings ColorTarget : colortargetmrt read-only var ColorTarget : ColorTargetMrt ColorTarget0 : rendertarget var ColorTarget0 : RenderTarget ColorTarget1 : rendertarget var ColorTarget1 : RenderTarget ColorTarget2 : rendertarget var ColorTarget2 : RenderTarget ColorTarget3 : rendertarget var ColorTarget3 : RenderTarget ColorTarget4 : rendertarget var ColorTarget4 : RenderTarget ColorTarget5 : rendertarget var ColorTarget5 : RenderTarget ColorTarget6 : rendertarget var ColorTarget6 : RenderTarget ColorTarget7 : rendertarget var ColorTarget7 : RenderTarget Methods"
  },
  "docs/code_reference/class_reference/multisprite.html": {
    "href": "docs/code_reference/class_reference/multisprite.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics Methods Properties Base Classes Derived Classes All AnimationActive basesprite Clear AnimationSpeed Get Constructor Set Properties AnimationActive : boolean var AnimationActive : Boolean AnimationSpeed : real var AnimationSpeed : Real Methods All : multispriteentryrange Name Type Description function All() : MultiSpriteEntryRange Clear : Void Name Type Description function Clear() Get : multispriteentry Name Type Description p0 integer2 function Get(p0 : Integer2) : MultiSpriteEntry MultiSprite : Void constructor Name Type Description function MultiSprite() Set : Void Name Type Description p0 integer2 p1 spritesource function Set(p0 : Integer2, p1 : SpriteSource)"
  },
  "docs/code_reference/class_reference/multispriteentry.html": {
    "href": "docs/code_reference/class_reference/multispriteentry.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes Constructor Index SpriteSource Properties Index : integer2 read-only var Index : Integer2 SpriteSource : spritesource read-only var SpriteSource : SpriteSource Methods MultiSpriteEntry : Void constructor Name Type Description p0 multispriteentry function MultiSpriteEntry(p0 : MultiSpriteEntry)"
  },
  "docs/code_reference/class_reference/multispriteentryrange.html": {
    "href": "docs/code_reference/class_reference/multispriteentryrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : multispriteentryrange read-only var All : MultiSpriteEntryRange Current : multispriteentry read-only var Current : MultiSpriteEntry IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() MultiSpriteEntryRange : Void constructor Name Type Description function MultiSpriteEntryRange() MultiSpriteEntryRange : Void constructor Name Type Description p0 multispriteentryrange function MultiSpriteEntryRange(p0 : MultiSpriteEntryRange)"
  },
  "docs/code_reference/class_reference/nadacompiledevent.html": {
    "href": "docs/code_reference/class_reference/nadacompiledevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/nadacompileevent.html": {
    "href": "docs/code_reference/class_reference/nadacompileevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/nadacompilefragmentevent.html": {
    "href": "docs/code_reference/class_reference/nadacompilefragmentevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/nadacomponent.html": {
    "href": "docs/code_reference/class_reference/nadacomponent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component NadaScript (NOTE) A base class for all Nada components defined in script. Methods Properties Base Classes Derived Classes Constructor component Properties Methods NadaComponent : Void constructor Name Type Description function NadaComponent()"
  },
  "docs/code_reference/class_reference/nadadocumentresource.html": {
    "href": "docs/code_reference/class_reference/nadadocumentresource.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Engine Methods Properties Base Classes Derived Classes Text documentresource nadafragment nadascript Properties Text : string read-only var Text : String Methods"
  },
  "docs/code_reference/class_reference/nadaevent.html": {
    "href": "docs/code_reference/class_reference/nadaevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event NadaScript Methods Properties Base Classes Derived Classes Constructor event Properties Methods NadaEvent : Void constructor Name Type Description function NadaEvent()"
  },
  "docs/code_reference/class_reference/nadafragment.html": {
    "href": "docs/code_reference/class_reference/nadafragment.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Graphics Methods Properties Base Classes Derived Classes nadadocumentresource Properties Methods"
  },
  "docs/code_reference/class_reference/nadafragmentbuilder.html": {
    "href": "docs/code_reference/class_reference/nadafragmentbuilder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes basetextbuilder Properties Methods"
  },
  "docs/code_reference/class_reference/nadalibraryresource.html": {
    "href": "docs/code_reference/class_reference/nadalibraryresource.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Engine Methods Properties Base Classes Derived Classes Resource nadapluginlibrary Properties Methods"
  },
  "docs/code_reference/class_reference/nadaobject.html": {
    "href": "docs/code_reference/class_reference/nadaobject.html",
    "title": "Properties | ZilchEngine",
    "keywords": "NadaScript Methods Properties Base Classes Derived Classes DispatchEvent eventobject Constructor Properties Methods DispatchEvent : Void Name Type Description p0 string p1 event function DispatchEvent(p0 : String, p1 : Event) NadaObject : Void constructor Name Type Description function NadaObject()"
  },
  "docs/code_reference/class_reference/nadapluginbuilder.html": {
    "href": "docs/code_reference/class_reference/nadapluginbuilder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Constructor databuilder Properties Methods NadaPluginBuilder : Void constructor Name Type Description function NadaPluginBuilder()"
  },
  "docs/code_reference/class_reference/nadapluginconfig.html": {
    "href": "docs/code_reference/class_reference/nadapluginconfig.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine Methods Properties Base Classes Derived Classes Constructor AttemptedIdeToolsInstall component Properties AttemptedIdeToolsInstall : boolean If on this machine we attempted to install IDE tools for plugins. var AttemptedIdeToolsInstall : Boolean Methods NadaPluginConfig : Void constructor Name Type Description function NadaPluginConfig()"
  },
  "docs/code_reference/class_reference/nadapluginlibrary.html": {
    "href": "docs/code_reference/class_reference/nadapluginlibrary.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource NadaScript Methods Properties Base Classes Derived Classes nadalibraryresource Properties Methods"
  },
  "docs/code_reference/class_reference/nadapluginsource.html": {
    "href": "docs/code_reference/class_reference/nadapluginsource.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource NadaScript Methods Properties Base Classes Derived Classes Clean dataresource CompileDebug CompileRelease CopyPluginDependencies InstallIdeTools OpenDirectory OpenIde Properties Methods Clean : Void Name Type Description function Clean() CompileDebug : Void Name Type Description function CompileDebug() CompileRelease : Void Name Type Description function CompileRelease() CopyPluginDependencies : Void Name Type Description function CopyPluginDependencies() InstallIdeTools : Void Name Type Description function InstallIdeTools() OpenDirectory : Void Name Type Description function OpenDirectory() OpenIde : Void Name Type Description function OpenIde()"
  },
  "docs/code_reference/class_reference/nadaprecompilationevent.html": {
    "href": "docs/code_reference/class_reference/nadaprecompilationevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/nadascript.html": {
    "href": "docs/code_reference/class_reference/nadascript.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource NadaScript (NOTE) Nada script file Resource. Methods Properties Base Classes Derived Classes nadadocumentresource Properties Methods"
  },
  "docs/code_reference/class_reference/nadascriptbuilder.html": {
    "href": "docs/code_reference/class_reference/nadascriptbuilder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes basetextbuilder Properties Methods"
  },
  "docs/code_reference/class_reference/named.html": {
    "href": "docs/code_reference/class_reference/named.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine Methods Properties Base Classes Derived Classes component Properties Methods"
  },
  "docs/code_reference/class_reference/netchannel.html": {
    "href": "docs/code_reference/class_reference/netchannel.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking (NOTE) Network Channel. Manages the replication of a set of properties on the network. Methods Properties Base Classes Derived Classes GetNetProperty Authority safeid32object HasNetProperty ChangeFlag ReplicateNow IsNapping TakeNap IsScheduled WakeUp LastChangeTimePassed LastChangeTimestamp Name NetChannelType Properties Authority : Authority Controls which peer has the authority to observe and replicate property changes. (Client: Indicates both the client and server are allowed to observe and replicate property changes) (Server: Indicates only the server is allowed to observe and replicate property changes) Only a single client, specified by NetObject::NetUserOwnerPeerId, may possess client authority at any given time. The server is still responsible for relaying contained property changes to other clients, but will not replicate contained property changes back to the authority client. However, the server is also still responsible for other replication commands (such as object creation/destruction), and these WILL be replicated to the authority client. var Authority : Authority ChangeFlag : boolean Manual change flag (checked upon manual change observation). var ChangeFlag : Boolean IsNapping : boolean read-only Returns true if the net channel is currently napping (performing change detection on longer intervals), else false. var IsNapping : Boolean IsScheduled : boolean read-only Returns true if this net channel is scheduled for change observation, else false. var IsScheduled : Boolean LastChangeTimePassed : real read-only Elapsed time passed since this net channel was last changed, else 0. var LastChangeTimePassed : Real LastChangeTimestamp : real read-only Timestamp indicating when this net channel was last changed, else 0. var LastChangeTimestamp : Real Name : string read-only Net channel name. var Name : String NetChannelType : netchanneltype read-only Operating net channel type. var NetChannelType : NetChannelType Methods GetNetProperty : netproperty [Client/Server] Returns the specified net property, else nullptr. |Name|Type|Description| |---|---|---| |component|component| | |propertyName|string| | function GetNetProperty(component : Component, propertyName : String) : NetProperty HasNetProperty : boolean [Client/Server] Returns true if the net object has the specified net property, else false. |Name|Type|Description| |---|---|---| |component|component| | |propertyName|string| | function HasNetProperty(component : Component, propertyName : String) : Boolean ReplicateNow : boolean Replicates net property changes immediately (only if changes are detected). Will also update nap state as configured. Returns true if changes were replicated, else false. |Name|Type|Description| |---|---|---| function ReplicateNow() : Boolean TakeNap : Void Forces the net channel to start napping immediately. |Name|Type|Description| |---|---|---| function TakeNap() WakeUp : Void Forces the net channel to stop napping immediately. |Name|Type|Description| |---|---|---| function WakeUp()"
  },
  "docs/code_reference/class_reference/netchannelconfig.html": {
    "href": "docs/code_reference/class_reference/netchannelconfig.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Networking (NOTE) Network Channel Configuration. Defines a configuration for the replication of a set of properties on the network. Methods Properties Base Classes Derived Classes AcceptIncomingChanges dataresource AccurateTimestampOnChange AllowNapping AllowRelay AuthorityDefault AuthorityMode AwakeDetectionInterval AwakeDuration DetectionMode DetectOutgoingChanges EventOnIncomingPropertyChange EventOnOutgoingPropertyChange NapDetectionInterval ReliabilityMode ReplicateOnOffline ReplicateOnOnline SerializationMode TransferMode Properties AcceptIncomingChanges : boolean Controls whether or not net channels should accept incoming changes. var AcceptIncomingChanges : Boolean AccurateTimestampOnChange : boolean Controls whether or not the net channel will serialize an accurate timestamp value when changed, or will instead accept an estimated timestamp value. (This setting may be overridden for net channels belonging to a specific net object by enabling the corresponding net object setting) var AccurateTimestampOnChange : Boolean AllowNapping : boolean Controls whether or not net channels may nap (perform change detection on longer intervals) if they haven't changed in a while. var AllowNapping : Boolean AllowRelay : boolean Controls whether or not net channels will have their changes immediately broadcast to all relevant, incidental peers (if any) once received. (Enabling this allows a server to automatically relay client authoritative changes to other clients, otherwise this must be done manually using NetChannel::ReplicateNow) var AllowRelay : Boolean AuthorityDefault : Authority Controls which peer has the authority to observe and replicate property changes on each net channel by default. (Client: Indicates both the client and server are allowed to observe and replicate property changes) (Server: Indicates only the server is allowed to observe and replicate property changes) Only a single client, specified by NetObject::NetUserOwnerPeerId, may possess client authority at any given time. The server is still responsible for relaying contained property changes to other clients, but will not replicate contained property changes back to the authority client. However, the server is also still responsible for other replication commands (such as object creation/destruction), and these WILL be replicated to the authority client. var AuthorityDefault : Authority AuthorityMode : AuthorityMode Controls when net channels can modify their change authority. (Dynamic: Authority may be modified at any time, even after a net object is brought online) (Fixed: Authority may be modified only before a net object is brought online) var AuthorityMode : AuthorityMode AwakeDetectionInterval : integer Controls the frame interval in which awake net channels are observed for changes. var AwakeDetectionInterval : Integer AwakeDuration : integer Controls the frame duration following the last detected change in which net channels are considered actively changing and will be kept awake. var AwakeDuration : Integer DetectionMode : DetectionMode Controls how net channel changes are detected. (Assume: Assumes something has changed) (Manual: Detects changes manually using change flags) (Automatic: Detects changes automatically using comparisons) (Manumatic: Detects changes manually using change flags and automatically using comparisons) var DetectionMode : DetectionMode DetectOutgoingChanges : boolean Controls whether or not net channels should detect outgoing changes. var DetectOutgoingChanges : Boolean EventOnIncomingPropertyChange : boolean Controls whether or not net channels should dispatch NetChannelIncomingPropertyChange when an incoming net property change is accepted. var EventOnIncomingPropertyChange : Boolean EventOnOutgoingPropertyChange : boolean Controls whether or not net channels should dispatch NetChannelOutgoingPropertyChange when an outgoing net property change is detected. var EventOnOutgoingPropertyChange : Boolean NapDetectionInterval : integer Controls the frame interval in which napping net channels are observed for changes. var NapDetectionInterval : Integer ReliabilityMode : ReliabilityMode Controls whether or not net channel changes will be retransmitted should they get lost over the network. (Unreliable: Lost changes are not retransmitted) (Reliable: Lost changes are retransmitted) var ReliabilityMode : ReliabilityMode ReplicateOnOffline : boolean Controls whether or not the net channel will be replicated when the net object goes offline. If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOffline event. var ReplicateOnOffline : Boolean ReplicateOnOnline : boolean Controls whether or not the net channel will be replicated when the net object comes online. If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOnline event. var ReplicateOnOnline : Boolean SerializationMode : SerializationMode Controls how net channels are serialized. (All: Serialize all net properties) (Changed: Serialize only net properties that have changed, using bit flags in between) var SerializationMode : SerializationMode TransferMode : TransferMode Controls how net channel changes are to be ordered and released once received. (Immediate: Changes are released immediately once received, including late changes) (Sequenced: Changes are released immediately once received, discarding late changes) (Ordered: Changes are released immediately once preceding late changes have been received; forces all changes to be sent reliably) var TransferMode : TransferMode Methods"
  },
  "docs/code_reference/class_reference/netchannelpropertychange.html": {
    "href": "docs/code_reference/class_reference/netchannelpropertychange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after an outgoing/incoming net channel property change is detected during a particular replication phase. Methods Properties Base Classes Derived Classes ChannelName event ComponentName Direction Object PropertyName ReplicationPhase Timestamp Properties ChannelName : string read-only The changed net channel. var ChannelName : String ComponentName : string read-only The component which declared the changed net property. var ComponentName : String Direction : TransmissionDirection read-only The change direction. var Direction : TransmissionDirection Object : cog read-only The changed net object. var Object : Cog PropertyName : string read-only The changed net property. var PropertyName : String ReplicationPhase : ReplicationPhase read-only The replication phase. var ReplicationPhase : ReplicationPhase Timestamp : real read-only The time this change occurred. var Timestamp : Real Methods"
  },
  "docs/code_reference/class_reference/netchanneltype.html": {
    "href": "docs/code_reference/class_reference/netchanneltype.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking (NOTE) Network Channel Type. Configures the replication of a set of properties on the network. Methods Properties Base Classes Derived Classes ResetConfig AcceptIncomingChanges safeid32object SetConfig AccurateTimestampOnChange AllowNapping AllowRelay AuthorityDefault AuthorityMode AwakeDetectionInterval AwakeDuration DetectionMode DetectOutgoingChanges EventOnIncomingPropertyChange EventOnOutgoingPropertyChange Name NapDetectionInterval ReliabilityMode ReplicateOnOffline ReplicateOnOnline SerializationMode TransferMode Properties AcceptIncomingChanges : boolean Controls whether or not net channels should accept incoming changes. var AcceptIncomingChanges : Boolean AccurateTimestampOnChange : boolean Controls whether or not the net channel will serialize an accurate timestamp value when changed, or will instead accept an estimated timestamp value. (This setting may be overridden for net channels belonging to a specific net object by enabling the corresponding net object setting) var AccurateTimestampOnChange : Boolean AllowNapping : boolean Controls whether or not net channels may nap (perform change detection on longer intervals) if they haven't changed in a while. var AllowNapping : Boolean AllowRelay : boolean Controls whether or not net channels will have their changes immediately broadcast to all relevant, incidental peers (if any) once received. (Enabling this allows a server to automatically relay client authoritative changes to other clients, otherwise this must be done manually using NetChannel::ReplicateNow) var AllowRelay : Boolean AuthorityDefault : Authority Controls which peer has the authority to observe and replicate property changes on each net channel by default. (Client: Indicates both the client and server are allowed to observe and replicate property changes) (Server: Indicates only the server is allowed to observe and replicate property changes) Only a single client, specified by NetObject::NetUserOwnerPeerId, may possess client authority at any given time. The server is still responsible for relaying contained property changes to other clients, but will not replicate contained property changes back to the authority client. However, the server is also still responsible for other replication commands (such as object creation/destruction), and these WILL be replicated to the authority client. var AuthorityDefault : Authority AuthorityMode : AuthorityMode Controls when net channels can modify their change authority. (Dynamic: Authority may be modified at any time, even after a net object is brought online) (Fixed: Authority may be modified only before a net object is brought online) (Cannot be modified at game runtime) var AuthorityMode : AuthorityMode AwakeDetectionInterval : integer Controls the frame interval in which awake net channels are observed for changes. (Cannot be modified at game runtime) var AwakeDetectionInterval : Integer AwakeDuration : integer Controls the frame duration following the last detected change in which net channels are considered actively changing and will be kept awake. var AwakeDuration : Integer DetectionMode : DetectionMode Controls how net channel changes are detected. (Assume: Assumes something has changed) (Manual: Detects changes manually using change flags) (Automatic: Detects changes automatically using comparisons) (Manumatic: Detects changes manually using change flags and automatically using comparisons) var DetectionMode : DetectionMode DetectOutgoingChanges : boolean Controls whether or not net channels should detect outgoing changes. var DetectOutgoingChanges : Boolean EventOnIncomingPropertyChange : boolean Controls whether or not net channels should dispatch NetChannelIncomingPropertyChange when an incoming net property change is accepted. var EventOnIncomingPropertyChange : Boolean EventOnOutgoingPropertyChange : boolean Controls whether or not net channels should dispatch NetChannelOutgoingPropertyChange when an outgoing net property change is detected. var EventOnOutgoingPropertyChange : Boolean Name : string read-only Net channel type name. var Name : String NapDetectionInterval : integer Controls the frame interval in which napping net channels are observed for changes. (Cannot be modified at game runtime) var NapDetectionInterval : Integer ReliabilityMode : ReliabilityMode Controls whether or not net channel changes will be retransmitted should they get lost over the network. (Unreliable: Lost changes are not retransmitted) (Reliable: Lost changes are retransmitted) var ReliabilityMode : ReliabilityMode ReplicateOnOffline : boolean Controls whether or not the net channel will be replicated when the net object goes offline. If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOffline event. (Cannot be modified at game runtime) var ReplicateOnOffline : Boolean ReplicateOnOnline : boolean Controls whether or not the net channel will be replicated when the net object comes online. If enabled, all net channel property values are guaranteed to be set immediately before the NetObjectOnline event. (Cannot be modified at game runtime) var ReplicateOnOnline : Boolean SerializationMode : SerializationMode Controls how net channels are serialized. (All: Serialize all net properties) (Changed: Serialize only net properties that have changed, using bit flags in between) (Cannot be modified at game runtime) var SerializationMode : SerializationMode TransferMode : TransferMode Controls how net channel changes are to be ordered and released once received. (Immediate: Changes are released immediately once received, including late changes) (Sequenced: Changes are released immediately once received, discarding late changes) (Ordered: Changes are released immediately once preceding late changes have been received; forces all changes to be sent reliably) (Cannot be modified at game runtime) var TransferMode : TransferMode Methods ResetConfig : Void Resets all configuration settings. |Name|Type|Description| |---|---|---| function ResetConfig() SetConfig : Void Sets all configuration settings according to the specified NetChannelConfig resource. |Name|Type|Description| |---|---|---| |netChannelConfig|netchannelconfig| | function SetConfig(netChannelConfig : NetChannelConfig)"
  },
  "docs/code_reference/class_reference/neteventreceived.html": {
    "href": "docs/code_reference/class_reference/neteventreceived.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched before a received net event is dispatched. Methods Properties Base Classes Derived Classes Destination event NetEvent ReturnAllow TheirNetPeerId Properties Destination : cog read-only Dispatch destination object (null if the net object could not be found locally). var Destination : Cog NetEvent : event read-only Network event received. var NetEvent : Event ReturnAllow : boolean Return: Allow the received network event to be dispatched on the destination object? var ReturnAllow : Boolean TheirNetPeerId : integer read-only Their net peer ID. var TheirNetPeerId : Integer Methods"
  },
  "docs/code_reference/class_reference/neteventsent.html": {
    "href": "docs/code_reference/class_reference/neteventsent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after a dispatched net event is sent. Methods Properties Base Classes Derived Classes Destination event NetEvent TheirNetPeerId Properties Destination : cog read-only Dispatch destination object. var Destination : Cog NetEvent : event read-only Network event sent. var NetEvent : Event TheirNetPeerId : integer read-only Their net peer ID. var TheirNetPeerId : Integer Methods"
  },
  "docs/code_reference/class_reference/netgamestarted.html": {
    "href": "docs/code_reference/class_reference/netgamestarted.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after fully joining or hosting a network game. Methods Properties Base Classes Derived Classes GameSession event Properties GameSession : gamesession read-only Network game session. var GameSession : GameSession Methods"
  },
  "docs/code_reference/class_reference/nethost.html": {
    "href": "docs/code_reference/class_reference/nethost.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking (NOTE) Describes a network host. Methods Properties Base Classes Derived Classes BasicHostInfo safeid32 ExtraHostInfo IpAddress Latency Network RoundTripTime Properties BasicHostInfo : eventbundle read-only Basic host info (limited to 480 bytes). var BasicHostInfo : EventBundle ExtraHostInfo : eventbundle read-only Extra host info. var ExtraHostInfo : EventBundle IpAddress : ipaddress read-only Host's IP address. var IpAddress : IpAddress Latency : integer read-only Returns the estimated latency ((RTT/2)) in milliseconds from our peer to this host. var Latency : Integer Network : Network read-only Host's network residence. var Network : Network RoundTripTime : integer read-only Returns the round-trip time (RTT) in milliseconds from our peer to this host. var RoundTripTime : Integer Methods"
  },
  "docs/code_reference/class_reference/nethostlistupdate.html": {
    "href": "docs/code_reference/class_reference/nethostlistupdate.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched when a host discovery operation update occurs. Methods Properties Base Classes Derived Classes Network event Properties Network : Network read-only Operation target network. var Network : Network Methods"
  },
  "docs/code_reference/class_reference/nethostrange.html": {
    "href": "docs/code_reference/class_reference/nethostrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : nethostrange read-only var All : NetHostRange Current : nethost read-only var Current : NetHost IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() NetHostRange : Void constructor Name Type Description function NetHostRange() NetHostRange : Void constructor Name Type Description p0 nethostrange function NetHostRange(p0 : NetHostRange)"
  },
  "docs/code_reference/class_reference/nethostrecord.html": {
    "href": "docs/code_reference/class_reference/nethostrecord.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking (NOTE) NetHostRecord. A record that contains the basic information of a game server. After a certain lifetime records expire on the master server. Methods Properties Base Classes Derived Classes BasicHostInfo safeid32 IpAddress Lifetime Properties BasicHostInfo : eventbundle read-only The info published along with their record. Contains game server specific data. var BasicHostInfo : EventBundle IpAddress : ipaddress read-only The IpAddress associated with this record. This is who published it. var IpAddress : IpAddress Lifetime : real read-only How long has this record been alive in seconds? var Lifetime : Real Methods"
  },
  "docs/code_reference/class_reference/nethostrecordevent.html": {
    "href": "docs/code_reference/class_reference/nethostrecordevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched when a NetHostRecord is discovered, Updated, or Expired. Methods Properties Base Classes Derived Classes HostRecord event Properties HostRecord : nethostrecord read-only Host discovered or refreshed (will contain the first host updated if this is a list update). var HostRecord : NetHostRecord Methods"
  },
  "docs/code_reference/class_reference/nethostupdate.html": {
    "href": "docs/code_reference/class_reference/nethostupdate.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched when a host discovery operation update occurs. Methods Properties Base Classes Derived Classes Host event Network RefreshResult ResponseTime Properties Host : nethost read-only Host discovered or refreshed (will contain the first host updated if this is a list update). var Host : NetHost Network : Network read-only Operation target network. var Network : Network RefreshResult : NetRefreshResult read-only Whether or not the operation completed successfully. var RefreshResult : NetRefreshResult ResponseTime : real read-only Operation response time (from request to completion). var ResponseTime : Real Methods"
  },
  "docs/code_reference/class_reference/netlevelstarted.html": {
    "href": "docs/code_reference/class_reference/netlevelstarted.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after fully loading and synchronizing a level in a net space. Methods Properties Base Classes Derived Classes GameSession event LevelName Space Properties GameSession : gamesession read-only Network game session. var GameSession : GameSession LevelName : string read-only Current level name. var LevelName : String Space : space read-only Network space. var Space : Space Methods"
  },
  "docs/code_reference/class_reference/netlinkconnected.html": {
    "href": "docs/code_reference/class_reference/netlinkconnected.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after sending or receiving a connect confirmation. Methods Properties Base Classes Derived Classes Direction event TheirIpAddress TheirNetPeerId Properties Direction : TransmissionDirection read-only Transmission direction. var Direction : TransmissionDirection TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). var TheirIpAddress : IpAddress TheirNetPeerId : integer read-only Their net peer ID. var TheirNetPeerId : Integer Methods"
  },
  "docs/code_reference/class_reference/netlinkdisconnected.html": {
    "href": "docs/code_reference/class_reference/netlinkdisconnected.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after sending or receiving a disconnect notice. Their net peer ID is released and link is destroyed immediately after this. Methods Properties Base Classes Derived Classes Direction event DisconnectReason RequestBundle TheirIpAddress TheirNetPeerId Properties Direction : TransmissionDirection read-only Transmission direction. var Direction : TransmissionDirection DisconnectReason : DisconnectReason read-only Disconnect reason. var DisconnectReason : DisconnectReason RequestBundle : eventbundle read-only Bundled request event data. var RequestBundle : EventBundle TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). var TheirIpAddress : IpAddress TheirNetPeerId : integer read-only Their net peer ID. var TheirNetPeerId : Integer Methods"
  },
  "docs/code_reference/class_reference/netobject.html": {
    "href": "docs/code_reference/class_reference/netobject.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Networking (NOTE) Network Object. Manages the replication of a single object on the network. Methods Properties Base Classes Derived Classes DispatchBroadcast AcceptIncomingChanges component netpeer DispatchLocal AccurateTimestampOnChange netspace DispatchLocalAndBroadcast AccurateTimestampOnOffline netuser DispatchLocalAndRemote AccurateTimestampOnOnline DispatchRemote AllowNapping Forget AutomaticChannel GetNetChannel DetectOutgoingChanges HasNetChannel IsClient IsOwnedByPeer IsClientAndMine IsOwnedByUser IsClientButNotMine Constructor IsClientOrOffline ReplicateNow IsClientOrServer SelectRemote IsMine SetNetUserOwnerDown IsNapping SetNetUserOwnerUp IsNotMine TakeNap IsNotOwnedByAUser WakeUp IsOffline IsOfflineAndMine IsOfflineButNotMine IsOnline IsOwnedByAUser IsServer IsServerAndMine IsServerButNotMine IsServerOrOffline LastChangeTimePassed LastChangeTimestamp NetObjectId NetPropertyInfos NetUserOwner NetUserOwnerPath NetUserOwnerPeerId NetUserOwnerUserId OfflineTimePassed OfflineTimestamp OnlineTimePassed OnlineTimestamp Role Properties AcceptIncomingChanges : boolean Controls whether or not net channels on this net object may accept incoming changes. var AcceptIncomingChanges : Boolean AccurateTimestampOnChange : boolean Controls whether or not the net object will serialize an accurate timestamp value when changed (on any net channel), or will instead accept an estimated timestamp value. (Enabling this will override the corresponding net channel type setting for all net channels added to this net object) var AccurateTimestampOnChange : Boolean AccurateTimestampOnOffline : boolean Controls whether or not the net object will serialize an accurate timestamp value when taken offline, or will instead accept an estimated timestamp value. var AccurateTimestampOnOffline : Boolean AccurateTimestampOnOnline : boolean Controls whether or not the net object will serialize an accurate timestamp value when brought online, or will instead accept an estimated timestamp value. var AccurateTimestampOnOnline : Boolean AllowNapping : boolean Controls whether or not net channels on this net object may nap (perform change detection on longer intervals) if they haven't changed in a while. var AllowNapping : Boolean AutomaticChannel : netchannelconfig Returns the automatic net channel configuration resource (assigned to net properties unless another channel is specified). var AutomaticChannel : NetChannelConfig DetectOutgoingChanges : boolean Controls whether or not net channels on this net object may detect outgoing changes. var DetectOutgoingChanges : Boolean IsClient : boolean read-only Returns true if our open peer's network role is client, else false. var IsClient : Boolean IsClientAndMine : boolean read-only Returns true if our open peer's network role is client and the net object is conceptually owned by a user added by our local peer, else false. var IsClientAndMine : Boolean IsClientButNotMine : boolean read-only Returns true if our open peer's network role is client and the net object is not conceptually owned by a user added by our local peer, else false. var IsClientButNotMine : Boolean IsClientOrOffline : boolean read-only Returns true if our open peer's network role is client or offline, else false. var IsClientOrOffline : Boolean IsClientOrServer : boolean read-only Returns true if our open peer's network role is client or server, else false. var IsClientOrServer : Boolean IsMine : boolean read-only Returns true if the net object is conceptually owned by a user added by our local peer, else false. var IsMine : Boolean IsNapping : boolean read-only Returns true if all net channels on this net object are napping (performing change detection on longer intervals), else false. var IsNapping : Boolean IsNotMine : boolean read-only Returns true if the net object is not conceptually owned by a user added by our local peer, else false. var IsNotMine : Boolean IsNotOwnedByAUser : boolean read-only Returns true if the net object is not conceptually owned by a user, else false. var IsNotOwnedByAUser : Boolean IsOffline : boolean read-only Returns true if our open peer's network role is offline, else false. var IsOffline : Boolean IsOfflineAndMine : boolean read-only Returns true if our open peer's network role is offline and the net object is conceptually owned by a user added by our local peer, else false. var IsOfflineAndMine : Boolean IsOfflineButNotMine : boolean read-only Returns true if our open peer's network role is offline and the net object is not conceptually owned by a user added by our local peer, else false. var IsOfflineButNotMine : Boolean IsOnline : boolean read-only Returns true if the net object is online, else false. var IsOnline : Boolean IsOwnedByAUser : boolean read-only Returns true if the net object is conceptually owned by a user, else false. var IsOwnedByAUser : Boolean IsServer : boolean read-only Returns true if our open peer's network role is server, else false. var IsServer : Boolean IsServerAndMine : boolean read-only Returns true if our open peer's network role is server and the net object is conceptually owned by a user added by our local peer, else false. var IsServerAndMine : Boolean IsServerButNotMine : boolean read-only Returns true if our open peer's network role is server and the net object is not conceptually owned by a user added by our local peer, else false. var IsServerButNotMine : Boolean IsServerOrOffline : boolean read-only Returns true if our open peer's network role is server or offline, else false. var IsServerOrOffline : Boolean LastChangeTimePassed : real read-only Elapsed time passed since this net object was last changed, else 0. var LastChangeTimePassed : Real LastChangeTimestamp : real read-only Timestamp indicating when this net object was last changed, else 0. var LastChangeTimestamp : Real NetObjectId : integer read-only Returns the net object ID (set if the net object is live), else 0. var NetObjectId : Integer NetPropertyInfos : netpropertyinfos Net property infos added through the property grid. var NetPropertyInfos : NetPropertyInfos NetUserOwner : cog Returns the network user this object conceptually belongs to, else nullptr. var NetUserOwner : Cog NetUserOwnerPath : cogpath read-only Path to the network user this object conceptually belongs to, else empty cog path. var NetUserOwnerPath : CogPath NetUserOwnerPeerId : integer read-only Returns the network peer identifier of the peer who added the user this object conceptually belongs to, else 0. var NetUserOwnerPeerId : Integer NetUserOwnerUserId : integer read-only Returns the network user identifier of the user this object conceptually belongs to, else 0. var NetUserOwnerUserId : Integer OfflineTimePassed : real read-only Elapsed time passed since this net object was taken offline, else 0. var OfflineTimePassed : Real OfflineTimestamp : real read-only Timestamp indicating when this net object was taken offline, else 0. var OfflineTimestamp : Real OnlineTimePassed : real read-only Elapsed time passed since this net object was brought online, else 0. var OnlineTimePassed : Real OnlineTimestamp : real read-only Timestamp indicating when this net object was brought online, else 0. var OnlineTimestamp : Real Role : NetRole read-only Returns our open peer's network role (client, server, offline), else Role::Unspecified. var Role : NetRole Methods DispatchBroadcast : Void Dispatches the net event on the net object for all remote peers. In Offline mode, this calls DispatchLocal only. |Name|Type|Description| |---|---|---| |eventId|string| | |event|event| | function DispatchBroadcast(eventId : String, event : Event) DispatchLocal : Void Dispatches the net event on the net object for the local peer. |Name|Type|Description| |---|---|---| |eventId|string| | |event|event| | function DispatchLocal(eventId : String, event : Event) DispatchLocalAndBroadcast : Void Dispatches the net event on the net object for the local peer and for all remote peers. In Offline mode, this calls DispatchLocal only. |Name|Type|Description| |---|---|---| |eventId|string| | |event|event| | function DispatchLocalAndBroadcast(eventId : String, event : Event) DispatchLocalAndRemote : Void Dispatches the net event on the net object for the local peer and for the remote peer. In Offline mode, this calls DispatchLocal only. |Name|Type|Description| |---|---|---| |eventId|string| | |event|event| | |netPeerId|integer| | function DispatchLocalAndRemote(eventId : String, event : Event, netPeerId : Integer) DispatchRemote : Void Dispatches the net event on the net object for the remote peer. In Offline mode, this calls DispatchLocal only. |Name|Type|Description| |---|---|---| |eventId|string| | |event|event| | |netPeerId|integer| | function DispatchRemote(eventId : String, event : Event, netPeerId : Integer) Forget : boolean [Client] Forgets the online net object locally. [Server] Forgets the online net object locally and remotely for all relevant peers. Effectively removes the net object from the network system without destroying it. Returns true if successful, else false. |Name|Type|Description| |---|---|---| function Forget() : Boolean GetNetChannel : netchannel [Client/Server] Returns the specified net channel, else nullptr. |Name|Type|Description| |---|---|---| |netChannelName|string| | function GetNetChannel(netChannelName : String) : NetChannel HasNetChannel : boolean [Client/Server] Returns true if the net object has the specified net channel, else false. |Name|Type|Description| |---|---|---| |netChannelName|string| | function HasNetChannel(netChannelName : String) : Boolean IsOwnedByPeer : boolean Returns true if the net object is conceptually owned by a user added by the specified peer, else false. |Name|Type|Description| |---|---|---| |netPeerId|integer| | function IsOwnedByPeer(netPeerId : Integer) : Boolean IsOwnedByUser : boolean Returns true if the net object is conceptually owned by the specified user, else false. |Name|Type|Description| |---|---|---| |cog|cog| | function IsOwnedByUser(cog : Cog) : Boolean NetObject : Void constructor Constructor. |Name|Type|Description| |---|---|---| function NetObject() ReplicateNow : boolean [Client/Server] Replicates all net channels' property changes immediately (only where changes are detected). Will also update nap state as configured. Returns true if changes were replicated, else false. |Name|Type|Description| |---|---|---| function ReplicateNow() : Boolean SelectRemote : boolean [Client/Server] Selects the remote net object on the first opposite-role peer found running in another game session instance on the engine. Will fail if the net object is not online, or not found remotely. Returns true if successful, else false. |Name|Type|Description| |---|---|---| function SelectRemote() : Boolean SetNetUserOwnerDown : Void [Server/Offline] Sets the owning network user on this object and down the tree on all children recursively (pre-order traversal). |Name|Type|Description| |---|---|---| |cog|cog| | function SetNetUserOwnerDown(cog : Cog) SetNetUserOwnerUp : Void [Server/Offline] Sets the owning network user on this object and up the tree on each parent recursively (pre-order traversal). |Name|Type|Description| |---|---|---| |cog|cog| | function SetNetUserOwnerUp(cog : Cog) TakeNap : Void Forces all net channels on this net object to start napping immediately. |Name|Type|Description| |---|---|---| function TakeNap() WakeUp : Void Forces all net channels on this net object to stop napping immediately. |Name|Type|Description| |---|---|---| function WakeUp()"
  },
  "docs/code_reference/class_reference/netobjectoffline.html": {
    "href": "docs/code_reference/class_reference/netobjectoffline.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched before the net object is taken offline. Methods Properties Base Classes Derived Classes GameSession event IsEndOfLifespan Object Space Properties GameSession : gamesession read-only Network game session. var GameSession : GameSession IsEndOfLifespan : boolean read-only Is this the end of the object's lifespan? var IsEndOfLifespan : Boolean Object : cog read-only Network object. var Object : Cog Space : space read-only Network space. var Space : Space Methods"
  },
  "docs/code_reference/class_reference/netobjectonline.html": {
    "href": "docs/code_reference/class_reference/netobjectonline.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after the net object is brought online. Methods Properties Base Classes Derived Classes GameSession event IsStartOfLifespan Object Space Properties GameSession : gamesession read-only Network game session. var GameSession : GameSession IsStartOfLifespan : boolean read-only Is this the start of the object's lifespan? var IsStartOfLifespan : Boolean Object : cog read-only Network object. var Object : Cog Space : space read-only Network space. var Space : Space Methods"
  },
  "docs/code_reference/class_reference/netpeer.html": {
    "href": "docs/code_reference/class_reference/netpeer.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Networking (NOTE) Network Peer. Acts as a host on the network. Manages network object state and event replication. Methods Properties Base Classes Derived Classes AddUser BasicHostInfoTimeout netobject CancelHostRequests ExtraHostInfoTimeout ClearHostList FrameFillSkip ClearHostLists FrameFillWarning Close HostPingInterval ConnectLink HostPortRangeEnd DisconnectAllLinks HostPortRangeStart DisconnectLink Info DiscoverHostList InternetDiscoverable GetHostByAddress InternetHostListTimeout GetHostByIndex InternetHostPublishInterval GetHostList InternetHostRecordLifetime GetLinkCreationDirection InternetSameIpHostRecordLimit GetLinkInternetProtocol Ipv4Address GetLinkIpAddress Ipv4Host GetLinkNetPeerId Ipv4Port GetLinkState IsOpen GetLinkStatus LanDiscoverable GetNetObject LinkCount GetNetSpace NetObjectCount GetOurIpAddressFromLink NetPeerId GetUser NetSpaceCount GetUsersAddedByPeer NetUserCount Constructor UserCount Open Users OpenClient UsersAddedByMyPeer OpenOffline OpenServer RefreshHost RefreshHostList RemoveUser SubscribeToMasterServer UnsubscribeFromMasterServer Properties BasicHostInfoTimeout : real [Client/Server] Determines the amount of time the client is willing to wait for. var BasicHostInfoTimeout : Real ExtraHostInfoTimeout : real [Client/Server] Determines the amount of time the client will wait for extra host info from a server. var ExtraHostInfoTimeout : Real FrameFillSkip : real Controls when to skip change replication for the current frame because of remaining outgoing bandwidth utilization ratio on any given link. var FrameFillSkip : Real FrameFillWarning : real Controls when the user will be warned of their current frame's outgoing bandwidth utilization ratio on any given link. var FrameFillWarning : Real HostPingInterval : real [Client/Server] The time between (potentially) redundant pings from a net peer. var HostPingInterval : Real HostPortRangeEnd : integer Configures the inclusive range of ports used to host this game. var HostPortRangeEnd : Integer HostPortRangeStart : integer Configures the inclusive range of ports used to host this game. var HostPortRangeStart : Integer Info : string read-only Current peer identifier information display string. Provided for logging and debugging convenience. Contains the peer's local IP address, network role, and net peer ID. var Info : String InternetDiscoverable : boolean Configures the server peer to be discoverable on the internet. var InternetDiscoverable : Boolean InternetHostListTimeout : real [Client/Server] Determines the amount of time the client is willing to wait to get a host list from master server. var InternetHostListTimeout : Real InternetHostPublishInterval : real Controls how often the internet discoverable peer sends a host record message to its master server subscriptions. var InternetHostPublishInterval : Real InternetHostRecordLifetime : real Controls the lifetime of every host record stored on the master server. var InternetHostRecordLifetime : Real InternetSameIpHostRecordLimit : integer Controls how many host records from the same IP address may be stored on the master server (used to prevent flood attacks). var InternetSameIpHostRecordLimit : Integer Ipv4Address : ipaddress read-only Returns the peer's local IPv4 address, else IpAddress(). Set if the peer is open with an IPv4 socket. var Ipv4Address : IpAddress Ipv4Host : string read-only Returns the peer's local IPv4 address host as a numeric address string, else String(). var Ipv4Host : String Ipv4Port : integer read-only Returns the peer's local IPv4 address port, else String(). var Ipv4Port : Integer IsOpen : boolean read-only Returns true if the peer is open, else false. var IsOpen : Boolean LanDiscoverable : boolean Configures the server peer to be discoverable on the local area network. var LanDiscoverable : Boolean LinkCount : integer read-only [Client/Server] Returns the number of connected network links managed by this peer. var LinkCount : Integer NetObjectCount : integer read-only Returns the number of net objects in this game session (but not including the net peer itself). var NetObjectCount : Integer NetPeerId : integer read-only Returns the open peer's unique network identifier, else 0. [Server/Offline] This will always be zero. [Client] This will be non-zero once connected to a server, else zero. var NetPeerId : Integer NetSpaceCount : integer read-only Returns the number of net spaces in this game session. var NetSpaceCount : Integer NetUserCount : integer read-only Returns the number of net users in this game session. var NetUserCount : Integer UserCount : integer read-only Returns the number of added network users. var UserCount : Integer Users : netuserrange read-only Returns all added network users. var Users : NetUserRange UsersAddedByMyPeer : netuserrange read-only Returns the network users added by our local peer. var UsersAddedByMyPeer : NetUserRange Methods AddUser : boolean Initiates a network user add request to add a new user belonging to our local peer (delayed until end of frame). Listen to the NetUser event interface to handle the results. Returns true if the request was successfully initiated, else false. |Name|Type|Description| |---|---|---| function AddUser() : Boolean AddUser : boolean Initiates a network user add request to add a new user belonging to our local peer (delayed until end of frame). Listen to the NetUser event interface to handle the results. Returns true if the request was successfully initiated, else false. |Name|Type|Description| |---|---|---| |requestEvent|event| | function AddUser(requestEvent : Event) : Boolean AddUser : boolean Initiates a network user add request to add a new user belonging to our local peer (delayed until end of frame). Listen to the NetUser event interface to handle the results. Returns true if the request was successfully initiated, else false. |Name|Type|Description| |---|---|---| |requestBundle|eventbundle| | function AddUser(requestBundle : EventBundle) : Boolean CancelHostRequests : Void Cancels all host discovery and refresh requests currently in progress (the operations will be considered unsuccessful). Listen to the NetHost event interface to handle the results. |Name|Type|Description| |---|---|---| function CancelHostRequests() ClearHostList : Void Clears the given network's host list. |Name|Type|Description| |---|---|---| |network|Network| | function ClearHostList(network : Network) ClearHostLists : Void Name Type Description function ClearHostLists() Close : Void Closes the peer (safe to call multiple times). |Name|Type|Description| |---|---|---| function Close() ConnectLink : boolean [Client] Initiates a connect attempt with the remote peer (delayed until end of frame). Listen to the NetLink event interface to handle the results. Returns true if a connect request was successfully initiated, else false. |Name|Type|Description| |---|---|---| |ipAddress|ipaddress| | function ConnectLink(ipAddress : IpAddress) : Boolean ConnectLink : boolean [Client] Initiates a connect attempt with the remote peer (delayed until end of frame). Listen to the NetLink event interface to handle the results. Returns true if a connect request was successfully initiated, else false. |Name|Type|Description| |---|---|---| |ipAddress|ipaddress| | |requestEvent|event| | function ConnectLink(ipAddress : IpAddress, requestEvent : Event) : Boolean ConnectLink : boolean [Client] Initiates a connect attempt with the remote peer (delayed until end of frame). Listen to the NetLink event interface to handle the results. Returns true if a connect request was successfully initiated, else false. |Name|Type|Description| |---|---|---| |ipAddress|ipaddress| | |requestBundle|eventbundle| | function ConnectLink(ipAddress : IpAddress, requestBundle : EventBundle) : Boolean DisconnectAllLinks : integer [Client/Server] Disconnects by request from all remote peers. Listen to the NetLink event interface to handle the results. Returns the number of links disconnected. |Name|Type|Description| |---|---|---| function DisconnectAllLinks() : Integer DisconnectAllLinks : integer [Client/Server] Disconnects by request from all remote peers. Listen to the NetLink event interface to handle the results. Returns the number of links disconnected. |Name|Type|Description| |---|---|---| |requestEvent|event| | function DisconnectAllLinks(requestEvent : Event) : Integer DisconnectAllLinks : integer [Client/Server] Disconnects by request from all remote peers. Listen to the NetLink event interface to handle the results. Returns the number of links disconnected. |Name|Type|Description| |---|---|---| |requestBundle|eventbundle| | function DisconnectAllLinks(requestBundle : EventBundle) : Integer DisconnectLink : boolean [Client/Server] Disconnects by request from the remote peer. Listen to the NetLink event interface to handle the results. Returns true if a disconnect notice was successfully initiated, else false. |Name|Type|Description| |---|---|---| |netPeerId|integer| | function DisconnectLink(netPeerId : Integer) : Boolean DisconnectLink : boolean [Client/Server] Disconnects by request from the remote peer. Listen to the NetLink event interface to handle the results. Returns true if a disconnect notice was successfully initiated, else false. |Name|Type|Description| |---|---|---| |netPeerId|integer| | |requestEvent|event| | function DisconnectLink(netPeerId : Integer, requestEvent : Event) : Boolean DisconnectLink : boolean [Client/Server] Disconnects by request from the remote peer. Listen to the NetLink event interface to handle the results. Returns true if a disconnect notice was successfully initiated, else false. |Name|Type|Description| |---|---|---| |netPeerId|integer| | |requestBundle|eventbundle| | function DisconnectLink(netPeerId : Integer, requestBundle : EventBundle) : Boolean DisconnectLink : boolean [Client/Server] Disconnects by request from the remote peer. Listen to the NetLink event interface to handle the results. Returns true if a disconnect notice was successfully initiated, else false. |Name|Type|Description| |---|---|---| |ipAddress|ipaddress| | function DisconnectLink(ipAddress : IpAddress) : Boolean DisconnectLink : boolean [Client/Server] Disconnects by request from the remote peer. Listen to the NetLink event interface to handle the results. Returns true if a disconnect notice was successfully initiated, else false. |Name|Type|Description| |---|---|---| |ipAddress|ipaddress| | |requestEvent|event| | function DisconnectLink(ipAddress : IpAddress, requestEvent : Event) : Boolean DisconnectLink : boolean [Client/Server] Disconnects by request from the remote peer. Listen to the NetLink event interface to handle the results. Returns true if a disconnect notice was successfully initiated, else false. |Name|Type|Description| |---|---|---| |ipAddress|ipaddress| | |requestBundle|eventbundle| | function DisconnectLink(ipAddress : IpAddress, requestBundle : EventBundle) : Boolean DiscoverHostList : boolean Discovers the given network's host list. Listen to the NetHost event interface to handle the results. Returns true if the discovery was successfully started, else false. |Name|Type|Description| |---|---|---| |network|Network| | |removeStaleHosts|boolean| | function DiscoverHostList(network : Network, removeStaleHosts : Boolean) : Boolean GetHostByAddress : nethost Name Type Description ipAddress ipaddress function GetHostByAddress(ipAddress : IpAddress) : NetHost GetHostByAddress : nethost Name Type Description network Network ipAddress ipaddress function GetHostByAddress(network : Network, ipAddress : IpAddress) : NetHost GetHostByIndex : nethost Returns the first equivalent host found in the given network's host list, else nullptr. |Name|Type|Description| |---|---|---| |network|Network| | |index|integer| | function GetHostByIndex(network : Network, index : Integer) : NetHost GetHostList : nethostrange Returns the given network's host list. |Name|Type|Description| |---|---|---| |network|Network| | function GetHostList(network : Network) : NetHostRange GetLinkCreationDirection : TransmissionDirection [Client/Server] Returns the direction in which the link was created (which peer initiated the connection), else TransmissionDirection::Unspecified. |Name|Type|Description| |---|---|---| |netPeerId|integer| | function GetLinkCreationDirection(netPeerId : Integer) : TransmissionDirection GetLinkInternetProtocol : InternetProtocol [Client/Server] Returns the link's IP address protocol version, else InternetProtocol::Unspecified. This IP address protocol will never change for the lifetime of this link. |Name|Type|Description| |---|---|---| |netPeerId|integer| | function GetLinkInternetProtocol(netPeerId : Integer) : InternetProtocol GetLinkIpAddress : ipaddress [Client/Server] Returns the remote peer's IP address (as seen from our perspective), else IpAddress(). For outgoing links this is the same IP address specified in our connect call. This IP address will never change for the lifetime of this link. |Name|Type|Description| |---|---|---| |netPeerId|integer| | function GetLinkIpAddress(netPeerId : Integer) : IpAddress GetLinkNetPeerId : integer Returns the remote peer's unique network identifier, else 0. [Server] This will be non-zero if the client is connected, else zero. [Client] This will always be zero. |Name|Type|Description| |---|---|---| |ipAddress|ipaddress| | function GetLinkNetPeerId(ipAddress : IpAddress) : Integer GetLinkState : LinkState [Client/Server] Returns the link's specific state, else LinkState::Unspecified. |Name|Type|Description| |---|---|---| |netPeerId|integer| | function GetLinkState(netPeerId : Integer) : LinkState GetLinkStatus : LinkStatus [Client/Server] Returns the link's overall status, else LinkStatus::Unspecified. |Name|Type|Description| |---|---|---| |netPeerId|integer| | function GetLinkStatus(netPeerId : Integer) : LinkStatus GetNetObject : cog Returns the live net object specified if it is known locally, else nullptr. |Name|Type|Description| |---|---|---| |netObjectId|integer| | function GetNetObject(netObjectId : Integer) : Cog GetNetSpace : space Returns the live net space specified if it is known locally, else nullptr. |Name|Type|Description| |---|---|---| |netObjectId|integer| | function GetNetSpace(netObjectId : Integer) : Space GetOurIpAddressFromLink : ipaddress [Client/Server] Returns our peer's IP address (as seen from their perspective), else IpAddress(). For incoming links this is the same IP address specified in their connect call. (Available if the link is connected or incoming and attempting connection) It is absolutely possible that this does not match our local IP address. |Name|Type|Description| |---|---|---| |netPeerId|integer| | function GetOurIpAddressFromLink(netPeerId : Integer) : IpAddress GetUser : cog Returns the specified network user, else nullptr. |Name|Type|Description| |---|---|---| |netUserId|integer| | function GetUser(netUserId : Integer) : Cog GetUsersAddedByPeer : netuserrange Returns the network users added by the specified peer. |Name|Type|Description| |---|---|---| |netPeerId|integer| | function GetUsersAddedByPeer(netPeerId : Integer) : NetUserRange NetPeer : Void constructor Constructor. |Name|Type|Description| |---|---|---| function NetPeer() Open : boolean Opens the peer with the specified network role on any available port. Returns true if successful, else false. |Name|Type|Description| |---|---|---| |role|NetRole| | function Open(role : NetRole) : Boolean Open : boolean Opens the peer with the specified network role and port settings. Specify port 0 to indicate any available port should be used. Returns true if successful, else false. |Name|Type|Description| |---|---|---| |role|NetRole| | |port|integer| | function Open(role : NetRole, port : Integer) : Boolean Open : boolean Opens the peer with the specified network role, port, and retry settings. For the given number of retries, if binding is unsuccessful, the port number is incremented and binding is attempted again. Specify port 0 to indicate any available port should be used. Returns true if successful, else false. |Name|Type|Description| |---|---|---| |role|NetRole| | |port|integer| | |retries|integer| | function Open(role : NetRole, port : Integer, retries : Integer) : Boolean OpenClient : boolean Opens the peer as a client on any available port. Returns true if successful, else false. |Name|Type|Description| |---|---|---| function OpenClient() : Boolean OpenClient : boolean Opens the peer as a client with the specified network port. Specify port 0 to indicate any available port should be used. Returns true if successful, else false. |Name|Type|Description| |---|---|---| |port|integer| | function OpenClient(port : Integer) : Boolean OpenClient : boolean Opens the peer as a client with the specified network port and retry settings. For the given number of retries, if binding is unsuccessful, the port number is incremented and binding is attempted again. Specify port 0 to indicate any available port should be used. Returns true if successful, else false. |Name|Type|Description| |---|---|---| |port|integer| | |retries|integer| | function OpenClient(port : Integer, retries : Integer) : Boolean OpenOffline : boolean Opens the peer in offline mode. In offline mode, the peer will act as a pass-through and simulate all applicable network events locally. Always succeeds and returns true. |Name|Type|Description| |---|---|---| function OpenOffline() : Boolean OpenServer : boolean Opens the peer as a server on any available port. Returns true if successful, else false. |Name|Type|Description| |---|---|---| function OpenServer() : Boolean OpenServer : boolean Opens the peer as a server with the specified network port. Specify port 0 to indicate any available port should be used. Returns true if successful, else false. |Name|Type|Description| |---|---|---| |port|integer| | function OpenServer(port : Integer) : Boolean RefreshHost : boolean Refreshes the specified host in the given network's host list. Allowing discovery will enable the host to be discovered if it is not an already known host. Listen to the NetHost event interface to handle the results. Returns true if the host was found and the refresh successfully started, else false (the host could not be found). |Name|Type|Description| |---|---|---| |network|Network| | |ipAddress|ipaddress| | |getExtraHostInfo|boolean| | |allowDiscovery|boolean| | |removeStaleHosts|boolean| | function RefreshHost(network : Network, ipAddress : IpAddress, getExtraHostInfo : Boolean, allowDiscovery : Boolean, removeStaleHosts : Boolean) : Boolean RefreshHostList : boolean Refreshes all hosts in the given network's host list. Allowing discovery will enable new hosts to be discovered in the process of refreshing. Listen to the NetHost event interface to handle the results. Returns true if the refresh was successfully started, else false. |Name|Type|Description| |---|---|---| |network|Network| | |getExtraHostInfo|boolean| | |allowDiscovery|boolean| | |removeStaleHosts|boolean| | function RefreshHostList(network : Network, getExtraHostInfo : Boolean, allowDiscovery : Boolean, removeStaleHosts : Boolean) : Boolean RemoveUser : boolean Name Type Description cog cog function RemoveUser(cog : Cog) : Boolean RemoveUser : boolean Name Type Description cog cog requestEvent event function RemoveUser(cog : Cog, requestEvent : Event) : Boolean RemoveUser : boolean Name Type Description cog cog requestBundle eventbundle function RemoveUser(cog : Cog, requestBundle : EventBundle) : Boolean SubscribeToMasterServer : Void Subscribes to the master server located at the specified IP address. All internet host discovery, record publishing, connection facilitation (NAT punch-through) requests are performed on these master server subscriptions in the order they were subscribed. |Name|Type|Description| |---|---|---| |ipAddress|ipaddress| | function SubscribeToMasterServer(ipAddress : IpAddress) UnsubscribeFromMasterServer : Void Unsubscribes from the master server located at the specified IP address (if subscribed). |Name|Type|Description| |---|---|---| |ipAddress|ipaddress| | function UnsubscribeFromMasterServer(ipAddress : IpAddress)"
  },
  "docs/code_reference/class_reference/netpeerclosed.html": {
    "href": "docs/code_reference/class_reference/netpeerclosed.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched before gracefully closing the net peer. Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/netpeeropened.html": {
    "href": "docs/code_reference/class_reference/netpeeropened.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after successfully opening the net peer. Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/netpeerreceivedconnectrequest.html": {
    "href": "docs/code_reference/class_reference/netpeerreceivedconnectrequest.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after receiving a connect request. If accepted, their net peer ID is assigned immediately after this. Return true to accept the connect request, else false. Methods Properties Base Classes Derived Classes OurIpAddress event ReturnOurConnectResponse ReturnOurResponseBundle TheirIpAddress TheirPendingUserAddRequestCount TheirRequestBundle Properties OurIpAddress : ipaddress read-only Our IP address (as seen from their perspective). var OurIpAddress : IpAddress ReturnOurConnectResponse : boolean Return: Our connect response (accept the connect request?). var ReturnOurConnectResponse : Boolean ReturnOurResponseBundle : eventbundle Return: Our bundled response event data. var ReturnOurResponseBundle : EventBundle TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). var TheirIpAddress : IpAddress TheirPendingUserAddRequestCount : integer read-only Their pending user add requests following this connect request (within the same frame). var TheirPendingUserAddRequestCount : Integer TheirRequestBundle : eventbundle read-only Their bundled request event data. var TheirRequestBundle : EventBundle Methods"
  },
  "docs/code_reference/class_reference/netpeerreceivedconnectresponse.html": {
    "href": "docs/code_reference/class_reference/netpeerreceivedconnectresponse.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after receiving a connect response. If accepted, our net peer ID is set immediately before this and a connect confirmation is sent after this. If denied, our net peer ID is cleared and link is destroyed immediately after this. Methods Properties Base Classes Derived Classes OurIpAddress event OurNetPeerId OurPendingUserAddRequestCount OurRequestBundle TheirConnectResponse TheirIpAddress TheirResponseBundle Properties OurIpAddress : ipaddress read-only Our IP address (as seen from their perspective). var OurIpAddress : IpAddress OurNetPeerId : integer read-only Our net peer ID (set only if accepted). var OurNetPeerId : Integer OurPendingUserAddRequestCount : integer read-only Our pending user add requests following this connect request (within the same frame). var OurPendingUserAddRequestCount : Integer OurRequestBundle : eventbundle read-only Our bundled request event data. var OurRequestBundle : EventBundle TheirConnectResponse : ConnectResponse read-only Their connect response. var TheirConnectResponse : ConnectResponse TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). var TheirIpAddress : IpAddress TheirResponseBundle : eventbundle read-only Their bundled response event data. var TheirResponseBundle : EventBundle Methods"
  },
  "docs/code_reference/class_reference/netpeerreceiveduseraddrequest.html": {
    "href": "docs/code_reference/class_reference/netpeerreceiveduseraddrequest.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after receiving a net user add request. Methods Properties Base Classes Derived Classes ReturnOurAddResponse event ReturnOurResponseBundle ReturnTheirNetUser TheirIpAddress TheirNetPeerId TheirNetUserId TheirRequestBundle Properties ReturnOurAddResponse : boolean Return: Our add response (accept the add request?). var ReturnOurAddResponse : Boolean ReturnOurResponseBundle : eventbundle Return: Our bundled response event data. var ReturnOurResponseBundle : EventBundle ReturnTheirNetUser : cog Return: Their network user object (must have a NetUser component). var ReturnTheirNetUser : Cog TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). var TheirIpAddress : IpAddress TheirNetPeerId : integer read-only Their net peer ID. var TheirNetPeerId : Integer TheirNetUserId : integer read-only Their net user ID (released back to the store if not accepted). var TheirNetUserId : Integer TheirRequestBundle : eventbundle read-only Their bundled request event data. var TheirRequestBundle : EventBundle Methods"
  },
  "docs/code_reference/class_reference/netpeerreceiveduseraddresponse.html": {
    "href": "docs/code_reference/class_reference/netpeerreceiveduseraddresponse.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after receiving a net user add response. Methods Properties Base Classes Derived Classes OurNetUserId event OurRequestBundle TheirAddResponse TheirIpAddress TheirNetPeerId TheirResponseBundle Properties OurNetUserId : integer read-only Our net user ID (set only if accepted). var OurNetUserId : Integer OurRequestBundle : eventbundle read-only Our bundled request event data. var OurRequestBundle : EventBundle TheirAddResponse : NetUserAddResponse read-only Their add response. var TheirAddResponse : NetUserAddResponse TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). var TheirIpAddress : IpAddress TheirNetPeerId : integer read-only Their net peer ID. var TheirNetPeerId : Integer TheirResponseBundle : eventbundle read-only Their bundled response event data. var TheirResponseBundle : EventBundle Methods"
  },
  "docs/code_reference/class_reference/netpeersentconnectrequest.html": {
    "href": "docs/code_reference/class_reference/netpeersentconnectrequest.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after sending a connect request. Methods Properties Base Classes Derived Classes OurPendingUserAddRequestCount event OurRequestBundle TheirIpAddress Properties OurPendingUserAddRequestCount : integer read-only Our pending user add requests following this connect request (within the same frame). var OurPendingUserAddRequestCount : Integer OurRequestBundle : eventbundle read-only Our bundled request event data. var OurRequestBundle : EventBundle TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). var TheirIpAddress : IpAddress Methods"
  },
  "docs/code_reference/class_reference/netpeersentconnectresponse.html": {
    "href": "docs/code_reference/class_reference/netpeersentconnectresponse.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after sending a connect response. If denied, their net peer ID is released and link is destroyed immediately after this. Methods Properties Base Classes Derived Classes OurConnectResponse event OurIpAddress OurResponseBundle TheirIpAddress TheirNetPeerId TheirPendingUserAddRequestCount TheirRequestBundle Properties OurConnectResponse : ConnectResponse read-only Our connect response. var OurConnectResponse : ConnectResponse OurIpAddress : ipaddress read-only Our IP address (as seen from their perspective). var OurIpAddress : IpAddress OurResponseBundle : eventbundle read-only Our bundled response event data. var OurResponseBundle : EventBundle TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). var TheirIpAddress : IpAddress TheirNetPeerId : integer read-only Their net peer ID (set only if accepted). var TheirNetPeerId : Integer TheirPendingUserAddRequestCount : integer read-only Their pending user add requests following this connect request (within the same frame). var TheirPendingUserAddRequestCount : Integer TheirRequestBundle : eventbundle read-only Their bundled request event data. var TheirRequestBundle : EventBundle Methods"
  },
  "docs/code_reference/class_reference/netpeersentuseraddrequest.html": {
    "href": "docs/code_reference/class_reference/netpeersentuseraddrequest.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after sending a net user add request. Methods Properties Base Classes Derived Classes OurRequestBundle event TheirIpAddress TheirNetPeerId Properties OurRequestBundle : eventbundle read-only Our bundled request event data. var OurRequestBundle : EventBundle TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). var TheirIpAddress : IpAddress TheirNetPeerId : integer read-only Their net peer ID. var TheirNetPeerId : Integer Methods"
  },
  "docs/code_reference/class_reference/netpeersentuseraddresponse.html": {
    "href": "docs/code_reference/class_reference/netpeersentuseraddresponse.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after sending a net user add response. Methods Properties Base Classes Derived Classes OurAddResponse event OurResponseBundle TheirIpAddress TheirNetPeerId TheirNetUser TheirNetUserId TheirRequestBundle Properties OurAddResponse : NetUserAddResponse read-only Our add response. var OurAddResponse : NetUserAddResponse OurResponseBundle : eventbundle read-only Our bundled response event data. var OurResponseBundle : EventBundle TheirIpAddress : ipaddress read-only Their IP address (as seen from our perspective). var TheirIpAddress : IpAddress TheirNetPeerId : integer read-only Their net peer ID. var TheirNetPeerId : Integer TheirNetUser : cog read-only Their net user object about to be added (set only if accepted). var TheirNetUser : Cog TheirNetUserId : integer read-only Their net user ID (set only if accepted). var TheirNetUserId : Integer TheirRequestBundle : eventbundle read-only Their bundled request event data. var TheirRequestBundle : EventBundle Methods"
  },
  "docs/code_reference/class_reference/netproperty.html": {
    "href": "docs/code_reference/class_reference/netproperty.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking (NOTE) Network Property. Manages the replication of a single property on the network. Methods Properties Base Classes Derived Classes LastChangeTimePassed safeid32object LastChangeTimestamp Name NetChannel NetPropertyType Properties LastChangeTimePassed : real read-only Elapsed time passed since this net property was last changed, else 0. var LastChangeTimePassed : Real LastChangeTimestamp : real read-only Timestamp indicating when this net property was last changed, else 0. var LastChangeTimestamp : Real Name : string read-only Net property name. var Name : String NetChannel : netchannel read-only Operating net channel. var NetChannel : NetChannel NetPropertyType : netpropertytype read-only Operating net property type. var NetPropertyType : NetPropertyType Methods"
  },
  "docs/code_reference/class_reference/netpropertyconfig.html": {
    "href": "docs/code_reference/class_reference/netpropertyconfig.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Networking (NOTE) Network Property Configuration. Defines a configuration for the replication of a single property on the network. Methods Properties Base Classes Derived Classes ActiveConvergenceWeight dataresource BasicNetType ConvergenceInterval DeltaThresholdDoubleInteger DeltaThresholdDoubleReal DeltaThresholdInteger DeltaThresholdInteger2 DeltaThresholdInteger3 DeltaThresholdInteger4 DeltaThresholdQuaternion DeltaThresholdReal DeltaThresholdReal2 DeltaThresholdReal3 DeltaThresholdReal4 EventOnConvergenceStateChange ExtrapolationLimit InterpolationCurve QuantizationRangeMaxDoubleInteger QuantizationRangeMaxDoubleReal QuantizationRangeMaxInteger QuantizationRangeMaxInteger2 QuantizationRangeMaxInteger3 QuantizationRangeMaxInteger4 QuantizationRangeMaxQuaternion QuantizationRangeMaxReal QuantizationRangeMaxReal2 QuantizationRangeMaxReal3 QuantizationRangeMaxReal4 QuantizationRangeMinDoubleInteger QuantizationRangeMinDoubleReal QuantizationRangeMinInteger QuantizationRangeMinInteger2 QuantizationRangeMinInteger3 QuantizationRangeMinInteger4 QuantizationRangeMinQuaternion QuantizationRangeMinReal QuantizationRangeMinReal2 QuantizationRangeMinReal3 QuantizationRangeMinReal4 RestingConvergenceDuration SampleTimeOffset SerializationMode SnapThresholdDoubleInteger SnapThresholdDoubleReal SnapThresholdInteger SnapThresholdInteger2 SnapThresholdInteger3 SnapThresholdInteger4 SnapThresholdQuaternion SnapThresholdReal SnapThresholdReal2 SnapThresholdReal3 SnapThresholdReal4 UseConvergence UseDeltaThreshold UseHalfFloats UseInterpolation UseQuantization Properties ActiveConvergenceWeight : real Active convergence weight applied every convergence interval. var ActiveConvergenceWeight : Real BasicNetType : BasicNetType Target basic property type. var BasicNetType : BasicNetType ConvergenceInterval : integer Convergence interval. var ConvergenceInterval : Integer DeltaThresholdDoubleInteger : doubleinteger var DeltaThresholdDoubleInteger : DoubleInteger DeltaThresholdDoubleReal : doublereal var DeltaThresholdDoubleReal : DoubleReal DeltaThresholdInteger : integer var DeltaThresholdInteger : Integer DeltaThresholdInteger2 : integer2 var DeltaThresholdInteger2 : Integer2 DeltaThresholdInteger3 : integer3 var DeltaThresholdInteger3 : Integer3 DeltaThresholdInteger4 : integer4 var DeltaThresholdInteger4 : Integer4 DeltaThresholdQuaternion : quaternion var DeltaThresholdQuaternion : Quaternion DeltaThresholdReal : real var DeltaThresholdReal : Real DeltaThresholdReal2 : real2 var DeltaThresholdReal2 : Real2 DeltaThresholdReal3 : real3 var DeltaThresholdReal3 : Real3 DeltaThresholdReal4 : real4 var DeltaThresholdReal4 : Real4 EventOnConvergenceStateChange : boolean Event on convergence state change? var EventOnConvergenceStateChange : Boolean ExtrapolationLimit : real Extrapolation time limit. var ExtrapolationLimit : Real InterpolationCurve : CurveType Interpolation curve type. var InterpolationCurve : CurveType QuantizationRangeMaxDoubleInteger : doubleinteger var QuantizationRangeMaxDoubleInteger : DoubleInteger QuantizationRangeMaxDoubleReal : doublereal var QuantizationRangeMaxDoubleReal : DoubleReal QuantizationRangeMaxInteger : integer var QuantizationRangeMaxInteger : Integer QuantizationRangeMaxInteger2 : integer2 var QuantizationRangeMaxInteger2 : Integer2 QuantizationRangeMaxInteger3 : integer3 var QuantizationRangeMaxInteger3 : Integer3 QuantizationRangeMaxInteger4 : integer4 var QuantizationRangeMaxInteger4 : Integer4 QuantizationRangeMaxQuaternion : quaternion var QuantizationRangeMaxQuaternion : Quaternion QuantizationRangeMaxReal : real var QuantizationRangeMaxReal : Real QuantizationRangeMaxReal2 : real2 var QuantizationRangeMaxReal2 : Real2 QuantizationRangeMaxReal3 : real3 var QuantizationRangeMaxReal3 : Real3 QuantizationRangeMaxReal4 : real4 var QuantizationRangeMaxReal4 : Real4 QuantizationRangeMinDoubleInteger : doubleinteger var QuantizationRangeMinDoubleInteger : DoubleInteger QuantizationRangeMinDoubleReal : doublereal var QuantizationRangeMinDoubleReal : DoubleReal QuantizationRangeMinInteger : integer var QuantizationRangeMinInteger : Integer QuantizationRangeMinInteger2 : integer2 var QuantizationRangeMinInteger2 : Integer2 QuantizationRangeMinInteger3 : integer3 var QuantizationRangeMinInteger3 : Integer3 QuantizationRangeMinInteger4 : integer4 var QuantizationRangeMinInteger4 : Integer4 QuantizationRangeMinQuaternion : quaternion var QuantizationRangeMinQuaternion : Quaternion QuantizationRangeMinReal : real var QuantizationRangeMinReal : Real QuantizationRangeMinReal2 : real2 var QuantizationRangeMinReal2 : Real2 QuantizationRangeMinReal3 : real3 var QuantizationRangeMinReal3 : Real3 QuantizationRangeMinReal4 : real4 var QuantizationRangeMinReal4 : Real4 RestingConvergenceDuration : real Resting convergence duration handled every convergence interval. var RestingConvergenceDuration : Real SampleTimeOffset : real Sample time offset from now. var SampleTimeOffset : Real SerializationMode : SerializationMode Serialization mode. var SerializationMode : SerializationMode SnapThresholdDoubleInteger : doubleinteger var SnapThresholdDoubleInteger : DoubleInteger SnapThresholdDoubleReal : doublereal var SnapThresholdDoubleReal : DoubleReal SnapThresholdInteger : integer var SnapThresholdInteger : Integer SnapThresholdInteger2 : integer2 var SnapThresholdInteger2 : Integer2 SnapThresholdInteger3 : integer3 var SnapThresholdInteger3 : Integer3 SnapThresholdInteger4 : integer4 var SnapThresholdInteger4 : Integer4 SnapThresholdQuaternion : quaternion var SnapThresholdQuaternion : Quaternion SnapThresholdReal : real var SnapThresholdReal : Real SnapThresholdReal2 : real2 var SnapThresholdReal2 : Real2 SnapThresholdReal3 : real3 var SnapThresholdReal3 : Real3 SnapThresholdReal4 : real4 var SnapThresholdReal4 : Real4 UseConvergence : boolean Use convergence? var UseConvergence : Boolean UseDeltaThreshold : boolean Use delta threshold? var UseDeltaThreshold : Boolean UseHalfFloats : boolean Use half floats? var UseHalfFloats : Boolean UseInterpolation : boolean Use interpolation? var UseInterpolation : Boolean UseQuantization : boolean Use quantization? var UseQuantization : Boolean Methods"
  },
  "docs/code_reference/class_reference/netpropertyinfo.html": {
    "href": "docs/code_reference/class_reference/netpropertyinfo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking (NOTE) Network Property Info. Configures a network property. Methods Properties Base Classes Derived Classes Component safeid32 NetChannelConfig NetPropertyConfig Property Properties Component : string read-only var Component : String NetChannelConfig : netchannelconfig Network channel configuration resource. var NetChannelConfig : NetChannelConfig NetPropertyConfig : netpropertyconfig Network property configuration resource. var NetPropertyConfig : NetPropertyConfig Property : string read-only var Property : String Methods"
  },
  "docs/code_reference/class_reference/netpropertyinfos.html": {
    "href": "docs/code_reference/class_reference/netpropertyinfos.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/netpropertytype.html": {
    "href": "docs/code_reference/class_reference/netpropertytype.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking (NOTE) Network Property Type. Configures the replication of a single property on the network. Methods Properties Base Classes Derived Classes ResetConfig Name safeid32object SetConfig Properties Name : string read-only Net property type name. var Name : String Methods ResetConfig : Void Resets all configuration settings. (Cannot be modified at game runtime) |Name|Type|Description| |---|---|---| function ResetConfig() SetConfig : Void Sets all configuration settings according to the specified NetPropertyConfig resource. (Cannot be modified at game runtime) |Name|Type|Description| |---|---|---| |netPropertyConfig|netpropertyconfig| | function SetConfig(netPropertyConfig : NetPropertyConfig)"
  },
  "docs/code_reference/class_reference/netspace.html": {
    "href": "docs/code_reference/class_reference/netspace.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Networking (NOTE) Network Space. Manages the replication of a single space on the network. Methods Properties Base Classes Derived Classes Constructor NetObjectCount netobject NetUserCount Properties NetObjectCount : integer read-only Returns the number of net objects in this space (but not including the net space itself). var NetObjectCount : Integer NetUserCount : integer read-only Returns the number of net users in this space. var NetUserCount : Integer Methods NetSpace : Void constructor Constructor. |Name|Type|Description| |---|---|---| function NetSpace()"
  },
  "docs/code_reference/class_reference/netuser.html": {
    "href": "docs/code_reference/class_reference/netuser.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Networking (NOTE) Network User. Manages the replication of a single negotiated user on the network. Methods Properties Base Classes Derived Classes AddedByPeer AddedByMyPeer netobject FindOwnedNetObjectByName NetPeerId FindOwnedNetObjectByNameInSpace NetUserId Constructor OwnedNetObjectCount ReleaseOwnedNetObjects OwnedNetObjects Properties AddedByMyPeer : boolean read-only var AddedByMyPeer : Boolean NetPeerId : integer read-only Adding network peer identifier. var NetPeerId : Integer NetUserId : integer read-only Network user identifier. var NetUserId : Integer OwnedNetObjectCount : integer read-only Returns the number of net objects owned by this user in all spaces. var OwnedNetObjectCount : Integer OwnedNetObjects : coghashsetrange read-only Returns all net objects owned by this user in all spaces. var OwnedNetObjects : CogHashSetRange Methods AddedByPeer : boolean Returns true if the user was added by the specified peer, else false. |Name|Type|Description| |---|---|---| |netPeerId|integer| | function AddedByPeer(netPeerId : Integer) : Boolean FindOwnedNetObjectByName : cog Finds a net object with the given name owned by this user in any space, else nullptr. |Name|Type|Description| |---|---|---| |name|string| | function FindOwnedNetObjectByName(name : String) : Cog FindOwnedNetObjectByNameInSpace : cog Finds a net object with the given name owned by this user in the specified space, else nullptr. |Name|Type|Description| |---|---|---| |name|string| | |space|space| | function FindOwnedNetObjectByNameInSpace(name : String, space : Space) : Cog NetUser : Void constructor Constructor. |Name|Type|Description| |---|---|---| function NetUser() ReleaseOwnedNetObjects : Void [Server/Offline] Releases ownership of all net objects owned by this user in all spaces. |Name|Type|Description| |---|---|---| function ReleaseOwnedNetObjects()"
  },
  "docs/code_reference/class_reference/netuseracquiredobjectownership.html": {
    "href": "docs/code_reference/class_reference/netuseracquiredobjectownership.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after the net user acquires network ownership of a net object. Methods Properties Base Classes Derived Classes AcquiredObject event PreviousNetUserOwner Properties AcquiredObject : cog read-only The object this user just acquired network ownership of. var AcquiredObject : Cog PreviousNetUserOwner : cog read-only The object's previous network user owner. var PreviousNetUserOwner : Cog Methods"
  },
  "docs/code_reference/class_reference/netuserlostobjectownership.html": {
    "href": "docs/code_reference/class_reference/netuserlostobjectownership.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after the net user loses network ownership of a net object. Methods Properties Base Classes Derived Classes CurrentNetUserOwner event LostObject Properties CurrentNetUserOwner : cog read-only The object's current network user owner. var CurrentNetUserOwner : Cog LostObject : cog read-only The object this user just lost network ownership of. var LostObject : Cog Methods"
  },
  "docs/code_reference/class_reference/netuserownerchanged.html": {
    "href": "docs/code_reference/class_reference/netuserownerchanged.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched after the net object changes network ownership. Methods Properties Base Classes Derived Classes CurrentNetUserOwner event PreviousNetUserOwner Properties CurrentNetUserOwner : cog read-only The object's current network user owner. var CurrentNetUserOwner : Cog PreviousNetUserOwner : cog read-only The object's previous network user owner. var PreviousNetUserOwner : Cog Methods"
  },
  "docs/code_reference/class_reference/netuserrange.html": {
    "href": "docs/code_reference/class_reference/netuserrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : netuserrange read-only var All : NetUserRange Current : cog read-only var Current : Cog IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() NetUserRange : Void constructor Name Type Description function NetUserRange() NetUserRange : Void constructor Name Type Description p0 netuserrange function NetUserRange(p0 : NetUserRange)"
  },
  "docs/code_reference/class_reference/nodeinfolistrange.html": {
    "href": "docs/code_reference/class_reference/nodeinfolistrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : nodeinfolistrange read-only var All : NodeInfoListRange Current : nodeprintinfo read-only var Current : NodePrintInfo IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() NodeInfoListRange : Void constructor Name Type Description function NodeInfoListRange() NodeInfoListRange : Void constructor Name Type Description p0 nodeinfolistrange function NodeInfoListRange(p0 : NodeInfoListRange)"
  },
  "docs/code_reference/class_reference/nodeprintinfo.html": {
    "href": "docs/code_reference/class_reference/nodeprintinfo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes Connections HasOutput ID Name Position Properties Connections : nodeinfolistrange read-only var Connections : NodeInfoListRange HasOutput : boolean var HasOutput : Boolean ID : integer var ID : Integer Name : string var Name : String Position : real2 var Position : Real2 Methods"
  },
  "docs/code_reference/class_reference/notifyevent.html": {
    "href": "docs/code_reference/class_reference/notifyevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Meta Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/nsquaredbroadphase.html": {
    "href": "docs/code_reference/class_reference/nsquaredbroadphase.html",
    "title": "Properties | ZilchEngine",
    "keywords": "SpatialPartition Methods Properties Base Classes Derived Classes ibroadphase Properties Methods"
  },
  "docs/code_reference/class_reference/objectconnectingtool.html": {
    "href": "docs/code_reference/class_reference/objectconnectingtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes component jointtool parentingtool Properties Methods"
  },
  "docs/code_reference/class_reference/objectevent.html": {
    "href": "docs/code_reference/class_reference/objectevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Meta (NOTE) Simple event for general signals. Methods Properties Base Classes Derived Classes Source event commandevent commandupdateevent rotationbasisgizmoaabbqueryevent rotationbasisgizmoinitializationevent Properties Source : Object read-only var Source : Object Methods"
  },
  "docs/code_reference/class_reference/objectlink.html": {
    "href": "docs/code_reference/class_reference/objectlink.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) Forms a link between two positions on two objects. ObjectLinks are used primarily by physics to represent joints, but can also be used by graphics, gameplay, etc... to represent some connection between two objects. Methods Properties Base Classes Derived Classes Constructor LocalPointA component LocalPointB ObjectA ObjectAPath ObjectB ObjectBPath WorldPointA WorldPointB Properties LocalPointA : real3 The Point on Object A in local space. var LocalPointA : Real3 LocalPointB : real3 The Point on Object B in local space. var LocalPointB : Real3 ObjectA : cog The first object that is being connected to. Set this to null to clear the link. var ObjectA : Cog ObjectAPath : cogpath CogPath to object A. var ObjectAPath : CogPath ObjectB : cog The second object that is being connected to. Set this to null to clear the link. var ObjectB : Cog ObjectBPath : cogpath CogPath to object B. var ObjectBPath : CogPath WorldPointA : real3 The point on object A in world space. var WorldPointA : Real3 WorldPointB : real3 The point on object B in world space. var WorldPointB : Real3 Methods ObjectLink : Void constructor Name Type Description function ObjectLink()"
  },
  "docs/code_reference/class_reference/objectlinkanchor.html": {
    "href": "docs/code_reference/class_reference/objectlinkanchor.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) Component used to keep track of what ObjectLinks a cog has. This component is added dynamically whenever a ObjectLink is added to a cog that did not contain an ObjectLink before. This can be used to traverse across linked objects and find the entire \"island\" of ObjectLinks. Methods Properties Base Classes Derived Classes Constructor ObjectLinks component Properties ObjectLinks : objectlinkrange read-only The range of object link edges connected to this anchor. var ObjectLinks : ObjectLinkRange Methods ObjectLinkAnchor : Void constructor Name Type Description function ObjectLinkAnchor()"
  },
  "docs/code_reference/class_reference/objectlinkedge.html": {
    "href": "docs/code_reference/class_reference/objectlinkedge.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) A directed edge between a cog and an object link. Methods Properties Base Classes Derived Classes Constructor ObjectLink OtherCog SelfCog Properties ObjectLink : objectlink read-only The object link that this edge is connected to. var ObjectLink : ObjectLink OtherCog : cog read-only The other cog that the object link is connected to (the one not part of this edge). var OtherCog : Cog SelfCog : cog read-only The cog that this edge on the object link is connected to. var SelfCog : Cog Methods ObjectLinkEdge : Void constructor Name Type Description function ObjectLinkEdge() ObjectLinkEdge : Void constructor Name Type Description objectlinkedge function ObjectLinkEdge( : ObjectLinkEdge)"
  },
  "docs/code_reference/class_reference/objectlinkevent.html": {
    "href": "docs/code_reference/class_reference/objectlinkevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine (NOTE) An event sent when an object link changes one of its link edges. Methods Properties Base Classes Derived Classes EdgeId event NewCog OldCog Properties EdgeId : integer var EdgeId : Integer NewCog : cog var NewCog : Cog OldCog : cog var OldCog : Cog Methods"
  },
  "docs/code_reference/class_reference/objectlinkpointchangedevent.html": {
    "href": "docs/code_reference/class_reference/objectlinkpointchangedevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes EdgeId event NewLocalPoint OldLocalPoint Properties EdgeId : integer The index on the edge that is being overridden. var EdgeId : Integer NewLocalPoint : real3 var NewLocalPoint : Real3 OldLocalPoint : real3 var OldLocalPoint : Real3 Methods"
  },
  "docs/code_reference/class_reference/objectlinkrange.html": {
    "href": "docs/code_reference/class_reference/objectlinkrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : objectlinkrange read-only var All : ObjectLinkRange Current : objectlinkedge read-only var Current : ObjectLinkEdge IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() ObjectLinkRange : Void constructor Name Type Description function ObjectLinkRange() ObjectLinkRange : Void constructor Name Type Description p0 objectlinkrange function ObjectLinkRange(p0 : ObjectLinkRange)"
  },
  "docs/code_reference/class_reference/objectpollevent.html": {
    "href": "docs/code_reference/class_reference/objectpollevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/objectrotategizmo.html": {
    "href": "docs/code_reference/class_reference/objectrotategizmo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor AffectTranslation objecttransformgizmo Properties AffectTranslation : boolean var AffectTranslation : Boolean Methods ObjectRotateGizmo : Void constructor Name Type Description function ObjectRotateGizmo()"
  },
  "docs/code_reference/class_reference/objectrotatetool.html": {
    "href": "docs/code_reference/class_reference/objectrotatetool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor AffectRotation objecttransformtool AffectTranslation SnapAngle Snapping Properties AffectRotation : boolean With multiple objects selected, allow their local rotation to be affected while being spacially-rotated (with 'AffectTranslation') about the chosen pivot point. var AffectRotation : Boolean AffectTranslation : boolean With multiple objects selected, allow their spacial-offest to be rotated about the chosen pivot point, while being locally rotated with 'mAffectRotation'. var AffectTranslation : Boolean SnapAngle : real var SnapAngle : Real Snapping : boolean var Snapping : Boolean Methods ObjectRotateTool : Void constructor Name Type Description function ObjectRotateTool()"
  },
  "docs/code_reference/class_reference/objectscalegizmo.html": {
    "href": "docs/code_reference/class_reference/objectscalegizmo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor AffectTranslation objecttransformgizmo Properties AffectTranslation : boolean var AffectTranslation : Boolean Methods ObjectScaleGizmo : Void constructor Name Type Description function ObjectScaleGizmo()"
  },
  "docs/code_reference/class_reference/objectscaletool.html": {
    "href": "docs/code_reference/class_reference/objectscaletool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor AffectScale objecttransformtool AffectTranslation SnapDistance SnapMode Snapping Properties AffectScale : boolean With multiple objects selected, allow their local scale to be affected while being spacially-offset (with 'AffectTranslation') about the chosen pivot point. var AffectScale : Boolean AffectTranslation : boolean With multiple objects selected, allow their spacial-offest to be affected about the chosen pivot point, while being locally scaled with 'mAffectScale'. var AffectTranslation : Boolean SnapDistance : real var SnapDistance : Real SnapMode : GizmoSnapMode var SnapMode : GizmoSnapMode Snapping : boolean var Snapping : Boolean Methods ObjectScaleTool : Void constructor Name Type Description function ObjectScaleTool()"
  },
  "docs/code_reference/class_reference/objectstore.html": {
    "href": "docs/code_reference/class_reference/objectstore.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) Object cache is use to store objects at runtime. Methods Properties Base Classes Derived Classes ClearStore EntryCount Erase GetDirectoryPath GetEntryAt IsEntryStored IsStored Restore RestoreOrArchetype Store Properties EntryCount : integer read-only Get number of entries in the ObjectStore. var EntryCount : Integer Methods ClearStore : Void Clear the store. |Name|Type|Description| |---|---|---| function ClearStore() Erase : Void Attempts to remove an object from the store. |Name|Type|Description| |---|---|---| |name|string| | function Erase(name : String) GetDirectoryPath : string Returns the directory path to the object store. |Name|Type|Description| |---|---|---| function GetDirectoryPath() : String GetEntryAt : string Get the ObjectStore entry at the specified index. |Name|Type|Description| |---|---|---| |index|integer| | function GetEntryAt(index : Integer) : String IsEntryStored : boolean Is there an entry record for the object in the store? |Name|Type|Description| |---|---|---| |name|string| | function IsEntryStored(name : String) : Boolean IsStored : boolean Name Type Description string function IsStored( : String) : Boolean Restore : cog Restore an object to the space. |Name|Type|Description| |---|---|---| |name|string| | |space|space| | function Restore(name : String, space : Space) : Cog RestoreOrArchetype : cog Restore an object if it is not stored use the archetype to create it. |Name|Type|Description| |---|---|---| |name|string| | |archetype|archetype| | |space|space| | function RestoreOrArchetype(name : String, archetype : Archetype, space : Space) : Cog Store : StoreResult Store an object. |Name|Type|Description| |---|---|---| |name|string| | |object|cog| | function Store(name : String, object : Cog) : StoreResult"
  },
  "docs/code_reference/class_reference/objecttrack.html": {
    "href": "docs/code_reference/class_reference/objecttrack.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/objecttransformgizmo.html": {
    "href": "docs/code_reference/class_reference/objecttransformgizmo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes AddObject Basis component objectrotategizmo ClearObjects ObjectCount objectscalegizmo GetObjectAtIndex Pivot objecttranslategizmo Constructor RemoveObject SetOperationQueue ToggleCoordinateMode Properties Basis : GizmoBasis Setters / Getters. var Basis : GizmoBasis ObjectCount : integer read-only Object getters. var ObjectCount : Integer Pivot : GizmoPivot var Pivot : GizmoPivot Methods AddObject : Void Name Type Description anyhandle boolean function AddObject( : AnyHandle, : Boolean) ClearObjects : Void Name Type Description function ClearObjects() GetObjectAtIndex : anyhandle Name Type Description index integer function GetObjectAtIndex(index : Integer) : AnyHandle ObjectTransformGizmo : Void constructor Name Type Description function ObjectTransformGizmo() RemoveObject : Void Name Type Description anyhandle boolean function RemoveObject( : AnyHandle, : Boolean) SetOperationQueue : Void If set, this Gizmo will add operations for all modifications to cogs. |Name|Type|Description| |---|---|---| |opQueue|operationqueue| | function SetOperationQueue(opQueue : OperationQueue) ToggleCoordinateMode : Void Toggle between local / world. |Name|Type|Description| |---|---|---| function ToggleCoordinateMode()"
  },
  "docs/code_reference/class_reference/objecttransformgizmoevent.html": {
    "href": "docs/code_reference/class_reference/objecttransformgizmoevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes FinalLocalRotation gizmoevent FinalLocalScale FinalLocalTranslation Properties FinalLocalRotation : quaternion var FinalLocalRotation : Quaternion FinalLocalScale : real3 var FinalLocalScale : Real3 FinalLocalTranslation : real3 var FinalLocalTranslation : Real3 Methods"
  },
  "docs/code_reference/class_reference/objecttransformtool.html": {
    "href": "docs/code_reference/class_reference/objecttransformtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor Basis component objectrotatetool Grab objectscaletool Pivot objecttranslatetool Properties Basis : GizmoBasis var Basis : GizmoBasis Grab : GizmoGrabMode var Grab : GizmoGrabMode Pivot : GizmoPivot var Pivot : GizmoPivot Methods ObjectTransformTool : Void constructor Name Type Description function ObjectTransformTool()"
  },
  "docs/code_reference/class_reference/objecttranslategizmo.html": {
    "href": "docs/code_reference/class_reference/objecttranslategizmo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor DuplicateOnCtrlDrag objecttransformgizmo Properties DuplicateOnCtrlDrag : boolean var DuplicateOnCtrlDrag : Boolean Methods ObjectTranslateGizmo : Void constructor Name Type Description function ObjectTranslateGizmo()"
  },
  "docs/code_reference/class_reference/objecttranslatetool.html": {
    "href": "docs/code_reference/class_reference/objecttranslatetool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor SnapDistance objecttransformtool SnapMode Snapping Properties SnapDistance : real var SnapDistance : Real SnapMode : GizmoSnapMode var SnapMode : GizmoSnapMode Snapping : boolean var Snapping : Boolean Methods ObjectTranslateTool : Void constructor Name Type Description function ObjectTranslateTool()"
  },
  "docs/code_reference/class_reference/objectview.html": {
    "href": "docs/code_reference/class_reference/objectview.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/operation.html": {
    "href": "docs/code_reference/class_reference/operation.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes FindRoot Children safeid32eventobject operationbatch InvalidReason propertyoperation Name Parent Properties Children : operationlistrange read-only var Children : OperationListRange InvalidReason : string var InvalidReason : String Name : string var Name : String Parent : operation read-only var Parent : Operation Methods FindRoot : operation Name Type Description function FindRoot() : Operation"
  },
  "docs/code_reference/class_reference/operationbatch.html": {
    "href": "docs/code_reference/class_reference/operationbatch.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes operation Properties Methods"
  },
  "docs/code_reference/class_reference/operationlistrange.html": {
    "href": "docs/code_reference/class_reference/operationlistrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : operationlistrange read-only var All : OperationListRange Current : operation read-only var Current : Operation IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() OperationListRange : Void constructor Name Type Description function OperationListRange() OperationListRange : Void constructor Name Type Description p0 operationlistrange function OperationListRange(p0 : OperationListRange)"
  },
  "docs/code_reference/class_reference/operationqueue.html": {
    "href": "docs/code_reference/class_reference/operationqueue.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes BeginBatch ActiveBatchName referencecountedeventobject ClearAll Commands ClearRedo RedoCommands ClearUndo DestroyObject EndBatch IsListeningForSideEffects MarkPropertyAsModified ObjectCreated Constructor PopSubPropertyContext QueueRegisteredSideEffects Redo RegisterSideEffect SaveObjectState StartListeningForSideEffects Undo Properties ActiveBatchName : string var ActiveBatchName : String Commands : operationlistrange read-only var Commands : OperationListRange RedoCommands : operationlistrange read-only var RedoCommands : OperationListRange Methods BeginBatch : Void Name Type Description function BeginBatch() BeginBatch : Void Name Type Description p0 string function BeginBatch(p0 : String) ClearAll : Void Name Type Description function ClearAll() ClearRedo : Void Name Type Description function ClearRedo() ClearUndo : Void Name Type Description function ClearUndo() DestroyObject : Void Name Type Description p0 cog function DestroyObject(p0 : Cog) EndBatch : Void Name Type Description function EndBatch() IsListeningForSideEffects : boolean static Name Type Description function IsListeningForSideEffects() : Boolean MarkPropertyAsModified : Void Name Type Description p0 component p1 string function MarkPropertyAsModified(p0 : Component, p1 : String) ObjectCreated : Void Name Type Description p0 cog function ObjectCreated(p0 : Cog) OperationQueue : Void constructor Name Type Description function OperationQueue() PopSubPropertyContext : Void static Name Type Description function PopSubPropertyContext() QueueRegisteredSideEffects : Void Name Type Description function QueueRegisteredSideEffects() Redo : Void Name Type Description function Redo() Redo : boolean Name Type Description p0 operation function Redo(p0 : Operation) : Boolean RegisterSideEffect : Void static Name Type Description p0 anyhandle p1 string p2 T function RegisterSideEffect(p0 : AnyHandle, p1 : String, p2 : T) SaveObjectState : Void Name Type Description p0 cog function SaveObjectState(p0 : Cog) StartListeningForSideEffects : Void static Name Type Description function StartListeningForSideEffects() Undo : Void Name Type Description function Undo() Undo : boolean Name Type Description p0 operation function Undo(p0 : Operation) : Boolean"
  },
  "docs/code_reference/class_reference/operationqueueevent.html": {
    "href": "docs/code_reference/class_reference/operationqueueevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine (NOTE) Notification about most recent Operation/OperationBatch added to the OperationQueue. Methods Properties Base Classes Derived Classes Operation event Properties Operation : operation var Operation : Operation Methods"
  },
  "docs/code_reference/class_reference/orientation.html": {
    "href": "docs/code_reference/class_reference/orientation.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Gameplay (NOTE) Defines a new basis for a desired right, up, and forward vector. Provides a bunch of helper functions to change between these spaces and to perform simple look-at behavior. Methods Properties Base Classes Derived Classes ComputeSignedAngle AbsoluteAngle component DebugDrawBases DefaultOrientationBases GetLookAtDirectionRotation GlobalUp GetLookAtDirectionWithUpRotation LocalForward GetLookAtPointRotation LocalOrientationBasis GetLookAtPointWithUpRotation LocalRight LookAtDirection LocalToOrientationRotation LookAtDirectionWithUp LocalToWorldRotation LookAtPoint LocalUp LookAtPointWithUp OrientationForward Constructor OrientationRight SetLocalLookAtRotation OrientationToLocalRotation SetWorldLookAtRotation OrientationToWorldRotation OrientationUp WorldForward WorldRight WorldToLocalRotation WorldToOrientationRotation WorldUp Properties AbsoluteAngle : real read-only Get the angle of the object about the up vector. var AbsoluteAngle : Real DefaultOrientationBases : OrientationBases var DefaultOrientationBases : OrientationBases GlobalUp : real3 The world-space up vector to use for LookAt operations that don't take an up vector. var GlobalUp : Real3 LocalForward : real3 read-only The orientation's forward vector after having been transformed into local space. var LocalForward : Real3 LocalOrientationBasis : quaternion A local-space basis that represents this orientation. If you build a basis from an up of (0, 1, 0), and a forward of (0, 0, -1) then this should result in the identity rotation. var LocalOrientationBasis : Quaternion LocalRight : real3 read-only The orientation's right vector after having been transformed into local space. var LocalRight : Real3 LocalToOrientationRotation : quaternion read-only The rotation that takes an local space vector into orientation space. For example, this transforms LocalRight into OrientationRight. var LocalToOrientationRotation : Quaternion LocalToWorldRotation : quaternion read-only The rotation that transforms a vector from local space into world space. For example, this transforms LocalRight into WorldRight. var LocalToWorldRotation : Quaternion LocalUp : real3 read-only The orientation's up vector after having been transformed into local space. var LocalUp : Real3 OrientationForward : real3 read-only The forward vector in orientation space. This is always the vector (0, 0, -1) but is provided for clarity with transformations. var OrientationForward : Real3 OrientationRight : real3 read-only The right vector in orientation space. This is always the vector (1, 0, 0) but is provided for clarity with transformations. var OrientationRight : Real3 OrientationToLocalRotation : quaternion read-only The rotation that takes an orientation space vector into local space. For example, this transforms OrientationRight into LocalRight. var OrientationToLocalRotation : Quaternion OrientationToWorldRotation : quaternion read-only The rotation that takes an orientation space vector into world space. For example, this transforms OrientationRight into WorldRight. var OrientationToWorldRotation : Quaternion OrientationUp : real3 read-only The up vector in orientation space. This is always the vector (0, 1, 0) but is provided for clarity with transformations. var OrientationUp : Real3 WorldForward : real3 read-only The orientation's forward vector after having been transformed into world space. var WorldForward : Real3 WorldRight : real3 read-only The orientation's right vector after having been transformed into world space. var WorldRight : Real3 WorldToLocalRotation : quaternion read-only The rotation that transforms a vector from world space into local space. For example, this transforms WorldRight into LocalRight. var WorldToLocalRotation : Quaternion WorldToOrientationRotation : quaternion read-only The rotation that takes an world space vector into orientation space. For example, this transforms WorldRight into OrientationRight. var WorldToOrientationRotation : Quaternion WorldUp : real3 read-only The orientation's up vector after having been transformed into world space. var WorldUp : Real3 Methods ComputeSignedAngle : real Compute the rotation angle between two vectors (in radians) |Name|Type|Description| |---|---|---| |up|real3| | |forward|real3| | |newVector|real3| | function ComputeSignedAngle(up : Real3, forward : Real3, newVector : Real3) : Real DebugDrawBases : Void Debug draws the current orientation bases in world space. |Name|Type|Description| |---|---|---| function DebugDrawBases() GetLookAtDirectionRotation : quaternion Gets the forward to look in the given direction. Keeps the current world up. |Name|Type|Description| |---|---|---| |lookDir|real3| | function GetLookAtDirectionRotation(lookDir : Real3) : Quaternion GetLookAtDirectionWithUpRotation : quaternion Same as GetLookAtDirectionRotation but allows the user to specify the up vector. |Name|Type|Description| |---|---|---| |lookDir|real3| | |up|real3| | function GetLookAtDirectionWithUpRotation(lookDir : Real3, up : Real3) : Quaternion GetLookAtPointRotation : quaternion Get the rotation so that the forward will look at the given point. Keeps the current world up. |Name|Type|Description| |---|---|---| |lookPoint|real3| | function GetLookAtPointRotation(lookPoint : Real3) : Quaternion GetLookAtPointWithUpRotation : quaternion Same as GetLookAtPointRotation but allows the user to specify the up vector. |Name|Type|Description| |---|---|---| |lookPoint|real3| | |up|real3| | function GetLookAtPointWithUpRotation(lookPoint : Real3, up : Real3) : Quaternion LookAtDirection : Void Sets the forward to look in the given direction. Keeps the current world up. |Name|Type|Description| |---|---|---| |lookDir|real3| | function LookAtDirection(lookDir : Real3) LookAtDirectionWithUp : Void Same as LookAtDirection but allows the user to specify the up vector. |Name|Type|Description| |---|---|---| |lookDir|real3| | |up|real3| | function LookAtDirectionWithUp(lookDir : Real3, up : Real3) LookAtPoint : Void Sets the forward to look at the given point. Keeps the current world up. |Name|Type|Description| |---|---|---| |lookPoint|real3| | function LookAtPoint(lookPoint : Real3) LookAtPointWithUp : Void Same as LookAtPoint but allows the user to specify the up vector. |Name|Type|Description| |---|---|---| |lookPoint|real3| | |up|real3| | function LookAtPointWithUp(lookPoint : Real3, up : Real3) Orientation : Void constructor Name Type Description function Orientation() SetLocalLookAtRotation : Void Set the transform's local rotation such that the orientation's basis vectors will be aligned with the given rotation (assumed to be a look-at rotation constructed from a right, up, and forward) |Name|Type|Description| |---|---|---| |localLookAtRotation|quaternion| | function SetLocalLookAtRotation(localLookAtRotation : Quaternion) SetWorldLookAtRotation : Void Set the transform's world rotation such that the orientation's basis vectors will be aligned with the given rotation (assumed to be a look-at rotation constructed from a right, up, and forward) |Name|Type|Description| |---|---|---| |worldLookAtRotation|quaternion| | function SetWorldLookAtRotation(worldLookAtRotation : Quaternion)"
  },
  "docs/code_reference/class_reference/orientationbasisgizmo.html": {
    "href": "docs/code_reference/class_reference/orientationbasisgizmo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor component Properties Methods OrientationBasisGizmo : Void constructor Name Type Description function OrientationBasisGizmo()"
  },
  "docs/code_reference/class_reference/osfileselection.html": {
    "href": "docs/code_reference/class_reference/osfileselection.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/osmousedropevent.html": {
    "href": "docs/code_reference/class_reference/osmousedropevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes osmouseevent Properties Methods"
  },
  "docs/code_reference/class_reference/osmouseevent.html": {
    "href": "docs/code_reference/class_reference/osmouseevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes event osmousedropevent Properties Methods"
  },
  "docs/code_reference/class_reference/osshell.html": {
    "href": "docs/code_reference/class_reference/osshell.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes DumpMemoryDebuggerStats ClipboardText system GetWindow WindowCount IsClipboardText Properties ClipboardText : string var ClipboardText : String WindowCount : integer read-only var WindowCount : Integer Methods DumpMemoryDebuggerStats : Void Name Type Description function DumpMemoryDebuggerStats() GetWindow : oswindow Name Type Description p0 integer function GetWindow(p0 : Integer) : OsWindow IsClipboardText : boolean Name Type Description function IsClipboardText() : Boolean"
  },
  "docs/code_reference/class_reference/oswindow.html": {
    "href": "docs/code_reference/class_reference/oswindow.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes ClientToScreen ClientSize threadsafeid32eventobject windowsoswindow HasFocus MinSize ScreenToClient MouseCapture MouseCursor MouseTrap Parent Position Size State Title Visible Properties ClientSize : integer2 var ClientSize : Integer2 MinSize : integer2 var MinSize : Integer2 MouseCapture : boolean var MouseCapture : Boolean MouseCursor : Cursor var MouseCursor : Cursor MouseTrap : boolean var MouseTrap : Boolean Parent : oswindow read-only var Parent : OsWindow Position : integer2 var Position : Integer2 Size : integer2 var Size : Integer2 State : WindowState var State : WindowState Title : string var Title : String Visible : boolean var Visible : Boolean Methods ClientToScreen : integer2 Name Type Description p0 integer2 function ClientToScreen(p0 : Integer2) : Integer2 HasFocus : boolean Name Type Description function HasFocus() : Boolean ScreenToClient : integer2 Name Type Description p0 integer2 function ScreenToClient(p0 : Integer2) : Integer2"
  },
  "docs/code_reference/class_reference/oswindowevent.html": {
    "href": "docs/code_reference/class_reference/oswindowevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/panningnode.html": {
    "href": "docs/code_reference/class_reference/panningnode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Changes the left and right channel volumes of its input SoundNode's audio separately. Methods Properties Base Classes Derived Classes InterpolateLeftVolume LeftVolume soundnode InterpolateRightVolume RightVolume InterpolateVolumes SumToMono Properties LeftVolume : real The volume multiplier applied to audio in the left channel. var LeftVolume : Real RightVolume : real The volume multiplier applied to audio in the right channel. var RightVolume : Real SumToMono : boolean If this property is true, the audio will be combined into a single channel before being split between the right and left channels. If it is false and the audio has more than two channels, it will be combined into only two channels before being processed. var SumToMono : Boolean Methods InterpolateLeftVolume : Void Interpolates the LeftVolume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |volume|real| | |time|real| | function InterpolateLeftVolume(volume : Real, time : Real) InterpolateRightVolume : Void Interpolates the RightVolume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |volume|real| | |time|real| | function InterpolateRightVolume(volume : Real, time : Real) InterpolateVolumes : Void Interpolates both left and right volume properties at once. The first parameter is the value to change the LeftVolume to, the second is the RightVolume, and the third is the number of seconds to use for the interpolation. |Name|Type|Description| |---|---|---| |leftVolume|real| | |rightVolume|real| | |time|real| | function InterpolateVolumes(leftVolume : Real, rightVolume : Real, time : Real)"
  },
  "docs/code_reference/class_reference/parentingtool.html": {
    "href": "docs/code_reference/class_reference/parentingtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor MaintainPosition objectconnectingtool Properties MaintainPosition : boolean var MaintainPosition : Boolean Methods ParentingTool : Void constructor Name Type Description function ParentingTool()"
  },
  "docs/code_reference/class_reference/particle.html": {
    "href": "docs/code_reference/class_reference/particle.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes Color Lifetime Position Rotation RotationalVelocity Size Time Velocity WanderAngle Properties Color : real4 var Color : Real4 Lifetime : real var Lifetime : Real Position : real3 var Position : Real3 Rotation : real var Rotation : Real RotationalVelocity : real var RotationalVelocity : Real Size : real var Size : Real Time : real var Time : Real Velocity : real3 var Velocity : Real3 WanderAngle : real var WanderAngle : Real Methods"
  },
  "docs/code_reference/class_reference/particleanimator.html": {
    "href": "docs/code_reference/class_reference/particleanimator.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Particle Animator Interface. Particle Animators effect particles in the system. Methods Properties Base Classes Derived Classes component linearparticleanimator particleattractor particlecollisionheightmap particlecollisionplane particlecoloranimator particletwister particlewander splineparticleanimator Properties Methods"
  },
  "docs/code_reference/class_reference/particleattractor.html": {
    "href": "docs/code_reference/class_reference/particleattractor.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics Methods Properties Base Classes Derived Classes Constructor AttractPosition particleanimator MaxDistance MinDistance PositionSpace Strength Properties AttractPosition : real3 var AttractPosition : Real3 MaxDistance : real var MaxDistance : Real MinDistance : real var MinDistance : Real PositionSpace : SystemSpace var PositionSpace : SystemSpace Strength : real var Strength : Real Methods ParticleAttractor : Void constructor Name Type Description function ParticleAttractor()"
  },
  "docs/code_reference/class_reference/particlecollisionheightmap.html": {
    "href": "docs/code_reference/class_reference/particlecollisionheightmap.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics Methods Properties Base Classes Derived Classes Constructor Friction particleanimator HeightMap Restitution Properties Friction : real How slippery or rough the particle is. When friction is 0, the object will be slippery. When friction is 1, it will completely stop in the direction tangential to the collision normal. var Friction : Real HeightMap : cogpath var HeightMap : CogPath Restitution : real How much the particle will bounce during a collision. Values should be in the range of [0, 1], where 0 is an in-elastic collision and 1 is a fully elastic collision (bouncy). If the value is greater than 1, the particle will gain energy and move faster after the bounce. var Restitution : Real Methods ParticleCollisionHeightmap : Void constructor Name Type Description function ParticleCollisionHeightmap()"
  },
  "docs/code_reference/class_reference/particlecollisionplane.html": {
    "href": "docs/code_reference/class_reference/particlecollisionplane.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics Methods Properties Base Classes Derived Classes Constructor Friction particleanimator PlaneNormal PlanePosition PlaneSpace Restitution Properties Friction : real How slippery or rough the particle is. When friction is 0, the object will be slippery. When friction is 1, it will completely stop in the direction tangential to the collision normal. Values should be in the range [0, 1]. var Friction : Real PlaneNormal : real3 var PlaneNormal : Real3 PlanePosition : real3 var PlanePosition : Real3 PlaneSpace : SystemSpace var PlaneSpace : SystemSpace Restitution : real How much the particle will bounce during a collision. Values should be in the range of [0, 1], where 0 is an in-elastic collision and 1 is a fully elastic collision (bouncy). If the value is greater than 1, the particle will gain energy and move faster after the bounce. var Restitution : Real Methods ParticleCollisionPlane : Void constructor Name Type Description function ParticleCollisionPlane()"
  },
  "docs/code_reference/class_reference/particlecoloranimator.html": {
    "href": "docs/code_reference/class_reference/particlecoloranimator.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Linear interpolate colors across the particles lifetime. Methods Properties Base Classes Derived Classes Constructor MaxParticleSpeed particleanimator TimeGradient VelocityGradient Properties MaxParticleSpeed : real var MaxParticleSpeed : Real TimeGradient : colorgradient var TimeGradient : ColorGradient VelocityGradient : colorgradient var VelocityGradient : ColorGradient Methods ParticleColorAnimator : Void constructor Name Type Description function ParticleColorAnimator()"
  },
  "docs/code_reference/class_reference/particleemitter.html": {
    "href": "docs/code_reference/class_reference/particleemitter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Particle emitters add new particles to the system and control where the particles will appear (sphere emitter, mesh emitter, etc) Methods Properties Base Classes Derived Classes component particleemittershared Properties Methods"
  },
  "docs/code_reference/class_reference/particleemittershared.html": {
    "href": "docs/code_reference/class_reference/particleemittershared.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Particle Emitter Shared. Methods Properties Base Classes Derived Classes ResetCount Active particleemitter boxparticleemitter EmitCount meshparticleemitter EmitDelay sphericalparticleemitter EmitRate splineparticleemitter EmitRateSoftStartTime EmitterSize EmitterVelocityPercent EmitVariance FastMovingEmitter Fill Lifetime LifetimeVariance RandomSpin RandomVelocity Size SizeVariance Spin SpinVariance StartVelocity TangentVelocity Properties Active : boolean Is this emitter currently emitting particles? var Active : Boolean EmitCount : integer Number of particles to emit per reset. var EmitCount : Integer EmitDelay : real Time in seconds to delay the emission of particles from time of creation. var EmitDelay : Real EmitRate : real Rate that particles spawn per second. var EmitRate : Real EmitRateSoftStartTime : real Slowly ramps up to EmitRate over this time. var EmitRateSoftStartTime : Real EmitterSize : real3 Size of the emitter. var EmitterSize : Real3 EmitterVelocityPercent : real How much of the objects velocity is added to the particles. var EmitterVelocityPercent : Real EmitVariance : real How much the emit can vary per sample. var EmitVariance : Real FastMovingEmitter : boolean Whether or not we attempt to emit along the vector between the previous position to the current position, which looks better for fast moving particle systems Note: Particle systems that teleport will emit along the teleport line. var FastMovingEmitter : Boolean Fill : real How much area of the emitter to used 0 to 1. var Fill : Real Lifetime : real How a particle's starting lifetime is. var Lifetime : Real LifetimeVariance : real How much lifetime can vary per particle. var LifetimeVariance : Real RandomSpin : boolean Each particle should start with random spin. var RandomSpin : Boolean RandomVelocity : real3 Random Velocity per particle. var RandomVelocity : Real3 Size : real Size of each particle spawned. var Size : Real SizeVariance : real How much the size can vary from the base size per particle. var SizeVariance : Real Spin : real Speed in rads per second of the particle. var Spin : Real SpinVariance : real How much spin speed can vary per particle. var SpinVariance : Real StartVelocity : real3 Velocity of each particle at start. var StartVelocity : Real3 TangentVelocity : real3 Velocity of each particle in x horizontal tangent y vertical tangent and z outward tangent. var TangentVelocity : Real3 Methods ResetCount : Void Reset the number of particles to emit back to EmitCount. |Name|Type|Description| |---|---|---| function ResetCount()"
  },
  "docs/code_reference/class_reference/particleevent.html": {
    "href": "docs/code_reference/class_reference/particleevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Graphics Methods Properties Base Classes Derived Classes NewParticleCount event NewParticles Properties NewParticleCount : integer read-only var NewParticleCount : Integer NewParticles : particlelistrange read-only var NewParticles : ParticleListRange Methods"
  },
  "docs/code_reference/class_reference/particlelistrange.html": {
    "href": "docs/code_reference/class_reference/particlelistrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : particlelistrange read-only var All : ParticleListRange Current : particle read-only var Current : Particle IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() ParticleListRange : Void constructor Name Type Description function ParticleListRange() ParticleListRange : Void constructor Name Type Description p0 particlelistrange function ParticleListRange(p0 : ParticleListRange)"
  },
  "docs/code_reference/class_reference/particlesystem.html": {
    "href": "docs/code_reference/class_reference/particlesystem.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) An interface for generating and managing particles of a generic definition using emitters and animators. Methods Properties Base Classes Derived Classes AllParticles BoundingBoxSize graphical spriteparticlesystem Clear ChildSystem PreviewInEditor SystemSpace WarmUpTime Properties BoundingBoxSize : real Size of all sides of the bounding box used for frustum culling. var BoundingBoxSize : Real ChildSystem : boolean If set, particle emission will happen for each particle in a parent system. var ChildSystem : Boolean PreviewInEditor : boolean If the particle system should run on frame update in the editor instead of logic update. var PreviewInEditor : Boolean SystemSpace : SystemSpace If particles are emitted into world space or if transform data remains relative to the transform of the system object. var SystemSpace : SystemSpace WarmUpTime : real The amount of time to simulate the particle system on startup. This will be done on AllObjectsCreated, and will use the engines dt. This is good for when you want the particle effect to be in full bloom when you first see it. However, it can hurt performance at high values on startup. var WarmUpTime : Real Methods AllParticles : particlelistrange A list of all particles currently active in the system. |Name|Type|Description| |---|---|---| function AllParticles() : ParticleListRange Clear : Void Clear all current particles. |Name|Type|Description| |---|---|---| function Clear()"
  },
  "docs/code_reference/class_reference/particletwister.html": {
    "href": "docs/code_reference/class_reference/particletwister.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics Methods Properties Base Classes Derived Classes Constructor Axis particleanimator MaxDistance MinDistance Strength Properties Axis : real3 var Axis : Real3 MaxDistance : real var MaxDistance : Real MinDistance : real var MinDistance : Real Strength : real var Strength : Real Methods ParticleTwister : Void constructor Name Type Description function ParticleTwister()"
  },
  "docs/code_reference/class_reference/particlewander.html": {
    "href": "docs/code_reference/class_reference/particlewander.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Particle animator that causes particle to wander or smoothly vary directions. Methods Properties Base Classes Derived Classes Constructor WanderAngle particleanimator WanderAngleVariance WanderStrength Properties WanderAngle : real var WanderAngle : Real WanderAngleVariance : real var WanderAngleVariance : Real WanderStrength : real var WanderStrength : Real Methods ParticleWander : Void constructor Name Type Description function ParticleWander()"
  },
  "docs/code_reference/class_reference/phygunjoint.html": {
    "href": "docs/code_reference/class_reference/phygunjoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Legacy. A physics gun joint is an experimental joint for picking up objects. This acts as a weld between an object and the world. Primarily an experiment for picking up objects as a player. Should be custom implemented in script with CustomJoint instead. Methods Properties Base Classes Derived Classes Constructor LocalPoint joint TargetPoint TargetRotation WorldPoint WorldRotation Properties LocalPoint : real3 The local point on the object that should match the target point. var LocalPoint : Real3 TargetPoint : real3 The point in world space that the object's point should match. var TargetPoint : Real3 TargetRotation : quaternion The world space rotation that the basis of the object should match. Used to set the desired rotation of the object in world space. var TargetRotation : Quaternion WorldPoint : real3 The world point on the object that should match the target point. var WorldPoint : Real3 WorldRotation : quaternion Used to set the world rotation basis of the object that should be matched to the target rotation. var WorldRotation : Quaternion Methods PhyGunJoint : Void constructor Name Type Description function PhyGunJoint()"
  },
  "docs/code_reference/class_reference/phygunjointblock.html": {
    "href": "docs/code_reference/class_reference/phygunjointblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods PhyGunJointBlock : Void constructor Name Type Description function PhyGunJointBlock()"
  },
  "docs/code_reference/class_reference/physicscar.html": {
    "href": "docs/code_reference/class_reference/physicscar.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A controller for a high speed physics based car. The car is controlled with a steer, gas, and brake scalar. The car will raycast wheel positions to try to keep the wheels on the ground and then apply friction and normal forces to propel the car. Methods Properties Base Classes Derived Classes NumberOfWheelsInContact Active component Constructor AntiLockBrakes Brake DebugDraw Gas GripScalar MaxSpeed MaxTorque Steer TorqueGovernor WheelCogs WheelFrictionFrontRollCoef WheelFrictionSideRollCoef Properties Active : boolean Whether or not the car will run any logic at all. If this is false wheels will not work, they will not behave as springs, drive, or anything else. var Active : Boolean AntiLockBrakes : boolean Prevents the car from entering dynamic friction when applying brakes. If the brake would start to skid, the brake force is clamped to the max amount that will not slip. var AntiLockBrakes : Boolean Brake : real How much the brake is being pressed [0,1] where 1 is full brake. var Brake : Real DebugDraw : boolean Whether or not the car should debug draw. var DebugDraw : Boolean Gas : real How much the gas is being pressed [-1,1] where -1 is full reverse. var Gas : Real GripScalar : real Artificially increases the grip of the car (where 2 is twice the grip). The total grip scalar is computed as CarGripScalar * WheelGripScalar so the total car can be easily tweaked while allowing individual wheel tweaks. var GripScalar : Real MaxSpeed : real The desired maximum speed of the car. Similar to a speed governor. var MaxSpeed : Real MaxTorque : real The maximum torque the engine can apply to try to reach the max speed. var MaxTorque : Real Steer : real How much the wheel is being steered. This is measured in radians about this object's y-axis. var Steer : Real TorqueGovernor : boolean Governs the max torque that the engine can apply. This is used to keep the wheels from spinning out (slipping) when too high of a torque is applied. If the tires would slip, the engine will apply the maximum torque for the tires to not slip. var TorqueGovernor : Boolean WheelCogs : carwheelarray read-only Read-only array of wheels belonging to this car. var WheelCogs : CarWheelArray WheelFrictionFrontRollCoef : real Coefficient used to apply the forward friction force closer to the car's center of mass. 1 applies the force at the wheel position, 0 applies the force at the point along the contact normal closest to the center of mass. var WheelFrictionFrontRollCoef : Real WheelFrictionSideRollCoef : real Coefficient used to apply the side friction force closer to the car's center of mass. 1 applies the force at the wheel position, 0 applies the force at the point along the contact normal closest to the center of mass. var WheelFrictionSideRollCoef : Real Methods NumberOfWheelsInContact : integer The number of wheels currently in contact with an object. |Name|Type|Description| |---|---|---| function NumberOfWheelsInContact() : Integer PhysicsCar : Void constructor Name Type Description function PhysicsCar()"
  },
  "docs/code_reference/class_reference/physicscarwheel.html": {
    "href": "docs/code_reference/class_reference/physicscarwheel.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A wheel for a high speed physics based car. Each wheel contains properties to describe how to interact with the world (eg. spring forces, friction, etc...). Methods Properties Base Classes Derived Classes Constructor Active component ContactedObject ContactNormal ContactPoint DampingCompressionRatio DampingRelaxationRatio DriveFactor ForwardDynamicFriction ForwardImpulse ForwardStaticFriction FrequencyHz Grip GripScalar Is2DWheel IsDriveWheel IsInContact IsSliding MaxBrakeStrength MaxSpringCompressionDistance MaxSpringForce MaxSpringRelaxationDistance NormalImpulse PhysicsCarPath PreRotation Radius Rotation RotationalVelocity SideDynamicFriction SideImpulse SideStaticFriction SpringLength SpringMaxLength SpringMinLength SpringRestLength SpringStartLength SteerFactor WheelLocalStartPosition WorldAngularVelocity WorldAxleAxis WorldForwardAxis WorldLinearVelocity WorldSpringAxis WorldWheelBasis Properties Active : boolean Should this wheel calculate forces for the current PhysicsCar. var Active : Boolean ContactedObject : cog read-only The object that this wheel is currently in contact with. var ContactedObject : Cog ContactNormal : real3 read-only The normal of the surface where the wheel is currently in contact. Will be the zero vector if there is no contact. var ContactNormal : Real3 ContactPoint : real3 read-only The point in world space where the wheel is currently in contact. Will be the zero vector if there is no contact. var ContactPoint : Real3 DampingCompressionRatio : real The damping ratio when the spring is compressing (0: no damping, 1 critical damping) var DampingCompressionRatio : Real DampingRelaxationRatio : real The damping ratio when the spring is relaxing (0: no damping, 1 critical damping) var DampingRelaxationRatio : Real DriveFactor : real Used to alter the direction this wheel turns when the motor receives power. Typically set to 1 or -1. Useful to cause a wheel to temporarily rotate backwards without having to change its basis. var DriveFactor : Real ForwardDynamicFriction : real Determines the force applied in the forward direction when the wheel is in dynamic friction and therefore slipping. (i.e. force = muK * Fnormal) var ForwardDynamicFriction : Real ForwardImpulse : real read-only The forward impulse (drive force) being exerted by the wheel. var ForwardImpulse : Real ForwardStaticFriction : real Used with Coulomb's friction to determine when the wheel will start slipping in the forward direction. (i.e. the friction is bound by muS * Fnormal). var ForwardStaticFriction : Real FrequencyHz : real The frequency at which the spring of this wheel oscillates per second. var FrequencyHz : Real Grip : real read-only A coefficient from 0 to 1 that represents how much grip the wheel has. var Grip : Real GripScalar : real Artificially increases the grip of the car (where 2 is twice the grip). The total grip scalar is computed as CarGripScalar * WheelGripScalar so the total car can be easily tweaked while allowing individual wheel tweaks. var GripScalar : Real Is2DWheel : boolean Does this wheel only operate in 2D? Ignores the side friction axis. var Is2DWheel : Boolean IsDriveWheel : boolean Drive wheels turn when the car body has gas pressed. var IsDriveWheel : Boolean IsInContact : boolean read-only If the wheel is currently in contact with an object. var IsInContact : Boolean IsSliding : boolean read-only If the wheel is currently sliding. This means that the wheel is slipping from spinning too fast (using dynamic friction instead of static). var IsSliding : Boolean MaxBrakeStrength : real The max force that this wheel can exert to break. var MaxBrakeStrength : Real MaxSpringCompressionDistance : real The max distance that a spring can compress in one frame. var MaxSpringCompressionDistance : Real MaxSpringForce : real The maximum force that the wheel's spring can exert. var MaxSpringForce : Real MaxSpringRelaxationDistance : real The max distance that a spring can relax in one frame. var MaxSpringRelaxationDistance : Real NormalImpulse : real read-only The normal impulse (spring force) being exerted by the wheel. var NormalImpulse : Real PhysicsCarPath : cogpath The path to the car that this is a wheel for. var PhysicsCarPath : CogPath PreRotation : quaternion Used to rotate the wheel before taking into account it's transform. Typically used to rotate a cylinder to align with a model. var PreRotation : Quaternion Radius : real The radius of the wheel. var Radius : Real Rotation : real read-only The current rotation of the wheel in radians about it's axle. var Rotation : Real RotationalVelocity : real read-only The current rotational velocity of the wheel about it's axle. var RotationalVelocity : Real SideDynamicFriction : real Same as ForwardDynamicFriction, but in the side direction. See SideStaticFriction for a why these are separated. var SideDynamicFriction : Real SideImpulse : real read-only The side impulse (side friction) being exerted by the wheel. var SideImpulse : Real SideStaticFriction : real Same as ForwardStaticFriction, but in the side direction. Forward and side friction are separated since the forward direction is rolling friction and the side direction is sliding friction. var SideStaticFriction : Real SpringLength : real read-only The current length of the spring. var SpringLength : Real SpringMaxLength : real The maximum length of the spring of the wheel. If the wheel hits something further away than this length (plus the wheel radius) then that object will be ignored. var SpringMaxLength : Real SpringMinLength : real The minimum length of the spring of the wheel. If a wheel cast hits an object at a time before min but after start then the wheel will still collide with this object but the spring forces and visuals will be at the min spring length. This is useful for putting the starting raycast position inside of the object so as to avoid tunneling but still having the wheel only visually display where it should. var SpringMinLength : Real SpringRestLength : real The rest length of the spring. var SpringRestLength : Real SpringStartLength : real The t value to start the raycast at. This t value is 0 at the wheel position and travels in the direction of the wheel spring direction. This value is used to modify where the raycast actually starts relative to the start position. var SpringStartLength : Real SteerFactor : real How much this wheel steers. [0, 1] where 1 is the max steering of the car. var SteerFactor : Real WheelLocalStartPosition : real3 The local position on the car body that the wheel starts at (raycasts from). var WheelLocalStartPosition : Real3 WorldAngularVelocity : real3 read-only The axis that represents the world angular velocity of the wheel. var WorldAngularVelocity : Real3 WorldAxleAxis : real3 read-only The current axis of the wheel's axle in world space. var WorldAxleAxis : Real3 WorldForwardAxis : real3 read-only The current axis of the wheel's forward in world space. var WorldForwardAxis : Real3 WorldLinearVelocity : real3 read-only The velocity of the center of the wheel while taking into account the car's velocity. var WorldLinearVelocity : Real3 WorldSpringAxis : real3 read-only The current world-space spring axis of the wheel. var WorldSpringAxis : Real3 WorldWheelBasis : quaternion Determines what directions the forward, axle, and spring are on the wheel. The forward direction is taken from the x-axis of the basis. Likewise the axle is from the y-axis and the spring is from the z-axis. Use ToQuaternion to construct this. var WorldWheelBasis : Quaternion Methods PhysicsCarWheel : Void constructor Name Type Description function PhysicsCarWheel()"
  },
  "docs/code_reference/class_reference/physicscarwheelbasisgizmo.html": {
    "href": "docs/code_reference/class_reference/physicscarwheelbasisgizmo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor component Properties Methods PhysicsCarWheelBasisGizmo : Void constructor Name Type Description function PhysicsCarWheelBasisGizmo()"
  },
  "docs/code_reference/class_reference/physicseffect.html": {
    "href": "docs/code_reference/class_reference/physicseffect.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A common interface for all effects in physics. An effect is something that typically applies a force and can be attached to a collider, rigid body, region, or even a space. This effect is applied every frame according to the rules of the object it is attached to. Methods Properties Base Classes Derived Classes Toggle Active component basicdirectioneffect DebugDrawEffect basicpointeffect EffectType buoyancyeffect WakeUpOnChange customphysicseffect drageffect floweffect thrusteffect torqueeffect vortexeffect windeffect Properties Active : boolean Enable/disable this effect. var Active : Boolean DebugDrawEffect : boolean Should the effect debug draw. var DebugDrawEffect : Boolean EffectType : PhysicsEffectType read-only What kind of effect this is (e.g. ForceEffect, GravityEffect, etc...). var EffectType : PhysicsEffectType WakeUpOnChange : boolean Whether the object associated with this is woken up when any property is changed. var WakeUpOnChange : Boolean Methods Toggle : Void Toggles whether or not this effect is active. |Name|Type|Description| |---|---|---| function Toggle()"
  },
  "docs/code_reference/class_reference/physicsengine.html": {
    "href": "docs/code_reference/class_reference/physicsengine.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes system Properties Methods"
  },
  "docs/code_reference/class_reference/physicsmaterial.html": {
    "href": "docs/code_reference/class_reference/physicsmaterial.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Physics (NOTE) Describes material properties of a collider mainly used during collision resolution. Methods Properties Base Classes Derived Classes CreateRuntime Density dataresource Constructor Friction RuntimeClone FrictionImportance UpdateAndNotifyIfModified HighPriority Restitution RestitutionImportance Properties Density : real Density is used to determine the mass of an object. Mass is computed as density * volume. Density can be set to exactly 0 to produce a massless object, however this should only be done with children objects to add collision without affecting mass. var Density : Real Friction : real How slippery or rough the object is. When friction is 0 the object will be slippery. As friction increases, sliding objects will stop quicker. The friction of two object's are combined with the formula sqrt(a * b). var Friction : Real FrictionImportance : real Determines which object's friction should be used. If object A's friction importance value is larger than object B's then object A's friction will be used. If both importance values are the same then the default combination logic will be used (see the description of Friction for details). var FrictionImportance : Real HighPriority : boolean Deprecated. Use RestitutionImportance instead. var HighPriority : Boolean Restitution : real How much an object will bounce during a collision. Values should be in the range [0,1] where 0 is an inelastic collision and 1 is a fully elastic collision. Restitution is computed as the max of the two objects. Note: due to solving constraints with baumgarte, energy will not be perfectly conserved with a restitution 1. var Restitution : Real RestitutionImportance : real Determines which object's restitution should be used. If object A's restitution importance value is larger than object B's then object A's restitution will be used. If both importance values are the same then the default combination logic will be used (see the description of Restitution for details). var RestitutionImportance : Real Methods CreateRuntime : physicsmaterial static Creates a PhysicsMaterial for run-time modifications. |Name|Type|Description| |---|---|---| function CreateRuntime() : PhysicsMaterial PhysicsMaterial : Void constructor Name Type Description function PhysicsMaterial() RuntimeClone : physicsmaterial Creates a clone of this material for run-time modifications. |Name|Type|Description| |---|---|---| function RuntimeClone() : PhysicsMaterial UpdateAndNotifyIfModified : Void After modifying this resource, notify anyone using it to update now instead of at the next physics update. |Name|Type|Description| |---|---|---| function UpdateAndNotifyIfModified()"
  },
  "docs/code_reference/class_reference/physicsmesh.html": {
    "href": "docs/code_reference/class_reference/physicsmesh.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Physics (NOTE) A mesh used to represent static world geometry. All geometry is stored and tested as a collection of triangles. Methods Properties Base Classes Derived Classes CreateRuntime genericphysicsmesh Constructor RuntimeClone Properties Methods CreateRuntime : physicsmesh static Creates a PhysicsMesh for run-time modifications. |Name|Type|Description| |---|---|---| function CreateRuntime() : PhysicsMesh PhysicsMesh : Void constructor Name Type Description function PhysicsMesh() RuntimeClone : physicsmesh Creates a clone of this mesh for run-time modifications. |Name|Type|Description| |---|---|---| function RuntimeClone() : PhysicsMesh"
  },
  "docs/code_reference/class_reference/physicsmeshbuilder.html": {
    "href": "docs/code_reference/class_reference/physicsmeshbuilder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Constructor MeshBuilt buildercomponent Properties MeshBuilt : PhysicsMeshType var MeshBuilt : PhysicsMeshType Methods PhysicsMeshBuilder : Void constructor Name Type Description function PhysicsMeshBuilder()"
  },
  "docs/code_reference/class_reference/physicsmeshindexdata.html": {
    "href": "docs/code_reference/class_reference/physicsmeshindexdata.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Add All safeid32object Clear Count Get Set Properties All : physicsmeshindexrange read-only var All : PhysicsMeshIndexRange Count : integer read-only var Count : Integer Methods Add : Void Name Type Description integer function Add( : Integer) Clear : Void Name Type Description function Clear() Get : integer Name Type Description integer function Get( : Integer) : Integer Set : Void Name Type Description integer integer function Set( : Integer, : Integer)"
  },
  "docs/code_reference/class_reference/physicsmeshindexrange.html": {
    "href": "docs/code_reference/class_reference/physicsmeshindexrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : physicsmeshindexrange read-only var All : PhysicsMeshIndexRange Current : integer read-only var Current : Integer IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() PhysicsMeshIndexRange : Void constructor Name Type Description function PhysicsMeshIndexRange() PhysicsMeshIndexRange : Void constructor Name Type Description p0 physicsmeshindexrange function PhysicsMeshIndexRange(p0 : PhysicsMeshIndexRange)"
  },
  "docs/code_reference/class_reference/physicsmeshvertexdata.html": {
    "href": "docs/code_reference/class_reference/physicsmeshvertexdata.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Add All safeid32object Clear Count Get Set Properties All : physicsmeshvertexrange read-only var All : PhysicsMeshVertexRange Count : integer read-only var Count : Integer Methods Add : Void Name Type Description real3 function Add( : Real3) Clear : Void Name Type Description function Clear() Get : real3 Name Type Description integer function Get( : Integer) : Real3 Set : Void Name Type Description integer real3 function Set( : Integer, : Real3)"
  },
  "docs/code_reference/class_reference/physicsmeshvertexrange.html": {
    "href": "docs/code_reference/class_reference/physicsmeshvertexrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : physicsmeshvertexrange read-only var All : PhysicsMeshVertexRange Current : real3 read-only var Current : Real3 IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() PhysicsMeshVertexRange : Void constructor Name Type Description function PhysicsMeshVertexRange() PhysicsMeshVertexRange : Void constructor Name Type Description p0 physicsmeshvertexrange function PhysicsMeshVertexRange(p0 : PhysicsMeshVertexRange)"
  },
  "docs/code_reference/class_reference/physicsraycastprovider.html": {
    "href": "docs/code_reference/class_reference/physicsraycastprovider.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) Provides the interface for casting through PhysicsSpaces. Methods Properties Base Classes Derived Classes Constructor DynamicColliders raycastprovider MultiSelectKinematic MultiSelectStatic SelectGhosts StaticColliders Properties DynamicColliders : boolean Should dynamic colliders (those with rigid bodies) be selected? var DynamicColliders : Boolean MultiSelectKinematic : boolean Should multi-selection work with kinematic objects? var MultiSelectKinematic : Boolean MultiSelectStatic : boolean Should multi-selection work with static objects? var MultiSelectStatic : Boolean SelectGhosts : boolean Should ghost colliders be selected? var SelectGhosts : Boolean StaticColliders : boolean Should static colliders (those without rigid bodies) be selected? var StaticColliders : Boolean Methods PhysicsRaycastProvider : Void constructor Name Type Description function PhysicsRaycastProvider()"
  },
  "docs/code_reference/class_reference/physicssolverconfig.html": {
    "href": "docs/code_reference/class_reference/physicssolverconfig.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Physics (NOTE) Defines various configuration values used by physics to solve constraints. This resource defines a tiered set of properties that can be overridden global or per constraint type. Methods Properties Base Classes Derived Classes Constructor PositionCorrectionType dataresource PositionIterationCount SolverIterationCount VelocityRestitutionThreshold Properties PositionCorrectionType : PhysicsSolverPositionCorrection What method should be used to fix errors in joints. Baumgarte fixes errors by adding extra velocity but results in a more spongy behavior. Post Stabilization fixes errors by directly modifying position but can behave worse in unsolvable configurations. var PositionCorrectionType : PhysicsSolverPositionCorrection PositionIterationCount : integer The number of iterations used for position correction (if position correction is used). var PositionIterationCount : Integer SolverIterationCount : integer The number of iterations used in the constraint solver. Affects how stiff joints will be. var SolverIterationCount : Integer VelocityRestitutionThreshold : real To prevent numerical issues, restitution is only applied if the relative velocity between the two objects is above this value. var VelocityRestitutionThreshold : Real Methods PhysicsSolverConfig : Void constructor Name Type Description function PhysicsSolverConfig()"
  },
  "docs/code_reference/class_reference/physicsspace.html": {
    "href": "docs/code_reference/class_reference/physicsspace.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) The PhysicsSpace is an \"instance\" of a world. This world manages and stores all of the other physical components of this world. PhysicSpaces act independently of each other. Methods Properties Base Classes Derived Classes AddHierarchyPairFilter AllowSleep component AddPairFilter CollisionTable CastAabb Deterministic CastCollider DynamicBroadphaseType CastFrustum Mode2D CastRay PhysicsSolverConfig CastRayFirst StaticBroadphaseType CastSegment SubStepCount CastSphere CreateJoint DispatchWithinAabb DispatchWithinSphere FlushPhysicsQueue Constructor RemoveHierarchyPairFilter RemovePairFilter SweepCollider WhyAreTheyNotColliding Properties AllowSleep : boolean Determines if anything in the space is allowed to fall sleep. var AllowSleep : Boolean CollisionTable : collisiontable The collision table resource used to filter collisions in this space. var CollisionTable : CollisionTable Deterministic : boolean Performs extra work to help enforce determinism in the simulation. var Deterministic : Boolean DynamicBroadphaseType : string What kind of broadphase is used for dynamic objects (those with RigidBodies). var DynamicBroadphaseType : String Mode2D : boolean The default 2D mode for this space. If a RigidBody is set to InheritFromSpace then it will use this value. var Mode2D : Boolean PhysicsSolverConfig : physicssolverconfig The resource that controls how physics solves things. Mostly related to how collision is resolved. var PhysicsSolverConfig : PhysicsSolverConfig StaticBroadphaseType : string What kind of broadphase is used for static objects (those without RigidBodies). var StaticBroadphaseType : String SubStepCount : integer The number of iterations the physics space will take every frame. Used to achieve higher accuracy and increase visual results. var SubStepCount : Integer Methods AddHierarchyPairFilter : Void Adds a filter to ignore collision between both hierarchies passed in. See AddPairFilter for more info. |Name|Type|Description| |---|---|---| |cog1|cog| | |cog2|cog| | function AddHierarchyPairFilter(cog1 : Cog, cog2 : Cog) AddPairFilter : Void Filters two cogs to not resolve collisions with each other. This is a runtime only feature and will not be saved. |Name|Type|Description| |---|---|---| |cog1|cog| | |cog2|cog| | function AddPairFilter(cog1 : Cog, cog2 : Cog) CastAabb : castresultsrange Finds all colliders in the space that an Aabb hits using the given filter. This returns up to maxCount number of objects. |Name|Type|Description| |---|---|---| |aabb|aabb| | |maxCount|integer| | |filter|castfilter| | function CastAabb(aabb : Aabb, maxCount : Integer, filter : CastFilter) : CastResultsRange CastCollider : castresultsrange Finds all colliders in the space that another collider hits using the given filter. The test collider's position can be offset to test at a different location. This returns up to maxCount number of objects. |Name|Type|Description| |---|---|---| |offset|real3| | |testCollider|collider| | |filter|castfilter| | function CastCollider(offset : Real3, testCollider : Collider, filter : CastFilter) : CastResultsRange CastFrustum : castresultsrange Finds all colliders in the space that a Frustum hits using the given filter. This returns up to maxCount number of objects. |Name|Type|Description| |---|---|---| |frustum|frustum| | |maxCount|integer| | |filter|castfilter| | function CastFrustum(frustum : Frustum, maxCount : Integer, filter : CastFilter) : CastResultsRange CastRay : castresultsrange Finds all colliders in the space that a ray hits. This returns up to maxCount number of objects. A default CastFilter will be used. |Name|Type|Description| |---|---|---| |worldRay|ray| | |maxCount|integer| | function CastRay(worldRay : Ray, maxCount : Integer) : CastResultsRange CastRay : castresultsrange Finds all colliders in the space that a ray hits using the given filter. This returns up to maxCount number of objects. |Name|Type|Description| |---|---|---| |worldRay|ray| | |maxCount|integer| | |filter|castfilter| | function CastRay(worldRay : Ray, maxCount : Integer, filter : CastFilter) : CastResultsRange CastRayFirst : castresult Finds the first collider that a ray hits. A default CastFilter will be used. |Name|Type|Description| |---|---|---| |worldRay|ray| | function CastRayFirst(worldRay : Ray) : CastResult CastRayFirst : castresult Finds the first collider that a ray hits using the given filter. |Name|Type|Description| |---|---|---| |worldRay|ray| | |filter|castfilter| | function CastRayFirst(worldRay : Ray, filter : CastFilter) : CastResult CastSegment : castresultsrange Finds all colliders in the space that a line segment hits. This returns up to maxCount number of objects. A default CastFilter will be used. |Name|Type|Description| |---|---|---| |segment|segment| | |maxCount|integer| | function CastSegment(segment : Segment, maxCount : Integer) : CastResultsRange CastSegment : castresultsrange Finds all colliders in the space that a line segment hits using the given filter. This returns up to maxCount number of objects. |Name|Type|Description| |---|---|---| |segment|segment| | |maxCount|integer| | |filter|castfilter| | function CastSegment(segment : Segment, maxCount : Integer, filter : CastFilter) : CastResultsRange CastSphere : castresultsrange Finds all colliders in the space that a Sphere hits using the given filter. This returns up to maxCount number of objects. |Name|Type|Description| |---|---|---| |sphere|sphere| | |maxCount|integer| | |filter|castfilter| | function CastSphere(sphere : Sphere, maxCount : Integer, filter : CastFilter) : CastResultsRange CreateJoint : cog Creates a joint by name (e.g. StickJoint) between two cogs. The world points of the joint are both set to worldPoint. |Name|Type|Description| |---|---|---| |cog0|cog| | |cog1|cog| | |jointName|string| | |worldPoint|real3| | function CreateJoint(cog0 : Cog, cog1 : Cog, jointName : String, worldPoint : Real3) : Cog DispatchWithinAabb : Void Dispatches an event to all objects within the given aabb using the provided cast filter. |Name|Type|Description| |---|---|---| |aabb|aabb| | |filter|castfilter| | |eventName|string| | |toSend|event| | function DispatchWithinAabb(aabb : Aabb, filter : CastFilter, eventName : String, toSend : Event) DispatchWithinAabb : Void Dispatches an event to all objects within the given aabb. Uses the default cast filter. |Name|Type|Description| |---|---|---| |aabb|aabb| | |eventName|string| | |toSend|event| | function DispatchWithinAabb(aabb : Aabb, eventName : String, toSend : Event) DispatchWithinSphere : Void Dispatches an event to all objects within the given sphere using the provided cast filter. |Name|Type|Description| |---|---|---| |sphere|sphere| | |filter|castfilter| | |eventName|string| | |toSend|event| | function DispatchWithinSphere(sphere : Sphere, filter : CastFilter, eventName : String, toSend : Event) DispatchWithinSphere : Void Dispatches an event to all objects within the given sphere. Uses the default cast filter. |Name|Type|Description| |---|---|---| |sphere|sphere| | |eventName|string| | |toSend|event| | function DispatchWithinSphere(sphere : Sphere, eventName : String, toSend : Event) FlushPhysicsQueue : Void Forces all queued computations in physics to be updated now. Should only be used for debugging. |Name|Type|Description| |---|---|---| function FlushPhysicsQueue() PhysicsSpace : Void constructor Name Type Description function PhysicsSpace() RemoveHierarchyPairFilter : Void Removes the filters between both hierarchies. See RemovePairFilter for more info. |Name|Type|Description| |---|---|---| |cog1|cog| | |cog2|cog| | function RemoveHierarchyPairFilter(cog1 : Cog, cog2 : Cog) RemovePairFilter : Void Removes the filter between two cogs allowing collisions to be computed as normal. |Name|Type|Description| |---|---|---| |cog1|cog| | |cog2|cog| | function RemovePairFilter(cog1 : Cog, cog2 : Cog) SweepCollider : sweepresultrange Performs a swept cast with a collider's shape and a given velocity. Returns a range of all objects the collider could've hit within 'dt' time. |Name|Type|Description| |---|---|---| |collider|collider| | |velocity|real3| | |dt|real| | |filter|castfilter| | function SweepCollider(collider : Collider, velocity : Real3, dt : Real, filter : CastFilter) : SweepResultRange WhyAreTheyNotColliding : string Returns a debug string stating why physics does or doesn't think these two objects should be colliding. |Name|Type|Description| |---|---|---| |cog1|cog| | |cog2|cog| | function WhyAreTheyNotColliding(cog1 : Cog, cog2 : Cog) : String"
  },
  "docs/code_reference/class_reference/pitchnode.html": {
    "href": "docs/code_reference/class_reference/pitchnode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Changes the pitch and speed of audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes InterpolatePitch Pitch soundnode InterpolateSemitones Semitones Properties Pitch : real The pitch adjustment applied to the node's input. A value of 0 will not affect the sound's pitch; 1 will raise the pitch by an octave and speed up the sound, and -1 will lower the sound by an octave and slow it down. Large pitch changes will likely affect the quality of the sound. var Pitch : Real Semitones : real The pitch adjustment, in semitones (or half-steps), applied to the node's input. A value of 0 will not affect the sound's pitch; 12 will raise the pitch by an octave and speed up the sound, and -12 will lower the sound by an octave and slow it down. Large pitch changes will likely affect the quality of the sound. var Semitones : Real Methods InterpolatePitch : Void Interpolates the Pitch property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |pitchRatio|real| | |interpolationTime|real| | function InterpolatePitch(pitchRatio : Real, interpolationTime : Real) InterpolateSemitones : Void Interpolates the Semitones property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |pitchSemitones|real| | |interpolationTime|real| | function InterpolateSemitones(pitchSemitones : Real, interpolationTime : Real)"
  },
  "docs/code_reference/class_reference/plane.html": {
    "href": "docs/code_reference/class_reference/plane.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Constructor Data Set Distance Normal Properties Data : real4 var Data : Real4 Distance : real read-only var Distance : Real Normal : real3 read-only var Normal : Real3 Methods Plane : Void constructor Name Type Description function Plane() Plane : Void constructor Name Type Description p0 plane function Plane(p0 : Plane) Plane : Void constructor Name Type Description normal real3 point real3 function Plane(normal : Real3, point : Real3) Plane : Void constructor Name Type Description data real4 function Plane(data : Real4) Set : Void Name Type Description normal real3 point real3 function Set(normal : Real3, point : Real3) Set : Void Name Type Description data real4 function Set(data : Real4)"
  },
  "docs/code_reference/class_reference/pointforceeffect.html": {
    "href": "docs/code_reference/class_reference/pointforceeffect.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A force effect with a direction and strength based upon the distance from a central point. The direction of the force will always point away from the effect center, but the strength will vary depending on the min/max distance and strength values. Positive strength values point away from the effect center. Useful to make planetary force field like effects. Methods Properties Base Classes Derived Classes Constructor basicpointeffect Properties Methods PointForceEffect : Void constructor Name Type Description function PointForceEffect()"
  },
  "docs/code_reference/class_reference/pointgravityeffect.html": {
    "href": "docs/code_reference/class_reference/pointgravityeffect.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A force effect that pulls an object towards a central point. This effect is nearly identical to PointForceEffect with two exceptions. 1. An acceleration is applied instead of a force (mass is ignored). 2. A positive strength value will pull objects toward the center of the effect. This is useful to make planetary gravity or other similar effects. Methods Properties Base Classes Derived Classes Constructor basicpointeffect Properties Methods PointGravityEffect : Void constructor Name Type Description function PointGravityEffect()"
  },
  "docs/code_reference/class_reference/pointmassselectorsubtool.html": {
    "href": "docs/code_reference/class_reference/pointmassselectorsubtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes selectorspringsubtool anchoringsubtool pointselectorsubtool Properties Methods"
  },
  "docs/code_reference/class_reference/pointselectorsubtool.html": {
    "href": "docs/code_reference/class_reference/pointselectorsubtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes pointmassselectorsubtool Properties Methods"
  },
  "docs/code_reference/class_reference/popup.html": {
    "href": "docs/code_reference/class_reference/popup.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes floatingcomposite autocompletepopup calltippopup Properties Methods"
  },
  "docs/code_reference/class_reference/posenode.html": {
    "href": "docs/code_reference/class_reference/posenode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes animationnode Properties Methods"
  },
  "docs/code_reference/class_reference/positionjoint.html": {
    "href": "docs/code_reference/class_reference/positionjoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Represents a ball and socket joint. A position joint constrains the two anchor points on each object to be equal. Limits, motors, and springs typically should not be used. Add on definitions: Limit: A limit will provide a min/max translation on every axis (x,y,z) that the objects must be between. Motor: A motor will attempt to drive the translation in the positive direction on every axis. Spring: A spring will make the translation on every axis springy at the bounds. Methods Properties Base Classes Derived Classes Constructor LocalPointA joint SetWorldPoints LocalPointB WorldPointA WorldPointB Properties LocalPointA : real3 The local point of the anchor on object A . var LocalPointA : Real3 LocalPointB : real3 The local point of the anchor on object B . var LocalPointB : Real3 WorldPointA : real3 The position of the anchor on object A given a position in world space var WorldPointA : Real3 WorldPointB : real3 The position of the anchor on object B given a position in world space var WorldPointB : Real3 Methods PositionJoint : Void constructor Name Type Description function PositionJoint() SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point|real3| | function SetWorldPoints(point : Real3)"
  },
  "docs/code_reference/class_reference/positionjointblock.html": {
    "href": "docs/code_reference/class_reference/positionjointblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods PositionJointBlock : Void constructor Name Type Description function PositionJointBlock()"
  },
  "docs/code_reference/class_reference/postaddresourceevent.html": {
    "href": "docs/code_reference/class_reference/postaddresourceevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/presolveblock.html": {
    "href": "docs/code_reference/class_reference/presolveblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) CollisionFilterBlock for sending out an event before collision is solved. Allows modifying object state before collision responses have been calculated. Methods Properties Base Classes Derived Classes Constructor collisionfilterblock Properties Methods PreSolveBlock : Void constructor Name Type Description function PreSolveBlock()"
  },
  "docs/code_reference/class_reference/presolveevent.html": {
    "href": "docs/code_reference/class_reference/presolveevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Physics (NOTE) Event sent out when a CollisionFilter contains a PreSolveBlock. This event is sent out after collision detection but before collision resolution. This can be used to alter the state of the two objects in a collision before they're resolved (e.g. turn one from static to dynamic). Warning: Do not delete objects or do any other significant changes as this may destabilize the system. Methods Properties Base Classes Derived Classes Friction basecollisionevent Restitution Properties Friction : real The friction to use for solving this pair. Allows custom overriding for this pair. var Friction : Real Restitution : real The restitution to use for solving this pair. Allows custom overriding for this pair. var Restitution : Real Methods"
  },
  "docs/code_reference/class_reference/previewwidget.html": {
    "href": "docs/code_reference/class_reference/previewwidget.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/previewwidgetfactory.html": {
    "href": "docs/code_reference/class_reference/previewwidgetfactory.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Object Properties Methods"
  },
  "docs/code_reference/class_reference/prismaticjoint.html": {
    "href": "docs/code_reference/class_reference/prismaticjoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A prismatic joint sometimes called a slider) is used to create something similar to a piston. This joint fixes all degrees of rotation and leaves one linear axis free. Therefore, the bodies will rotate with each other and move with each other, except for one axis where they can move freely. Add on definitions: Limit: A limit will provide a min/max translational distance for the two objects on the slider axis. Motor: A motor will push/pull the objects on the slider axis. Spring: A spring will make the slider axis springy at its limits. Methods Properties Base Classes Derived Classes Constructor LocalAxisA joint SetWorldPoints LocalAxisB LocalBasisA LocalBasisB LocalPointA LocalPointB WorldAxis WorldPointA WorldPointB Properties LocalAxisA : real3 The locally defined axis on object A . var LocalAxisA : Real3 LocalAxisB : real3 The locally defined axis on object B . var LocalAxisB : Real3 LocalBasisA : quaternion The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . var LocalBasisA : Quaternion LocalBasisB : quaternion The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . var LocalBasisB : Quaternion LocalPointA : real3 The local point of the anchor on object A . var LocalPointA : Real3 LocalPointB : real3 The local point of the anchor on object B . var LocalPointB : Real3 WorldAxis : real3 The axis in world space that is being rotated about . var WorldAxis : Real3 WorldPointA : real3 The position of the anchor on object A given a position in world space var WorldPointA : Real3 WorldPointB : real3 The position of the anchor on object B given a position in world space var WorldPointB : Real3 Methods PrismaticJoint : Void constructor Name Type Description function PrismaticJoint() SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point|real3| | function SetWorldPoints(point : Real3)"
  },
  "docs/code_reference/class_reference/prismaticjoint2d.html": {
    "href": "docs/code_reference/class_reference/prismaticjoint2d.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A prismatic joint is used to create something similar to a piston. This is the 2d version of PrismaticJoint. This joint is used in 2d mode for increased performance and stability. The slider axis is projected onto the z axis (the z component is ignored) so that the objects can be arbitrarily far apart. The x and y rotations are also ignored since the objects are only allowed to rotate about the z axis. Add on definitions: Limit: A limit will provide a min/max translational distance for the two objects on the slider axis. Motor: A motor will push/pull the objects on the slider axis. Spring: A spring will make the slider axis springy at its limits. Methods Properties Base Classes Derived Classes Constructor LocalAxisA joint SetWorldPoints LocalAxisB LocalBasisA LocalBasisB LocalPointA LocalPointB WorldAxis WorldPointA WorldPointB Properties LocalAxisA : real3 The locally defined axis on object A . var LocalAxisA : Real3 LocalAxisB : real3 The locally defined axis on object B . var LocalAxisB : Real3 LocalBasisA : quaternion The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . var LocalBasisA : Quaternion LocalBasisB : quaternion The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . var LocalBasisB : Quaternion LocalPointA : real3 The local point of the anchor on object A . var LocalPointA : Real3 LocalPointB : real3 The local point of the anchor on object B . var LocalPointB : Real3 WorldAxis : real3 The axis in world space that is being rotated about . var WorldAxis : Real3 WorldPointA : real3 The position of the anchor on object A given a position in world space var WorldPointA : Real3 WorldPointB : real3 The position of the anchor on object B given a position in world space var WorldPointB : Real3 Methods PrismaticJoint2d : Void constructor Name Type Description function PrismaticJoint2d() SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point|real3| | function SetWorldPoints(point : Real3)"
  },
  "docs/code_reference/class_reference/prismaticjoint2dblock.html": {
    "href": "docs/code_reference/class_reference/prismaticjoint2dblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods PrismaticJoint2dBlock : Void constructor Name Type Description function PrismaticJoint2dBlock()"
  },
  "docs/code_reference/class_reference/prismaticjointblock.html": {
    "href": "docs/code_reference/class_reference/prismaticjointblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods PrismaticJointBlock : Void constructor Name Type Description function PrismaticJointBlock()"
  },
  "docs/code_reference/class_reference/progressbar.html": {
    "href": "docs/code_reference/class_reference/progressbar.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/progressevent.html": {
    "href": "docs/code_reference/class_reference/progressevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/projectdescription.html": {
    "href": "docs/code_reference/class_reference/projectdescription.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine Methods Properties Base Classes Derived Classes Constructor LongDescription component ShortDescription Tags Properties LongDescription : string var LongDescription : String ShortDescription : string var ShortDescription : String Tags : string var Tags : String Methods ProjectDescription : Void constructor Name Type Description function ProjectDescription()"
  },
  "docs/code_reference/class_reference/projectsettings.html": {
    "href": "docs/code_reference/class_reference/projectsettings.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) Project component store primary data for a project. Projects are separate games with their own content and settings. Methods Properties Base Classes Derived Classes Constructor AutoTakeProjectScreenshot component ContentFolder EditorContentFolder ProjectFolder ProjectName ProjectOwner Properties AutoTakeProjectScreenshot : boolean var AutoTakeProjectScreenshot : Boolean ContentFolder : string read-only Returns the path to the generated content folder for this project. var ContentFolder : String EditorContentFolder : string read-only Returns the path to the content folder containing editor specific content (screen shot, editor settings, etc...). var EditorContentFolder : String ProjectFolder : string read-only Returns the path to the folder containing this project. var ProjectFolder : String ProjectName : string read-only Returns the Project's Name. var ProjectName : String ProjectOwner : string var ProjectOwner : String Methods ProjectSettings : Void constructor Constructor / Destructor. |Name|Type|Description| |---|---|---| function ProjectSettings() ProjectSettings : Void constructor Constructor / Destructor. |Name|Type|Description| |---|---|---| function ProjectSettings()"
  },
  "docs/code_reference/class_reference/propertyevent.html": {
    "href": "docs/code_reference/class_reference/propertyevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Meta Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/propertyoperation.html": {
    "href": "docs/code_reference/class_reference/propertyoperation.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes ValueAfter operation ValueBefore Properties ValueAfter : T read-only var ValueAfter : T ValueBefore : T read-only var ValueBefore : T Methods"
  },
  "docs/code_reference/class_reference/propertypath.html": {
    "href": "docs/code_reference/class_reference/propertypath.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Constructor Properties Methods PropertyPath : Void constructor Name Type Description function PropertyPath() PropertyPath : Void constructor Name Type Description p0 propertypath function PropertyPath(p0 : PropertyPath)"
  },
  "docs/code_reference/class_reference/propertyview.html": {
    "href": "docs/code_reference/class_reference/propertyview.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes ActivateAutoUpdate composite Invalidate Refresh SetObject Properties Methods ActivateAutoUpdate : Void Name Type Description function ActivateAutoUpdate() Invalidate : Void Name Type Description function Invalidate() Refresh : Void Name Type Description function Refresh() SetObject : Void Name Type Description p0 Object function SetObject(p0 : Object)"
  },
  "docs/code_reference/class_reference/propertywidget.html": {
    "href": "docs/code_reference/class_reference/propertywidget.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite addobjectwidget directproperty propertywidgetobject Properties Methods"
  },
  "docs/code_reference/class_reference/propertywidgetobject.html": {
    "href": "docs/code_reference/class_reference/propertywidgetobject.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes propertywidget Properties Methods"
  },
  "docs/code_reference/class_reference/pulleyjoint.html": {
    "href": "docs/code_reference/class_reference/pulleyjoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A PulleyJoint turns two StickJoints into a pulley via a pulley ratio. A PulleyJoint connects the two free objects of two different stick joints. These two objects will then be bound to move together via the formula \"length0 + ratio * length1 = 0\". Limits, motors and springs should not be used on a pulley. Methods Properties Base Classes Derived Classes Constructor JointA joint JointAPath JointB JointBPath Ratio Properties JointA : cog The joint connected to ObjectA that the pulley operates on. var JointA : Cog JointAPath : cogpath The joint connected to ObjectA that the pulley operates on. var JointAPath : CogPath JointB : cog The joint connected to ObjectB that the pulley operates on. var JointB : Cog JointBPath : cogpath The joint connected to ObjectB that the pulley operates on. var JointBPath : CogPath Ratio : real The ratio between the two stick joints. The ratio is used in the formula \"length0 + ratio * length1 = 0\". var Ratio : Real Methods PulleyJoint : Void constructor Name Type Description function PulleyJoint()"
  },
  "docs/code_reference/class_reference/pulleyjointblock.html": {
    "href": "docs/code_reference/class_reference/pulleyjointblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods PulleyJointBlock : Void constructor Name Type Description function PulleyJointBlock()"
  },
  "docs/code_reference/class_reference/querymodifiedsaveevent.html": {
    "href": "docs/code_reference/class_reference/querymodifiedsaveevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/quickhull3d.html": {
    "href": "docs/code_reference/class_reference/quickhull3d.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes Add Index Build Mesh Clear ShowDebugDraw Draw Constructor Properties Index : integer var Index : Integer Mesh : indexedhalfedgemesh var Mesh : IndexedHalfEdgeMesh ShowDebugDraw : boolean var ShowDebugDraw : Boolean Methods Add : Void Name Type Description p0 real3 function Add(p0 : Real3) Build : boolean Name Type Description function Build() : Boolean Clear : Void Name Type Description function Clear() Draw : Void Name Type Description function Draw() QuickHull3D : Void constructor Name Type Description function QuickHull3D() QuickHull3D : Void constructor Name Type Description p0 quickhull3d function QuickHull3D(p0 : QuickHull3D)"
  },
  "docs/code_reference/class_reference/raiselowertool.html": {
    "href": "docs/code_reference/class_reference/raiselowertool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Relative heightmanipulationtool Strength Properties Relative : boolean var Relative : Boolean Strength : real var Strength : Real Methods"
  },
  "docs/code_reference/class_reference/randomcontext.html": {
    "href": "docs/code_reference/class_reference/randomcontext.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Gameplay (NOTE) A random object that contains its own unique random state apart from all other instances of this class. Methods Properties Base Classes Derived Classes BellCurve MaxInt component BellCurveDistribution RandomSeed BellCurveRange Seed Bool CoinFlip DieRoll DoubleRange DoubleReal DoubleRealVariance Float FloatVariance Int IntVariance Probability Quaternion Constructor Range RangeExclusiveMax RangeInclusiveMax Real Real2 Real3 RealVariance Rotation UnitReal2 UnitReal3 UnitVector2 UnitVector3 Vector2 Vector3 Properties MaxInt : integer read-only The max integer value that can be returned. var MaxInt : Integer RandomSeed : boolean var RandomSeed : Boolean Seed : integer Seeds the random number generator. var Seed : Integer Methods BellCurve : real Samples a bell curve with standard normal distribution in the range [0,1] This is equivalent to a Gaussian distribution with standard deviation of 1. |Name|Type|Description| |---|---|---| function BellCurve() : Real BellCurveDistribution : real Samples a bell curve in the range [center - range, center + range] with the given standard deviation. Around 68% will lie within the 1st standard deviation. |Name|Type|Description| |---|---|---| |center|real| | |range|real| | |standardDeviation|real| | function BellCurveDistribution(center : Real, range : Real, standardDeviation : Real) : Real BellCurveRange : real Samples a bell curve with in the range [center - range, center + range] This uses a standard deviation of 1. |Name|Type|Description| |---|---|---| |center|real| | |range|real| | function BellCurveRange(center : Real, range : Real) : Real Bool : boolean Returns a random bool value. |Name|Type|Description| |---|---|---| function Bool() : Boolean CoinFlip : boolean Returns true if the coin flips heads. |Name|Type|Description| |---|---|---| function CoinFlip() : Boolean DieRoll : integer Randomly rolls a number in the range [1, sides]. |Name|Type|Description| |---|---|---| |sides|integer| | function DieRoll(sides : Integer) : Integer DoubleRange : doublereal Name Type Description doublereal doublereal function DoubleRange( : DoubleReal, : DoubleReal) : DoubleReal DoubleReal : doublereal Returns a random double real in the range [0,1]. |Name|Type|Description| |---|---|---| function DoubleReal() : DoubleReal DoubleRealVariance : doublereal Name Type Description doublereal doublereal function DoubleRealVariance( : DoubleReal, : DoubleReal) : DoubleReal Float : real Returns a random float in the range [0,1]. |Name|Type|Description| |---|---|---| function Float() : Real FloatVariance : real Returns a float in the range [base - variance, base + variance]. |Name|Type|Description| |---|---|---| |base|real| | |variance|real| | function FloatVariance(base : Real, variance : Real) : Real Int : integer Returns a random int in the range of [0, MaxInt]. |Name|Type|Description| |---|---|---| function Int() : Integer IntVariance : integer Int in the range [base - variance, base + variance]. |Name|Type|Description| |---|---|---| |base|integer| | |variance|integer| | function IntVariance(base : Integer, variance : Integer) : Integer Probability : boolean Takes a given probability that we get a true value. |Name|Type|Description| |---|---|---| |probOfTrue|real| | function Probability(probOfTrue : Real) : Boolean Quaternion : quaternion Random unit length quaternion. This is also a unit quaternion. |Name|Type|Description| |---|---|---| function Quaternion() : Quaternion RandomContext : Void constructor Name Type Description function RandomContext() Range : real A random float in the range [min,max]. |Name|Type|Description| |---|---|---| |min|real| | |max|real| | function Range(min : Real, max : Real) : Real RangeExclusiveMax : integer Int in the range [min, max) |Name|Type|Description| |---|---|---| |min|integer| | |max|integer| | function RangeExclusiveMax(min : Integer, max : Integer) : Integer RangeInclusiveMax : integer Int in the range [min, max]. |Name|Type|Description| |---|---|---| |min|integer| | |max|integer| | function RangeInclusiveMax(min : Integer, max : Integer) : Integer Real : real Returns a random real in the range [0,1]. |Name|Type|Description| |---|---|---| function Real() : Real Real2 : real2 Randomly generates a Real2 with its length between min and max. |Name|Type|Description| |---|---|---| |minLength|real| | |maxLength|real| | function Real2(minLength : Real, maxLength : Real) : Real2 Real3 : real3 Randomly generates a Real3 with its length between min and max. |Name|Type|Description| |---|---|---| |minLength|real| | |maxLength|real| | function Real3(minLength : Real, maxLength : Real) : Real3 RealVariance : real Returns a real in the range [base - variance, base + variance]. |Name|Type|Description| |---|---|---| |base|real| | |variance|real| | function RealVariance(base : Real, variance : Real) : Real Rotation : quaternion Random rotation quaternion. This is the same as calling Quaternion() |Name|Type|Description| |---|---|---| function Rotation() : Quaternion UnitReal2 : real2 Generates a unit length Real2. |Name|Type|Description| |---|---|---| function UnitReal2() : Real2 UnitReal3 : real3 Generates a unit length Real3. |Name|Type|Description| |---|---|---| function UnitReal3() : Real3 UnitVector2 : real2 Generates a unit length Vec2. |Name|Type|Description| |---|---|---| function UnitVector2() : Real2 UnitVector3 : real3 Generates a unit length Vec3. |Name|Type|Description| |---|---|---| function UnitVector3() : Real3 Vector2 : real2 Randomly generates a Vec2 with its length between min and max. |Name|Type|Description| |---|---|---| |minLength|real| | |maxLength|real| | function Vector2(minLength : Real, maxLength : Real) : Real2 Vector3 : real3 Randomly generates a Vec3 with its length between min and max. |Name|Type|Description| |---|---|---| |minLength|real| | |maxLength|real| | function Vector3(minLength : Real, maxLength : Real) : Real3"
  },
  "docs/code_reference/class_reference/ratiolayout.html": {
    "href": "docs/code_reference/class_reference/ratiolayout.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes layout Properties Methods"
  },
  "docs/code_reference/class_reference/rawcontrolmapping.html": {
    "href": "docs/code_reference/class_reference/rawcontrolmapping.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/ray.html": {
    "href": "docs/code_reference/class_reference/ray.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes GetPoint Direction GetTValue Start Constructor Properties Direction : real3 var Direction : Real3 Start : real3 var Start : Real3 Methods GetPoint : real3 Returns the point at the given t-value. |Name|Type|Description| |---|---|---| |tValue|real| | function GetPoint(tValue : Real) : Real3 GetTValue : real Returns the t-value that would result in the given point projected onto the ray. |Name|Type|Description| |---|---|---| |point|real3| | function GetTValue(point : Real3) : Real Ray : Void constructor Name Type Description function Ray() Ray : Void constructor Name Type Description p0 ray function Ray(p0 : Ray) Ray : Void constructor Name Type Description start real3 direction real3 function Ray(start : Real3, direction : Real3)"
  },
  "docs/code_reference/class_reference/raycaster.html": {
    "href": "docs/code_reference/class_reference/raycaster.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes safeid32 Properties Methods"
  },
  "docs/code_reference/class_reference/raycastprovider.html": {
    "href": "docs/code_reference/class_reference/raycastprovider.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Active safeid32object graphicsraycastprovider physicsraycastprovider Properties Active : boolean var Active : Boolean Methods"
  },
  "docs/code_reference/class_reference/reactive.html": {
    "href": "docs/code_reference/class_reference/reactive.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Gameplay (NOTE) Reactive component allows the object to react to mouse events. Uses the collision volume of the collider on this composition for picking. Methods Properties Base Classes Derived Classes Constructor Active component Properties Active : boolean Is the reactive component active. var Active : Boolean Methods Reactive : Void constructor Name Type Description function Reactive()"
  },
  "docs/code_reference/class_reference/reactivespace.html": {
    "href": "docs/code_reference/class_reference/reactivespace.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Gameplay Methods Properties Base Classes Derived Classes Constructor Over component Raycaster Properties Over : cog read-only The object we're currently hovering over. var Over : Cog Raycaster : raycaster var Raycaster : Raycaster Methods ReactiveSpace : Void constructor Name Type Description function ReactiveSpace()"
  },
  "docs/code_reference/class_reference/reactiveviewport.html": {
    "href": "docs/code_reference/class_reference/reactiveviewport.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes viewport Properties Methods"
  },
  "docs/code_reference/class_reference/receiveddataevent.html": {
    "href": "docs/code_reference/class_reference/receiveddataevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking Methods Properties Base Classes Derived Classes Buffer connectionevent Properties Buffer : string var Buffer : String Methods"
  },
  "docs/code_reference/class_reference/recentprojects.html": {
    "href": "docs/code_reference/class_reference/recentprojects.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine Methods Properties Base Classes Derived Classes Constructor component Properties Methods RecentProjects : Void constructor Name Type Description function RecentProjects()"
  },
  "docs/code_reference/class_reference/recordingnode.html": {
    "href": "docs/code_reference/class_reference/recordingnode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Records audio generated by its input SoundNodes into a WAV file. Methods Properties Base Classes Derived Classes StartRecording FileName soundnode StopRecording Paused StreamToDisk Properties FileName : string The name of the output file that will be created, including the full path. Do not include the file extension. var FileName : String Paused : boolean When true, recording is paused, and can be resumed by setting to false. var Paused : Boolean StreamToDisk : boolean When false, audio data will be saved in a buffer and written to the file when StopRecording is called. When true, data will be written to the file constantly during every update frame, and nothing will be saved. var StreamToDisk : Boolean Methods StartRecording : Void Starts writing all audio input to a file. |Name|Type|Description| |---|---|---| function StartRecording() StopRecording : Void Stops writing data and closes the file. |Name|Type|Description| |---|---|---| function StopRecording()"
  },
  "docs/code_reference/class_reference/rectangle.html": {
    "href": "docs/code_reference/class_reference/rectangle.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Contains Bottom Expand BottomLeft GetCardinalLocation BottomRight GetLocation Center Overlap Left Overlaps Max RemoveThickness Min ResizeToPoint Right SetLocation Size Transform Top Transformed TopLeft TopRight Properties Bottom : real var Bottom : Real BottomLeft : real2 var BottomLeft : Real2 BottomRight : real2 var BottomRight : Real2 Center : real2 var Center : Real2 Left : real var Left : Real Max : real2 var Max : Real2 Min : real2 var Min : Real2 Right : real var Right : Real Size : real2 read-only var Size : Real2 Top : real var Top : Real TopLeft : real2 var TopLeft : Real2 TopRight : real2 var TopRight : Real2 Methods Contains : boolean Name Type Description p0 real2 function Contains(p0 : Real2) : Boolean Contains : boolean Name Type Description p0 rectangle function Contains(p0 : Rectangle) : Boolean Expand : Void Name Type Description p0 real2 function Expand(p0 : Real2) GetCardinalLocation : real Name Type Description p0 Location function GetCardinalLocation(p0 : Location) : Real GetLocation : real2 Name Type Description p0 Location function GetLocation(p0 : Location) : Real2 Overlap : boolean Name Type Description p0 rectangle function Overlap(p0 : Rectangle) : Boolean Overlaps : boolean Name Type Description p0 rectangle function Overlaps(p0 : Rectangle) : Boolean RemoveThickness : Void Name Type Description p0 thickness function RemoveThickness(p0 : Thickness) ResizeToPoint : Void Name Type Description p0 Location p1 real function ResizeToPoint(p0 : Location, p1 : Real) ResizeToPoint : Void Name Type Description p0 Location p1 real2 function ResizeToPoint(p0 : Location, p1 : Real2) ResizeToPoint : Void Name Type Description p0 Location p1 real2 p2 real2 function ResizeToPoint(p0 : Location, p1 : Real2, p2 : Real2) SetLocation : Void Name Type Description p0 Location p1 real function SetLocation(p0 : Location, p1 : Real) SetLocation : Void Name Type Description p0 Location p1 real2 function SetLocation(p0 : Location, p1 : Real2) Transform : Void Name Type Description p0 real2x2 function Transform(p0 : Real2x2) Transform : Void Name Type Description p0 real3x3 function Transform(p0 : Real3x3) Transform : Void Name Type Description p0 real4x4 function Transform(p0 : Real4x4) Transformed : rectangle Name Type Description p0 real2x2 function Transformed(p0 : Real2x2) : Rectangle Transformed : rectangle Name Type Description p0 real3x3 function Transformed(p0 : Real3x3) : Rectangle Transformed : rectangle Name Type Description p0 real4x4 function Transformed(p0 : Real4x4) : Rectangle"
  },
  "docs/code_reference/class_reference/referencecountedempty.html": {
    "href": "docs/code_reference/class_reference/referencecountedempty.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/referencecountedeventobject.html": {
    "href": "docs/code_reference/class_reference/referencecountedeventobject.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes eventobject action animationnode asyncprocess cogcomponentmeta customconstraintinfo metaarray metaattribute metacomposition metadatainheritance metadisplay metaoperations metaowner metapropertyeditor metaresource metaselection metaserialization metaserializedproperty metatransform operationqueue serializationfilter soundinstance soundnode spline webbrowser Properties Methods"
  },
  "docs/code_reference/class_reference/referencecountedobject.html": {
    "href": "docs/code_reference/class_reference/referencecountedobject.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Object indexedhalfedgemesh soundbuffer Properties Methods"
  },
  "docs/code_reference/class_reference/referencecountedsafeid32.html": {
    "href": "docs/code_reference/class_reference/referencecountedsafeid32.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/referencecountedsafeid32eventobject.html": {
    "href": "docs/code_reference/class_reference/referencecountedsafeid32eventobject.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/referencecountedsafeid32object.html": {
    "href": "docs/code_reference/class_reference/referencecountedsafeid32object.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Object Properties Methods"
  },
  "docs/code_reference/class_reference/referencecountedsafeid64.html": {
    "href": "docs/code_reference/class_reference/referencecountedsafeid64.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/referencecountedsafeid64eventobject.html": {
    "href": "docs/code_reference/class_reference/referencecountedsafeid64eventobject.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/referencecountedsafeid64object.html": {
    "href": "docs/code_reference/class_reference/referencecountedsafeid64object.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Object Properties Methods"
  },
  "docs/code_reference/class_reference/referencecountedthreadsafeid32.html": {
    "href": "docs/code_reference/class_reference/referencecountedthreadsafeid32.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes shaderinputs Properties Methods"
  },
  "docs/code_reference/class_reference/referencecountedthreadsafeid32eventobject.html": {
    "href": "docs/code_reference/class_reference/referencecountedthreadsafeid32eventobject.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/referencecountedthreadsafeid32object.html": {
    "href": "docs/code_reference/class_reference/referencecountedthreadsafeid32object.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Object Properties Methods"
  },
  "docs/code_reference/class_reference/referencecountedthreadsafeid64.html": {
    "href": "docs/code_reference/class_reference/referencecountedthreadsafeid64.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/referencecountedthreadsafeid64eventobject.html": {
    "href": "docs/code_reference/class_reference/referencecountedthreadsafeid64eventobject.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/referencecountedthreadsafeid64object.html": {
    "href": "docs/code_reference/class_reference/referencecountedthreadsafeid64object.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Object Properties Methods"
  },
  "docs/code_reference/class_reference/region.html": {
    "href": "docs/code_reference/class_reference/region.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Regions are used to make PhysicsEffects affect a region of space. Any effects attached to a Cog with a Region will apply to all objects in contact with this region. Methods Properties Base Classes Derived Classes DispatchEvent WakeUpOnEffectChange component Constructor Properties WakeUpOnEffectChange : boolean Determines if all objects in the region should be woken up when an effect is changed. Used to make sure that changes in effects will be applied to an object event if it is asleep. var WakeUpOnEffectChange : Boolean Methods DispatchEvent : Void Dispatches an event to all objects in this region. |Name|Type|Description| |---|---|---| |eventId|string| | |toSend|event| | function DispatchEvent(eventId : String, toSend : Event) Region : Void constructor Name Type Description function Region()"
  },
  "docs/code_reference/class_reference/registercppnetproperties.html": {
    "href": "docs/code_reference/class_reference/registercppnetproperties.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) Dispatched while adding C++ component net properties to a NetObject. Properties Methods"
  },
  "docs/code_reference/class_reference/relativevelocityjoint.html": {
    "href": "docs/code_reference/class_reference/relativevelocityjoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A relative velocity joint defines what the desired relative velocity on three world axes should be between two objects. Relative velocity is defined as v2 - v1. This joint has not been tested with motors or limits in any way. Methods Properties Base Classes Derived Classes GetAxis joint GetAxisActive GetMaxImpulse GetSpeed Constructor SetAxis SetAxisActive SetMaxImpulse SetSpeed Properties Methods GetAxis : real3 One of 3 axes to constrain movement on. |Name|Type|Description| |---|---|---| |index|integer| | function GetAxis(index : Integer) : Real3 GetAxisActive : boolean Whether or not the given axis index is active. |Name|Type|Description| |---|---|---| |index|integer| | function GetAxisActive(index : Integer) : Boolean GetMaxImpulse : real The max impulse for the given axis index. |Name|Type|Description| |---|---|---| |index|integer| | function GetMaxImpulse(index : Integer) : Real GetSpeed : real The desired relative speed for the given axis index. |Name|Type|Description| |---|---|---| |index|integer| | function GetSpeed(index : Integer) : Real RelativeVelocityJoint : Void constructor Name Type Description function RelativeVelocityJoint() SetAxis : Void One of 3 axes to constrain movement on. |Name|Type|Description| |---|---|---| |index|integer| | |axis|real3| | function SetAxis(index : Integer, axis : Real3) SetAxisActive : Void Whether or not the given axis index is active. |Name|Type|Description| |---|---|---| |index|integer| | |active|boolean| | function SetAxisActive(index : Integer, active : Boolean) SetMaxImpulse : Void The max impulse for the given axis index. |Name|Type|Description| |---|---|---| |index|integer| | |maxImpulse|real| | function SetMaxImpulse(index : Integer, maxImpulse : Real) SetSpeed : Void The desired relative speed for the given axis index. |Name|Type|Description| |---|---|---| |index|integer| | |speed|real| | function SetSpeed(index : Integer, speed : Real)"
  },
  "docs/code_reference/class_reference/relativevelocityjointblock.html": {
    "href": "docs/code_reference/class_reference/relativevelocityjointblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods RelativeVelocityJointBlock : Void constructor Name Type Description function RelativeVelocityJointBlock()"
  },
  "docs/code_reference/class_reference/removedentry.html": {
    "href": "docs/code_reference/class_reference/removedentry.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Object Properties Methods"
  },
  "docs/code_reference/class_reference/rendergroup.html": {
    "href": "docs/code_reference/class_reference/rendergroup.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Graphics (NOTE) How Materials are categorized, determines which graphicals are drawn in a render pass. Methods Properties Base Classes Derived Classes IsSubRenderGroup ChildRenderGroups dataresource IsSubRenderGroupOf GraphicalSortMethod Materials ParentRenderGroup ReferencedByList Properties ChildRenderGroups : childrendergrouplist read-only For assigning child RenderGroups, making this a parent group of everything in the list. var ChildRenderGroups : ChildRenderGroupList GraphicalSortMethod : GraphicalSortMethod Determines the order that graphicals will be drawn when processed as this RenderGroup. var GraphicalSortMethod : GraphicalSortMethod Materials : materiallist read-only var Materials : MaterialList ParentRenderGroup : rendergroup RenderGroup that this is a sub group of. Also a sub group of all of its parents. var ParentRenderGroup : RenderGroup ReferencedByList : materiallist read-only var ReferencedByList : MaterialList Methods IsSubRenderGroup : boolean Returns whether or not the given RenderGroup is a sub group of this. |Name|Type|Description| |---|---|---| |renderGroup|rendergroup| | function IsSubRenderGroup(renderGroup : RenderGroup) : Boolean IsSubRenderGroupOf : boolean Returns whether or not this is a sub group of the given RenderGroup. |Name|Type|Description| |---|---|---| |renderGroup|rendergroup| | function IsSubRenderGroupOf(renderGroup : RenderGroup) : Boolean"
  },
  "docs/code_reference/class_reference/rendergrouphierarchies.html": {
    "href": "docs/code_reference/class_reference/rendergrouphierarchies.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/rendergrouplist.html": {
    "href": "docs/code_reference/class_reference/rendergrouplist.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes Add safeid32eventobject childrendergrouplist All Remove Properties Methods Add : Void Adds the RenderGroup to this Material's list. Runtime resources only. |Name|Type|Description| |---|---|---| |renderGroup|rendergroup| | function Add(renderGroup : RenderGroup) All : arrayhandleofrendergroup Range of all resources in the list. |Name|Type|Description| |---|---|---| function All() : ArrayHandleOfRenderGroup Remove : Void Removes the RenderGroup from this Material's list. Runtime resources only. |Name|Type|Description| |---|---|---| |renderGroup|rendergroup| | function Remove(renderGroup : RenderGroup)"
  },
  "docs/code_reference/class_reference/rendersettings.html": {
    "href": "docs/code_reference/class_reference/rendersettings.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics (NOTE) Contains all output targets and render settings needed for a render task. Methods Properties Base Classes Derived Classes Constructor BlendSettings ColorTarget CullMode DepthSettings DepthTarget GlobalShaderInputs MultiRenderTarget Properties BlendSettings : blendsettings Settings to use when blending shader output with the ColorTarget, implicitly BlendSettings0. var BlendSettings : BlendSettings ColorTarget : rendertarget The RenderTarget of a color format to output to, implicitly RenderTarget0. var ColorTarget : RenderTarget CullMode : CullMode var CullMode : CullMode DepthSettings : depthsettings Settings to use when doing depth/stencil testing with DepthTarget. var DepthSettings : DepthSettings DepthTarget : rendertarget The RenderTarget of a depth format to use as a depth buffer for depth/stencil testing. var DepthTarget : RenderTarget GlobalShaderInputs : shaderinputs Shader input values to be globally overridden for all objects/shaders. var GlobalShaderInputs : ShaderInputs MultiRenderTarget : multirendertarget read-only Interface for configuring multiple color target outputs. var MultiRenderTarget : MultiRenderTarget Methods RenderSettings : Void constructor Name Type Description function RenderSettings() RenderSettings : Void constructor Name Type Description rendersettings function RenderSettings( : RenderSettings)"
  },
  "docs/code_reference/class_reference/rendertarget.html": {
    "href": "docs/code_reference/class_reference/rendertarget.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics (NOTE) Interface for rendering output. Texture data is managed and recycled by the engine. Methods Properties Base Classes Derived Classes Release Texture safeid32 Properties Texture : texture read-only Texture that is rendered to. Can be used as shader input to a separate rendering operation. var Texture : Texture Methods Release : Void Allows the managed Texture being referenced by this RenderTarget to be reused by the renderer if the same specifications are requested again. Also deletes this RenderTarget. |Name|Type|Description| |---|---|---| function Release()"
  },
  "docs/code_reference/class_reference/rendertasksevent.html": {
    "href": "docs/code_reference/class_reference/rendertasksevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Graphics (NOTE) Interface for adding tasks for the renderer, essentially defining a rendering pipeline. Methods Properties Base Classes Derived Classes AddRenderTaskClearTarget CameraViewportCog event AddRenderTaskPostProcess ViewportSize AddRenderTaskRenderPass AddRenderTaskSubRenderGroupPass CreateSubRenderGroupPass GetFinalTarget GetRenderTarget Properties CameraViewportCog : cog read-only Object with the CameraViewport component that this event is getting tasks for. var CameraViewportCog : Cog ViewportSize : integer2 read-only Size of the UI viewport, or the resolution on CameraViewport if not rendering to viewport. var ViewportSize : Integer2 Methods AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |renderSettings|rendersettings| | |color|real4| | function AddRenderTaskClearTarget(renderSettings : RenderSettings, color : Real4) AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |renderSettings|rendersettings| | |color|real4| | |depth|real| | function AddRenderTaskClearTarget(renderSettings : RenderSettings, color : Real4, depth : Real) AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |renderSettings|rendersettings| | |color|real4| | |depth|real| | |stencil|integer| | function AddRenderTaskClearTarget(renderSettings : RenderSettings, color : Real4, depth : Real, stencil : Integer) AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |renderSettings|rendersettings| | |color|real4| | |depth|real| | |stencil|integer| | |stencilWriteMask|integer| | function AddRenderTaskClearTarget(renderSettings : RenderSettings, color : Real4, depth : Real, stencil : Integer, stencilWriteMask : Integer) AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |depthTarget|rendertarget| | |depth|real| | function AddRenderTaskClearTarget(depthTarget : RenderTarget, depth : Real) AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |depthTarget|rendertarget| | |depth|real| | |stencil|integer| | function AddRenderTaskClearTarget(depthTarget : RenderTarget, depth : Real, stencil : Integer) AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |depthTarget|rendertarget| | |depth|real| | |stencil|integer| | |stencilWriteMask|integer| | function AddRenderTaskClearTarget(depthTarget : RenderTarget, depth : Real, stencil : Integer, stencilWriteMask : Integer) AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |colorTarget|rendertarget| | |color|real4| | function AddRenderTaskClearTarget(colorTarget : RenderTarget, color : Real4) AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |colorTarget|rendertarget| | |depthTarget|rendertarget| | |color|real4| | |depth|real| | function AddRenderTaskClearTarget(colorTarget : RenderTarget, depthTarget : RenderTarget, color : Real4, depth : Real) AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |colorTarget|rendertarget| | |depthTarget|rendertarget| | |color|real4| | |depth|real| | |stencil|integer| | function AddRenderTaskClearTarget(colorTarget : RenderTarget, depthTarget : RenderTarget, color : Real4, depth : Real, stencil : Integer) AddRenderTaskClearTarget : Void Initializes all the internal texture data for the given RenderTargets. |Name|Type|Description| |---|---|---| |colorTarget|rendertarget| | |depthTarget|rendertarget| | |color|real4| | |depth|real| | |stencil|integer| | |stencilWriteMask|integer| | function AddRenderTaskClearTarget(colorTarget : RenderTarget, depthTarget : RenderTarget, color : Real4, depth : Real, stencil : Integer, stencilWriteMask : Integer) AddRenderTaskPostProcess : Void Invokes the pixel shader for every pixel of the RenderTargets. |Name|Type|Description| |---|---|---| |renderSettings|rendersettings| | |material|material| | function AddRenderTaskPostProcess(renderSettings : RenderSettings, material : Material) AddRenderTaskPostProcess : Void Invokes the pixel shader for every pixel of the RenderTargets. |Name|Type|Description| |---|---|---| |renderSettings|rendersettings| | |postProcess|materialblock| | function AddRenderTaskPostProcess(renderSettings : RenderSettings, postProcess : MaterialBlock) AddRenderTaskPostProcess : Void Invokes the pixel shader for every pixel of the RenderTargets. |Name|Type|Description| |---|---|---| |renderTarget|rendertarget| | |material|material| | function AddRenderTaskPostProcess(renderTarget : RenderTarget, material : Material) AddRenderTaskPostProcess : Void Invokes the pixel shader for every pixel of the RenderTargets. |Name|Type|Description| |---|---|---| |renderTarget|rendertarget| | |postProcess|materialblock| | function AddRenderTaskPostProcess(renderTarget : RenderTarget, postProcess : MaterialBlock) AddRenderTaskRenderPass : Void Renders a group of objects with the given settings. The RenderPass fragment defines what data is written to RenderTargets. |Name|Type|Description| |---|---|---| |renderSettings|rendersettings| | |graphicalRange|graphicalrangeinterface| | |renderPass|materialblock| | function AddRenderTaskRenderPass(renderSettings : RenderSettings, graphicalRange : GraphicalRangeInterface, renderPass : MaterialBlock) AddRenderTaskRenderPass : Void Renders a group of objects with the given settings. The RenderPass fragment defines what data is written to RenderTargets. |Name|Type|Description| |---|---|---| |renderSettings|rendersettings| | |renderGroup|rendergroup| | |renderPass|materialblock| | function AddRenderTaskRenderPass(renderSettings : RenderSettings, renderGroup : RenderGroup, renderPass : MaterialBlock) AddRenderTaskSubRenderGroupPass : Void Renders all objects within a RenderGroup hierarchy, sorted in the order defined by the base RenderGroup, and can use unique render settings for each RenderGroup in the hierarchy. |Name|Type|Description| |---|---|---| |subRenderGroupPass|subrendergrouppass| | function AddRenderTaskSubRenderGroupPass(subRenderGroupPass : SubRenderGroupPass) CreateSubRenderGroupPass : subrendergrouppass Creates the interface used to define unique render settings for a base RenderGroup and its sub RenderGroups. The given RenderGroup is used to define the hierarchy, or sub hierarchy, that should be rendered. The given RenderGroup also defines the sort order for all objects that are within its hierarchy. Returned SubRenderGroupPass is only valid during this event. |Name|Type|Description| |---|---|---| |baseGroup|rendergroup| | function CreateSubRenderGroupPass(baseGroup : RenderGroup) : SubRenderGroupPass GetFinalTarget : rendertarget Name Type Description integer2 TextureFormat function GetFinalTarget( : Integer2, : TextureFormat) : RenderTarget GetFinalTarget : rendertarget Name Type Description integer2 TextureFormat samplersettings function GetFinalTarget( : Integer2, : TextureFormat, : SamplerSettings) : RenderTarget GetRenderTarget : rendertarget Returns a RenderTarget for use when adding render tasks. Target only valid during this event. Will render to the given texture instead of an internally managed texture. |Name|Type|Description| |---|---|---| ||integer2| | ||TextureFormat| | function GetRenderTarget( : Integer2, : TextureFormat) : RenderTarget GetRenderTarget : rendertarget Returns a RenderTarget for use when adding render tasks. Target only valid during this event. Will render to the given texture instead of an internally managed texture. |Name|Type|Description| |---|---|---| ||integer2| | ||TextureFormat| | ||samplersettings| | function GetRenderTarget( : Integer2, : TextureFormat, : SamplerSettings) : RenderTarget GetRenderTarget : rendertarget Returns a RenderTarget for use when adding render tasks. Target only valid during this event. Will render to the given texture instead of an internally managed texture. |Name|Type|Description| |---|---|---| |texture|texture| | function GetRenderTarget(texture : Texture) : RenderTarget"
  },
  "docs/code_reference/class_reference/resource.html": {
    "href": "docs/code_reference/class_reference/resource.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Methods Properties Base Classes Derived Classes Name EventObject animation archetype dataresource documentresource font genericphysicsmesh heightmapsource level mesh multiconvexmesh sound spritesource texture tilemapsource tilepalettesource nadalibraryresource Properties Name : string read-only var Name : String; Methods"
  },
  "docs/code_reference/class_reference/resourcedisplayfunctions.html": {
    "href": "docs/code_reference/class_reference/resourcedisplayfunctions.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metadisplay Properties Methods"
  },
  "docs/code_reference/class_reference/resourceeditors.html": {
    "href": "docs/code_reference/class_reference/resourceeditors.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Object Properties Methods"
  },
  "docs/code_reference/class_reference/resourceevent.html": {
    "href": "docs/code_reference/class_reference/resourceevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/resourcelibrary.html": {
    "href": "docs/code_reference/class_reference/resourcelibrary.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/resourcelistevent.html": {
    "href": "docs/code_reference/class_reference/resourcelistevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Graphics Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/resourcemetaoperations.html": {
    "href": "docs/code_reference/class_reference/resourcemetaoperations.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metaoperations Properties Methods"
  },
  "docs/code_reference/class_reference/resourcemetaserialization.html": {
    "href": "docs/code_reference/class_reference/resourcemetaserialization.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metaserialization Properties Methods"
  },
  "docs/code_reference/class_reference/resourcepackage.html": {
    "href": "docs/code_reference/class_reference/resourcepackage.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Object Properties Methods"
  },
  "docs/code_reference/class_reference/resourcepackagedisplay.html": {
    "href": "docs/code_reference/class_reference/resourcepackagedisplay.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metadisplay Properties Methods"
  },
  "docs/code_reference/class_reference/resourcesystem.html": {
    "href": "docs/code_reference/class_reference/resourcesystem.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes GetResourceByName eventobject GetResourceByTypeAndName Properties Methods GetResourceByName : Resource Name Type Description p0 string function GetResourceByName(p0 : String) : Resource GetResourceByTypeAndName : Resource Name Type Description p0 string p1 string function GetResourceByTypeAndName(p0 : String, p1 : String) : Resource"
  },
  "docs/code_reference/class_reference/resourcetable.html": {
    "href": "docs/code_reference/class_reference/resourcetable.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Engine (NOTE) A table of resources (or strings) that can be indexed, searched by name, or sampled randomly. The table can be randomly sampled to return an entry into the table. Methods Properties Base Classes Derived Classes AddOrError All dataresource AddOrIgnore Count AddOrOverwrite MaxWeight Clear ResourceType Contains CreateRuntime ForceRebuild Get GetOrDefault GetOrError GetOrNull RemoveAt RemoveOrError RemoveOrIgnore RuntimeClone Sample SampleIndex Set Properties All : resourcetableentryrange read-only Range to iterate over all entries. var All : ResourceTableEntryRange Count : integer read-only How many items are stored in the table. var Count : Integer MaxWeight : real The maximum probability weight value that can be stored in the table. Setting this will clamp all weight values. var MaxWeight : Real ResourceType : string The kind of resource contained in this table. This is either a resource type or \"String\". var ResourceType : String Methods AddOrError : Void Add the given entry. If another entry with the same name exists then an error is thrown. |Name|Type|Description| |---|---|---| |entry|resourcetableentry| | function AddOrError(entry : ResourceTableEntry) AddOrIgnore : boolean Add the given entry. If another entry with the same name exists then no operation is performed. |Name|Type|Description| |---|---|---| |entry|resourcetableentry| | function AddOrIgnore(entry : ResourceTableEntry) : Boolean AddOrOverwrite : boolean Add the given entry. If another entry with the same name exists then it is overwritten. |Name|Type|Description| |---|---|---| |entry|resourcetableentry| | function AddOrOverwrite(entry : ResourceTableEntry) : Boolean Clear : Void Clear all items in the table. |Name|Type|Description| |---|---|---| function Clear() Contains : boolean Returns if the given key is contained. |Name|Type|Description| |---|---|---| |key|string| | function Contains(key : String) : Boolean CreateRuntime : resourcetable static Creates a ResourceTable for run-time modifications. |Name|Type|Description| |---|---|---| function CreateRuntime() : ResourceTable ForceRebuild : Void Force rebuild the weighted probability table. |Name|Type|Description| |---|---|---| function ForceRebuild() Get : resourcetableentry Access an item at the given index. |Name|Type|Description| |---|---|---| |index|integer| | function Get(index : Integer) : ResourceTableEntry Get : resourcetableentry Hash-Set interface. Gets the item with the same name as the entry. |Name|Type|Description| |---|---|---| |entry|resourcetableentry| | function Get(entry : ResourceTableEntry) : ResourceTableEntry Get : resourcetableentry Hash-Map interface. Gets via the provided key. |Name|Type|Description| |---|---|---| |key|string| | function Get(key : String) : ResourceTableEntry GetOrDefault : resourcetableentry Returns the entry associated with the given key. If no entry matches the key then the provided default is returned. |Name|Type|Description| |---|---|---| |key|string| | |defaultValue|resourcetableentry| | function GetOrDefault(key : String, defaultValue : ResourceTableEntry) : ResourceTableEntry GetOrError : resourcetableentry Returns the entry associated with the given key. If no entry matches the key then an exception is thrown. |Name|Type|Description| |---|---|---| |key|string| | function GetOrError(key : String) : ResourceTableEntry GetOrNull : resourcetableentry Returns the entry associated with the given key. If no entry matches then null is returned. |Name|Type|Description| |---|---|---| |key|string| | function GetOrNull(key : String) : ResourceTableEntry RemoveAt : Void Removes the item at the given index. |Name|Type|Description| |---|---|---| |index|integer| | function RemoveAt(index : Integer) RemoveOrError : Void Removes the entry associated with the given key. If no entry matches an exception is thrown. |Name|Type|Description| |---|---|---| |key|string| | function RemoveOrError(key : String) RemoveOrIgnore : boolean Removes the entry associated with the given key. If no entry matches then no operation is performed. |Name|Type|Description| |---|---|---| |key|string| | function RemoveOrIgnore(key : String) : Boolean RuntimeClone : resourcetable Creates a clone of this table for run-time modifications. |Name|Type|Description| |---|---|---| function RuntimeClone() : ResourceTable Sample : resourcetableentry Samples the table to return a random entry. Takes two (different) random floats from [0,1) in order to sample. Returns an empty string if the table is empty. |Name|Type|Description| |---|---|---| |random1|real| | |random2|real| | function Sample(random1 : Real, random2 : Real) : ResourceTableEntry SampleIndex : integer Samples the table to return a random index into the table. Takes two (different) random floats from [0,1) in order to sample. |Name|Type|Description| |---|---|---| |random1|real| | |random2|real| | function SampleIndex(random1 : Real, random2 : Real) : Integer Set : Void Access an item at the given index. |Name|Type|Description| |---|---|---| |index|integer| | |entry|resourcetableentry| | function Set(index : Integer, entry : ResourceTableEntry) Set : Void Hash-Set interface. Sets the item with the same name as the entry. |Name|Type|Description| |---|---|---| |entry|resourcetableentry| | function Set(entry : ResourceTableEntry) Set : Void Hash-Map interface. Sets via the provided key. |Name|Type|Description| |---|---|---| |key|string| | |entry|resourcetableentry| | function Set(key : String, entry : ResourceTableEntry)"
  },
  "docs/code_reference/class_reference/resourcetableentry.html": {
    "href": "docs/code_reference/class_reference/resourcetableentry.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) An entry from a resource table. The resource type of this entry must match the resource type of the table to add/set. If the value is set via string then the type will be implicitly set to string, otherwise the type must be set via the Resource property. Methods Properties Base Classes Derived Classes Clone Name Constructor Resource ResourceType Value Weight Properties Name : string var Name : String Resource : Resource The resource value of this entry. Returns null if the underlying type is not a resource. Changes this entry's type to the given resource's type on Set. var Resource : Resource ResourceType : string var ResourceType : String Value : string The string value of this entry. Changes this entry's type to String on Set. var Value : String Weight : real The weight value used to determine how likely this item is to be sampled. Note: Weights must be positive. Negative weights will be clamped to 0. var Weight : Real Methods Clone : resourcetableentry Creates a new entry with the same values. |Name|Type|Description| |---|---|---| function Clone() : ResourceTableEntry ResourceTableEntry : Void constructor Name Type Description function ResourceTableEntry() ResourceTableEntry : Void constructor Name Type Description resourcetableentry function ResourceTableEntry( : ResourceTableEntry)"
  },
  "docs/code_reference/class_reference/resourcetableentryrange.html": {
    "href": "docs/code_reference/class_reference/resourcetableentryrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : resourcetableentryrange read-only var All : ResourceTableEntryRange Current : resourcetableentry read-only var Current : ResourceTableEntry IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() ResourceTableEntryRange : Void constructor Name Type Description function ResourceTableEntryRange() ResourceTableEntryRange : Void constructor Name Type Description p0 resourcetableentryrange function ResourceTableEntryRange(p0 : ResourceTableEntryRange)"
  },
  "docs/code_reference/class_reference/resourcetemplate.html": {
    "href": "docs/code_reference/class_reference/resourcetemplate.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Constructor Category contentcomponent CategorySortWeight Description DisplayName SortWeight Properties Category : string var Category : String CategorySortWeight : integer var CategorySortWeight : Integer Description : string var Description : String DisplayName : string var DisplayName : String SortWeight : integer var SortWeight : Integer Methods ResourceTemplate : Void constructor Name Type Description function ResourceTemplate()"
  },
  "docs/code_reference/class_reference/resourcetemplatedisplay.html": {
    "href": "docs/code_reference/class_reference/resourcetemplatedisplay.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/resourcetemplatesearch.html": {
    "href": "docs/code_reference/class_reference/resourcetemplatesearch.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/resourcetypesearch.html": {
    "href": "docs/code_reference/class_reference/resourcetypesearch.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/reverbnode.html": {
    "href": "docs/code_reference/class_reference/reverbnode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Applies a simple reverb filter to audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes InterpolateWetPercent Length soundnode InterpolateWetValue WetPercent WetValue Properties Length : real The length of the reverb tail, in seconds. The default value is 0.1. var Length : Real WetPercent : real DEPRECATED The WetValue property should be used instead. var WetPercent : Real WetValue : real The percentage of the node's output (0 - 1.0) which has the reverb filter applied to it. Setting this property to 0 will stop all reverb calculations. var WetValue : Real Methods InterpolateWetPercent : Void DEPRECATED The InterpolateWetValue method should be used instead. |Name|Type|Description| |---|---|---| |percent|real| | |time|real| | function InterpolateWetPercent(percent : Real, time : Real) InterpolateWetValue : Void Interpolates the WetValue property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |value|real| | |time|real| | function InterpolateWetValue(value : Real, time : Real)"
  },
  "docs/code_reference/class_reference/revision.html": {
    "href": "docs/code_reference/class_reference/revision.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes ChangeSet Date Summary User Properties ChangeSet : string var ChangeSet : String Date : string var Date : String Summary : string var Summary : String User : string var User : String Methods"
  },
  "docs/code_reference/class_reference/revisions.html": {
    "href": "docs/code_reference/class_reference/revisions.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/revolutebasisgizmo.html": {
    "href": "docs/code_reference/class_reference/revolutebasisgizmo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor component Properties Methods RevoluteBasisGizmo : Void constructor Name Type Description function RevoluteBasisGizmo()"
  },
  "docs/code_reference/class_reference/revolutejoint.html": {
    "href": "docs/code_reference/class_reference/revolutejoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A revolute joint is used to create a wheel or a hinge. A revolute joint bring the two locally defined axes together and allows free rotation only on that axis. This axis is also where the motor is applied. The two axes that are orthogonal to the motor axis have their rotation locked (objects rotate together unless on the motor axis). Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Zilch is defined by the location of the primary axis on the FrameOfreference object. Motor: A motor will drive the objects about the motor axis. Spring: A spring will make the motor axis springy at the limits. Methods Properties Base Classes Derived Classes Constructor FrameOfReference joint SetWorldFrame LocalBasisA SetWorldPoints LocalBasisB LocalPointA LocalPointB WorldBasis WorldPointA WorldPointB Properties FrameOfReference : JointFrameOfReference Should the default basis of the constraint be object A or B? This determines which object's world axis is used when constructing the basis for the constraint. In the case of a dynamic and static object, the static object is generally the better choice. As a general rule of thumb, it should be the heavier/most important object. var FrameOfReference : JointFrameOfReference LocalBasisA : quaternion The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . var LocalBasisA : Quaternion LocalBasisB : quaternion The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . var LocalBasisB : Quaternion LocalPointA : real3 The local point of the anchor on object A . var LocalPointA : Real3 LocalPointB : real3 The local point of the anchor on object B . var LocalPointB : Real3 WorldBasis : quaternion The basis of the joint in world-space. This basis will come object specified by FrameOfReference. The basis is constructed such that the x-axis is the primary axis while the z-axis is the hinge axis. var WorldBasis : Quaternion WorldPointA : real3 The position of the anchor on object A given a position in world space var WorldPointA : Real3 WorldPointB : real3 The position of the anchor on object B given a position in world space var WorldPointB : Real3 Methods RevoluteJoint : Void constructor Name Type Description function RevoluteJoint() SetWorldFrame : Void Legacy. Used to set the entire frame in world space for this joint. The x and y axes are used as a basis for limiting the joint. The x axis is at angle 0 and the y axis is at angle 90. The z axis is the axis of rotational freedom. |Name|Type|Description| |---|---|---| |rot|quaternion| | function SetWorldFrame(rot : Quaternion) SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point|real3| | function SetWorldPoints(point : Real3)"
  },
  "docs/code_reference/class_reference/revolutejoint2d.html": {
    "href": "docs/code_reference/class_reference/revolutejoint2d.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A revolute joint is used to create a wheel or a hinge. This is the 2d version of RevoluteJoint. This joint is used in 2d mode for increased performance and stability. The motor axis is automatically set to the z axis, as that is the only axis objects can rotate about. Also, the translation on the z axis is ignored so that objects can be arbitrarily far apart. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the motor axis springy at the limits. Methods Properties Base Classes Derived Classes Constructor LocalPointA joint SetWorldPoints LocalPointB WorldPointA WorldPointB Properties LocalPointA : real3 The local point of the anchor on object A . var LocalPointA : Real3 LocalPointB : real3 The local point of the anchor on object B . var LocalPointB : Real3 WorldPointA : real3 The position of the anchor on object A given a position in world space var WorldPointA : Real3 WorldPointB : real3 The position of the anchor on object B given a position in world space var WorldPointB : Real3 Methods RevoluteJoint2d : Void constructor Name Type Description function RevoluteJoint2d() SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point|real3| | function SetWorldPoints(point : Real3)"
  },
  "docs/code_reference/class_reference/revolutejoint2dblock.html": {
    "href": "docs/code_reference/class_reference/revolutejoint2dblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods RevoluteJoint2dBlock : Void constructor Name Type Description function RevoluteJoint2dBlock()"
  },
  "docs/code_reference/class_reference/revolutejointblock.html": {
    "href": "docs/code_reference/class_reference/revolutejointblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods RevoluteJointBlock : Void constructor Name Type Description function RevoluteJointBlock()"
  },
  "docs/code_reference/class_reference/richanimation.html": {
    "href": "docs/code_reference/class_reference/richanimation.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes SampleTolerance eventobject Properties SampleTolerance : real var SampleTolerance : Real Methods"
  },
  "docs/code_reference/class_reference/richanimationbuilder.html": {
    "href": "docs/code_reference/class_reference/richanimationbuilder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Constructor PreviewArchetype buildercomponent Properties PreviewArchetype : archetype var PreviewArchetype : Archetype Methods RichAnimationBuilder : Void constructor Name Type Description function RichAnimationBuilder()"
  },
  "docs/code_reference/class_reference/rigidbody.html": {
    "href": "docs/code_reference/class_reference/rigidbody.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) RigidBody defines the inertia (mass, velocity, etc...) of a rigid object. Any PhysicsEffects attached to a RigidBody without a region will be applied to the center of mass of this body. Methods Properties Base Classes Derived Classes ApplyAngularImpulse ActiveBody component ApplyAngularVelocity AllowSleep ApplyForce AngularVelocity ApplyForceAtOffsetVector Asleep ApplyForceAtOffsetVectorNoWakeUp DynamicState ApplyForceAtPoint Force ApplyForceAtPointNoWakeUp LocalInverseInertiaTensor ApplyForceNoWakeUp Mass ApplyImpulseAtOffsetVector Mode2D ApplyImpulseAtPoint RotationLocked ApplyLinearImpulse Torque ApplyLinearVelocity Velocity ApplyTorque WorldCenterOfMass ApplyTorqueNoWakeUp WorldInverseInertiaTensor ApplyVelocityAtPoint ForceAsleep ForceAwake GetPointVelocity Constructor Properties ActiveBody : rigidbody read-only If this is a static body then the active body (the one force/velocity should be applied to or calculated from) is the nearest parent body up the hierarchy that is not static. If one isn't found then this returns the current rigid body (this). var ActiveBody : RigidBody AllowSleep : boolean Sleeping happens when an object has not \"moved\" (small enough linear + angular velocity) for long enough. If this happens then the physics engine stops updating this object (integration, collision detection, etc...) until an awake object hits it. Sleeping is purely an optimization. Sometimes it is not desirable for a body to ever fall asleep (such as a player). var AllowSleep : Boolean AngularVelocity : real3 The angular velocity (radians per second) of this body in world space. Objects will rotate about this axis using the right-hand rule. Max bounds are around 1e+10, after this the angular velocity will be capped. Setting this will wake up the body if it's asleep. var AngularVelocity : Real3 Asleep : boolean Whether or not this object is currently asleep. Setting this to true will force the object asleep even if this causes invalid behavior (objects floating). var Asleep : Boolean DynamicState : RigidBodyDynamicState How this rigid body handles dynamics. Is it a regular rigid body (dynamic)? Does it not move (static)? Does the user want to manually move it and have objects properly collide with it (kinematic)? Note: Static vs. static does not check for collision. var DynamicState : RigidBodyDynamicState Force : real3 The total accumulated force (in world space) that is being applied to the center of mass of this rigid body this frame. Setting this will wake up the body if it's asleep. var Force : Real3 LocalInverseInertiaTensor : real3x3 read-only The inverse inertia tensor in local space of this body. The local space inertia tensor doesn't change when the object rotates but is not typically useful for any calculations other than computing the world-space inverse inertia tensor. var LocalInverseInertiaTensor : Real3x3 Mass : real read-only The current mass of the rigid body. This includes all child colliders belonging to this body. var Mass : Real Mode2D : Mode2DStates Used to make an object act as if it were 2D. This is done by locking it to the current z-plane and only allowing rotation about the world's z-axis. Objects can be set to always be 2D or 3D, or this can be deferred to the PhysicsSpace's Mode2D. var Mode2D : Mode2DStates RotationLocked : boolean Makes physics unable to rotate this object. Manual rotations can still be applied. var RotationLocked : Boolean Torque : real3 The total accumulated torque (in world space) that is being applied to the center of mass of this rigid body this frame. Setting this will wake up the body if it's asleep. var Torque : Real3 Velocity : real3 The velocity (units per second) of this body in world space. Max bounds are around 1e+10, after this the velocity will be capped. Setting this will wake up the body if it's asleep. var Velocity : Real3 WorldCenterOfMass : real3 read-only The position of the center of mass in world space. var WorldCenterOfMass : Real3 WorldInverseInertiaTensor : real3x3 read-only The inverse inertia tensor in world space of this body. Describes how hard it is to rotate an object about the world-space axes. Useful to convert any torque into an angular velocity. var WorldInverseInertiaTensor : Real3x3 Methods ApplyAngularImpulse : Void Applies an angular impulse through the center of mass (world space). Only results in a change of angular velocity. Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |angular|real3| | function ApplyAngularImpulse(angular : Real3) ApplyAngularVelocity : Void Adds to the current angular velocity (world space). Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |angular|real3| | function ApplyAngularVelocity(angular : Real3) ApplyForce : Void Applies a force through the center of mass of the body (world space). Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |force|real3| | function ApplyForce(force : Real3) ApplyForceAtOffsetVector : Void Applies a force at an offset from the center of mass (world space). Results in a force and torque to the center of mass. Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |force|real3| | |worldOffset|real3| | function ApplyForceAtOffsetVector(force : Real3, worldOffset : Real3) ApplyForceAtOffsetVectorNoWakeUp : Void Applies a force at an offset from the center of mass (world space). Results in a force and torque to the center of mass. Will not wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |force|real3| | |worldOffset|real3| | function ApplyForceAtOffsetVectorNoWakeUp(force : Real3, worldOffset : Real3) ApplyForceAtPoint : Void Applies a force at a world point (world space). Results in a force and torque to the center of mass. Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |force|real3| | |worldPoint|real3| | function ApplyForceAtPoint(force : Real3, worldPoint : Real3) ApplyForceAtPointNoWakeUp : Void Applies a force at a world point (world space). Results in a force and torque to the center of mass. Will not wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |force|real3| | |worldPoint|real3| | function ApplyForceAtPointNoWakeUp(force : Real3, worldPoint : Real3) ApplyForceNoWakeUp : Void Applies a force through the center of mass of the body (world space). Will not wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |force|real3| | function ApplyForceNoWakeUp(force : Real3) ApplyImpulseAtOffsetVector : Void Applies an impulse at on offset from the center of mass (world space). Results in a change in linear and angular velocity. Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |impulse|real3| | |worldOffset|real3| | function ApplyImpulseAtOffsetVector(impulse : Real3, worldOffset : Real3) ApplyImpulseAtPoint : Void Applies an impulse at a world point (world space). Results in a change to linear and angular velocity. Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |impulse|real3| | |worldPoint|real3| | function ApplyImpulseAtPoint(impulse : Real3, worldPoint : Real3) ApplyLinearImpulse : Void Applies a linear impulse through the center of mass (world space). Only results in a change of linear velocity. Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |linear|real3| | function ApplyLinearImpulse(linear : Real3) ApplyLinearVelocity : Void Adds to the current linear velocity (world space). Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |linear|real3| | function ApplyLinearVelocity(linear : Real3) ApplyTorque : Void Applies a torque through the center of mass of the body (world space). Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |torque|real3| | function ApplyTorque(torque : Real3) ApplyTorqueNoWakeUp : Void Applies a torque through the center of mass of the body (world space). Will not wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |torque|real3| | function ApplyTorqueNoWakeUp(torque : Real3) ApplyVelocityAtPoint : Void Applies a velocity at a world space point on the object. Results in a change to linear and angular velocity. Will wake up the body if it's asleep. |Name|Type|Description| |---|---|---| |velocity|real3| | |worldPoint|real3| | function ApplyVelocityAtPoint(velocity : Real3, worldPoint : Real3) ForceAsleep : Void Forces the object asleep. Warning: calling this function could create gameplay flaws if used incorrectly, use at your own risk (and sparingly). |Name|Type|Description| |---|---|---| function ForceAsleep() ForceAwake : Void Forces the object awake. Will reset the sleep timer. |Name|Type|Description| |---|---|---| function ForceAwake() GetPointVelocity : real3 Computes the linear point velocity of world-space point. |Name|Type|Description| |---|---|---| |worldPoint|real3| | function GetPointVelocity(worldPoint : Real3) : Real3 RigidBody : Void constructor Name Type Description function RigidBody()"
  },
  "docs/code_reference/class_reference/ringgizmo.html": {
    "href": "docs/code_reference/class_reference/ringgizmo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor BackShade simplegizmobase DragRadiansPerPixel GrabArrowColor GrabArrowHeadSize GrabArrowLength GrabArrowOnTop GrabArrowViewScaled Radius SelectRadius ViewAligned Properties BackShade : boolean var BackShade : Boolean DragRadiansPerPixel : real var DragRadiansPerPixel : Real GrabArrowColor : real4 var GrabArrowColor : Real4 GrabArrowHeadSize : real var GrabArrowHeadSize : Real GrabArrowLength : real var GrabArrowLength : Real GrabArrowOnTop : boolean var GrabArrowOnTop : Boolean GrabArrowViewScaled : boolean var GrabArrowViewScaled : Boolean Radius : real var Radius : Real SelectRadius : real var SelectRadius : Real ViewAligned : boolean var ViewAligned : Boolean Methods RingGizmo : Void constructor Name Type Description function RingGizmo()"
  },
  "docs/code_reference/class_reference/ringgizmoevent.html": {
    "href": "docs/code_reference/class_reference/ringgizmoevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor (NOTE) Notification about various rotation parameters on the most recent RingGizmo modification. Methods Properties Base Classes Derived Classes DeltaRadiansAroundAxis gizmoupdateevent RadiansAroundAxis WorldRotation WorldRotationAxis Properties DeltaRadiansAroundAxis : real var DeltaRadiansAroundAxis : Real RadiansAroundAxis : real var RadiansAroundAxis : Real WorldRotation : quaternion var WorldRotation : Quaternion WorldRotationAxis : real3 var WorldRotationAxis : Real3 Methods"
  },
  "docs/code_reference/class_reference/rootwidget.html": {
    "href": "docs/code_reference/class_reference/rootwidget.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes OsWindow composite mainwindow Properties OsWindow : oswindow read-only var OsWindow : OsWindow Methods"
  },
  "docs/code_reference/class_reference/ropecreatorsubtool.html": {
    "href": "docs/code_reference/class_reference/ropecreatorsubtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes NumberOfLinks springsubtool Properties NumberOfLinks : integer var NumberOfLinks : Integer Methods"
  },
  "docs/code_reference/class_reference/rotategizmo.html": {
    "href": "docs/code_reference/class_reference/rotategizmo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor SnapAngle component Snapping Properties SnapAngle : real var SnapAngle : Real Snapping : boolean Snapping. var Snapping : Boolean Methods RotateGizmo : Void constructor Name Type Description function RotateGizmo()"
  },
  "docs/code_reference/class_reference/rotategizmoupdateevent.html": {
    "href": "docs/code_reference/class_reference/rotategizmoupdateevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes GizmoRotation gizmoupdateevent GizmoWorldRotationAxis Properties GizmoRotation : real var GizmoRotation : Real GizmoWorldRotationAxis : real3 var GizmoWorldRotationAxis : Real3 Methods"
  },
  "docs/code_reference/class_reference/rotationbasisgizmo.html": {
    "href": "docs/code_reference/class_reference/rotationbasisgizmo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes ActivateAsGizmo WorldRotation component Constructor XAxisName YAxisName ZAxisName Properties WorldRotation : quaternion var WorldRotation : Quaternion XAxisName : string var XAxisName : String YAxisName : string var YAxisName : String ZAxisName : string var ZAxisName : String Methods ActivateAsGizmo : Void Name Type Description function ActivateAsGizmo() RotationBasisGizmo : Void constructor Name Type Description function RotationBasisGizmo()"
  },
  "docs/code_reference/class_reference/rotationbasisgizmoaabbqueryevent.html": {
    "href": "docs/code_reference/class_reference/rotationbasisgizmoaabbqueryevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes objectevent Properties Methods"
  },
  "docs/code_reference/class_reference/rotationbasisgizmoinitializationevent.html": {
    "href": "docs/code_reference/class_reference/rotationbasisgizmoinitializationevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes IntData objectevent Properties IntData : integer var IntData : Integer Methods"
  },
  "docs/code_reference/class_reference/rotationbasisgizmometatransform.html": {
    "href": "docs/code_reference/class_reference/rotationbasisgizmometatransform.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes metatransform Properties Methods"
  },
  "docs/code_reference/class_reference/safeid32.html": {
    "href": "docs/code_reference/class_reference/safeid32.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes indexbuffer nethost nethostrecord netpropertyinfo raycaster rendertarget subrendergrouppass vertexbuffer Properties Methods"
  },
  "docs/code_reference/class_reference/safeid32eventobject.html": {
    "href": "docs/code_reference/class_reference/safeid32eventobject.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes eventobject coginitializer collisionfilter command contextmenuentry materiallist operation rendergrouplist Properties Methods"
  },
  "docs/code_reference/class_reference/safeid32object.html": {
    "href": "docs/code_reference/class_reference/safeid32object.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Object carwheelarray collisionfilterblock constraintconfigblock contentlibraryreference indexedhalfedge indexedhalfedgeface indexedhalfedgefaceedgeindexarray indexedhalfedgemeshedgearray indexedhalfedgemeshfacearray indexedhalfedgemeshvertexarray multiconvexmeshindexdata multiconvexmeshsubmeshdata multiconvexmeshvertexdata netchannel netchanneltype netproperty netpropertytype physicsmeshindexdata physicsmeshvertexdata raycastprovider splinebakedpoints splinecontrolpoints subconvexmesh Properties Methods"
  },
  "docs/code_reference/class_reference/safeid64.html": {
    "href": "docs/code_reference/class_reference/safeid64.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/safeid64eventobject.html": {
    "href": "docs/code_reference/class_reference/safeid64eventobject.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/safeid64object.html": {
    "href": "docs/code_reference/class_reference/safeid64object.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Object Properties Methods"
  },
  "docs/code_reference/class_reference/samplecurve.html": {
    "href": "docs/code_reference/class_reference/samplecurve.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Engine Methods Properties Base Classes Derived Classes DebugSample HeightMax dataresource Sample WidthMax Properties HeightMax : real read-only var HeightMax : Real WidthMax : real read-only var WidthMax : Real Methods DebugSample : real Name Type Description p0 real p1 string p2 real4 function DebugSample(p0 : Real, p1 : String, p2 : Real4) : Real Sample : real Name Type Description p0 real function Sample(p0 : Real) : Real"
  },
  "docs/code_reference/class_reference/samplersettings.html": {
    "href": "docs/code_reference/class_reference/samplersettings.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics (NOTE) Used when requesting a RenderTarget to configure how its texture is sampled. Methods Properties Base Classes Derived Classes Constructor AddressingX AddressingY CompareFunc CompareMode Filtering Properties AddressingX : TextureAddressing How to treat uv coordinates outside of [0, 1] along the Texture's width. var AddressingX : TextureAddressing AddressingY : TextureAddressing How to treat uv coordinates outside of [0, 1] along the Texture's height. var AddressingY : TextureAddressing CompareFunc : TextureCompareFunc Which method of comparison should be used if CompareMode is set to Enable. var CompareFunc : TextureCompareFunc CompareMode : TextureCompareMode If sampling in hardware should perform comparison instead of fetching. Requires using SamplerShadow2d in the shader. var CompareMode : TextureCompareMode Filtering : TextureFiltering How samples should be blended under minification/magnification. var Filtering : TextureFiltering Methods SamplerSettings : Void constructor Name Type Description function SamplerSettings()"
  },
  "docs/code_reference/class_reference/sapbroadphase.html": {
    "href": "docs/code_reference/class_reference/sapbroadphase.html",
    "title": "Properties | ZilchEngine",
    "keywords": "SpatialPartition Methods Properties Base Classes Derived Classes ibroadphase Properties Methods"
  },
  "docs/code_reference/class_reference/saveaudionode.html": {
    "href": "docs/code_reference/class_reference/saveaudionode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Saves audio from its input SoundNodes and then plays it. All audio from inputs is passed to outputs. Methods Properties Base Classes Derived Classes ClearSavedAudio SaveAudio soundnode PlaySavedAudio StopPlaying Properties SaveAudio : boolean When true, audio from input SoundNodes will be saved. Setting this to true will remove any existing saved audio before saving more. var SaveAudio : Boolean Methods ClearSavedAudio : Void Removes all currently saved audio. |Name|Type|Description| |---|---|---| function ClearSavedAudio() PlaySavedAudio : Void Plays the saved audio. |Name|Type|Description| |---|---|---| function PlaySavedAudio() StopPlaying : Void Stops playing the saved audio. |Name|Type|Description| |---|---|---| function StopPlaying()"
  },
  "docs/code_reference/class_reference/savingevent.html": {
    "href": "docs/code_reference/class_reference/savingevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/scalegizmo.html": {
    "href": "docs/code_reference/class_reference/scalegizmo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor SnapDistance component SnapMode Snapping Properties SnapDistance : real var SnapDistance : Real SnapMode : GizmoSnapMode var SnapMode : GizmoSnapMode Snapping : boolean Snapping. var Snapping : Boolean Methods ScaleGizmo : Void constructor Name Type Description function ScaleGizmo()"
  },
  "docs/code_reference/class_reference/scalegizmoupdateevent.html": {
    "href": "docs/code_reference/class_reference/scalegizmoupdateevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes GizmoWorldScale gizmoupdateevent Properties GizmoWorldScale : real3 var GizmoWorldScale : Real3 Methods"
  },
  "docs/code_reference/class_reference/scenegraphsource.html": {
    "href": "docs/code_reference/class_reference/scenegraphsource.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/scrollarea.html": {
    "href": "docs/code_reference/class_reference/scrollarea.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes basescrollarea Properties Methods"
  },
  "docs/code_reference/class_reference/searchview.html": {
    "href": "docs/code_reference/class_reference/searchview.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/searchviewelement.html": {
    "href": "docs/code_reference/class_reference/searchviewelement.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/searchviewevent.html": {
    "href": "docs/code_reference/class_reference/searchviewevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/segment.html": {
    "href": "docs/code_reference/class_reference/segment.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes GetPoint End GetTValue Start Constructor Properties End : real3 var End : Real3 Start : real3 var Start : Real3 Methods GetPoint : real3 Returns the point at the given t-value. |Name|Type|Description| |---|---|---| |tValue|real| | function GetPoint(tValue : Real) : Real3 GetTValue : real Returns the t-value that would result in the given point projected onto the segment. |Name|Type|Description| |---|---|---| |point|real3| | function GetTValue(point : Real3) : Real Segment : Void constructor Name Type Description function Segment() Segment : Void constructor Name Type Description start real3 end real3 function Segment(start : Real3, end : Real3) Segment : Void constructor Name Type Description p0 segment function Segment(p0 : Segment)"
  },
  "docs/code_reference/class_reference/selectionchangedevent.html": {
    "href": "docs/code_reference/class_reference/selectionchangedevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Meta Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/selectionicon.html": {
    "href": "docs/code_reference/class_reference/selectionicon.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Utility selection behavior for objects in the editor. Methods Properties Base Classes Derived Classes Constructor Material component OverrideSelections ShaderInputs SpriteSource ViewScale VisibilityEvents Visible Properties Material : material var Material : Material OverrideSelections : boolean If collider/graphical or other selection logic should be disabled and only selectable via this icon. var OverrideSelections : Boolean ShaderInputs : shaderinputs var ShaderInputs : ShaderInputs SpriteSource : spritesource Sprite based image to use for icon, will not animate. var SpriteSource : SpriteSource ViewScale : real Scalar for how big the icon should appear in the viewport. var ViewScale : Real VisibilityEvents : boolean var VisibilityEvents : Boolean Visible : boolean var Visible : Boolean Methods SelectionIcon : Void constructor Name Type Description function SelectionIcon()"
  },
  "docs/code_reference/class_reference/selectivenode.html": {
    "href": "docs/code_reference/class_reference/selectivenode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes Root dualblendselectivenode Properties Root : cog var Root : Cog Methods"
  },
  "docs/code_reference/class_reference/selectorbutton.html": {
    "href": "docs/code_reference/class_reference/selectorbutton.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/selectorspringsubtool.html": {
    "href": "docs/code_reference/class_reference/selectorspringsubtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes dragselectsubtool pointmassselectorsubtool springselectorsubtool Properties Methods"
  },
  "docs/code_reference/class_reference/selecttool.html": {
    "href": "docs/code_reference/class_reference/selecttool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes RayCast ArchetypeSelect component Constructor Raycaster SmartSelect RootSelect SmartGroupSelect Properties ArchetypeSelect : boolean Selects the root archetype of the tree, subsequent clicks will select the nearest archetype followed by any direct children following that. var ArchetypeSelect : Boolean Raycaster : raycaster var Raycaster : Raycaster RootSelect : boolean Selects the root of a hierarchy first, subsequent clicks will select children objects. var RootSelect : Boolean SmartGroupSelect : boolean If a parent of a hierarchy is already selected drag select will only select all the children of the currently selected parent. var SmartGroupSelect : Boolean Methods RayCast : cog Name Type Description viewport viewport mousePosition real2 function RayCast(viewport : Viewport, mousePosition : Real2) : Cog SelectTool : Void constructor Constructor. |Name|Type|Description| |---|---|---| function SelectTool() SmartSelect : cog static Name Type Description selection metaselection toSelect cog rootSelect boolean archetypeSelect boolean function SmartSelect(selection : MetaSelection, toSelect : Cog, rootSelect : Boolean, archetypeSelect : Boolean) : Cog"
  },
  "docs/code_reference/class_reference/selecttoolfrustumevent.html": {
    "href": "docs/code_reference/class_reference/selecttoolfrustumevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes Frustum event Handled HandledEventScript Space Properties Frustum : frustum read-only var Frustum : Frustum Handled : boolean var Handled : Boolean HandledEventScript : boolean var HandledEventScript : Boolean Space : space read-only var Space : Space Methods"
  },
  "docs/code_reference/class_reference/sendableevent.html": {
    "href": "docs/code_reference/class_reference/sendableevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking (NOTE) This event can be sent over the network. Methods Properties Base Classes Derived Classes event LauncherCommunicationEvent Properties Methods"
  },
  "docs/code_reference/class_reference/serializationfilter.html": {
    "href": "docs/code_reference/class_reference/serializationfilter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Serialization Methods Properties Base Classes Derived Classes referencecountedeventobject cogserializationfilter Properties Methods"
  },
  "docs/code_reference/class_reference/shaderinputs.html": {
    "href": "docs/code_reference/class_reference/shaderinputs.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics (NOTE) A set of shader inputs for overriding values per object or globally. Methods Properties Base Classes Derived Classes Add referencecountedthreadsafeid32 Clear Remove Constructor Properties Methods Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| |fragmentName|string| | |inputName|string| | |input|boolean| | function Add(fragmentName : String, inputName : String, input : Boolean) Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| |fragmentName|string| | |inputName|string| | |input|integer| | function Add(fragmentName : String, inputName : String, input : Integer) Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| ||string| | ||string| | ||integer2| | function Add( : String, : String, : Integer2) Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| ||string| | ||string| | ||integer3| | function Add( : String, : String, : Integer3) Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| ||string| | ||string| | ||integer4| | function Add( : String, : String, : Integer4) Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| |fragmentName|string| | |inputName|string| | |input|real| | function Add(fragmentName : String, inputName : String, input : Real) Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| |fragmentName|string| | |inputName|string| | |input|real2| | function Add(fragmentName : String, inputName : String, input : Real2) Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| |fragmentName|string| | |inputName|string| | |input|real3| | function Add(fragmentName : String, inputName : String, input : Real3) Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| ||string| | ||string| | ||real3x3| | function Add( : String, : String, : Real3x3) Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| |fragmentName|string| | |inputName|string| | |input|real4| | function Add(fragmentName : String, inputName : String, input : Real4) Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| ||string| | ||string| | ||real4x4| | function Add( : String, : String, : Real4x4) Add : Void Add an input value for a specific fragment. |Name|Type|Description| |---|---|---| |fragmentName|string| | |inputName|string| | |input|texture| | function Add(fragmentName : String, inputName : String, input : Texture) Clear : Void Remove all added inputs. |Name|Type|Description| |---|---|---| function Clear() Remove : Void Remove a specific input that was added. |Name|Type|Description| |---|---|---| |fragmentName|string| | |inputName|string| | function Remove(fragmentName : String, inputName : String) ShaderInputs : Void constructor Name Type Description function ShaderInputs() ShaderInputs : Void constructor Name Type Description shaderinputs function ShaderInputs( : ShaderInputs)"
  },
  "docs/code_reference/class_reference/shaderinputsevent.html": {
    "href": "docs/code_reference/class_reference/shaderinputsevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Graphics Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/sharedcontent.html": {
    "href": "docs/code_reference/class_reference/sharedcontent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine Methods Properties Base Classes Derived Classes Constructor ExtraContentLibraries component Properties ExtraContentLibraries : contentlibraryreferencearray var ExtraContentLibraries : ContentLibraryReferenceArray Methods SharedContent : Void constructor Name Type Description function SharedContent()"
  },
  "docs/code_reference/class_reference/shortcuts.html": {
    "href": "docs/code_reference/class_reference/shortcuts.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/showgammacorrectionfilter.html": {
    "href": "docs/code_reference/class_reference/showgammacorrectionfilter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes metapropertyfilter Properties Methods"
  },
  "docs/code_reference/class_reference/shownormalgenerationoptionsfilter.html": {
    "href": "docs/code_reference/class_reference/shownormalgenerationoptionsfilter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes metapropertyfilter Properties Methods"
  },
  "docs/code_reference/class_reference/showpremultipliedalphafilter.html": {
    "href": "docs/code_reference/class_reference/showpremultipliedalphafilter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes metapropertyfilter Properties Methods"
  },
  "docs/code_reference/class_reference/simpleanimation.html": {
    "href": "docs/code_reference/class_reference/simpleanimation.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) Plays a single animation on Initialize. Methods Properties Base Classes Derived Classes ChainAnimation Animation component CrossBlend PlayMode DirectBlend PlayIsolatedAnimation PlaySingle Constructor Properties Animation : animation Animation getter/setter. var Animation : Animation PlayMode : AnimationPlayMode Play mode getter/setter. var PlayMode : AnimationPlayMode Methods ChainAnimation : animationnode Name Type Description animation animation playMode AnimationPlayMode function ChainAnimation(animation : Animation, playMode : AnimationPlayMode) : AnimationNode CrossBlend : animationnode Name Type Description animation animation transitionTime real playMode AnimationPlayMode function CrossBlend(animation : Animation, transitionTime : Real, playMode : AnimationPlayMode) : AnimationNode DirectBlend : animationnode Name Type Description animation animation transitionTime real playMode AnimationPlayMode function DirectBlend(animation : Animation, transitionTime : Real, playMode : AnimationPlayMode) : AnimationNode PlayIsolatedAnimation : animationnode Name Type Description animation animation rootBone cog playMode AnimationPlayMode function PlayIsolatedAnimation(animation : Animation, rootBone : Cog, playMode : AnimationPlayMode) : AnimationNode PlaySingle : animationnode Play animations directly. |Name|Type|Description| |---|---|---| |animation|animation| | |playMode|AnimationPlayMode| | function PlaySingle(animation : Animation, playMode : AnimationPlayMode) : AnimationNode SimpleAnimation : Void constructor Name Type Description function SimpleAnimation()"
  },
  "docs/code_reference/class_reference/simpledebuggerlistener.html": {
    "href": "docs/code_reference/class_reference/simpledebuggerlistener.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/simplegizmobase.html": {
    "href": "docs/code_reference/class_reference/simplegizmobase.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor Color component arrowgizmo DrawOnTop ringgizmo HoverColor squaregizmo MouseInput PickingPriority UseParentAsViewScaleOrigin ViewScaled Properties Color : real4 Display colors. var Color : Real4 DrawOnTop : boolean Whether or not to draw on top of all objects regardless of depth. var DrawOnTop : Boolean HoverColor : real4 var HoverColor : Real4 MouseInput : boolean Whether or not this Gizmo should receive mouse input. var MouseInput : Boolean PickingPriority : integer Used to manually determine which Gizmo gets selected when the mouse is over multiple Gizmos. Higher priority will get picked first. var PickingPriority : Integer UseParentAsViewScaleOrigin : boolean If enabled, the gizmo will scale around it's parent. var UseParentAsViewScaleOrigin : Boolean ViewScaled : boolean If enabled, the size of the gizmo will stay the same regardless of how far away the camera is. var ViewScaled : Boolean Methods SimpleGizmoBase : Void constructor Constructor. |Name|Type|Description| |---|---|---| function SimpleGizmoBase()"
  },
  "docs/code_reference/class_reference/simplesocket.html": {
    "href": "docs/code_reference/class_reference/simplesocket.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Networking Methods Properties Base Classes Derived Classes Constructor Socket component Properties Socket : tcpsocket read-only var Socket : TcpSocket Methods SimpleSocket : Void constructor Name Type Description function SimpleSocket()"
  },
  "docs/code_reference/class_reference/simplesound.html": {
    "href": "docs/code_reference/class_reference/simplesound.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Sound (NOTE) Plays a specified SoundCue, either when created or when the Play method is called. Methods Properties Base Classes Derived Classes Play Cue component Constructor IsPlaying Stop Paused Positional StartPlaying Properties Cue : soundcue var Cue : SoundCue IsPlaying : boolean read-only Will be true if the SoundCue is currently being played. var IsPlaying : Boolean Paused : boolean Setting this Property to true will pause a currently playing SoundCue. Setting it to false will resume playback. var Paused : Boolean Positional : boolean If this property is true the SoundCue will be played positionally (heard at a specific location by SoundListeners) through the SoundEmitter component on the same object. If false, the SoundCue will be played through the SoundSpace, and will NOT be affected by any SoundEmitter settings. var Positional : Boolean StartPlaying : boolean If this property is true the SoundCue will begin playing as soon as the object is created. var StartPlaying : Boolean Methods Play : soundinstance Begins playing the SoundCue chosen in the Cue property and returns the resulting SoundInstance. If already playing it will be stopped and re-started. |Name|Type|Description| |---|---|---| function Play() : SoundInstance SimpleSound : Void constructor Name Type Description function SimpleSound() Stop : Void Stops a currently playing SoundInstance if it exists. |Name|Type|Description| |---|---|---| function Stop()"
  },
  "docs/code_reference/class_reference/sizepolicies.html": {
    "href": "docs/code_reference/class_reference/sizepolicies.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/skeleton.html": {
    "href": "docs/code_reference/class_reference/skeleton.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Stores a map of Bones so that SkinnedModels can collect transform matrices for mesh skinning. Methods Properties Base Classes Derived Classes Constructor component Properties Methods Skeleton : Void constructor Name Type Description function Skeleton()"
  },
  "docs/code_reference/class_reference/skinnedmodel.html": {
    "href": "docs/code_reference/class_reference/skinnedmodel.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Renders a mesh using the transform hierarchy of a Skeleton to apply skinning. Methods Properties Base Classes Derived Classes Constructor Mesh graphical SkeletonPath Properties Mesh : mesh Mesh that the graphical will render. var Mesh : Mesh SkeletonPath : cogpath Path to an object with a Skeleton component that will be used for skinning. var SkeletonPath : CogPath Methods SkinnedModel : Void constructor Name Type Description function SkinnedModel()"
  },
  "docs/code_reference/class_reference/sliceddefinition.html": {
    "href": "docs/code_reference/class_reference/sliceddefinition.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Graphics Methods Properties Base Classes Derived Classes Resource imagedefinition Properties Methods"
  },
  "docs/code_reference/class_reference/slider.html": {
    "href": "docs/code_reference/class_reference/slider.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/smoothsharpentool.html": {
    "href": "docs/code_reference/class_reference/smoothsharpentool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes AutoDetermineSamples heightmanipulationtool RandomSampleDistance RandomSamples Strength UniformSamples Properties AutoDetermineSamples : boolean var AutoDetermineSamples : Boolean RandomSampleDistance : integer var RandomSampleDistance : Integer RandomSamples : integer var RandomSamples : Integer Strength : real var Strength : Real UniformSamples : integer var UniformSamples : Integer Methods"
  },
  "docs/code_reference/class_reference/sound.html": {
    "href": "docs/code_reference/class_reference/sound.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Sound (NOTE) The resource for a single audio file. Methods Properties Base Classes Derived Classes Channels Resource Length Properties Channels : integer read-only The number of audio channels in the file. var Channels : Integer Length : real read-only The length of the audio file, in seconds. var Length : Real Methods"
  },
  "docs/code_reference/class_reference/soundattenuator.html": {
    "href": "docs/code_reference/class_reference/soundattenuator.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Sound (NOTE) Decreases a positional sound's volume as the SoundEmitter gets further away from a SoundListener. Methods Properties Base Classes Derived Classes FalloffCurve dataresource FalloffCurveType LowPassCutoffFreq LowPassStartDistance MinAttenuatedVolume StartDistance StopDistance UseLowPassFilter Properties FalloffCurve : samplecurve The SampleCurve resource to use as the attenuation's falloff curve. It will be normalized and stretched to fit between the StartDistance and StopDistance values. var FalloffCurve : SampleCurve FalloffCurveType : FalloffCurveType The type of curve used to reduce the sound's volume over distance. The default is a logarithmic curve which mimics the real world. var FalloffCurveType : FalloffCurveType LowPassCutoffFreq : real The lowest cutoff frequency of the low pass filter, reached at the StopDistance. The cutoff frequency will be interpolated logarithmically from 15000.00 (a value with very little effect on the sound) to the LowPassCutoffFreq between the LowPassStartDistance and the StopDistance. var LowPassCutoffFreq : Real LowPassStartDistance : real The distance at which the low pass filter begins to take effect. var LowPassStartDistance : Real MinAttenuatedVolume : real The lowest volume that the attenuation will reach. If set above 0, the sound will continue to be heard at all distances. var MinAttenuatedVolume : Real StartDistance : real The distance from a SoundListener at which the sound's volume begins attenuating. At shorter distances the volume will not be changed. Cannot be larger than the StopDistance. var StartDistance : Real StopDistance : real The distance at which the attenuation reaches the minimum volume. No volume changes will happen past this distance. Cannot be smaller than the StartDistance. var StopDistance : Real UseLowPassFilter : boolean If true, a low pass filter will be applied to the sound after reaching a specified distance, mimicking the way sound is muffled with distance in real life. The filter begins at the LowPassStartDistance and interpolates its cutoff frequency logarithmically until the StopDistance. The filter will not change past the StopDistance. var UseLowPassFilter : Boolean Methods"
  },
  "docs/code_reference/class_reference/soundattenuatordisplay.html": {
    "href": "docs/code_reference/class_reference/soundattenuatordisplay.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes metadisplay Properties Methods"
  },
  "docs/code_reference/class_reference/soundbuffer.html": {
    "href": "docs/code_reference/class_reference/soundbuffer.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Used with a CustomAudioNode to play audio data directly. Methods Properties Base Classes Derived Classes AddMicUncompressedData SampleCount referencecountedobject AddSampleToBuffer GetSampleAtIndex Reset Properties SampleCount : integer read-only The number of samples currently in the buffer. var SampleCount : Integer Methods AddMicUncompressedData : Void Name Type Description Array[real] function AddMicUncompressedData( : Array[Real]) AddSampleToBuffer : Void Adds a new audio sample to the end of the buffer. |Name|Type|Description| |---|---|---| |sample|real| | function AddSampleToBuffer(sample : Real) GetSampleAtIndex : real Returns the sample at a specific index from the beginning of the buffer. |Name|Type|Description| |---|---|---| |index|integer| | function GetSampleAtIndex(index : Integer) : Real Reset : Void Removes all data from the buffer and resets it. |Name|Type|Description| |---|---|---| function Reset()"
  },
  "docs/code_reference/class_reference/soundbuilder.html": {
    "href": "docs/code_reference/class_reference/soundbuilder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes FileLoadType buildercomponent MaxVolume Name Normalize Properties FileLoadType : AudioFileLoadType If Streamed is selected, or if Auto is selected and the file is longer than one minute, the sound file will be streamed from disk at runtime instead of loaded into memory. Streaming files can't be played multiple times simultaneously and can't use loop tails. var FileLoadType : AudioFileLoadType MaxVolume : real The volume of the sound will be altered so that the highest volume peak matches this value. All audio samples will be adjusted equally. var MaxVolume : Real Name : string var Name : String Normalize : boolean If true, the audio will be normalized when loaded so that the highest volume peak matches the MaxVolume value. var Normalize : Boolean Methods"
  },
  "docs/code_reference/class_reference/soundcue.html": {
    "href": "docs/code_reference/class_reference/soundcue.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Sound (NOTE) Settings and Sounds for playing audio files. Methods Properties Base Classes Derived Classes AddSoundEntry Attenuator dataresource AddSoundTagEntry BeatsPerMinute PlayCueOnNode Decibels Preview DecibelVariation StopPreview Pitch PitchVariation PlayMode SelectMode Semitones SemitoneVariation ShowMusicOptions Sounds SoundTags TimeSigBeats TimeSigValue UseDecibelVariation UseSemitoneVariation Volume VolumeVariation Properties Attenuator : soundattenuator If a SoundAttenuator resource is selected, it will be applied to reduce the sound's volume with distance when played through a SoundEmitter. If DefaultNoAttenuation is selected on the SoundCue and a different SoundAttenuator is selected on the SoundEmitter, the SoundEmitter's settings will be applied. If DefaultNoAttenuation is selected on both the sound will not be attenuated. var Attenuator : SoundAttenuator BeatsPerMinute : real The speed of the music, using beats per minute. var BeatsPerMinute : Real Decibels : real The volume adjustment, in decibels, that will be applied to the sound when it plays. A value of 0 does nothing, 6 will double the sound's volume, -6 will halve it. The Decibels property is linked to the Volume property (changing one will change the other). var Decibels : Real DecibelVariation : real Sets how much the Decibels will be randomized every time the SoundCue plays. If Decibels is 0, and DecibelVariation is 4, the volume adjustment will be chosen randomly between -4 and 4. var DecibelVariation : Real Pitch : real This property affects both the pitch and speed of the sound played by the SoundCue. A value of 0 will do nothing, 1 will raise the pitch by an octave and speed up the sound,. var Pitch : Real PitchVariation : real Sets how much the pitch will be randomized every time the SoundCue plays. If Pitch is 0, and PitchVariation is 0.3, the pitch of the sound will be chosen randomly between -0.3 and 0.3. var PitchVariation : Real PlayMode : SoundPlayMode If Single is chosen the SoundInstance created by the SoundCue will be played once and will stop when it reaches its EndTime. If Looping is chosen the SoundInstance will play continuously until either it is stopped or its Looping property is set to false. var PlayMode : SoundPlayMode SelectMode : SoundSelectMode If Random is chosen the SoundCue will randomly choose which SoundEntry to play. If Sequential is chosen it will play the SoundEntries in order. var SelectMode : SoundSelectMode Semitones : real This property, specified in semitones (or half-steps), affects both the pitch and speed of the sound played by the SoundCue. A value of 0 will do nothing, 12 will raise the pitch by an octave and speed up the sound, and -12 will lower the sound by an octave and slow it down. The Semitones property is linked to the Pitch property (changing one will change the other). var Semitones : Real SemitoneVariation : real Sets how much the pitch will be randomized every time the SoundCue plays. If Semitones is 0, and SemitoneVariation is 5, the pitch of the sound will be chosen randomly between -5 and 5. var SemitoneVariation : Real ShowMusicOptions : boolean If true, the music options will be shown. If false, they will be hidden. var ShowMusicOptions : Boolean Sounds : sounds var Sounds : Sounds SoundTags : soundtags var SoundTags : SoundTags TimeSigBeats : real The top number of the music's time signature (beats per measure). var TimeSigBeats : Real TimeSigValue : real The bottom number of the music's time signature (which type of note has the beat). var TimeSigValue : Real UseDecibelVariation : boolean If false, the VolumeVariation value will be used to randomize the volume. If true, the DecibelVariation field will be shown and will be used for randomization. var UseDecibelVariation : Boolean UseSemitoneVariation : boolean If false, the PitchVariation value will be used to randomize the volume. If true, the SemitoneVariation field will be shown and will be used for randomization. var UseSemitoneVariation : Boolean Volume : real The volume adjustment that will be applied to the sound when it plays. A value of 1 does nothing, 2 will double the sound's volume, 0.5 will halve it. The Volume property is linked to the Decibels property (changing one will change the other). var Volume : Real VolumeVariation : real Sets how much the Volume will be randomized every time the SoundCue plays. If Volume is 1, and VolumeVariation is 0.5, the volume adjustment will be chosen randomly between 0.5 and 1.5. var VolumeVariation : Real Methods AddSoundEntry : Void Adds a new SoundEntry to this SoundCue. |Name|Type|Description| |---|---|---| |sound|sound| | |weight|real| | function AddSoundEntry(sound : Sound, weight : Real) AddSoundTagEntry : Void Adds a new SoundTagEntry to this SoundCue. |Name|Type|Description| |---|---|---| |soundTag|soundtag| | function AddSoundTagEntry(soundTag : SoundTag) PlayCueOnNode : soundinstance Plays this SoundCue using a specified SoundNode as the output and returns the resulting SoundInstance. |Name|Type|Description| |---|---|---| |outputNode|soundnode| | |startPaused|boolean| | function PlayCueOnNode(outputNode : SoundNode, startPaused : Boolean) : SoundInstance Preview : Void Name Type Description function Preview() StopPreview : Void Name Type Description function StopPreview()"
  },
  "docs/code_reference/class_reference/soundcuedisplay.html": {
    "href": "docs/code_reference/class_reference/soundcuedisplay.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes metadisplay Properties Methods"
  },
  "docs/code_reference/class_reference/sounddisplay.html": {
    "href": "docs/code_reference/class_reference/sounddisplay.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes metadisplay Properties Methods"
  },
  "docs/code_reference/class_reference/soundemitter.html": {
    "href": "docs/code_reference/class_reference/soundemitter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Sound (NOTE) Allows 3D positioning of sounds relative to SoundListeners. Methods Properties Base Classes Derived Classes InterpolateDecibels Attenuator component InterpolatePitch Decibels InterpolateSemitones Directional InterpolateVolume EmitAngle PlayCue InputNode PlayCuePaused IsPlaying Constructor OutputNode Paused Pitch RearVolume Semitones SoundNodeInput SoundNodeOutput Volume Properties Attenuator : soundattenuator If a SoundAttenuator resource other than DefaultNoAttenuation is selected it will be applied to SoundCues without their own SoundAttenuator resource. If a SoundCue has attenuation settings those will always be used. If neither has settings, the sound will not be attenuated. var Attenuator : SoundAttenuator Decibels : real The volume adjustment, in decibels, applied to all sounds played through this SoundEmitter. A value of 0 does nothing, 6 will double the volume, -6 will halve it. The Decibels property is linked to the Volume property (changing one will change the other). var Decibels : Real Directional : boolean When true, the audio output of the SoundEmitter will be limited by the EmitAngle, so that sound in front of the object will be louder than sound behind it. Within the EmitAngle the sound will be at full volume. The volume interpolates logarithmically until it reaches the RearVolume value directly behind the object. var Directional : Boolean EmitAngle : real The angle of full volume sound for a directional SoundEmitter, from 1 to 360. An angle of 90, for example, will be centered at the object's front, extending 45 degrees to the left and right. var EmitAngle : Real InputNode : soundnode read-only DEPRECATED The SoundNodeInput property should be used instead. var InputNode : SoundNode IsPlaying : boolean read-only This property will be true if there are SoundInstances currently associated with this SoundEmitter, even if they are paused or otherwise not audible. var IsPlaying : Boolean OutputNode : soundnode read-only DEPRECATED The SoundNodeOutput property should be used instead. var OutputNode : SoundNode Paused : boolean Setting this property to true pauses all sounds currently playing through the SoundEmitter. Setting it to false will resume playback. var Paused : Boolean Pitch : real This property affects both the pitch and speed of all sounds played through this SoundEmitter. A value of 0 will do nothing, 1 will raise the pitch by an octave and speed up the sound, -1 will lower the sound by an octave and slow it down. The Pitch property is linked to the Semitones property (changing one will change the other). var Pitch : Real RearVolume : real The volume of sound heard directly behind a directional SoundEmitter. It will only reach this value in a small area, since volume is interpolated from the edge of the EmitAngle. To make the volume as quiet as possible behind the object, use a small EmitAngle. var RearVolume : Real Semitones : real This property, specified in semitones (or half-steps), affects both the pitch and speed of all sounds played through this SoundEmitter.. A value of 0 will do nothing, 12 will raise the pitch by an octave and speed up the sound, -12 will lower the sound by an octave and slow it down. The Semitones property is linked to the Pitch property (changing one will change the other). var Semitones : Real SoundNodeInput : soundnode read-only The SoundNode to use for attaching other nodes to the input of the SoundEmitter. var SoundNodeInput : SoundNode SoundNodeOutput : soundnode read-only The SoundNode to use for attaching other nodes to the output of the SoundEmitter. var SoundNodeOutput : SoundNode Volume : real The volume adjustment applied to all sounds played through this SoundEmitter. A value of 1 does nothing, 2 will double the volume, 0.5 will halve it. The Volume property is linked to the Decibels property (changing one will change the other). var Volume : Real Methods InterpolateDecibels : Void Interpolates the Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |decibels|real| | |interpolationTime|real| | function InterpolateDecibels(decibels : Real, interpolationTime : Real) InterpolatePitch : Void Interpolates the Pitch property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |pitch|real| | |interpolationTime|real| | function InterpolatePitch(pitch : Real, interpolationTime : Real) InterpolateSemitones : Void Interpolates the Semitones property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |pitch|real| | |interpolationTime|real| | function InterpolateSemitones(pitch : Real, interpolationTime : Real) InterpolateVolume : Void Interpolates the Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |volume|real| | |interpolationTime|real| | function InterpolateVolume(volume : Real, interpolationTime : Real) PlayCue : soundinstance Plays the SoundCue passed into the function and returns the resulting SoundInstance. |Name|Type|Description| |---|---|---| |cue|soundcue| | function PlayCue(cue : SoundCue) : SoundInstance PlayCuePaused : soundinstance Plays the SoundCue passed into the function and returns the resulting SoundInstance, which starts off paused. |Name|Type|Description| |---|---|---| |cue|soundcue| | function PlayCuePaused(cue : SoundCue) : SoundInstance SoundEmitter : Void constructor Name Type Description function SoundEmitter()"
  },
  "docs/code_reference/class_reference/soundemitterdisplay.html": {
    "href": "docs/code_reference/class_reference/soundemitterdisplay.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes metadisplay Properties Methods"
  },
  "docs/code_reference/class_reference/soundentry.html": {
    "href": "docs/code_reference/class_reference/soundentry.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Stores Sounds and associated properties to be used by a SoundCue. Methods Properties Base Classes Derived Classes Preview CrossFadeLoopTail Object StopPreview EndTime LoopEndTime LoopStartTime LoopTailLength Sound StartTime Weight Properties CrossFadeLoopTail : boolean If false, the loop tail will be added to the audio and will fade out over the specified time. If true, the audio will be cross-faded, so the beginning of the loop will fade in as the tail fades out. var CrossFadeLoopTail : Boolean EndTime : real The time (in seconds) at which the Sound will stop playing. Defaults to the length of the audio file. Cannot be smaller than the StartTime. var EndTime : Real LoopEndTime : real The time (in seconds) from the beginning of the audio file at which a looping SoundInstance jumps back to the LoopStartTime. If it stops looping while playing it will continue to the EndTime and then stop. Cannot be smaller than the LoopStartTime. var LoopEndTime : Real LoopStartTime : real The time (in seconds) from the beginning of the audio file that a looping SoundInstance will jump back to after it reaches the LoopEndTime. The Sound will still start at the StartTime when it is played, but after it begins looping it will start at the LoopStartTime. Cannot be larger than the LoopEndTime. var LoopStartTime : Real LoopTailLength : real The length (in seconds) of the tail, from the LoopEndTime, which will continue to play after the Sound jumps back to the LoopStartTime. The loop tail will fade out smoothly. var LoopTailLength : Real Sound : sound The Sound resource that will be played by this SoundEntry. var Sound : Sound StartTime : real The time (in seconds) at which the Sound will start playing. A value of 0 will start the Sound at the beginning of the audio file. Cannot be larger than the EndTime. var StartTime : Real Weight : real The weighted randomization value for this particular SoundEntry to be chosen to play. The values of all SoundEntries are considered: two SoundEntries with weights of 1 and 1 will each play 50 percent of the time, as will weights of 10 and 10. var Weight : Real Methods Preview : Void Preview this sound with no SoundCue settings. |Name|Type|Description| |---|---|---| function Preview() StopPreview : Void Stop previewing this sound. |Name|Type|Description| |---|---|---| function StopPreview()"
  },
  "docs/code_reference/class_reference/soundentrydisplay.html": {
    "href": "docs/code_reference/class_reference/soundentrydisplay.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes metadisplay Properties Methods"
  },
  "docs/code_reference/class_reference/soundevent.html": {
    "href": "docs/code_reference/class_reference/soundevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Sound (NOTE) Sent for various audio-related events. Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/soundinstance.html": {
    "href": "docs/code_reference/class_reference/soundinstance.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) The object associated with a currently playing sound. Methods Properties Base Classes Derived Classes InterpolateDecibels CustomEventTime referencecountedeventobject InterpolatePitch Decibels InterpolateSemitones EndTime InterpolateVolume FileLength Stop IsPlaying LoopEndTime Looping LoopStartTime Paused Pitch Semitones SoundName SoundNode Time Volume Properties CustomEventTime : real The time (in seconds from the beginning of the file) to get a MusicCustomTime event. var CustomEventTime : Real Decibels : real The volume adjustment (in decibels) of the SoundInstance, initially set by the SoundCue's Decibels property. A value of 0 does nothing, 6 will double the sound's volume, -6 will halve it. The Decibels property is linked to the Volume property (changing one will change the other). var Decibels : Real EndTime : real The time in seconds from the beginning of the file that the instance will stop. var EndTime : Real FileLength : real read-only The length of the entire audio file, in seconds. var FileLength : Real IsPlaying : boolean read-only This Property will be true while the SoundInstance is playing, then will become false when its sound has stopped. var IsPlaying : Boolean LoopEndTime : real The time in seconds from the beginning of the file that the instance will stop and jump back when looping. var LoopEndTime : Real Looping : boolean When this Property is true the SoundInstance will loop indefinitely. If changed to false while a SoundInstance is looping the SoundInstance will continue playing to its EndTime and then stop. var Looping : Boolean LoopStartTime : real The time in seconds from the beginning of the file that the instance will jump back to when it loops. var LoopStartTime : Real Paused : boolean Setting this Property to true will pause a currently playing SoundInstance. Setting it to false will resume playback. var Paused : Boolean Pitch : real The pitch adjustment of the SoundInstance, initially set by the SoundCue's Pitch property. A value of 0 will do nothing, 1 will raise the pitch by an octave and speed up the sound,. var Pitch : Real Semitones : real The pitch adjustment, in semitones (or half-steps), of the SoundInstance, initially set by the SoundCue's Semitones property. A value of 0 will do nothing, 12 will raise the pitch by an octave and speed up the sound, and -12 will lower the sound by an octave and slow it down. The Semitones property is linked to the Pitch property (changing one will change the other). var Semitones : Real SoundName : string read-only The name of the Sound being played by this SoundInstance. var SoundName : String SoundNode : soundnode read-only The SoundNode associated with this SoundInstance. var SoundNode : SoundNode Time : real This property tells you to the current playback position, in seconds from the beginning of the file, and allows you to tell the instance to change its playback position to a different time. Be aware that the time will not be precisely accurate. If the Sound resource used to play the SoundInstance has Streamed selected, you cannot set the playback position. var Time : Real Volume : real The volume adjustment of the SoundInstance, initially set by the SoundCue's Volume property. A value of 1 does nothing, 2 will double the sound's volume, 0.5 will halve it. The Volume property is linked to the Decibels property (changing one will change the other). var Volume : Real Methods InterpolateDecibels : Void Interpolates the SoundInstance's Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |decibels|real| | |interpolationTime|real| | function InterpolateDecibels(decibels : Real, interpolationTime : Real) InterpolatePitch : Void Interpolates the SoundInstance's Pitch property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |pitch|real| | |interpolationTime|real| | function InterpolatePitch(pitch : Real, interpolationTime : Real) InterpolateSemitones : Void Interpolates the SoundInstance's Semitones property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |pitchSemitones|real| | |interpolationTime|real| | function InterpolateSemitones(pitchSemitones : Real, interpolationTime : Real) InterpolateVolume : Void Interpolates the SoundInstance's Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |volume|real| | |interpolationTime|real| | function InterpolateVolume(volume : Real, interpolationTime : Real) Stop : Void Stops the playback of this SoundInstance. It cannot be re-started. |Name|Type|Description| |---|---|---| function Stop()"
  },
  "docs/code_reference/class_reference/soundinstanceevent.html": {
    "href": "docs/code_reference/class_reference/soundinstanceevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Sound (NOTE) Sent for various SoundInstance-related events. Methods Properties Base Classes Derived Classes SoundInstance event Properties SoundInstance : soundinstance read-only The SoundInstance associated with this event. var SoundInstance : SoundInstance Methods"
  },
  "docs/code_reference/class_reference/soundinstancerange.html": {
    "href": "docs/code_reference/class_reference/soundinstancerange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : soundinstancerange read-only var All : SoundInstanceRange Current : soundinstance read-only var Current : SoundInstance IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() SoundInstanceRange : Void constructor Name Type Description function SoundInstanceRange() SoundInstanceRange : Void constructor Name Type Description p0 soundinstancerange function SoundInstanceRange(p0 : SoundInstanceRange)"
  },
  "docs/code_reference/class_reference/soundlistener.html": {
    "href": "docs/code_reference/class_reference/soundlistener.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Sound (NOTE) Uses the object's position to \"hear\" all SoundEmitters in the SoundSpace. Methods Properties Base Classes Derived Classes Constructor Active component AttenuationScale SoundNode Properties Active : boolean If this property is set to false the SoundListener will not produce any sound. All audio in the SoundSpace will continue to be processed, so this is not the same as pausing the sounds. var Active : Boolean AttenuationScale : real The scale multiplier applied to the attenuation of sounds heard by this listener. If a sound uses a SoundAttenuator StopDistance of 20, and this value is 1.5, the attenuation will stop at 30. var AttenuationScale : Real SoundNode : soundnode read-only The SoundNode associated with this SoundListener. var SoundNode : SoundNode Methods SoundListener : Void constructor Name Type Description function SoundListener()"
  },
  "docs/code_reference/class_reference/soundnode.html": {
    "href": "docs/code_reference/class_reference/soundnode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes AddInputNode AutoCollapse referencecountedeventobject additivesynthnode InsertNodeAfter BypassPercent addnoisenode InsertNodeBefore BypassValue bandpassnode RemoveAllInputs HasInputs chorusnode RemoveAllOutputs HasOutputs compressornode RemoveAndAttachInputsToOutputs InputCount customaudionode RemoveInputNode OutputCount delaynode ReplaceWith equalizernode expandernode flangernode generatedwavenode granularsynthnode highpassnode lowpassnode microphoneinputnode modulationnode panningnode pitchnode recordingnode reverbnode saveaudionode volumenode Properties AutoCollapse : boolean If true, this node will automatically remove itself from the graph when its last input node is removed. var AutoCollapse : Boolean BypassPercent : real DEPRECATED The BypassValue property should be used instead. var BypassPercent : Real BypassValue : real The percentage of output (0 to 1.0) that should skip whatever processing the node does. var BypassValue : Real HasInputs : boolean read-only Will be true if this node has any input nodes. var HasInputs : Boolean HasOutputs : boolean read-only Will be true if this node has any output nodes. var HasOutputs : Boolean InputCount : integer read-only The number of input nodes that are currently attached to this node. var InputCount : Integer OutputCount : integer read-only The number of output nodes that are currently attached to this node. var OutputCount : Integer Methods AddInputNode : Void Adds the passed in node to this node's inputs. |Name|Type|Description| |---|---|---| |node|soundnode| | function AddInputNode(node : SoundNode) InsertNodeAfter : Void Inserts the passed in node after this node in the signal path, placing it between this node and any nodes which were connected to this node's output. |Name|Type|Description| |---|---|---| |node|soundnode| | function InsertNodeAfter(node : SoundNode) InsertNodeBefore : Void Inserts the passed in node before this node in the signal path, placing it between this node and any nodes which were connected to this node as inputs. |Name|Type|Description| |---|---|---| |node|soundnode| | function InsertNodeBefore(node : SoundNode) RemoveAllInputs : Void Removes the connections between this node and all of its input nodes. |Name|Type|Description| |---|---|---| function RemoveAllInputs() RemoveAllOutputs : Void Removes the connections between this node and all of its output nodes, disconnecting this node from the graph. If this node has no inputs it will be deleted when no longer referenced. |Name|Type|Description| |---|---|---| function RemoveAllOutputs() RemoveAndAttachInputsToOutputs : Void Removes this node from the graph by disconnecting it from all inputs and outputs and attaching the input nodes to the output nodes, keeping the rest of the graph intact. This node will be deleted when it is no longer referenced. |Name|Type|Description| |---|---|---| function RemoveAndAttachInputsToOutputs() RemoveInputNode : Void Removes the node passed in as a parameter from this node's inputs. |Name|Type|Description| |---|---|---| |node|soundnode| | function RemoveInputNode(node : SoundNode) ReplaceWith : Void Replaces this node in the graph with the node passed in as a parameter. This node will be deleted when it is no longer referenced. |Name|Type|Description| |---|---|---| |node|soundnode| | function ReplaceWith(node : SoundNode)"
  },
  "docs/code_reference/class_reference/sounds.html": {
    "href": "docs/code_reference/class_reference/sounds.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/soundspace.html": {
    "href": "docs/code_reference/class_reference/soundspace.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Sound (NOTE) Sound functionality associated with a Space. Methods Properties Base Classes Derived Classes InterpolateDecibels Decibels component InterpolatePitch InputNode InterpolateSemitones MuteAudio InterpolateVolume OutputNode PlayCue Paused PlayCuePaused PauseWithTimeSpace Constructor Pitch PitchWithTimeSpace Semitones SoundNodeInput SoundNodeOutput Volume Properties Decibels : real The volume adjustment, in decibels, applied to all sounds in the space. A value of 0 does nothing, 6 will double the sound's volume, -6 will halve it. var Decibels : Real InputNode : soundnode read-only DEPRECATED The SoundNodeInput property should be used instead. var InputNode : SoundNode MuteAudio : boolean Silences all audio output from this space but processes audio normally. var MuteAudio : Boolean OutputNode : soundnode read-only DEPRECATED The SoundNodeOutput property should be used instead. var OutputNode : SoundNode Paused : boolean Setting this Property to true will pause all audio in the space. Setting it to false will resume all audio. var Paused : Boolean PauseWithTimeSpace : boolean If true, the audio of the space will pause when the space is paused. var PauseWithTimeSpace : Boolean Pitch : real The pitch adjustment applied to all sounds in the space. A value of 0 will do nothing, 1 will raise the pitch by an octave and speed up the sound, -1 will lower the sound by an octave and slow it down. var Pitch : Real PitchWithTimeSpace : boolean If true, the audio in the SoundSpace will be pitched according to the TimeScale of the Space(if time slows down the audio will slow down and lower in pitch, if it speeds up the audio will speed up and raise in pitch). var PitchWithTimeSpace : Boolean Semitones : real The pitch adjustment, in semitones (or half-steps), applied to all sounds in the space. A value of 0 will do nothing, 12 will raise the pitch by an octave and speed up the sound,. var Semitones : Real SoundNodeInput : soundnode read-only The SoundNode which is the ultimate output of all sounds in this space. var SoundNodeInput : SoundNode SoundNodeOutput : soundnode read-only The SoundNode which can be used to attach other nodes which should process all audio in the SoundSpace. var SoundNodeOutput : SoundNode Volume : real The volume adjustment applied to all sounds in the space. A value of 1 does nothing, 2 will double the volume, 0.5 will halve it. var Volume : Real Methods InterpolateDecibels : Void Interpolates the SoundSpace's Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |decibels|real| | |interpolationTime|real| | function InterpolateDecibels(decibels : Real, interpolationTime : Real) InterpolatePitch : Void Interpolates the SoundSpace's Pitch property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |pitch|real| | |time|real| | function InterpolatePitch(pitch : Real, time : Real) InterpolateSemitones : Void Interpolates the SoundSpace's Semitones property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |pitch|real| | |time|real| | function InterpolateSemitones(pitch : Real, time : Real) InterpolateVolume : Void Interpolates the SoundSpace's Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |value|real| | |interpolationTime|real| | function InterpolateVolume(value : Real, interpolationTime : Real) PlayCue : soundinstance Plays the passed-in SoundCue non-positionally and returns the resulting SoundInstance. |Name|Type|Description| |---|---|---| |cue|soundcue| | function PlayCue(cue : SoundCue) : SoundInstance PlayCuePaused : soundinstance Plays the passed-in SoundCue non-positionally and returns the resulting SoundInstance, which starts off paused. |Name|Type|Description| |---|---|---| |cue|soundcue| | function PlayCuePaused(cue : SoundCue) : SoundInstance SoundSpace : Void constructor Name Type Description function SoundSpace()"
  },
  "docs/code_reference/class_reference/soundtag.html": {
    "href": "docs/code_reference/class_reference/soundtag.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Sound (NOTE) Controls settings on all tagged SoundInstances. Methods Properties Base Classes Derived Classes EQSetAllBands CompressorAttack dataresource InterpolateDecibels CompressorKneeWidth InterpolateVolume CompressorRatio StopSounds CompressorRelease TagSound CompressorThreshold UnTagSound Decibels EQBand1Gain EQBand2Gain EQBand3Gain EQHighPassGain EQLowPassGain InstanceCount InstanceLimit Instances Paused TagForDucking UseCompressor UseEqualizer Volume Properties CompressorAttack : real The time, in milliseconds, for the filter to ramp to full effect after the input reaches the threshold. var CompressorAttack : Real CompressorKneeWidth : real The knee width of the filter, in decibels. var CompressorKneeWidth : Real CompressorRatio : real The ratio of the compression applied by the filter. var CompressorRatio : Real CompressorRelease : real The time, in milliseconds, for the filter to ramp from full effect to off after the input drops below the threshold. var CompressorRelease : Real CompressorThreshold : real The threshold, in decibels, at which the volume is affected by the filter. var CompressorThreshold : Real Decibels : real The volume adjustment, in decibels, applied to all tagged instances. var Decibels : Real EQBand1Gain : real The volume adjustment applied to frequencies within the band centered at 150 Hz. Positive values will boost these frequencies while negative values will reduce them. var EQBand1Gain : Real EQBand2Gain : real The volume adjustment applied to frequencies within the band centered at 600 Hz. Positive values will boost these frequencies while negative values will reduce them. var EQBand2Gain : Real EQBand3Gain : real The volume adjustment applied to frequencies within the band centered at 2500 Hz. Positive values will boost these frequencies while negative values will reduce them. var EQBand3Gain : Real EQHighPassGain : real The volume adjustment applied to frequencies above 5000 Hz. Positive values will boost these frequencies while negative values will reduce them. var EQHighPassGain : Real EQLowPassGain : real The volume adjustment applied to frequencies below 80 Hz. Positive values will boost these frequencies while negative values will reduce them. var EQLowPassGain : Real InstanceCount : integer read-only The number of SoundInstances currently associated with this SoundTag. var InstanceCount : Integer InstanceLimit : real If this value is greater than zero, SoundCues with this SoundTag will only play if the number of tagged SoundInstances is less than this number. var InstanceLimit : Real Instances : soundinstancerange read-only This allows you to get all currently tagged SoundInstances. Using a foreach loop, you can access any SoundInstance functionality on each of the tagged instances. var Instances : SoundInstanceRange Paused : boolean Setting this property to true will pause all tagged instances. Setting it to false will resume playback. var Paused : Boolean TagForDucking : soundtag If this property is not null, the selected SoundTag will be used to trigger this SoundTag's compressor. var TagForDucking : SoundTag UseCompressor : boolean If true, the SoundTag's compressor settings will be applied to the tagged SoundInstances. var UseCompressor : Boolean UseEqualizer : boolean If true, the SoundTag's equalizer settings will be applied to the tagged SoundInstances. var UseEqualizer : Boolean Volume : real The volume adjustment applied to all tagged instances. var Volume : Real Methods EQSetAllBands : Void Sets all equalizer band gain values at once. The parameters are in order from the lowest band to the highest. The last parameter is the number of seconds to interpolate the values over. |Name|Type|Description| |---|---|---| |lowPass|real| | |band1|real| | |band2|real| | |band3|real| | |highPass|real| | |timeToInterpolate|real| | function EQSetAllBands(lowPass : Real, band1 : Real, band2 : Real, band3 : Real, highPass : Real, timeToInterpolate : Real) InterpolateDecibels : Void Interpolates the SoundTag's Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |decibels|real| | |interpolationTime|real| | function InterpolateDecibels(decibels : Real, interpolationTime : Real) InterpolateVolume : Void Interpolates the SoundTag's Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |value|real| | |interpolationTime|real| | function InterpolateVolume(value : Real, interpolationTime : Real) StopSounds : Void Stops all currently tagged SoundInstances. |Name|Type|Description| |---|---|---| function StopSounds() TagSound : Void Adds a new SoundInstance to this SoundTag. |Name|Type|Description| |---|---|---| |instance|soundinstance| | function TagSound(instance : SoundInstance) UnTagSound : Void Removes a SoundInstance from this SoundTag. |Name|Type|Description| |---|---|---| |instance|soundinstance| | function UnTagSound(instance : SoundInstance)"
  },
  "docs/code_reference/class_reference/soundtagdisplay.html": {
    "href": "docs/code_reference/class_reference/soundtagdisplay.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes metadisplay Properties Methods"
  },
  "docs/code_reference/class_reference/soundtagentry.html": {
    "href": "docs/code_reference/class_reference/soundtagentry.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Stores a SoundTag which will be applied to all SoundInstances created by this SoundCue. Methods Properties Base Classes Derived Classes SoundTag Object Properties SoundTag : soundtag This SoundTag will be added to all SoundInstances created by the SoundCue. var SoundTag : SoundTag Methods"
  },
  "docs/code_reference/class_reference/soundtagentrydisplay.html": {
    "href": "docs/code_reference/class_reference/soundtagentrydisplay.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes metadisplay Properties Methods"
  },
  "docs/code_reference/class_reference/soundtags.html": {
    "href": "docs/code_reference/class_reference/soundtags.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/space.html": {
    "href": "docs/code_reference/class_reference/space.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) A space is a near boundless, three-dimensional extent in which objects and events occur and have relative position, direction, and time. Essentially a world of objects that exist together. Used to divide objects between UI, World, Editor, and others. The two most Common spaces are the 'World' for the game world and the 'Ui' for the HUD and menus. Methods Properties Base Classes Derived Classes AddObjectsFromLevel AllObjects cog Create AllRootObjects CreateAtPosition CurrentLevel CreateLink IsEditorMode DestroyAll ObjectCount DestroyAllFromLevel FindAllObjectsByName FindFirstObjectByName FindFirstRootObjectByName FindLastObjectByName FindLastRootObjectByName FindObjectByName GetModified LoadLevel MarkModified MarkNotModified ReloadLevel Constructor Properties AllObjects : spacerange read-only var AllObjects : SpaceRange AllRootObjects : hierarchylistrange read-only var AllRootObjects : HierarchyListRange CurrentLevel : level read-only Last level loaded. var CurrentLevel : Level IsEditorMode : boolean read-only var IsEditorMode : Boolean ObjectCount : integer read-only Number of objects in the space. var ObjectCount : Integer Methods AddObjectsFromLevel : level Add all objects from a level. |Name|Type|Description| |---|---|---| |levelName|level| | function AddObjectsFromLevel(levelName : Level) : Level Create : cog Create an object in the space. |Name|Type|Description| |---|---|---| |archetype|archetype| | function Create(archetype : Archetype) : Cog CreateAtPosition : cog Create a object at a position in the space. |Name|Type|Description| |---|---|---| |archetype|archetype| | |position|real3| | function CreateAtPosition(archetype : Archetype, position : Real3) : Cog CreateLink : cog Name Type Description archetype archetype objectA cog objectB cog function CreateLink(archetype : Archetype, objectA : Cog, objectB : Cog) : Cog DestroyAll : Void Destroy all objects in space. |Name|Type|Description| |---|---|---| function DestroyAll() DestroyAllFromLevel : Void Destroy all objects created from level. |Name|Type|Description| |---|---|---| function DestroyAllFromLevel() FindAllObjectsByName : cognamerange Find an object in the space with a given name. |Name|Type|Description| |---|---|---| |name|string| | function FindAllObjectsByName(name : String) : CogNameRange FindFirstObjectByName : cog Name Type Description name string function FindFirstObjectByName(name : String) : Cog FindFirstRootObjectByName : cog Name Type Description name string function FindFirstRootObjectByName(name : String) : Cog FindLastObjectByName : cog Name Type Description name string function FindLastObjectByName(name : String) : Cog FindLastRootObjectByName : cog Name Type Description name string function FindLastRootObjectByName(name : String) : Cog FindObjectByName : cog Find an object in the space with a given name. |Name|Type|Description| |---|---|---| |name|string| | function FindObjectByName(name : String) : Cog GetModified : boolean Name Type Description function GetModified() : Boolean LoadLevel : Void Load new level replace the current level. |Name|Type|Description| |---|---|---| |level|level| | function LoadLevel(level : Level) MarkModified : Void Name Type Description function MarkModified() MarkNotModified : Void Clears all modifications on this Cog. Does not clear LocalModificationOverride properties. |Name|Type|Description| |---|---|---| function MarkNotModified() ReloadLevel : Void Reload the current level. |Name|Type|Description| |---|---|---| function ReloadLevel() Space : Void constructor Name Type Description function Space()"
  },
  "docs/code_reference/class_reference/spacemapvaluerange.html": {
    "href": "docs/code_reference/class_reference/spacemapvaluerange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : spacemapvaluerange read-only var All : SpaceMapValueRange Current : space read-only var Current : Space IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() SpaceMapValueRange : Void constructor Name Type Description function SpaceMapValueRange() SpaceMapValueRange : Void constructor Name Type Description p0 spacemapvaluerange function SpaceMapValueRange(p0 : SpaceMapValueRange)"
  },
  "docs/code_reference/class_reference/spaceobjects.html": {
    "href": "docs/code_reference/class_reference/spaceobjects.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine Methods Properties Base Classes Derived Classes component Properties Methods"
  },
  "docs/code_reference/class_reference/spacer.html": {
    "href": "docs/code_reference/class_reference/spacer.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes widget Properties Methods"
  },
  "docs/code_reference/class_reference/spacerange.html": {
    "href": "docs/code_reference/class_reference/spacerange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : spacerange read-only var All : SpaceRange Current : cog read-only var Current : Cog IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() SpaceRange : Void constructor Name Type Description function SpaceRange() SpaceRange : Void constructor Name Type Description p0 spacerange function SpaceRange(p0 : SpaceRange)"
  },
  "docs/code_reference/class_reference/sphere.html": {
    "href": "docs/code_reference/class_reference/sphere.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Geometry Methods Properties Base Classes Derived Classes Expand Center Overlap Radius Overlaps SurfaceArea Constructor Volume Properties Center : real3 var Center : Real3 Radius : real var Radius : Real SurfaceArea : real read-only var SurfaceArea : Real Volume : real read-only var Volume : Real Methods Expand : Void Expand this sphere to contain the given point. |Name|Type|Description| |---|---|---| |p0|real3| | function Expand(p0 : Real3) Expand : sphere static Creates a sphere that contains the given sphere and point. |Name|Type|Description| |---|---|---| |p0|sphere| | |p1|real3| | function Expand(p0 : Sphere, p1 : Real3) : Sphere Overlap : boolean This function is deprecated. Use Overlaps instead |Name|Type|Description| |---|---|---| |p0|sphere| | function Overlap(p0 : Sphere) : Boolean Overlaps : boolean Does this sphere overlap/intersect the given sphere? |Name|Type|Description| |---|---|---| |p0|sphere| | function Overlaps(p0 : Sphere) : Boolean Sphere : Void constructor Name Type Description function Sphere() Sphere : Void constructor Name Type Description center real3 radius real function Sphere(center : Real3, radius : Real) Sphere : Void constructor Name Type Description p0 sphere function Sphere(p0 : Sphere)"
  },
  "docs/code_reference/class_reference/spherecollider.html": {
    "href": "docs/code_reference/class_reference/spherecollider.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Defines the collision volume for a sphere defined by a radius. Methods Properties Base Classes Derived Classes Constructor Radius collider WorldRadius Properties Radius : real The radius of the sphere in local space (before transform is applied). var Radius : Real WorldRadius : real read-only The radius of the sphere after transform is applied (scale). var WorldRadius : Real Methods SphereCollider : Void constructor Name Type Description function SphereCollider()"
  },
  "docs/code_reference/class_reference/sphericalparticleemitter.html": {
    "href": "docs/code_reference/class_reference/sphericalparticleemitter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Emits particles inside a sphere. Methods Properties Base Classes Derived Classes Constructor particleemittershared Properties Methods SphericalParticleEmitter : Void constructor Name Type Description function SphericalParticleEmitter()"
  },
  "docs/code_reference/class_reference/spline.html": {
    "href": "docs/code_reference/class_reference/spline.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) A spline built from control points. Bakes out the curve using an error term (distance from actual spline). Provides an interface to sample the curve at a given arc-length distance in order to provide constant speed interpolation. Methods Properties Base Classes Derived Classes Clone BakedPoints referencecountedeventobject Create Closed DebugDraw ControlPoints ForceRebuild Error RebuildIfModified SplineType SampleDistance TotalDistance SampleNormalized Properties BakedPoints : splinebakedpoints read-only The read-only curve points baked out to line segments using the provided error. var BakedPoints : SplineBakedPoints Closed : boolean Does the spline loop back on itself? var Closed : Boolean ControlPoints : splinecontrolpoints read-only The control points used to bake out the curve. var ControlPoints : SplineControlPoints Error : real The max number of units that a line segment is allowed to deviate from the curve. var Error : Real SplineType : SplineType The kind of spline (Linear, BSpline, CatmullRom). Determines how the control points affect the curve. var SplineType : SplineType TotalDistance : real read-only The total arc-length of the curve. Use to normalize the curve if you wish. var TotalDistance : Real Methods Clone : spline Create a new copy of this spline. |Name|Type|Description| |---|---|---| function Clone() : Spline Create : spline static Create a new instance of a spline. |Name|Type|Description| |---|---|---| function Create() : Spline DebugDraw : Void Draw the baked points of the curve with the provided color. |Name|Type|Description| |---|---|---| |color|real4| | function DebugDraw(color : Real4) ForceRebuild : Void Forcibly rebuild the baked points from the control points. |Name|Type|Description| |---|---|---| function ForceRebuild() RebuildIfModified : Void Rebuild the baked points from the control points if they have changed. Should not need to be manually called unless the user wants to control the timing when the points are baked. |Name|Type|Description| |---|---|---| function RebuildIfModified() SampleDistance : splinesampledata Samples the curve at a given arc-length distance. |Name|Type|Description| |---|---|---| |distance|real| | function SampleDistance(distance : Real) : SplineSampleData SampleNormalized : splinesampledata Samples the curve with a time in the range of [0, 1]. |Name|Type|Description| |---|---|---| |time|real| | function SampleNormalized(time : Real) : SplineSampleData"
  },
  "docs/code_reference/class_reference/splinebakedpoint.html": {
    "href": "docs/code_reference/class_reference/splinebakedpoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) Data for a spline's baked point. Methods Properties Base Classes Derived Classes Constructor Position WorldPosition Properties Position : real3 The position of a baked point. var Position : Real3 WorldPosition : real3 var WorldPosition : Real3 Methods SplineBakedPoint : Void constructor Name Type Description function SplineBakedPoint() SplineBakedPoint : Void constructor Name Type Description position real3 function SplineBakedPoint(position : Real3)"
  },
  "docs/code_reference/class_reference/splinebakedpoints.html": {
    "href": "docs/code_reference/class_reference/splinebakedpoints.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) Read-only baked points for the Spline class. Will auto-recompute if the control points have changed. Methods Properties Base Classes Derived Classes Get Count safeid32object Properties Count : integer read-only var Count : Integer Methods Get : splinebakedpoint Name Type Description index integer function Get(index : Integer) : SplineBakedPoint"
  },
  "docs/code_reference/class_reference/splinecontrolpoint.html": {
    "href": "docs/code_reference/class_reference/splinecontrolpoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) Data for a spline's control point. Methods Properties Base Classes Derived Classes Constructor Position WorldPosition Properties Position : real3 The position of a control point. var Position : Real3 WorldPosition : real3 var WorldPosition : Real3 Methods SplineControlPoint : Void constructor Name Type Description function SplineControlPoint() SplineControlPoint : Void constructor Name Type Description position real3 function SplineControlPoint(position : Real3)"
  },
  "docs/code_reference/class_reference/splinecontrolpoints.html": {
    "href": "docs/code_reference/class_reference/splinecontrolpoints.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) Control points for the Spline class. Modifying this will cause the spline to be marked as modified to rebuild the baked curve when needed. Methods Properties Base Classes Derived Classes Add Count safeid32object Clear Get Set Properties Count : integer read-only The number of control points contained. var Count : Integer Methods Add : Void Add a new point to the end of the array. |Name|Type|Description| |---|---|---| |controlPoint|splinecontrolpoint| | function Add(controlPoint : SplineControlPoint) Clear : Void Clear all control points. |Name|Type|Description| |---|---|---| function Clear() Get : splinecontrolpoint Get the control point at the given index. |Name|Type|Description| |---|---|---| |index|integer| | function Get(index : Integer) : SplineControlPoint Set : Void Sets the control point at the given index. |Name|Type|Description| |---|---|---| |index|integer| | |value|splinecontrolpoint| | function Set(index : Integer, value : SplineControlPoint)"
  },
  "docs/code_reference/class_reference/splineevent.html": {
    "href": "docs/code_reference/class_reference/splineevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine (NOTE) Event sent out for notifications about a spline. Methods Properties Base Classes Derived Classes Constructor Spline event Properties Spline : spline var Spline : Spline Methods SplineEvent : Void constructor Name Type Description function SplineEvent() SplineEvent : Void constructor Name Type Description spline spline function SplineEvent(spline : Spline) SplineEvent : Void constructor Name Type Description splineevent function SplineEvent( : SplineEvent)"
  },
  "docs/code_reference/class_reference/splineparticleanimator.html": {
    "href": "docs/code_reference/class_reference/splineparticleanimator.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Gameplay Methods Properties Base Classes Derived Classes Constructor AutoCalculateLifetime particleanimator Helix HelixOffset HelixRadius HelixWaveLength Mode Speed SpringDampingRatio SpringFrequencyHz Properties AutoCalculateLifetime : boolean If checked, the lifetime on the SplineParticleEmitter will be updated to the time it would take to travel the entire path at the current speed. var AutoCalculateLifetime : Boolean Helix : boolean var Helix : Boolean HelixOffset : real Offset in radians for where the helix starts. var HelixOffset : Real HelixRadius : real The radius of the helix. var HelixRadius : Real HelixWaveLength : real How fast the helix rotates in radians / second. var HelixWaveLength : Real Mode : SplineAnimatorMode The current animate mode. var Mode : SplineAnimatorMode Speed : real The speed at which the particles move in meters / second. var Speed : Real SpringDampingRatio : real var SpringDampingRatio : Real SpringFrequencyHz : real Spring properties. var SpringFrequencyHz : Real Methods SplineParticleAnimator : Void constructor Name Type Description function SplineParticleAnimator()"
  },
  "docs/code_reference/class_reference/splineparticleemitter.html": {
    "href": "docs/code_reference/class_reference/splineparticleemitter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Gameplay Methods Properties Base Classes Derived Classes Constructor ClampT particleemittershared EmitRadius SpawnT SpawnTVariance Spline TargetSplineCog Properties ClampT : boolean var ClampT : Boolean EmitRadius : real var EmitRadius : Real SpawnT : real var SpawnT : Real SpawnTVariance : real var SpawnTVariance : Real Spline : spline var Spline : Spline TargetSplineCog : cogpath var TargetSplineCog : CogPath Methods SplineParticleEmitter : Void constructor Name Type Description function SplineParticleEmitter()"
  },
  "docs/code_reference/class_reference/splinesampledata.html": {
    "href": "docs/code_reference/class_reference/splinesampledata.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine (NOTE) Returned data from sampling a spline at a given arc-length distance. Methods Properties Base Classes Derived Classes Constructor Point Tangent WorldPoint WorldTangent Properties Point : real3 The point on the curve. var Point : Real3 Tangent : real3 var Tangent : Real3 WorldPoint : real3 var WorldPoint : Real3 WorldTangent : real3 var WorldTangent : Real3 Methods SplineSampleData : Void constructor Name Type Description function SplineSampleData()"
  },
  "docs/code_reference/class_reference/splitter.html": {
    "href": "docs/code_reference/class_reference/splitter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/springcreatorsubtool.html": {
    "href": "docs/code_reference/class_reference/springcreatorsubtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes springsubtool Properties Methods"
  },
  "docs/code_reference/class_reference/springpointproxy.html": {
    "href": "docs/code_reference/class_reference/springpointproxy.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Anchor eventobject Fixed Mass Properties Anchor : cog var Anchor : Cog Fixed : boolean var Fixed : Boolean Mass : real var Mass : Real Methods"
  },
  "docs/code_reference/class_reference/springpointproxyproperty.html": {
    "href": "docs/code_reference/class_reference/springpointproxyproperty.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/springselectorsubtool.html": {
    "href": "docs/code_reference/class_reference/springselectorsubtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes selectorspringsubtool Properties Methods"
  },
  "docs/code_reference/class_reference/springsubtool.html": {
    "href": "docs/code_reference/class_reference/springsubtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Object dragselectsubtool ropecreatorsubtool springcreatorsubtool Properties Methods"
  },
  "docs/code_reference/class_reference/sprite.html": {
    "href": "docs/code_reference/class_reference/sprite.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) A generated quad that addresses atlased image data for efficient frame-based animations and batched rendering. Methods Properties Base Classes Derived Classes Constructor AnimationActive basesprite AnimationSpeed CurrentFrame FlipX FlipY SpriteSource StartFrame Properties AnimationActive : boolean If the Sprite animation should be playing on logic update, paused if false. var AnimationActive : Boolean AnimationSpeed : real Scalar to the amount of time passed used to advance frames of animation. var AnimationSpeed : Real CurrentFrame : integer Index of the frame the animation is currently on. var CurrentFrame : Integer FlipX : boolean Flips the X axis of the Sprite's image (left/right). var FlipX : Boolean FlipY : boolean Flips the Y axis of the Sprite's image (top/bottom). var FlipY : Boolean SpriteSource : spritesource The resource defining one or more image sequences used for frame-based animation. var SpriteSource : SpriteSource StartFrame : integer Index of the frame to start the animation on when the object is initialized, 0-based. var StartFrame : Integer Methods Sprite : Void constructor Name Type Description function Sprite()"
  },
  "docs/code_reference/class_reference/spritedata.html": {
    "href": "docs/code_reference/class_reference/spritedata.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/spriteframe.html": {
    "href": "docs/code_reference/class_reference/spriteframe.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Constructor Properties Methods SpriteFrame : Void constructor Name Type Description p0 spriteframe function SpriteFrame(p0 : SpriteFrame)"
  },
  "docs/code_reference/class_reference/spriteparticlesystem.html": {
    "href": "docs/code_reference/class_reference/spriteparticlesystem.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) A particle system that uses sprites to represent each particle. Methods Properties Base Classes Derived Classes Constructor BeamBaseScale particlesystem BeamVelocityScale GeometryMode ParticleAnimation ParticleSort SpriteSource VertexColor Properties BeamBaseScale : real How much to scale particles along their direction of movement. var BeamBaseScale : Real BeamVelocityScale : real How much additional scale to add to particles by how fast they are moving. var BeamVelocityScale : Real GeometryMode : SpriteParticleGeometryMode How the geometry of the particles are generated. var GeometryMode : SpriteParticleGeometryMode ParticleAnimation : SpriteParticleAnimationMode How the sprite's animation should be used. var ParticleAnimation : SpriteParticleAnimationMode ParticleSort : SpriteParticleSortMode How particles should be sorted with each other, determines draw order between particles. var ParticleSort : SpriteParticleSortMode SpriteSource : spritesource The sprite definition to use for each particle. var SpriteSource : SpriteSource VertexColor : real4 Color attribute of the generated vertices accessible in the vertex shader, value is multiplied with the particle color. var VertexColor : Real4 Methods SpriteParticleSystem : Void constructor Name Type Description function SpriteParticleSystem()"
  },
  "docs/code_reference/class_reference/spritepreview.html": {
    "href": "docs/code_reference/class_reference/spritepreview.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/spritesheetimporter.html": {
    "href": "docs/code_reference/class_reference/spritesheetimporter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes GetOffsetX AlphaColor composite GetOffsetY CreatePalette SetOffsetX FrameCount SetOffsetY FrameHeight FrameRate FramesPerRow FrameWidth ImportFrames Name NumberOfRows Origin PixelsPerUnit PreviewAnimate PreviewFrame Smoothing SourceSizeX SourceSizeY SpacingX SpacingY UseAlphaColorKey Properties AlphaColor : real4 var AlphaColor : Real4 CreatePalette : boolean var CreatePalette : Boolean FrameCount : integer read-only var FrameCount : Integer FrameHeight : integer var FrameHeight : Integer FrameRate : real var FrameRate : Real FramesPerRow : integer var FramesPerRow : Integer FrameWidth : integer var FrameWidth : Integer ImportFrames : ImportFrames var ImportFrames : ImportFrames Name : string var Name : String NumberOfRows : integer var NumberOfRows : Integer Origin : SpriteOrigin var Origin : SpriteOrigin PixelsPerUnit : integer var PixelsPerUnit : Integer PreviewAnimate : boolean var PreviewAnimate : Boolean PreviewFrame : integer var PreviewFrame : Integer Smoothing : SpriteSampling var Smoothing : SpriteSampling SourceSizeX : integer var SourceSizeX : Integer SourceSizeY : integer var SourceSizeY : Integer SpacingX : integer var SpacingX : Integer SpacingY : integer var SpacingY : Integer UseAlphaColorKey : boolean var UseAlphaColorKey : Boolean Methods GetOffsetX : integer Name Type Description function GetOffsetX() : Integer GetOffsetY : integer Name Type Description function GetOffsetY() : Integer SetOffsetX : Void Name Type Description value integer function SetOffsetX(value : Integer) SetOffsetY : Void Name Type Description value integer function SetOffsetY(value : Integer)"
  },
  "docs/code_reference/class_reference/spritesource.html": {
    "href": "docs/code_reference/class_reference/spritesource.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Graphics Methods Properties Base Classes Derived Classes GetOrigin FrameCount Resource GetSize Properties FrameCount : integer var FrameCount : Integer Methods GetOrigin : real2 Name Type Description function GetOrigin() : Real2 GetSize : real2 Name Type Description function GetSize() : Real2"
  },
  "docs/code_reference/class_reference/spritesourcebuilder.html": {
    "href": "docs/code_reference/class_reference/spritesourcebuilder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Bottom buildercomponent Fill Left Looping OriginX OriginY PixelsPerUnit Right Sampling Top Properties Bottom : integer var Bottom : Integer Fill : SpriteFill var Fill : SpriteFill Left : integer var Left : Integer Looping : boolean var Looping : Boolean OriginX : real var OriginX : Real OriginY : real var OriginY : Real PixelsPerUnit : real var PixelsPerUnit : Real Right : integer var Right : Integer Sampling : SpriteSampling var Sampling : SpriteSampling Top : integer var Top : Integer Methods"
  },
  "docs/code_reference/class_reference/spritesourceeditor.html": {
    "href": "docs/code_reference/class_reference/spritesourceeditor.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Bottom composite CurrentFrame FrameRate Left Looping Origin OriginX OriginY PixelsPerUnit PreviewAnimation Right Sampling SpriteFill SpriteName Top Properties Bottom : integer var Bottom : Integer CurrentFrame : integer var CurrentFrame : Integer FrameRate : real var FrameRate : Real Left : integer var Left : Integer Looping : boolean var Looping : Boolean Origin : SpriteOrigin var Origin : SpriteOrigin OriginX : real var OriginX : Real OriginY : real var OriginY : Real PixelsPerUnit : real var PixelsPerUnit : Real PreviewAnimation : boolean var PreviewAnimation : Boolean Right : integer var Right : Integer Sampling : SpriteSampling var Sampling : SpriteSampling SpriteFill : SpriteFill var SpriteFill : SpriteFill SpriteName : string var SpriteName : String Top : integer var Top : Integer Methods"
  },
  "docs/code_reference/class_reference/spritetext.html": {
    "href": "docs/code_reference/class_reference/spritetext.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Graphics (NOTE) Text that is rendered from a texture atlas in the same way that Sprites are. Methods Properties Base Classes Derived Classes GetCharacterPosition Font basesprite MeasureGivenText FontSize MeasureText PixelsPerUnit Constructor Text TextAlign Properties Font : font Font used to display the text. var Font : Font FontSize : integer Size that the font will be rastered at to a texture atlas. var FontSize : Integer PixelsPerUnit : real Number of pixels of the font size that map to one world space unit. var PixelsPerUnit : Real Text : string Text to display. var Text : String TextAlign : TextAlign How to position the text about the objects origin. var TextAlign : TextAlign Methods GetCharacterPosition : real3 Get the position in world space of a character by index. |Name|Type|Description| |---|---|---| |characterIndex|integer| | function GetCharacterPosition(characterIndex : Integer) : Real3 MeasureGivenText : real2 Get the effective size in world space that the SpriteText would be if this was its text. |Name|Type|Description| |---|---|---| |text|string| | function MeasureGivenText(text : String) : Real2 MeasureText : real2 Get the effective size in world space of the current text. |Name|Type|Description| |---|---|---| function MeasureText() : Real2 SpriteText : Void constructor Name Type Description function SpriteText()"
  },
  "docs/code_reference/class_reference/squaregizmo.html": {
    "href": "docs/code_reference/class_reference/squaregizmo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes Constructor Bordered simplegizmobase Filled Size SnapDistance ViewAligned Properties Bordered : boolean var Bordered : Boolean Filled : boolean var Filled : Boolean Size : real3 var Size : Real3 SnapDistance : real var SnapDistance : Real ViewAligned : boolean var ViewAligned : Boolean Methods SquareGizmo : Void constructor Name Type Description function SquareGizmo()"
  },
  "docs/code_reference/class_reference/stacklayout.html": {
    "href": "docs/code_reference/class_reference/stacklayout.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes layout Properties Methods"
  },
  "docs/code_reference/class_reference/staticaabbtreebroadphase.html": {
    "href": "docs/code_reference/class_reference/staticaabbtreebroadphase.html",
    "title": "Properties | ZilchEngine",
    "keywords": "SpatialPartition Methods Properties Base Classes Derived Classes ibroadphase Properties Methods"
  },
  "docs/code_reference/class_reference/stickjoint.html": {
    "href": "docs/code_reference/class_reference/stickjoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A stick joint is used to simulate a rope or a stick. This joint forces a constant distance between the anchor points on the objects. If there is no limit, this behaves as a stick. If there is a limit, then this behaves as a rope. Motors and springs are also applied to the axis of the rope. Add on definitions: Limit: A limit will provide a min/max distance that the anchors can be between. Motor: A motor will push/pull the objects in the direction of the rope. The motor will not have any effect unless a limit or spring is present. Spring: A spring will make the rope behave spring-like at its boundaries. Methods Properties Base Classes Derived Classes SetWorldPoints Length joint Constructor LocalPointA LocalPointB WorldPointA WorldPointB Properties Length : real The desired length between the anchor points of object A and B. var Length : Real LocalPointA : real3 The local point of the anchor on object A . var LocalPointA : Real3 LocalPointB : real3 The local point of the anchor on object B . var LocalPointB : Real3 WorldPointA : real3 The position of the anchor on object A given a position in world space var WorldPointA : Real3 WorldPointB : real3 The position of the anchor on object B given a position in world space var WorldPointB : Real3 Methods SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point|real3| | function SetWorldPoints(point : Real3) StickJoint : Void constructor Name Type Description function StickJoint()"
  },
  "docs/code_reference/class_reference/stickjointblock.html": {
    "href": "docs/code_reference/class_reference/stickjointblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods StickJointBlock : Void constructor Name Type Description function StickJointBlock()"
  },
  "docs/code_reference/class_reference/stresstest.html": {
    "href": "docs/code_reference/class_reference/stresstest.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes AddComponents eventobject ChangeSelection ChangeTools CreateObjects DestroyObjects Frames KeyEvents LogFile MouseEvents ParentObjects RayCasts Redo RemoveComponents Seed SetProperties StartGameInstances StopGameInstances SwitchViewports Undo UnparentObjects Properties AddComponents : boolean var AddComponents : Boolean ChangeSelection : boolean var ChangeSelection : Boolean ChangeTools : boolean var ChangeTools : Boolean CreateObjects : boolean var CreateObjects : Boolean DestroyObjects : boolean var DestroyObjects : Boolean Frames : integer var Frames : Integer KeyEvents : boolean var KeyEvents : Boolean LogFile : string var LogFile : String MouseEvents : boolean var MouseEvents : Boolean ParentObjects : boolean var ParentObjects : Boolean RayCasts : boolean var RayCasts : Boolean Redo : boolean var Redo : Boolean RemoveComponents : boolean var RemoveComponents : Boolean Seed : integer var Seed : Integer SetProperties : boolean var SetProperties : Boolean StartGameInstances : boolean var StartGameInstances : Boolean StopGameInstances : boolean var StopGameInstances : Boolean SwitchViewports : boolean var SwitchViewports : Boolean Undo : boolean var Undo : Boolean UnparentObjects : boolean var UnparentObjects : Boolean Methods"
  },
  "docs/code_reference/class_reference/stresstestdialog.html": {
    "href": "docs/code_reference/class_reference/stresstestdialog.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/stringcombobox.html": {
    "href": "docs/code_reference/class_reference/stringcombobox.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes combobox Properties Methods"
  },
  "docs/code_reference/class_reference/stringnamedisplay.html": {
    "href": "docs/code_reference/class_reference/stringnamedisplay.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes metadisplay Properties Methods"
  },
  "docs/code_reference/class_reference/subconvexmesh.html": {
    "href": "docs/code_reference/class_reference/subconvexmesh.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) Contains the indices of a convex mesh. The triangle indices are the primary method to configure this (required for mass computations). The regular indices are used for debug drawing and to reduce intersection tests by removing duplicate points. If left empty, Indices will be auto-filled from the triangle indices. Methods Properties Base Classes Derived Classes Indices safeid32object Mesh TriangleIndices Valid Properties Indices : multiconvexmeshindexdata read-only The vertex indices on the main mesh used to generate the convex hull. var Indices : MultiConvexMeshIndexData Mesh : multiconvexmesh The MultiConvexMesh that owns this sub-mesh. var Mesh : MultiConvexMesh TriangleIndices : multiconvexmeshindexdata read-only The vertex indices on the main mesh used to generate triangle indices for computing mass information and debug drawing. More indices are needed for determining triangles than for generating the convex mesh. var TriangleIndices : MultiConvexMeshIndexData Valid : boolean read-only Is this sub-mesh incorrectly configured. Typically means that the indices don't point to valid vertices. Also the number of triangle indices could be incorrect (multiple of 3). var Valid : Boolean Methods"
  },
  "docs/code_reference/class_reference/subrendergrouppass.html": {
    "href": "docs/code_reference/class_reference/subrendergrouppass.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics (NOTE) Interface used to define unique render settings for a base RenderGroup and its sub RenderGroups. Methods Properties Base Classes Derived Classes AddSubSettings safeid32 ExcludeSubRenderGroup Reset SetDefaultSettings Properties Methods AddSubSettings : Void Define the settings to use for a specific RenderGroup. Given RenderGroup must be a child of the base RenderGroup, or the base itself, that this was initialized with. |Name|Type|Description| |---|---|---| |subSettings|rendersettings| | |subGroup|rendergroup| | |subPass|materialblock| | function AddSubSettings(subSettings : RenderSettings, subGroup : RenderGroup, subPass : MaterialBlock) ExcludeSubRenderGroup : Void Explicitely exclude a RenderGroup from rendering when there are default settings. Given RenderGroup must be a child of the base RenderGroup, or the base itself, that this was initialized with. |Name|Type|Description| |---|---|---| |subGroup|rendergroup| | function ExcludeSubRenderGroup(subGroup : RenderGroup) Reset : Void Resets interface back to the initial creation state with a given base RenderGroup. |Name|Type|Description| |---|---|---| |baseRenderGroup|rendergroup| | function Reset(baseRenderGroup : RenderGroup) SetDefaultSettings : Void Settings to use for the base or all sub RenderGroups that do not have specified settings. Without defaults, the base or any sub RenderGroup without settings will not render. |Name|Type|Description| |---|---|---| |defaultSettings|rendersettings| | |defaultPass|materialblock| | function SetDefaultSettings(defaultSettings : RenderSettings, defaultPass : MaterialBlock)"
  },
  "docs/code_reference/class_reference/sweepresult.html": {
    "href": "docs/code_reference/class_reference/sweepresult.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics (NOTE) Cast result from performing a sweep test. Methods Properties Base Classes Derived Classes Constructor OtherCollider OtherObject Penetration Time WorldNormalTowardsOther WorldNormalTowardsSelf WorldPoint Properties OtherCollider : collider read-only The other collider being hit. var OtherCollider : Collider OtherObject : cog read-only The other cog being hit. var OtherObject : Cog Penetration : real read-only The amount of overlap with this object. Will typically be zero unless the objects start in contact. var Penetration : Real Time : real read-only The time of impact that this collision first happens. var Time : Real WorldNormalTowardsOther : real3 read-only The contact normal pointing from the sweeping object towards the other object. var WorldNormalTowardsOther : Real3 WorldNormalTowardsSelf : real3 read-only The contact normal pointing from the other object towards the sweeping object. var WorldNormalTowardsSelf : Real3 WorldPoint : real3 read-only The point of intersection in world-space. var WorldPoint : Real3 Methods SweepResult : Void constructor Name Type Description function SweepResult() SweepResult : Void constructor Name Type Description sweepresult function SweepResult( : SweepResult)"
  },
  "docs/code_reference/class_reference/sweepresultrange.html": {
    "href": "docs/code_reference/class_reference/sweepresultrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : sweepresultrange read-only var All : SweepResultRange Current : sweepresult read-only var Current : SweepResult IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() SweepResultRange : Void constructor Name Type Description function SweepResultRange() SweepResultRange : Void constructor Name Type Description p0 sweepresultrange function SweepResultRange(p0 : SweepResultRange)"
  },
  "docs/code_reference/class_reference/system.html": {
    "href": "docs/code_reference/class_reference/system.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes eventobject actionsystem audio factory graphicsengine osshell physicsengine timesystem tracker UnitTestSystem Properties Methods"
  },
  "docs/code_reference/class_reference/tabarea.html": {
    "href": "docs/code_reference/class_reference/tabarea.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/tabmodifiedevent.html": {
    "href": "docs/code_reference/class_reference/tabmodifiedevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/tabrenamedevent.html": {
    "href": "docs/code_reference/class_reference/tabrenamedevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/tagevent.html": {
    "href": "docs/code_reference/class_reference/tagevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/tcpsocket.html": {
    "href": "docs/code_reference/class_reference/tcpsocket.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking (NOTE) Manages all the client/server/peer connections . Methods Properties Base Classes Derived Classes Close ConnectionCount eventobject CloseConnection IncomingConnectionCount Connect OutgoingConnectionCount IsConnected Listen SendTo SendToAll SendToAllAndSelf SendToAllExcept Properties ConnectionCount : integer read-only Get the number of connections we have. var ConnectionCount : Integer IncomingConnectionCount : integer read-only Get the number of incoming connections. var IncomingConnectionCount : Integer OutgoingConnectionCount : integer read-only Get the number of outgoing connections. var OutgoingConnectionCount : Integer Methods Close : Void Close all activity (whether listening or connected to a server). |Name|Type|Description| |---|---|---| function Close() CloseConnection : Void Name Type Description index integer function CloseConnection(index : Integer) Connect : Void Attempt to connect to a host on the given port. |Name|Type|Description| |---|---|---| |host|string| | |port|integer| | function Connect(host : String, port : Integer) IsConnected : boolean Check if we are currently connected to anyone. |Name|Type|Description| |---|---|---| function IsConnected() : Boolean Listen : boolean Listen for incoming connections. |Name|Type|Description| |---|---|---| |port|integer| | |maxConnections|integer| | function Listen(port : Integer, maxConnections : Integer) : Boolean Listen : boolean Listen for incoming connections. |Name|Type|Description| |---|---|---| |port|integer| | |maxConnections|integer| | |bindTo|TcpSocketBind| | function Listen(port : Integer, maxConnections : Integer, bindTo : TcpSocketBind) : Boolean SendTo : Void Send an event to a specific connection index. |Name|Type|Description| |---|---|---| |eventId|string| | |event|sendableevent| | |index|integer| | function SendTo(eventId : String, event : SendableEvent, index : Integer) SendToAll : Void Send an event to all connections. |Name|Type|Description| |---|---|---| |eventId|string| | |event|sendableevent| | function SendToAll(eventId : String, event : SendableEvent) SendToAllAndSelf : Void Send an event to all connections and dispatch on self. |Name|Type|Description| |---|---|---| |eventId|string| | |event|sendableevent| | function SendToAllAndSelf(eventId : String, event : SendableEvent) SendToAllExcept : Void Send an event to all connections except a particular connection index. |Name|Type|Description| |---|---|---| |eventId|string| | |event|sendableevent| | |exceptIndex|integer| | function SendToAllExcept(eventId : String, event : SendableEvent, exceptIndex : Integer)"
  },
  "docs/code_reference/class_reference/text.html": {
    "href": "docs/code_reference/class_reference/text.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes widget viewporttextwidget Properties Methods"
  },
  "docs/code_reference/class_reference/textblock.html": {
    "href": "docs/code_reference/class_reference/textblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Engine (NOTE) A Text resource is a generic resource for simple text data for game logic. Methods Properties Base Classes Derived Classes Text documentresource Properties Text : string read-only var Text : String Methods"
  },
  "docs/code_reference/class_reference/textbox.html": {
    "href": "docs/code_reference/class_reference/textbox.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/textbuilder.html": {
    "href": "docs/code_reference/class_reference/textbuilder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes basetextbuilder Properties Methods"
  },
  "docs/code_reference/class_reference/textbutton.html": {
    "href": "docs/code_reference/class_reference/textbutton.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes buttonbase Properties Methods"
  },
  "docs/code_reference/class_reference/textcheckbox.html": {
    "href": "docs/code_reference/class_reference/textcheckbox.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/textcontent.html": {
    "href": "docs/code_reference/class_reference/textcontent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes contentcomposition Properties Methods"
  },
  "docs/code_reference/class_reference/textdefinition.html": {
    "href": "docs/code_reference/class_reference/textdefinition.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Graphics Methods Properties Base Classes Derived Classes Resource Properties Methods"
  },
  "docs/code_reference/class_reference/texteditor.html": {
    "href": "docs/code_reference/class_reference/texteditor.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes basescrollarea consoleui documenteditor Properties Methods"
  },
  "docs/code_reference/class_reference/texteditorconfig.html": {
    "href": "docs/code_reference/class_reference/texteditorconfig.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine Methods Properties Base Classes Derived Classes Constructor AutoCompleteOnEnter component CodeFolding ColorScheme ConfidentAutoCompleteOnSymbols FontSize HighlightPartialTextMatch KeywordAndTypeCompletion LineNumbers LocalWordCompletion ShowWhiteSpace TabWidth TextMatchHighlighting Properties AutoCompleteOnEnter : boolean var AutoCompleteOnEnter : Boolean CodeFolding : boolean var CodeFolding : Boolean ColorScheme : string var ColorScheme : String ConfidentAutoCompleteOnSymbols : boolean var ConfidentAutoCompleteOnSymbols : Boolean FontSize : integer var FontSize : Integer HighlightPartialTextMatch : boolean var HighlightPartialTextMatch : Boolean KeywordAndTypeCompletion : boolean var KeywordAndTypeCompletion : Boolean LineNumbers : boolean var LineNumbers : Boolean LocalWordCompletion : boolean var LocalWordCompletion : Boolean ShowWhiteSpace : boolean var ShowWhiteSpace : Boolean TabWidth : TabWidth var TabWidth : TabWidth TextMatchHighlighting : boolean var TextMatchHighlighting : Boolean Methods TextEditorConfig : Void constructor Name Type Description function TextEditorConfig()"
  },
  "docs/code_reference/class_reference/texteditorevent.html": {
    "href": "docs/code_reference/class_reference/texteditorevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/texterrorevent.html": {
    "href": "docs/code_reference/class_reference/texterrorevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes textevent Properties Methods"
  },
  "docs/code_reference/class_reference/textevent.html": {
    "href": "docs/code_reference/class_reference/textevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine Methods Properties Base Classes Derived Classes Text event texterrorevent Properties Text : string var Text : String Methods"
  },
  "docs/code_reference/class_reference/textupdatedevent.html": {
    "href": "docs/code_reference/class_reference/textupdatedevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes ChangeAccepted event Properties ChangeAccepted : boolean var ChangeAccepted : Boolean Methods"
  },
  "docs/code_reference/class_reference/texture.html": {
    "href": "docs/code_reference/class_reference/texture.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Graphics (NOTE) Data that represents a texture in the way that is intended to be used by graphics hardware. Methods Properties Base Classes Derived Classes CreateRuntime AddressingX Resource SubUpload AddressingY Upload Anisotropy CompareFunc CompareMode Compression Filtering Format Height MipMapping Size Type Width Properties AddressingX : TextureAddressing How to treat uv coordinates outside of [0, 1] along the Texture's width. var AddressingX : TextureAddressing AddressingY : TextureAddressing How to treat uv coordinates outside of [0, 1] along the Texture's height. var AddressingY : TextureAddressing Anisotropy : TextureAnisotropy Max ratio of anisotropy that filtering will account for at oblique viewing angles. var Anisotropy : TextureAnisotropy CompareFunc : TextureCompareFunc Which method of comparison should be used if CompareMode is set to Enable. var CompareFunc : TextureCompareFunc CompareMode : TextureCompareMode If sampling in hardware should perform comparison instead of fetching. Requires using SamplerShadow2d in the shader. var CompareMode : TextureCompareMode Compression : TextureCompression read-only Block compression method being used. Requires pre-processing, cannot be set for runtime Textures. var Compression : TextureCompression Filtering : TextureFiltering How samples should be blended under minification/magnification. var Filtering : TextureFiltering Format : TextureFormat read-only Memory format of the stored pixel data. Set on Upload() for runtime Textures. var Format : TextureFormat Height : integer read-only Height of the Texture in pixels. Set on Upload() for runtime Textures. var Height : Integer MipMapping : TextureMipMapping If downsampled versions of the texture (mip maps) should be generated. PreGenerated is not valid for runtime Textures. var MipMapping : TextureMipMapping Size : integer2 read-only Width and height (x, y) of the Texture in pixels. Set on Upload() for runtime Textures. var Size : Integer2 Type : TextureType read-only The type of texture data being represented. var Type : TextureType Width : integer read-only Width of the Texture in pixels. Set on Upload() for runtime Textures. var Width : Integer Methods CreateRuntime : texture static Makes an anonymous Texture resource that can be defined by script and uploaded to the gpu. |Name|Type|Description| |---|---|---| function CreateRuntime() : Texture SubUpload : Void Uploads the given texture data, overwriting a sub region of the texture data that is already on the gpu. |Name|Type|Description| |---|---|---| |textureData|texturedata| | |xOffset|integer| | |yOffset|integer| | function SubUpload(textureData : TextureData, xOffset : Integer, yOffset : Integer) Upload : Void Uploads the given texture data to the gpu, configured with the current settings of this Texture. |Name|Type|Description| |---|---|---| |textureData|texturedata| | function Upload(textureData : TextureData)"
  },
  "docs/code_reference/class_reference/texturebuilder.html": {
    "href": "docs/code_reference/class_reference/texturebuilder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Constructor AddressingX buildercomponent AddressingY Anisotropy Compression Filtering GammaCorrection HalfScaleCount MipMapping Name PremultipliedAlpha Type Properties AddressingX : TextureAddressing var AddressingX : TextureAddressing AddressingY : TextureAddressing var AddressingY : TextureAddressing Anisotropy : TextureAnisotropy var Anisotropy : TextureAnisotropy Compression : TextureCompression var Compression : TextureCompression Filtering : TextureFiltering var Filtering : TextureFiltering GammaCorrection : boolean var GammaCorrection : Boolean HalfScaleCount : integer var HalfScaleCount : Integer MipMapping : TextureMipMapping var MipMapping : TextureMipMapping Name : string var Name : String PremultipliedAlpha : boolean var PremultipliedAlpha : Boolean Type : TextureType var Type : TextureType Methods TextureBuilder : Void constructor Name Type Description function TextureBuilder()"
  },
  "docs/code_reference/class_reference/texturecontent.html": {
    "href": "docs/code_reference/class_reference/texturecontent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Constructor contentcomponent Properties Methods TextureContent : Void constructor Name Type Description function TextureContent()"
  },
  "docs/code_reference/class_reference/texturedata.html": {
    "href": "docs/code_reference/class_reference/texturedata.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics (NOTE) Modifiable texture data that can be used to upload to a runtime Texture resource. All formats use one interface for get/set, all values are converted to/from floats and unused channels are ignored. Integer formats are represented in the normalized range [0, 1]. Methods Properties Base Classes Derived Classes Get Format Set Height Constructor PixelCount Width Properties Format : TextureFormat read-only Memory format of the stored pixel data. var Format : TextureFormat Height : integer read-only Height of the texture data in pixels. var Height : Integer PixelCount : integer read-only Total number of pixels in texture data. var PixelCount : Integer Width : integer read-only Width of the texture data in pixels. var Width : Integer Methods Get : real4 Returns the pixel values at the given index. |Name|Type|Description| |---|---|---| |index|integer| | function Get(index : Integer) : Real4 Get : real4 Returns the pixel values at the given index. |Name|Type|Description| |---|---|---| |x|integer| | |y|integer| | function Get(x : Integer, y : Integer) : Real4 Set : Void Sets the pixel values at the given index. |Name|Type|Description| |---|---|---| |x|integer| | |y|integer| | |value|real4| | function Set(x : Integer, y : Integer, value : Real4) Set : Void Sets the pixel values at the given index. |Name|Type|Description| |---|---|---| |index|integer| | |value|real4| | function Set(index : Integer, value : Real4) TextureData : Void constructor Name Type Description format TextureFormat width integer height integer function TextureData(format : TextureFormat, width : Integer, height : Integer)"
  },
  "docs/code_reference/class_reference/textureinfo.html": {
    "href": "docs/code_reference/class_reference/textureinfo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes Constructor Dimensions contentcomponent FileType LoadFormat Size Properties Dimensions : string read-only var Dimensions : String FileType : string read-only var FileType : String LoadFormat : string read-only var LoadFormat : String Size : string read-only var Size : String Methods TextureInfo : Void constructor Name Type Description function TextureInfo()"
  },
  "docs/code_reference/class_reference/textureview.html": {
    "href": "docs/code_reference/class_reference/textureview.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes widget Properties Methods"
  },
  "docs/code_reference/class_reference/thickness.html": {
    "href": "docs/code_reference/class_reference/thickness.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes All Bottom Size Left Constructor Right TopLeft Top Zero Properties Bottom : real var Bottom : Real Left : real var Left : Real Right : real var Right : Real Top : real var Top : Real Zero : thickness read-only static var Zero : Thickness Methods All : thickness static Name Type Description p0 real function All(p0 : Real) : Thickness Size : real2 Name Type Description function Size() : Real2 Thickness : Void constructor Name Type Description p0 real p1 real function Thickness(p0 : Real, p1 : Real) Thickness : Void constructor Name Type Description p0 real p1 real p2 real p3 real function Thickness(p0 : Real, p1 : Real, p2 : Real, p3 : Real) Thickness : Void constructor Name Type Description p0 real2 function Thickness(p0 : Real2) Thickness : Void constructor Name Type Description p0 real4 function Thickness(p0 : Real4) TopLeft : real2 Name Type Description function TopLeft() : Real2"
  },
  "docs/code_reference/class_reference/threadedwebrequest.html": {
    "href": "docs/code_reference/class_reference/threadedwebrequest.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking Methods Properties Base Classes Derived Classes threadsafeid32eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/threadsafeid32.html": {
    "href": "docs/code_reference/class_reference/threadsafeid32.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/threadsafeid32eventobject.html": {
    "href": "docs/code_reference/class_reference/threadsafeid32eventobject.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes eventobject chrome oswindow threadedwebrequest Properties Methods"
  },
  "docs/code_reference/class_reference/threadsafeid64.html": {
    "href": "docs/code_reference/class_reference/threadsafeid64.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/class_reference/threadsafeid64eventobject.html": {
    "href": "docs/code_reference/class_reference/threadsafeid64eventobject.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/threadsafeid64object.html": {
    "href": "docs/code_reference/class_reference/threadsafeid64object.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes Object Properties Methods"
  },
  "docs/code_reference/class_reference/threadsafereferencecounted.html": {
    "href": "docs/code_reference/class_reference/threadsafereferencecounted.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes blendsettingsmrt colortargetmrt multirendertarget Properties Methods"
  },
  "docs/code_reference/class_reference/thrusteffect.html": {
    "href": "docs/code_reference/class_reference/thrusteffect.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Applies a directional force at the thrust effect's center. When applied to a rigid body, this will compute a torque if the force's direction does not go through the center of mass. Useful for modeling any sort of a thruster. Methods Properties Base Classes Derived Classes Constructor ForceDirection physicseffect ForceStrength LocalSpaceDirection WorldForceDirection Properties ForceDirection : real3 The direction that the force should be applied. var ForceDirection : Real3 ForceStrength : real The strength of the force being applied in the force direction. var ForceStrength : Real LocalSpaceDirection : boolean Determines if this force is to be applied in local or world space. var LocalSpaceDirection : Boolean WorldForceDirection : real3 read-only The direction that the force should be applied in world space. var WorldForceDirection : Real3 Methods ThrustEffect : Void constructor Name Type Description function ThrustEffect()"
  },
  "docs/code_reference/class_reference/tileeditor2d.html": {
    "href": "docs/code_reference/class_reference/tileeditor2d.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor Methods Properties Base Classes Derived Classes CreateTileMap ShowArchetype component Constructor ShowCollision ShowCoordinates ShowGrid ShowInvalid TiledDrawing ToolType Properties ShowArchetype : boolean var ShowArchetype : Boolean ShowCollision : boolean var ShowCollision : Boolean ShowCoordinates : boolean var ShowCoordinates : Boolean ShowGrid : boolean var ShowGrid : Boolean ShowInvalid : boolean var ShowInvalid : Boolean TiledDrawing : boolean var TiledDrawing : Boolean ToolType : TileEditor2DSubToolType var ToolType : TileEditor2DSubToolType Methods CreateTileMap : Void Name Type Description function CreateTileMap() TileEditor2D : Void constructor Name Type Description function TileEditor2D()"
  },
  "docs/code_reference/class_reference/tileeditor2ddrawtool.html": {
    "href": "docs/code_reference/class_reference/tileeditor2ddrawtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes tileeditor2dsubtool Properties Methods"
  },
  "docs/code_reference/class_reference/tileeditor2dselecttool.html": {
    "href": "docs/code_reference/class_reference/tileeditor2dselecttool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes tileeditor2dsubtool Properties Methods"
  },
  "docs/code_reference/class_reference/tileeditor2dsubtool.html": {
    "href": "docs/code_reference/class_reference/tileeditor2dsubtool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Object tileeditor2ddrawtool tileeditor2dselecttool Properties Methods"
  },
  "docs/code_reference/class_reference/tilemap.html": {
    "href": "docs/code_reference/class_reference/tilemap.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Gameplay Methods Properties Base Classes Derived Classes Constructor MeshThickness component Source Properties MeshThickness : real var MeshThickness : Real Source : tilemapsource read-only var Source : TileMapSource Methods TileMap : Void constructor Name Type Description function TileMap()"
  },
  "docs/code_reference/class_reference/tilemapsource.html": {
    "href": "docs/code_reference/class_reference/tilemapsource.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Gameplay Methods Properties Base Classes Derived Classes Resource Properties Methods"
  },
  "docs/code_reference/class_reference/tilepalettesource.html": {
    "href": "docs/code_reference/class_reference/tilepalettesource.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Resource Editor Methods Properties Base Classes Derived Classes Resource Properties Methods"
  },
  "docs/code_reference/class_reference/tilepalettesprite.html": {
    "href": "docs/code_reference/class_reference/tilepalettesprite.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/tilepaletteview.html": {
    "href": "docs/code_reference/class_reference/tilepaletteview.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Archetype composite Collision Mergeable Sprite TilePalette Properties Archetype : archetype var Archetype : Archetype Collision : physicsmesh var Collision : PhysicsMesh Mergeable : boolean var Mergeable : Boolean Sprite : spritesource var Sprite : SpriteSource TilePalette : tilepalettesource var TilePalette : TilePaletteSource Methods"
  },
  "docs/code_reference/class_reference/tileview.html": {
    "href": "docs/code_reference/class_reference/tileview.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/tileviewevent.html": {
    "href": "docs/code_reference/class_reference/tileviewevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/tileviewwidget.html": {
    "href": "docs/code_reference/class_reference/tileviewwidget.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/timespace.html": {
    "href": "docs/code_reference/class_reference/timespace.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) Time space component controls time for a Space. Methods Properties Base Classes Derived Classes Step Dt component Constructor DtOrZero TogglePause Frame GloballyPaused MaxDt MinDt Paused RealDt RealTimePassed StepCount TimeMode TimePassed TimeScale Properties Dt : real read-only var Dt : Real DtOrZero : real read-only var DtOrZero : Real Frame : integer The current frame we are on (starts at 0 and counts up for every frame that is run) This value counts up regardless of if the space is paused. var Frame : Integer GloballyPaused : boolean read-only var GloballyPaused : Boolean MaxDt : real The maximum amount of time we send when running in 'ActualFrametime' mode If this value is set too high and the user does anything to pause their system or the game (example grabbing the window) then a large frame time will be sent out and physics objects will jump very far (causing tunneling and random bounces) var MaxDt : Real MinDt : real The minimum amount of time we send when running in 'ActualFrametime' mode Ideally this is set to a very small non-zero value to prevent any division by zero errors. var MinDt : Real Paused : boolean If the time space is paused then we cease sending out logic update events When paused, the Dt will remain at whatever it was (it will NOT be set to 0) var Paused : Boolean RealDt : real read-only var RealDt : Real RealTimePassed : real var RealTimePassed : Real StepCount : integer Causes the engine to update multiple times before rendering a frame. var StepCount : Integer TimeMode : TimeMode When set to fixed framerate the Dt/frame time will never change (it will send whatever the project frame-rate-limiter is set to) This means it is important to run with a frame-rate limiter of some kind otherwise the game will appear to run much faster/slower Note: For determinism, you should always run in FixedFrametime mode When set to actual framerate we will send out the real time that the engine is encountering (clamped by MinDt / MaxDt) var TimeMode : TimeMode TimePassed : real var TimePassed : Real TimeScale : real Scale the speed of time for interesting effects like bullet time or fast paced gameplay. TimeScale is clamped to be positive. var TimeScale : Real Methods Step : Void Allows the engine to be advance one frame forward. Useful for debugging one frame at a time. |Name|Type|Description| |---|---|---| function Step() TimeSpace : Void constructor Name Type Description function TimeSpace() TogglePause : Void Toggles the state of paused. |Name|Type|Description| |---|---|---| function TogglePause()"
  },
  "docs/code_reference/class_reference/timesystem.html": {
    "href": "docs/code_reference/class_reference/timesystem.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes system Properties Methods"
  },
  "docs/code_reference/class_reference/toggleiconbutton.html": {
    "href": "docs/code_reference/class_reference/toggleiconbutton.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes iconbutton Properties Methods"
  },
  "docs/code_reference/class_reference/tool.html": {
    "href": "docs/code_reference/class_reference/tool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes BeginDrag eventobject Properties Methods BeginDrag : Void Name Type Description p0 viewport function BeginDrag(p0 : Viewport)"
  },
  "docs/code_reference/class_reference/toolcontrol.html": {
    "href": "docs/code_reference/class_reference/toolcontrol.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/toolgizmoevent.html": {
    "href": "docs/code_reference/class_reference/toolgizmoevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/tooltip.html": {
    "href": "docs/code_reference/class_reference/tooltip.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/tooluievent.html": {
    "href": "docs/code_reference/class_reference/tooluievent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor (NOTE) Allows Ui customization for Tools. This will be sent on the Tool every time it is activated. Methods Properties Base Classes Derived Classes NeedsPropertyGrid event Parent SelectTool Properties NeedsPropertyGrid : boolean Whether or not to force show the tools window when switched to this tool. var NeedsPropertyGrid : Boolean Parent : composite read-only Getters / setters. var Parent : Composite SelectTool : cog read-only Easy access to the Select Tool. It's commonly used in other Tools (such as ray casting). var SelectTool : Cog Methods"
  },
  "docs/code_reference/class_reference/torqueeffect.html": {
    "href": "docs/code_reference/class_reference/torqueeffect.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Applies a torque to the center of mass of a body. Methods Properties Base Classes Derived Classes Constructor LocalTorque physicseffect TorqueAxis TorqueStrength WorldTorqueAxis Properties LocalTorque : boolean Determines if the torque is applied in local or world space. var LocalTorque : Boolean TorqueAxis : real3 The axis that the torque is being applied about. var TorqueAxis : Real3 TorqueStrength : real The strength of the torque being applied. var TorqueStrength : Real WorldTorqueAxis : real3 read-only The axis of the torque in world space (can be used to manually add torque to a RigidBody). var WorldTorqueAxis : Real3 Methods TorqueEffect : Void constructor Name Type Description function TorqueEffect()"
  },
  "docs/code_reference/class_reference/tracker.html": {
    "href": "docs/code_reference/class_reference/tracker.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes system Properties Methods"
  },
  "docs/code_reference/class_reference/trackevent.html": {
    "href": "docs/code_reference/class_reference/trackevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event ContentMeta Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/tracknode.html": {
    "href": "docs/code_reference/class_reference/tracknode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/transform.html": {
    "href": "docs/code_reference/class_reference/transform.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) Transform component class. The transform component provides the position, rotation and scale of an object. Methods Properties Base Classes Derived Classes RotateAnglesLocal EulerAngles component RotateAnglesWorld LocalRotation RotateAround LocalScale RotateLocal LocalTranslation RotateWorld Parent SetEulerAnglesXYZ Rotation SetRotationBases Scale Constructor Translation TransformNormal WorldMatrix TransformNormalInverse WorldRotation TransformNormalLocal WorldScale TransformPoint WorldTranslation TransformPointInverse TransformPointLocal Properties EulerAngles : real3 The rotation of the transform as an Euler angle vector in radians. var EulerAngles : Real3 LocalRotation : quaternion Local rotation relative to parent. var LocalRotation : Quaternion LocalScale : real3 Local Scale relative to parent. var LocalScale : Real3 LocalTranslation : real3 Local Translation relative to parent. var LocalTranslation : Real3 Parent : transform read-only var Parent : Transform Rotation : quaternion Local rotation relative to parent. var Rotation : Quaternion Scale : real3 Local Scale relative to parent. var Scale : Real3 Translation : real3 Local Translation relative to parent. var Translation : Real3 WorldMatrix : real4x4 read-only var WorldMatrix : Real4x4 WorldRotation : quaternion Rotation in World Space. var WorldRotation : Quaternion WorldScale : real3 Scale in World Space. var WorldScale : Real3 WorldTranslation : real3 Translation in World Space. var WorldTranslation : Real3 Methods RotateAnglesLocal : Void Rotate object in local space by the given Euler angle vector (in radians). |Name|Type|Description| |---|---|---| |angles|real3| | function RotateAnglesLocal(angles : Real3) RotateAnglesWorld : Void Rotate object in world space by the given Euler angle vector (in radians). |Name|Type|Description| |---|---|---| |angles|real3| | function RotateAnglesWorld(angles : Real3) RotateAround : Void Rotate around a given point with the given rotation. |Name|Type|Description| |---|---|---| |point|real3| | |rotation|quaternion| | function RotateAround(point : Real3, rotation : Quaternion) RotateLocal : Void Rotate object in local space. |Name|Type|Description| |---|---|---| |rotation|quaternion| | function RotateLocal(rotation : Quaternion) RotateWorld : Void Rotate object in world space. |Name|Type|Description| |---|---|---| |rotation|quaternion| | function RotateWorld(rotation : Quaternion) SetEulerAnglesXYZ : Void Sets the rotation of the transform by the given Euler angles in radians. |Name|Type|Description| |---|---|---| |xRadians|real| | |yRadians|real| | |zRadians|real| | function SetEulerAnglesXYZ(xRadians : Real, yRadians : Real, zRadians : Real) SetRotationBases : Void Generates a rotation matrix from the given bases. |Name|Type|Description| |---|---|---| |facing|real3| | |up|real3| | |right|real3| | function SetRotationBases(facing : Real3, up : Real3, right : Real3) Transform : Void constructor Constructor / Destructor. |Name|Type|Description| |---|---|---| function Transform() TransformNormal : real3 Transforms a local normal (direction) into world space. |Name|Type|Description| |---|---|---| |normal|real3| | function TransformNormal(normal : Real3) : Real3 TransformNormalInverse : real3 Transforms a world normal (direction) into local space. |Name|Type|Description| |---|---|---| |normal|real3| | function TransformNormalInverse(normal : Real3) : Real3 TransformNormalLocal : real3 Transforms a normal by the local matrix (ignores parent's transform) Needed now because there is no quaternion times vector in script. |Name|Type|Description| |---|---|---| |normal|real3| | function TransformNormalLocal(normal : Real3) : Real3 TransformPoint : real3 Transforms a local point into world space. |Name|Type|Description| |---|---|---| |point|real3| | function TransformPoint(point : Real3) : Real3 TransformPointInverse : real3 Transforms a world point into local space. |Name|Type|Description| |---|---|---| |point|real3| | function TransformPointInverse(point : Real3) : Real3 TransformPointLocal : real3 Transforms a point by the local matrix (ignores parent's transform) |Name|Type|Description| |---|---|---| |point|real3| | function TransformPointLocal(point : Real3) : Real3"
  },
  "docs/code_reference/class_reference/transformmetatransform.html": {
    "href": "docs/code_reference/class_reference/transformmetatransform.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metatransform Properties Methods"
  },
  "docs/code_reference/class_reference/translategizmo.html": {
    "href": "docs/code_reference/class_reference/translategizmo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Editor (NOTE) Updates the translation of the gizmo when it's being dragged. Methods Properties Base Classes Derived Classes Constructor SnapDistance component SnapMode Snapping UpdateMode Properties SnapDistance : real var SnapDistance : Real SnapMode : GizmoSnapMode var SnapMode : GizmoSnapMode Snapping : boolean Snapping. var Snapping : Boolean UpdateMode : UpdateMode Whether or not to automatically translate the gizmo as it's moved. var UpdateMode : UpdateMode Methods TranslateGizmo : Void constructor Name Type Description function TranslateGizmo()"
  },
  "docs/code_reference/class_reference/translategizmoupdateevent.html": {
    "href": "docs/code_reference/class_reference/translategizmoupdateevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes GizmoWorldTranslation gizmoupdateevent Properties GizmoWorldTranslation : real3 var GizmoWorldTranslation : Real3 Methods"
  },
  "docs/code_reference/class_reference/treeevent.html": {
    "href": "docs/code_reference/class_reference/treeevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/treerow.html": {
    "href": "docs/code_reference/class_reference/treerow.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/treeview.html": {
    "href": "docs/code_reference/class_reference/treeview.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes widget Properties Methods"
  },
  "docs/code_reference/class_reference/treeviewheaderaddedevent.html": {
    "href": "docs/code_reference/class_reference/treeviewheaderaddedevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/tweakables.html": {
    "href": "docs/code_reference/class_reference/tweakables.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/typeevent.html": {
    "href": "docs/code_reference/class_reference/typeevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Meta Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/typenamedisplay.html": {
    "href": "docs/code_reference/class_reference/typenamedisplay.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes metadisplay Properties Methods"
  },
  "docs/code_reference/class_reference/uidocklayout.html": {
    "href": "docs/code_reference/class_reference/uidocklayout.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component UiWidget Methods Properties Base Classes Derived Classes Constructor Spacing uilayout Properties Spacing : real2 var Spacing : Real2 Methods UiDockLayout : Void constructor Name Type Description function UiDockLayout()"
  },
  "docs/code_reference/class_reference/uifilllayout.html": {
    "href": "docs/code_reference/class_reference/uifilllayout.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component UiWidget Methods Properties Base Classes Derived Classes FillToParent uilayout FillToRectangle Constructor Properties Methods FillToParent : Void static Name Type Description child uiwidget function FillToParent(child : UiWidget) FillToRectangle : Void static Name Type Description rect rectangle widget uiwidget function FillToRectangle(rect : Rectangle, widget : UiWidget) UiFillLayout : Void constructor Name Type Description function UiFillLayout()"
  },
  "docs/code_reference/class_reference/uifocusevent.html": {
    "href": "docs/code_reference/class_reference/uifocusevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event UiWidget Methods Properties Base Classes Derived Classes LostFocus event ReceivedFocus Properties LostFocus : uiwidget read-only The object that has lost focus, or will lose focus (in the case of preview). var LostFocus : UiWidget ReceivedFocus : uiwidget read-only The object that is gaining focus. var ReceivedFocus : UiWidget Methods"
  },
  "docs/code_reference/class_reference/uilayout.html": {
    "href": "docs/code_reference/class_reference/uilayout.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component UiWidget (NOTE) Layouts are in charge of calling UpdateTransform on all children, regardless of whether or not they ignore layouts. Methods Properties Base Classes Derived Classes Debug PaddingBottom component uidocklayout PaddingLeft uifilllayout PaddingRight uistacklayout PaddingTop Properties PaddingBottom : real var PaddingBottom : Real PaddingLeft : real Padding getter / setters for binding until we have Thickness binding. var PaddingLeft : Real PaddingRight : real var PaddingRight : Real PaddingTop : real var PaddingTop : Real Methods Debug : Void Calling this will set a breakpoint before the layout is done. |Name|Type|Description| |---|---|---| function Debug()"
  },
  "docs/code_reference/class_reference/uilegacytooltip.html": {
    "href": "docs/code_reference/class_reference/uilegacytooltip.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes AddText BackgroundColor ClearText BorderColor SetColorScheme Padding SetPlacement SetPriority Constructor Properties BackgroundColor : real4 var BackgroundColor : Real4 BorderColor : real4 var BorderColor : Real4 Padding : thickness var Padding : Thickness Methods AddText : Void Name Type Description p0 string p1 real4 function AddText(p0 : String, p1 : Real4) ClearText : Void Name Type Description function ClearText() SetColorScheme : Void Name Type Description p0 ToolTipColorScheme function SetColorScheme(p0 : ToolTipColorScheme) SetPlacement : Void Name Type Description p0 cameraviewport p1 rectangle function SetPlacement(p0 : CameraViewport, p1 : Rectangle) SetPriority : Void Name Type Description p0 IndicatorSide p1 IndicatorSide p2 IndicatorSide p3 IndicatorSide function SetPriority(p0 : IndicatorSide, p1 : IndicatorSide, p2 : IndicatorSide, p3 : IndicatorSide) UiLegacyToolTip : Void constructor Name Type Description function UiLegacyToolTip() UiLegacyToolTip : Void constructor Name Type Description p0 uilegacytooltip function UiLegacyToolTip(p0 : UiLegacyToolTip)"
  },
  "docs/code_reference/class_reference/uirootwidget.html": {
    "href": "docs/code_reference/class_reference/uirootwidget.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component UiWidget Methods Properties Base Classes Derived Classes Render DebugMouseInteraction uiwidget Constructor DebugSelected Update DepthSeparation DoubleClickTime FocusWidget MouseDownWidget MouseHoldTime MouseHoverTime MouseOverWidget Properties DebugMouseInteraction : boolean Whether or not to print out debug information to the console about what the mouse is currently doing. var DebugMouseInteraction : Boolean DebugSelected : cog var DebugSelected : Cog DepthSeparation : real Used for debugging. var DepthSeparation : Real DoubleClickTime : real The amount of time between clicks to send the 'DoubleClick' event. var DoubleClickTime : Real FocusWidget : uiwidget The widget that currently has focus. var FocusWidget : UiWidget MouseDownWidget : uiwidget read-only The widget that the mouse was pressed down on. var MouseDownWidget : UiWidget MouseHoldTime : real Only send the 'MouseHold' event when the mouse has been holding on a single widget for this amount of time. var MouseHoldTime : Real MouseHoverTime : real Only send the MouseHover event when the mouse has been over a single widget for this amount of time. var MouseHoverTime : Real MouseOverWidget : uiwidget read-only The widget that the mouse is currently over. var MouseOverWidget : UiWidget Methods Render : Void Renders the Ui to the given color render target. The depth render target must have stencil. |Name|Type|Description| |---|---|---| |e|rendertasksevent| | |color|rendertarget| | |depth|rendertarget| | |renderPass|materialblock| | function Render(e : RenderTasksEvent, color : RenderTarget, depth : RenderTarget, renderPass : MaterialBlock) UiRootWidget : Void constructor Name Type Description function UiRootWidget() Update : Void Updates all widgets and layouts that need to be updated. This should be called right before rendering. |Name|Type|Description| |---|---|---| function Update()"
  },
  "docs/code_reference/class_reference/uistacklayout.html": {
    "href": "docs/code_reference/class_reference/uistacklayout.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component UiWidget Methods Properties Base Classes Derived Classes Constructor Spacing uilayout StackDirection Properties Spacing : real2 The amount of pixels in between each child Widget. var Spacing : Real2 StackDirection : UiStackLayoutDirection The stack direction the child Widgets will be placed in. var StackDirection : UiStackLayoutDirection Methods UiStackLayout : Void constructor Name Type Description function UiStackLayout()"
  },
  "docs/code_reference/class_reference/uitransformupdateevent.html": {
    "href": "docs/code_reference/class_reference/uitransformupdateevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event UiWidget Methods Properties Base Classes Derived Classes RootWidget event Properties RootWidget : uirootwidget read-only var RootWidget : UiRootWidget Methods"
  },
  "docs/code_reference/class_reference/uiwidget.html": {
    "href": "docs/code_reference/class_reference/uiwidget.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component UiWidget Methods Properties Base Classes Derived Classes CastPoint AbsoluteMinSize uiwidgetcomponenthierarchy uirootwidget CastRect Active LoseFocus CanTakeFocus MarkAsNeedsUpdate ClipChildren SetLocalLocation DockMode SetWorldLocation FlexSize SizeToContents HasFocus TabJump HierarchyColor TabJumpDirection HierarchyHasFocus TakeFocus HorizontalAlignment TransformPoint InLayout TransformPointInverse Interactive Constructor LocalBottom Update LocalBottomCenter LocalBottomLeft LocalBottomRight LocalCenter LocalCenterLeft LocalCenterRight LocalColor LocalLeft LocalRectangle LocalRight LocalTop LocalTopCenter LocalTopLeft LocalTopRight LocalTranslation MarginBottom MarginLeft MarginRight MarginTop MouseOver MouseOverHierarchy OnTop Root Size SizePolicyX SizePolicyY VerticalAlignment Visible WorldBottom WorldBottomCenter WorldBottomLeft WorldBottomRight WorldCenter WorldCenterLeft WorldCenterRight WorldLeft WorldRectangle WorldRight WorldTop WorldTopCenter WorldTopLeft WorldTopRight WorldTranslation Properties AbsoluteMinSize : real2 The minimum size this widget has to be when being laid out. var AbsoluteMinSize : Real2 Active : boolean Active getter / setter. var Active : Boolean CanTakeFocus : boolean var CanTakeFocus : Boolean ClipChildren : boolean var ClipChildren : Boolean DockMode : UiDockMode Used in the dock layout. var DockMode : UiDockMode FlexSize : real2 Flex size used in conjunction with mSizePolicy (if FlexSize is set). var FlexSize : Real2 HasFocus : boolean read-only var HasFocus : Boolean HierarchyColor : real4 Color that cascades down to children. var HierarchyColor : Real4 HierarchyHasFocus : boolean read-only var HierarchyHasFocus : Boolean HorizontalAlignment : UiHorizontalAlignment Alignments used to shift widgets when in a layout. var HorizontalAlignment : UiHorizontalAlignment InLayout : boolean If true, we will be ignored when our parent updates the layout. Disable this if you want to manually place this widget. var InLayout : Boolean Interactive : boolean var Interactive : Boolean LocalBottom : real var LocalBottom : Real LocalBottomCenter : real2 var LocalBottomCenter : Real2 LocalBottomLeft : real2 var LocalBottomLeft : Real2 LocalBottomRight : real2 var LocalBottomRight : Real2 LocalCenter : real2 var LocalCenter : Real2 LocalCenterLeft : real2 var LocalCenterLeft : Real2 LocalCenterRight : real2 var LocalCenterRight : Real2 LocalColor : real4 Color that does not cascade to children. It is, however, affected by the parents color. var LocalColor : Real4 LocalLeft : real var LocalLeft : Real LocalRectangle : rectangle Returns our rect relative to parent. The origin of this Rect is bottom left. var LocalRectangle : Rectangle LocalRight : real var LocalRight : Real LocalTop : real var LocalTop : Real LocalTopCenter : real2 var LocalTopCenter : Real2 LocalTopLeft : real2 var LocalTopLeft : Real2 LocalTopRight : real2 var LocalTopRight : Real2 LocalTranslation : real2 Local Translation relative to parent. var LocalTranslation : Real2 MarginBottom : real var MarginBottom : Real MarginLeft : real var MarginLeft : Real MarginRight : real var MarginRight : Real MarginTop : real var MarginTop : Real MouseOver : boolean read-only var MouseOver : Boolean MouseOverHierarchy : boolean read-only var MouseOverHierarchy : Boolean OnTop : boolean var OnTop : Boolean Root : uirootwidget read-only Hide the ComponentHierarchy with a more specific root type. var Root : UiRootWidget Size : real2 Size getter / setter. This acts as a shortcut to the Area Component. var Size : Real2 SizePolicyX : UiSizePolicy var SizePolicyX : UiSizePolicy SizePolicyY : UiSizePolicy var SizePolicyY : UiSizePolicy VerticalAlignment : UiVerticalAlignment Alignments used to shift widgets when in a layout. var VerticalAlignment : UiVerticalAlignment Visible : boolean var Visible : Boolean WorldBottom : real var WorldBottom : Real WorldBottomCenter : real2 var WorldBottomCenter : Real2 WorldBottomLeft : real2 var WorldBottomLeft : Real2 WorldBottomRight : real2 var WorldBottomRight : Real2 WorldCenter : real2 var WorldCenter : Real2 WorldCenterLeft : real2 var WorldCenterLeft : Real2 WorldCenterRight : real2 var WorldCenterRight : Real2 WorldLeft : real var WorldLeft : Real WorldRectangle : rectangle Returns our world rect. The origin of this Rect is bottom left. var WorldRectangle : Rectangle WorldRight : real var WorldRight : Real WorldTop : real var WorldTop : Real WorldTopCenter : real2 var WorldTopCenter : Real2 WorldTopLeft : real2 var WorldTopLeft : Real2 WorldTopRight : real2 var WorldTopRight : Real2 WorldTranslation : real2 Translation in world space. var WorldTranslation : Real2 Methods CastPoint : uiwidget Finds the Widget at the given point. All Widgets bellow and including the 'ignore' widget will not be included. The ignore was added for trying to find the widget underneath a dragging window. The window is directly under the mouse, so we want to ignore it. |Name|Type|Description| |---|---|---| |worldPoint|real2| | |ignore|uiwidget| | |interactiveOnly|boolean| | function CastPoint(worldPoint : Real2, ignore : UiWidget, interactiveOnly : Boolean) : UiWidget CastRect : uiwidgetcastresultsrange Name Type Description worldRect rectangle ignore uiwidget interactiveOnly boolean function CastRect(worldRect : Rectangle, ignore : UiWidget, interactiveOnly : Boolean) : UiWidgetCastResultsRange LoseFocus : Void Gives focus back to the root widget. |Name|Type|Description| |---|---|---| function LoseFocus() MarkAsNeedsUpdate : Void Lets the Widget system know that this object has been modified and needs to be re-laid out. |Name|Type|Description| |---|---|---| function MarkAsNeedsUpdate() SetLocalLocation : Void Name Type Description location Location localTranslation real2 function SetLocalLocation(location : Location, localTranslation : Real2) SetWorldLocation : Void Name Type Description location Location worldTranslation real2 function SetWorldLocation(location : Location, worldTranslation : Real2) SizeToContents : Void Name Type Description function SizeToContents() TabJump : boolean Changes focus to the next applicable widget in the direction based on the key pressed in the given keyboard event. |Name|Type|Description| |---|---|---| |e|keyboardevent| | function TabJump(e : KeyboardEvent) : Boolean TabJumpDirection : Void Changes focus to the next applicable widget in the given direction. |Name|Type|Description| |---|---|---| |direction|UiFocusDirection| | function TabJumpDirection(direction : UiFocusDirection) TakeFocus : Void Focus control. |Name|Type|Description| |---|---|---| function TakeFocus() TransformPoint : real2 Transforms a local point into world space. |Name|Type|Description| |---|---|---| |localPosition|real2| | function TransformPoint(localPosition : Real2) : Real2 TransformPointInverse : real2 Transforms a world point into this Widget's local space. Note, this is not the same space as LocalTranslation. LocalTranslation is in this Widget's parent space. |Name|Type|Description| |---|---|---| |worldPosition|real2| | function TransformPointInverse(worldPosition : Real2) : Real2 UiWidget : Void constructor Name Type Description function UiWidget() Update : Void Handles the updating of this Widget and the child Widgets. Once called, it will update the internal TransformUpdateState. |Name|Type|Description| |---|---|---| |e|uitransformupdateevent| | function Update(e : UiTransformUpdateEvent)"
  },
  "docs/code_reference/class_reference/uiwidgetcastresultsrange.html": {
    "href": "docs/code_reference/class_reference/uiwidgetcastresultsrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "UiWidget Methods Properties Base Classes Derived Classes Empty Front PopFront Size Properties Methods Empty : boolean Range Interface. |Name|Type|Description| |---|---|---| function Empty() : Boolean Front : uiwidget Name Type Description function Front() : UiWidget PopFront : Void Name Type Description function PopFront() Size : integer Name Type Description function Size() : Integer"
  },
  "docs/code_reference/class_reference/uiwidgetcomponenthierarchy.html": {
    "href": "docs/code_reference/class_reference/uiwidgetcomponenthierarchy.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component UiWidget Methods Properties Base Classes Derived Classes GetChildren ChildCount component uiwidget IsAncestorOf LastDeepestChild IsDescendantOf LastDirectChild NextInHierarchyOrder NextSibling Parent PreviousInHierarchyOrder PreviousSibling Root Properties ChildCount : integer read-only var ChildCount : Integer LastDeepestChild : uiwidget read-only var LastDeepestChild : UiWidget LastDirectChild : uiwidget read-only var LastDirectChild : UiWidget NextInHierarchyOrder : uiwidget read-only var NextInHierarchyOrder : UiWidget NextSibling : uiwidget read-only var NextSibling : UiWidget Parent : uiwidget read-only var Parent : UiWidget PreviousInHierarchyOrder : uiwidget read-only var PreviousInHierarchyOrder : UiWidget PreviousSibling : uiwidget read-only var PreviousSibling : UiWidget Root : uiwidget read-only var Root : UiWidget Methods GetChildren : uiwidgetrange Name Type Description function GetChildren() : UiWidgetRange IsAncestorOf : boolean Name Type Description uiwidget function IsAncestorOf( : UiWidget) : Boolean IsDescendantOf : boolean Name Type Description uiwidget function IsDescendantOf( : UiWidget) : Boolean"
  },
  "docs/code_reference/class_reference/uiwidgetrange.html": {
    "href": "docs/code_reference/class_reference/uiwidgetrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "UiWidget Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : uiwidgetrange read-only var All : UiWidgetRange Current : uiwidget read-only var Current : UiWidget IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() UiWidgetRange : Void constructor Name Type Description function UiWidgetRange() UiWidgetRange : Void constructor Name Type Description p0 uiwidgetrange function UiWidgetRange(p0 : UiWidgetRange)"
  },
  "docs/code_reference/class_reference/unittestmousedropevent.html": {
    "href": "docs/code_reference/class_reference/unittestmousedropevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes Constructor UnitTestBaseMouseEvent Properties Methods UnitTestMouseDropEvent : Void constructor Name Type Description function UnitTestMouseDropEvent()"
  },
  "docs/code_reference/class_reference/unittestmouseevent.html": {
    "href": "docs/code_reference/class_reference/unittestmouseevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes Constructor UnitTestBaseMouseEvent Properties Methods UnitTestMouseEvent : Void constructor Name Type Description function UnitTestMouseEvent()"
  },
  "docs/code_reference/class_reference/universaljoint.html": {
    "href": "docs/code_reference/class_reference/universaljoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A universal joint locks positional movement of two points together as well as locking rotation about one axis. This means it is a joint that constrains four axes and leaves two free rotational axes. This joint is most useful to model something like a arm or leg that has a large range of rotational movement. Methods Properties Base Classes Derived Classes SetWorldPoints LocalAxis0OfBodyA joint Constructor LocalAxis0OfBodyB LocalAxis1OfBodyA LocalAxis1OfBodyB LocalPointA LocalPointB WorldPointA WorldPointB Properties LocalAxis0OfBodyA : real3 One of the two axes in local space of object A that the objects are allowed to rotate about. var LocalAxis0OfBodyA : Real3 LocalAxis0OfBodyB : real3 One of the two axes in local space of object B that the objects are allowed to rotate about. var LocalAxis0OfBodyB : Real3 LocalAxis1OfBodyA : real3 One of the two axes in local space of object A that the objects are allowed to rotate about. var LocalAxis1OfBodyA : Real3 LocalAxis1OfBodyB : real3 One of the two axes in local space of object B that the objects are allowed to rotate about. var LocalAxis1OfBodyB : Real3 LocalPointA : real3 The local point of the anchor on object A . var LocalPointA : Real3 LocalPointB : real3 The local point of the anchor on object B . var LocalPointB : Real3 WorldPointA : real3 The position of the anchor on object A given a position in world space var WorldPointA : Real3 WorldPointB : real3 The position of the anchor on object B given a position in world space var WorldPointB : Real3 Methods SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point|real3| | function SetWorldPoints(point : Real3) UniversalJoint : Void constructor Name Type Description function UniversalJoint()"
  },
  "docs/code_reference/class_reference/universaljointblock.html": {
    "href": "docs/code_reference/class_reference/universaljointblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods UniversalJointBlock : Void constructor Name Type Description function UniversalJointBlock()"
  },
  "docs/code_reference/class_reference/updateevent.html": {
    "href": "docs/code_reference/class_reference/updateevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Engine (NOTE) Update event Contains current time and delta time. Methods Properties Base Classes Derived Classes Dt event RealTimePassed TimePassed Properties Dt : real var Dt : Real RealTimePassed : real var RealTimePassed : Real TimePassed : real var TimePassed : Real Methods"
  },
  "docs/code_reference/class_reference/uprightjoint.html": {
    "href": "docs/code_reference/class_reference/uprightjoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A joint to keep an object upright. Locks two axes of the objects together but allows free rotation on the plane defined by that axis. This constraint is useful for keeping any object upright. This could also be used to auto correct an object slowly by lowering the max impulse value of the constraint. Methods Properties Base Classes Derived Classes Constructor LocalAxisA joint LocalAxisB WorldAxis Properties LocalAxisA : real3 The locally defined axis on object A . var LocalAxisA : Real3 LocalAxisB : real3 The locally defined axis on object B . var LocalAxisB : Real3 WorldAxis : real3 The axis in world space that is being rotated about . var WorldAxis : Real3 Methods UprightJoint : Void constructor Name Type Description function UprightJoint()"
  },
  "docs/code_reference/class_reference/uprightjointblock.html": {
    "href": "docs/code_reference/class_reference/uprightjointblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods UprightJointBlock : Void constructor Name Type Description function UprightJointBlock()"
  },
  "docs/code_reference/class_reference/userconfig.html": {
    "href": "docs/code_reference/class_reference/userconfig.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) Configuration component that Contains user info. Methods Properties Base Classes Derived Classes Constructor UserEmail component UserName Properties UserEmail : string var UserEmail : String UserName : string var UserName : String Methods UserConfig : Void constructor Name Type Description function UserConfig()"
  },
  "docs/code_reference/class_reference/valueeditorfactory.html": {
    "href": "docs/code_reference/class_reference/valueeditorfactory.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes Object Properties Methods"
  },
  "docs/code_reference/class_reference/valueevent.html": {
    "href": "docs/code_reference/class_reference/valueevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Editor Methods Properties Base Classes Derived Classes event Properties Methods"
  },
  "docs/code_reference/class_reference/vertexbuffer.html": {
    "href": "docs/code_reference/class_reference/vertexbuffer.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics (NOTE) Vertex data and attribute semantics for defining data that can be uploaded to the gpu. Methods Properties Base Classes Derived Classes AddAttribute VertexCount safeid32 AddByte AddReal AddShort ClearAttributes ClearData GetAttributes GetElementCount GetElementType GetVertexData IsValidVertexData Properties VertexCount : integer read-only Returns the number of vertices that have a complete set of data stored. var VertexCount : Integer Methods AddAttribute : Void Adds an attribute to the definition of the vertices that are to be stored. Add the attributes in the order that they should be stored in memory on a vertex. |Name|Type|Description| |---|---|---| |semantic|VertexSemantic| | |elementType|VertexElementType| | |elementCount|integer| | function AddAttribute(semantic : VertexSemantic, elementType : VertexElementType, elementCount : Integer) AddByte : Void Adds data as bytes to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| |value|integer| | function AddByte(value : Integer) AddByte : Void Adds data as bytes to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| ||integer2| | function AddByte( : Integer2) AddByte : Void Adds data as bytes to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| ||integer3| | function AddByte( : Integer3) AddByte : Void Adds data as bytes to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| ||integer4| | function AddByte( : Integer4) AddReal : Void Adds data as floats to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| |value|real| | function AddReal(value : Real) AddReal : Void Adds data as floats to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| |value|real2| | function AddReal(value : Real2) AddReal : Void Adds data as floats to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| |value|real3| | function AddReal(value : Real3) AddReal : Void Adds data as floats to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| |value|real4| | function AddReal(value : Real4) AddShort : Void Adds data as shorts to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| |value|integer| | function AddShort(value : Integer) AddShort : Void Adds data as shorts to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| ||integer2| | function AddShort( : Integer2) AddShort : Void Adds data as shorts to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| ||integer3| | function AddShort( : Integer3) AddShort : Void Adds data as shorts to the buffer, data is expected in the order of the attributes, one vertex after another. |Name|Type|Description| |---|---|---| ||integer4| | function AddShort( : Integer4) ClearAttributes : Void Clears all added attributes from the vertex definition so they can be redefined. |Name|Type|Description| |---|---|---| function ClearAttributes() ClearData : Void Clears all added vertex data so new data can be added. |Name|Type|Description| |---|---|---| function ClearData() GetAttributes : vertexsemanticrange Returns a range of attribute semantics in the order that they were added. |Name|Type|Description| |---|---|---| function GetAttributes() : VertexSemanticRange GetElementCount : integer Returns the number of elements stored for the given attribute, throws exception if the attribute is not in the vertex definition. |Name|Type|Description| |---|---|---| |semantic|VertexSemantic| | function GetElementCount(semantic : VertexSemantic) : Integer GetElementType : VertexElementType Returns the type that is used to store the given attribute, throws exception if the attribute is not in the vertex definition. |Name|Type|Description| |---|---|---| |semantic|VertexSemantic| | function GetElementType(semantic : VertexSemantic) : VertexElementType GetVertexData : real4 Gets the data of an attribute of a vertex, returns values of 0 if read is invalid. |Name|Type|Description| |---|---|---| |vertexIndex|integer| | |semantic|VertexSemantic| | function GetVertexData(vertexIndex : Integer, semantic : VertexSemantic) : Real4 GetVertexData : real4 Gets the data of an attribute of a vertex, throws exception if attribute info doesn't match or read is invalid. |Name|Type|Description| |---|---|---| |vertexIndex|integer| | |semantic|VertexSemantic| | |type|VertexElementType| | |count|integer| | function GetVertexData(vertexIndex : Integer, semantic : VertexSemantic, type : VertexElementType, count : Integer) : Real4 IsValidVertexData : boolean Returns false if GetVertexData() would throw an exception with the same arguments. |Name|Type|Description| |---|---|---| |vertexIndex|integer| | |semantic|VertexSemantic| | |type|VertexElementType| | |count|integer| | function IsValidVertexData(vertexIndex : Integer, semantic : VertexSemantic, type : VertexElementType, count : Integer) : Boolean"
  },
  "docs/code_reference/class_reference/vertexsemanticrange.html": {
    "href": "docs/code_reference/class_reference/vertexsemanticrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Graphics Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : vertexsemanticrange read-only var All : VertexSemanticRange Current : VertexSemantic read-only var Current : VertexSemantic IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() VertexSemanticRange : Void constructor Name Type Description function VertexSemanticRange() VertexSemanticRange : Void constructor Name Type Description p0 vertexsemanticrange function VertexSemanticRange(p0 : VertexSemanticRange)"
  },
  "docs/code_reference/class_reference/viewport.html": {
    "href": "docs/code_reference/class_reference/viewport.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite reactiveviewport Properties Methods"
  },
  "docs/code_reference/class_reference/viewportmouseevent.html": {
    "href": "docs/code_reference/class_reference/viewportmouseevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Gameplay (NOTE) All mouse events that are forwarded to reactive components or the space use this event to add extra data. Methods Properties Base Classes Derived Classes ToWorldPlane CameraViewport mouseevent manipulatortoolevent ToWorldViewPlane HitDistance ToWorldZPlane HitNormal HitObject HitPosition HitUv RayDirection RayStart WorldRay Properties CameraViewport : cameraviewport read-only Camera viewport that generated this event. var CameraViewport : CameraViewport HitDistance : real The distance away the hit point is. Used with Reactive components. var HitDistance : Real HitNormal : real3 The normal at the intersection point with an object. Used with Reactive components. var HitNormal : Real3 HitObject : cog read-only Object hit in ray cast. var HitObject : Cog HitPosition : real3 The intersection point with an object. Used with Reactive components. var HitPosition : Real3 HitUv : real2 The uv texture coordinate at the intersection point, if applicable. Used with Reactive components. var HitUv : Real2 RayDirection : real3 Mouse Ray Direction. var RayDirection : Real3 RayStart : real3 Mouse Ray start. var RayStart : Real3 WorldRay : ray The world mouse ray. var WorldRay : Ray Methods ToWorldPlane : real3 The world mouse position on any arbitrary plane. |Name|Type|Description| |---|---|---| |worldPlaneNormal|real3| | |worldPlanePosition|real3| | function ToWorldPlane(worldPlaneNormal : Real3, worldPlanePosition : Real3) : Real3 ToWorldViewPlane : real3 The world mouse position on the view plane at view depth. |Name|Type|Description| |---|---|---| |viewDepth|real| | function ToWorldViewPlane(viewDepth : Real) : Real3 ToWorldZPlane : real3 The world mouse position on the z plane at depth. |Name|Type|Description| |---|---|---| |worldDepth|real| | function ToWorldZPlane(worldDepth : Real) : Real3"
  },
  "docs/code_reference/class_reference/viewporttextwidget.html": {
    "href": "docs/code_reference/class_reference/viewporttextwidget.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes text Properties Methods"
  },
  "docs/code_reference/class_reference/volumenode.html": {
    "href": "docs/code_reference/class_reference/volumenode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound (NOTE) Changes the volume of audio generated by its input SoundNodes. Methods Properties Base Classes Derived Classes InterpolateDecibels Decibels soundnode InterpolateVolume Volume Properties Decibels : real The volume adjustment, in decibels, that will be applied to the node's input. A value of 0 does not affect the sound; 6 will double the sound's volume, -6 will halve it, and -100 is effectively the same as a Volume of 0. var Decibels : Real Volume : real The volume adjustment that will be applied to the node's input. A value of 1 does not affect the sound; 2 will double the sound's volume, 0.5 will halve it, and 0 will make the sound inaudible. var Volume : Real Methods InterpolateDecibels : Void Interpolates the Decibels property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |volumeDB|real| | |interpolationTime|real| | function InterpolateDecibels(volumeDB : Real, interpolationTime : Real) InterpolateVolume : Void Interpolates the Volume property from its current value to the value passed in as the first parameter, over the number of seconds passed in as the second parameter. |Name|Type|Description| |---|---|---| |volume|real| | |interpolationTime|real| | function InterpolateVolume(volume : Real, interpolationTime : Real)"
  },
  "docs/code_reference/class_reference/vortexeffect.html": {
    "href": "docs/code_reference/class_reference/vortexeffect.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Applies a force about an axis at the object's center. This will apply two forces to a body: One pulls the object towards the center of the vortex and the other applies a tangential force. Useful to model a vortex. This only expects to be used as a Region effect. Methods Properties Base Classes Derived Classes Constructor EndCondition physicseffect InterpolationType InwardStrengthAtMaxDistance InwardStrengthAtMinDistance LocalAxis MaxDistance MinDistance TwistStrengthAtMaxDistance TwistStrengthAtMinDistance VortexAxis WorldVortexAxis Properties EndCondition : PhysicsEffectEndCondition How the interpolation should be handled at MaxDistance. ClampToMax will clamp to the max strength values. NoEffect will ignore the effect. ContinueFalloff will continue the interpolation (this may go negative). var EndCondition : PhysicsEffectEndCondition InterpolationType : PhysicsEffectInterpolationType The type of interpolation used (e.g. Linear, Quadratic) for the forces. var InterpolationType : PhysicsEffectInterpolationType InwardStrengthAtMaxDistance : real The inward strength of the vortex at the max distance. var InwardStrengthAtMaxDistance : Real InwardStrengthAtMinDistance : real The inward strength of the vortex at the min distance. var InwardStrengthAtMinDistance : Real LocalAxis : boolean Determines if the vortex axis is in world or local space. var LocalAxis : Boolean MaxDistance : real The max distance that attenuation will happen at. If an object is between min and max distance, the value will be attenuated. If the object is further away, the effect strength will be determined by EndCondition. var MaxDistance : Real MinDistance : real The first distance at which attenuation will start. If an object is under the min distance, the min strength values will be used. If an object is in between min and max, then it will attenuate. var MinDistance : Real TwistStrengthAtMaxDistance : real The perpendicular strength (twist) of the vortex at max distance. var TwistStrengthAtMaxDistance : Real TwistStrengthAtMinDistance : real The perpendicular strength (twist) of the vortex at min distance. var TwistStrengthAtMinDistance : Real VortexAxis : real3 The axis the vortex spins about. var VortexAxis : Real3 WorldVortexAxis : real3 read-only The axis the vortex spins about in world space. var WorldVortexAxis : Real3 Methods VortexEffect : Void constructor Name Type Description function VortexEffect()"
  },
  "docs/code_reference/class_reference/webbrowser.html": {
    "href": "docs/code_reference/class_reference/webbrowser.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes Create BackgroundColor referencecountedeventobject ExecuteScript CanGoBackward ExecuteScriptFromLocation CanGoForward GoBackward Focus GoForward IsLoading Reload ScrollSpeed SimulateKey Size SimulateMouseClick Status SimulateMouseDoubleClick Texture SimulateMouseMove Title SimulateMouseScroll Transparent SimulateTextTyped Url Visible Properties BackgroundColor : real4 var BackgroundColor : Real4 CanGoBackward : boolean read-only var CanGoBackward : Boolean CanGoForward : boolean read-only var CanGoForward : Boolean Focus : boolean var Focus : Boolean IsLoading : boolean read-only var IsLoading : Boolean ScrollSpeed : real2 var ScrollSpeed : Real2 Size : integer2 var Size : Integer2 Status : string read-only var Status : String Texture : texture read-only var Texture : Texture Title : string read-only var Title : String Transparent : boolean var Transparent : Boolean Url : string var Url : String Visible : boolean var Visible : Boolean Methods Create : webbrowser static Name Type Description function Create() : WebBrowser Create : webbrowser static Name Type Description p0 webbrowsersetup function Create(p0 : WebBrowserSetup) : WebBrowser ExecuteScript : Void Name Type Description p0 string function ExecuteScript(p0 : String) ExecuteScriptFromLocation : Void Name Type Description p0 string p1 string p2 integer function ExecuteScriptFromLocation(p0 : String, p1 : String, p2 : Integer) GoBackward : Void Name Type Description function GoBackward() GoForward : Void Name Type Description function GoForward() Reload : Void Name Type Description function Reload() Reload : Void Name Type Description p0 boolean function Reload(p0 : Boolean) SimulateKey : Void Name Type Description p0 integer p1 boolean p2 WebBrowserModifiers function SimulateKey(p0 : Integer, p1 : Boolean, p2 : WebBrowserModifiers) SimulateMouseClick : Void Name Type Description p0 integer2 p1 MouseButtons p2 boolean p3 WebBrowserModifiers function SimulateMouseClick(p0 : Integer2, p1 : MouseButtons, p2 : Boolean, p3 : WebBrowserModifiers) SimulateMouseDoubleClick : Void Name Type Description p0 integer2 p1 MouseButtons p2 WebBrowserModifiers function SimulateMouseDoubleClick(p0 : Integer2, p1 : MouseButtons, p2 : WebBrowserModifiers) SimulateMouseMove : Void Name Type Description p0 integer2 p1 WebBrowserModifiers function SimulateMouseMove(p0 : Integer2, p1 : WebBrowserModifiers) SimulateMouseScroll : Void Name Type Description p0 integer2 p1 real2 p2 WebBrowserModifiers function SimulateMouseScroll(p0 : Integer2, p1 : Real2, p2 : WebBrowserModifiers) SimulateTextTyped : Void Name Type Description p0 integer p1 WebBrowserModifiers function SimulateTextTyped(p0 : Integer, p1 : WebBrowserModifiers)"
  },
  "docs/code_reference/class_reference/webbrowserconsoleevent.html": {
    "href": "docs/code_reference/class_reference/webbrowserconsoleevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Gameplay Methods Properties Base Classes Derived Classes Line webbrowserevent Message Source Properties Line : integer var Line : Integer Message : string var Message : String Source : string var Source : String Methods"
  },
  "docs/code_reference/class_reference/webbrowsercursorevent.html": {
    "href": "docs/code_reference/class_reference/webbrowsercursorevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Gameplay Methods Properties Base Classes Derived Classes Cursor webbrowserevent Properties Cursor : Cursor var Cursor : Cursor Methods"
  },
  "docs/code_reference/class_reference/webbrowserdownloadevent.html": {
    "href": "docs/code_reference/class_reference/webbrowserdownloadevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Gameplay Methods Properties Base Classes Derived Classes Cancel webbrowserevent ContentDisposition CurrentSpeed FilePath Id IsComplete IsInProgress MimeType OriginalUrl ReceivedBytes SuggestedFileName TotalBytes Url Properties Cancel : boolean var Cancel : Boolean ContentDisposition : string var ContentDisposition : String CurrentSpeed : doubleinteger var CurrentSpeed : DoubleInteger FilePath : string var FilePath : String Id : integer var Id : Integer IsComplete : boolean var IsComplete : Boolean IsInProgress : boolean var IsInProgress : Boolean MimeType : string var MimeType : String OriginalUrl : string var OriginalUrl : String ReceivedBytes : doubleinteger var ReceivedBytes : DoubleInteger SuggestedFileName : string var SuggestedFileName : String TotalBytes : doubleinteger var TotalBytes : DoubleInteger Url : string var Url : String Methods"
  },
  "docs/code_reference/class_reference/webbrowserevent.html": {
    "href": "docs/code_reference/class_reference/webbrowserevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Gameplay Methods Properties Base Classes Derived Classes WebBrowser event webbrowserconsoleevent webbrowsercursorevent webbrowserdownloadevent webbrowserpointqueryevent webbrowserpopupcreateevent webbrowsertextevent webbrowserurlevent Properties WebBrowser : webbrowser read-only var WebBrowser : WebBrowser Methods"
  },
  "docs/code_reference/class_reference/webbrowsermanager.html": {
    "href": "docs/code_reference/class_reference/webbrowsermanager.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/webbrowserpointqueryevent.html": {
    "href": "docs/code_reference/class_reference/webbrowserpointqueryevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Gameplay Methods Properties Base Classes Derived Classes ScreenPixelPosition webbrowserevent ViewPixelPosition Properties ScreenPixelPosition : integer2 var ScreenPixelPosition : Integer2 ViewPixelPosition : integer2 var ViewPixelPosition : Integer2 Methods"
  },
  "docs/code_reference/class_reference/webbrowserpopupcreateevent.html": {
    "href": "docs/code_reference/class_reference/webbrowserpopupcreateevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Gameplay Methods Properties Base Classes Derived Classes Name webbrowserevent Url Properties Name : string var Name : String Url : string var Url : String Methods"
  },
  "docs/code_reference/class_reference/webbrowsersetup.html": {
    "href": "docs/code_reference/class_reference/webbrowsersetup.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes Constructor BackgroundColor Object ScrollSpeed Size Transparent Url Properties BackgroundColor : real4 var BackgroundColor : Real4 ScrollSpeed : real2 var ScrollSpeed : Real2 Size : integer2 var Size : Integer2 Transparent : boolean var Transparent : Boolean Url : string var Url : String Methods WebBrowserSetup : Void constructor Name Type Description function WebBrowserSetup()"
  },
  "docs/code_reference/class_reference/webbrowsertextevent.html": {
    "href": "docs/code_reference/class_reference/webbrowsertextevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Gameplay Methods Properties Base Classes Derived Classes Text webbrowserevent Properties Text : string var Text : String Methods"
  },
  "docs/code_reference/class_reference/webbrowserurlevent.html": {
    "href": "docs/code_reference/class_reference/webbrowserurlevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Gameplay Methods Properties Base Classes Derived Classes Handled webbrowserevent Url Properties Handled : boolean var Handled : Boolean Url : string var Url : String Methods"
  },
  "docs/code_reference/class_reference/webbrowserwidget.html": {
    "href": "docs/code_reference/class_reference/webbrowserwidget.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/webrequester.html": {
    "href": "docs/code_reference/class_reference/webrequester.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Networking (NOTE) A component we can use to facilitate web requests. Methods Properties Base Classes Derived Classes Clear Url component Run SetHeader SetPostData Constructor Properties Url : string Get and set the url that we make requests to. var Url : String Methods Clear : Void Clear headers and post data. |Name|Type|Description| |---|---|---| function Clear() Run : Void Run the web request (we should get data back in a WebResponse event). |Name|Type|Description| |---|---|---| function Run() SetHeader : Void Add a header to the web request . |Name|Type|Description| |---|---|---| |name|string| | |data|string| | function SetHeader(name : String, data : String) SetPostData : Void Add Post data to the request, this will also change the request to a post request. |Name|Type|Description| |---|---|---| |data|string| | function SetPostData(data : String) WebRequester : Void constructor Name Type Description function WebRequester()"
  },
  "docs/code_reference/class_reference/webresponseevent.html": {
    "href": "docs/code_reference/class_reference/webresponseevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Networking Methods Properties Base Classes Derived Classes Data event ResponseCode Properties Data : string var Data : String ResponseCode : integer var ResponseCode : Integer Methods"
  },
  "docs/code_reference/class_reference/weightedcomposite.html": {
    "href": "docs/code_reference/class_reference/weightedcomposite.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes composite item itemgroup Properties Methods"
  },
  "docs/code_reference/class_reference/weightpaintertool.html": {
    "href": "docs/code_reference/class_reference/weightpaintertool.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Editor Methods Properties Base Classes Derived Classes FeatherRadius heightmapsubtool Radius Strength TextureChannel Properties FeatherRadius : real var FeatherRadius : Real Radius : real var Radius : Real Strength : real var Strength : Real TextureChannel : HeightTextureSelect var TextureChannel : HeightTextureSelect Methods"
  },
  "docs/code_reference/class_reference/weldjoint.html": {
    "href": "docs/code_reference/class_reference/weldjoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A weld joint is used to lock the position and orientation of two objects together. Welds should generally not be used to make two objects rigid as they are computationally more expensive and less rigid than using composites. The primary uses for welds are for quick connections or connections that are desired to not be fully rigid. Also, while it can be done with composites too, welds can be used to model object breaking beyond some max force. Limits, motors and springs should most likely not be used on this. Add on definitions: Limit: A limit will provide a min/max translation on the x, y, and z axes. Motor: A motor will attempt to drive the rotation on the x, y, and z axes. Spring: A spring will make the x, y, and z axis springy. Methods Properties Base Classes Derived Classes SetWorldPoints LocalBasisA joint Constructor LocalBasisB LocalPointA LocalPointB WorldPointA WorldPointB Properties LocalBasisA : quaternion The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . var LocalBasisA : Quaternion LocalBasisB : quaternion The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . var LocalBasisB : Quaternion LocalPointA : real3 The local point of the anchor on object A . var LocalPointA : Real3 LocalPointB : real3 The local point of the anchor on object B . var LocalPointB : Real3 WorldPointA : real3 The position of the anchor on object A given a position in world space var WorldPointA : Real3 WorldPointB : real3 The position of the anchor on object B given a position in world space var WorldPointB : Real3 Methods SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point|real3| | function SetWorldPoints(point : Real3) WeldJoint : Void constructor Name Type Description function WeldJoint()"
  },
  "docs/code_reference/class_reference/weldjointblock.html": {
    "href": "docs/code_reference/class_reference/weldjointblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods WeldJointBlock : Void constructor Name Type Description function WeldJointBlock()"
  },
  "docs/code_reference/class_reference/wheeljoint.html": {
    "href": "docs/code_reference/class_reference/wheeljoint.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A joint that models a wheel with shocks. A wheel aligns the two local axes together and allows free rotation about this axis. The specified shock axis is turned into a soft constraint to model the shocks. Note: ObjectA should be the root object as the shock axis rotates with this object. If ObjectA is the wheel, then the shock axis will rotate with the wheel, causing the shocks to not stay aligned. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the shock axis springy. A spring is attached by default to a wheel. Methods Properties Base Classes Derived Classes SetWorldPoints LocalAxisA joint Constructor LocalAxisB LocalBasisA LocalBasisB LocalPointA LocalPointB ShockAxis WorldAxis WorldPointA WorldPointB WorldShockAxis Properties LocalAxisA : real3 The locally defined axis on object A . var LocalAxisA : Real3 LocalAxisB : real3 The locally defined axis on object B . var LocalAxisB : Real3 LocalBasisA : quaternion The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . var LocalBasisA : Quaternion LocalBasisB : quaternion The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . var LocalBasisB : Quaternion LocalPointA : real3 The local point of the anchor on object A . var LocalPointA : Real3 LocalPointB : real3 The local point of the anchor on object B . var LocalPointB : Real3 ShockAxis : real3 The shock axis in the local space of body A. var ShockAxis : Real3 WorldAxis : real3 The axis in world space that is being rotated about . var WorldAxis : Real3 WorldPointA : real3 The position of the anchor on object A given a position in world space var WorldPointA : Real3 WorldPointB : real3 The position of the anchor on object B given a position in world space var WorldPointB : Real3 WorldShockAxis : real3 The shock axis after it has been translated into world space. var WorldShockAxis : Real3 Methods SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point|real3| | function SetWorldPoints(point : Real3) WheelJoint : Void constructor Name Type Description function WheelJoint()"
  },
  "docs/code_reference/class_reference/wheeljoint2d.html": {
    "href": "docs/code_reference/class_reference/wheeljoint2d.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) A joint that models a wheel with shocks. This is the 2d version of WheelJoint. This joint is used in 2d mode for increased performance and stability. The motor axis is automatically set to the z axis, as that is the only axis objects can rotate about. Also, the translation on the z axis is ignored so that objects can be arbitrarily far apart. Add on definitions: Limit: A limit will provide a min/max angle on the motor axis. Motor: A motor will turn the objects about the motor axis. Spring: A spring will make the shock axis springy. A spring is attached by default to a wheel. Methods Properties Base Classes Derived Classes SetWorldPoints LocalBasisA joint Constructor LocalBasisB LocalPointA LocalPointB ShockAxis WorldPointA WorldPointB WorldShockAxis Properties LocalBasisA : quaternion The local space reference frame of object A . This frame is transformed to world space and then aligned with object B s frame . var LocalBasisA : Quaternion LocalBasisB : quaternion The local space reference frame of object B . This frame is transformed to world space and then aligned with object A s frame . var LocalBasisB : Quaternion LocalPointA : real3 The local point of the anchor on object A . var LocalPointA : Real3 LocalPointB : real3 The local point of the anchor on object B . var LocalPointB : Real3 ShockAxis : real3 The shock axis of the wheel in object A's local space. var ShockAxis : Real3 WorldPointA : real3 The position of the anchor on object A given a position in world space var WorldPointA : Real3 WorldPointB : real3 The position of the anchor on object B given a position in world space var WorldPointB : Real3 WorldShockAxis : real3 The shock axis of the wheel in world space. var WorldShockAxis : Real3 Methods SetWorldPoints : Void Sets the position of the anchor on object A and B given a position in world space |Name|Type|Description| |---|---|---| |point|real3| | function SetWorldPoints(point : Real3) WheelJoint2d : Void constructor Name Type Description function WheelJoint2d()"
  },
  "docs/code_reference/class_reference/wheeljoint2dblock.html": {
    "href": "docs/code_reference/class_reference/wheeljoint2dblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods WheelJoint2dBlock : Void constructor Name Type Description function WheelJoint2dBlock()"
  },
  "docs/code_reference/class_reference/wheeljointblock.html": {
    "href": "docs/code_reference/class_reference/wheeljointblock.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Physics Methods Properties Base Classes Derived Classes Constructor constraintconfigblock Properties Methods WheelJointBlock : Void constructor Name Type Description function WheelJointBlock()"
  },
  "docs/code_reference/class_reference/widget.html": {
    "href": "docs/code_reference/class_reference/widget.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes eventobject composite curvedraggable edittext imagewidget mousemanipulation multiconvexmeshpoint spacer text textureview treeview Properties Methods"
  },
  "docs/code_reference/class_reference/widgetmanager.html": {
    "href": "docs/code_reference/class_reference/widgetmanager.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes eventobject Properties Methods"
  },
  "docs/code_reference/class_reference/windeffect.html": {
    "href": "docs/code_reference/class_reference/windeffect.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Physics (NOTE) Applies a wind force in a given direction. The wind force is calculated from the squared wind speed and is scaled by the approximate surface area of the object in the direction of the force. Methods Properties Base Classes Derived Classes Constructor LocalSpaceDirection physicseffect WindDirection WindSpeed WorldWindDirection Properties LocalSpaceDirection : boolean Determines if the wind's direction is a local or world-space vector. var LocalSpaceDirection : Boolean WindDirection : real3 The direction that the wind is blowing. var WindDirection : Real3 WindSpeed : real The speed that the wind is blowing. var WindSpeed : Real WorldWindDirection : real3 read-only The direction of the wind in world space. var WorldWindDirection : Real3 Methods WindEffect : Void constructor Name Type Description function WindEffect()"
  },
  "docs/code_reference/class_reference/window.html": {
    "href": "docs/code_reference/class_reference/window.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Widget Methods Properties Base Classes Derived Classes composite Properties Methods"
  },
  "docs/code_reference/class_reference/windowlaunchsettings.html": {
    "href": "docs/code_reference/class_reference/windowlaunchsettings.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Component Engine (NOTE) Settings for how the application window should be sized when launched. Methods Properties Base Classes Derived Classes Constructor LaunchFullscreen component WindowedResolution Properties LaunchFullscreen : boolean If a pre-launch popup should be used to determine how application window is sized. var LaunchFullscreen : Boolean WindowedResolution : integer2 Resolution of application when launched in windowed mode. var WindowedResolution : Integer2 Methods WindowLaunchSettings : Void constructor Name Type Description function WindowLaunchSettings()"
  },
  "docs/code_reference/class_reference/windowsoswindow.html": {
    "href": "docs/code_reference/class_reference/windowsoswindow.html",
    "title": "Properties | ZilchEngine",
    "keywords": "WindowsShellSystem Methods Properties Base Classes Derived Classes Constructor oswindow Properties Methods WindowsOsWindow : Void constructor Name Type Description function WindowsOsWindow()"
  },
  "docs/code_reference/class_reference/windowtabevent.html": {
    "href": "docs/code_reference/class_reference/windowtabevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Event Widget Methods Properties Base Classes Derived Classes handleableevent Properties Methods"
  },
  "docs/code_reference/class_reference/zilch.html": {
    "href": "docs/code_reference/class_reference/zilch.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Gameplay (NOTE) Global functionality exposed to Nada script. Bound as \"Zilch\" to script (e.g. Zilch.Keyboard) ZilchStatic was used to avoid the conflict with namespace Zilch). Methods Properties Base Classes Derived Classes Connect Audio Disconnect Editor DisconnectAll Engine Environment Gamepads Joysticks Keyboard Mouse ObjectStore OsShell ResourceSystem Properties Audio : audio read-only static var Audio : Audio Editor : editor read-only static var Editor : Editor Engine : engine read-only static var Engine : Engine Environment : environment read-only static var Environment : Environment Gamepads : gamepads read-only static var Gamepads : Gamepads Joysticks : joysticks read-only static var Joysticks : Joysticks Keyboard : keyboard read-only static var Keyboard : Keyboard Mouse : mouse read-only static var Mouse : Mouse ObjectStore : objectstore read-only static var ObjectStore : ObjectStore OsShell : osshell read-only static var OsShell : OsShell ResourceSystem : resourcesystem read-only static var ResourceSystem : ResourceSystem Methods Connect : Void static Connection invokes the given delegate when sender dispatches the specified event. |Name|Type|Description| |---|---|---| |sender|Object| | |eventId|string| | |receiverDelegate|delegate()| | function Connect(sender : Object, eventId : String, receiverDelegate : delegate()) Disconnect : Void static Removes specified event connection, if connection delegate was a component method then receiver object is just the component. |Name|Type|Description| |---|---|---| |sender|Object| | |eventId|string| | |receiver|Object| | function Disconnect(sender : Object, eventId : String, receiver : Object) DisconnectAll : Void static Name Type Description Object Object function DisconnectAll( : Object, : Object)"
  },
  "docs/code_reference/class_reference/zilchmetaarrayanimationclips.html": {
    "href": "docs/code_reference/class_reference/zilchmetaarrayanimationclips.html",
    "title": "Properties | ZilchEngine",
    "keywords": "ContentMeta Methods Properties Base Classes Derived Classes metaarray Properties Methods"
  },
  "docs/code_reference/class_reference/zilchmetaarraycontentlibraryreferencearray.html": {
    "href": "docs/code_reference/class_reference/zilchmetaarraycontentlibraryreferencearray.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Engine Methods Properties Base Classes Derived Classes metaarray Properties Methods"
  },
  "docs/code_reference/class_reference/zilchmetaarraynetpropertyinfos.html": {
    "href": "docs/code_reference/class_reference/zilchmetaarraynetpropertyinfos.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Networking Methods Properties Base Classes Derived Classes metaarray Properties Methods"
  },
  "docs/code_reference/class_reference/zilchmetaarrayrevisions.html": {
    "href": "docs/code_reference/class_reference/zilchmetaarrayrevisions.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Meta Methods Properties Base Classes Derived Classes metaarray Properties Methods"
  },
  "docs/code_reference/class_reference/zilchmetaarraysounds.html": {
    "href": "docs/code_reference/class_reference/zilchmetaarraysounds.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes metaarray Properties Methods"
  },
  "docs/code_reference/class_reference/zilchmetaarraysoundtags.html": {
    "href": "docs/code_reference/class_reference/zilchmetaarraysoundtags.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Sound Methods Properties Base Classes Derived Classes metaarray Properties Methods"
  },
  "docs/code_reference/classes_by_tag_reference.html": {
    "href": "docs/code_reference/classes_by_tag_reference.html",
    "title": "Component | ZilchEngine",
    "keywords": "Component actionspace animationgraph archetyped area arrowgizmo audiosettings basesprite basicdirectioneffect basicpointeffect bone boxcollider boxparticleemitter buoyancyeffect camera cameraviewport capsulecollider collider component contentconfig convexmeshcollider creationtool customcollisioneventtracker customjoint customphysicseffect cylindercollider debuggraphical debuggraphicalprimitive debuggraphicaltext debuggraphicalthickline debugsettings defaultgamesetup developerconfig drageffect dynamicmotor editorcameracontroller editorconfig editorflags editorsettings ellipsoidcollider fixedanglejoint floweffect forceeffect frameratesettings gearjoint gizmo gizmocreator gizmodrag gizmospace graphical graphicsspace gravityeffect griddraw heightmap heightmapcollider heightmapmodel heightmaptool hierarchy hierarchyspline ignorespaceeffects joint jointconfigoverride jointdebugdrawconfig jointlimit jointmotor jointspring jointtool linearaxisjoint linearparticleanimator linkid mainconfig manipulatorjoint manipulatortool massoverride meshcollider meshparticleemitter model mousecapture multiconvexmeshcollider multisprite named netobject netpeer netspace netuser objectconnectingtool objectlink objectlinkanchor objectrotategizmo objectrotatetool objectscalegizmo objectscaletool objecttransformgizmo objecttransformtool objecttranslategizmo objecttranslatetool orientation orientationbasisgizmo parentingtool particleanimator particleattractor particlecollisionheightmap particlecollisionplane particlecoloranimator particleemitter particleemittershared particlesystem particletwister particlewander phygunjoint physicscar physicscarwheel physicscarwheelbasisgizmo physicseffect physicsspace pointforceeffect pointgravityeffect positionjoint prismaticjoint prismaticjoint2d projectdescription projectsettings pulleyjoint randomcontext reactive reactivespace recentprojects region relativevelocityjoint revolutebasisgizmo revolutejoint revolutejoint2d rigidbody ringgizmo rotategizmo rotationbasisgizmo scalegizmo selectionicon selecttool sharedcontent simpleanimation simplegizmobase simplesocket simplesound skeleton skinnedmodel soundemitter soundlistener soundspace spaceobjects spherecollider sphericalparticleemitter splineparticleanimator splineparticleemitter sprite spriteparticlesystem spritetext squaregizmo stickjoint texteditorconfig thrusteffect tileeditor2d tilemap timespace torqueeffect transform translategizmo uidocklayout uifilllayout uilayout uirootwidget uistacklayout uiwidget uiwidgetcomponenthierarchy universaljoint uprightjoint userconfig vortexeffect webrequester weldjoint wheeljoint wheeljoint2d windeffect windowlaunchsettings nadacomponent nadapluginconfig ContentMeta animationbuilder animationclip animationclips audiocontent audiooptions basetextbuilder binarybuilder binarycontent buildercomponent conflictoptions contentcomponent contentcomposition contentcopyright contenteditoroptions contenthistory contentitem contentitemmetaoperations contentlibrary contentnotes contentsystem contentsystemevent contenttags databuilder datacontent fontbuilder fontcontent generatedarchetype geometrycontent geometryimport geometryoptions geometryresourceentry imagecontent imageoptions importoptions keyframeevent meshbuilder physicsmeshbuilder resourcetemplate richanimation richanimationbuilder showgammacorrectionfilter shownormalgenerationoptionsfilter showpremultipliedalphafilter soundbuilder spritedata spritesourcebuilder textbuilder textcontent texturebuilder texturecontent textureinfo trackevent tracknode zerometaarrayanimationclips nadafragmentbuilder nadapluginbuilder nadascriptbuilder Core anyhandle anytype [array_type ](nada_base_types/array_type .md) asciiencoding boolean boolean2 boolean2x2 boolean2x3 boolean2x4 boolean3 boolean3x2 boolean3x3 boolean3x4 boolean4 boolean4x2 boolean4x3 boolean4x4 boundtype buildevent byte color colors console consoleevent debuggerevent delegateparameter delegateparameterrange delegatetype doubleinteger doublereal errorevent errortype eventdata eventhandler events exception exceptionevent executablestate fatalerrorevent field fieldrange filepath filestream function functionrange gettersetter gettersetterrange [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /]] [hashmapkeyrange_key ](nada_base_types/hashmapkeyrange_key .md) [[zilch_engine_documentation/code_reference/nada_base_types/hashmaprange_key, value /]] [hashmapvaluerange_value ](nada_base_types/hashmapvaluerange_value .md) iencoding indirectiontype integer integer2 integer2x2 integer2x3 integer2x4 integer3 integer3x2 integer3x3 integer3x4 integer4 integer4x2 integer4x3 integer4x4 istream [[zilch_engine_documentation/code_reference/nada_base_types/keyvalue_key, value /]] library math member memberrange memoryleakevent multiplemethodsofthesamename multiprimitive null opcodeevent parseevent pluginevent processclass processstartinfo [property_type ](nada_base_types/property_type .md) propertyrange quaternion random real real2 real2x2 real2x3 real2x4 real3 real3x2 real3x3 real3x4 real4 real4x2 real4x3 real4x4 reflectionobject rune runeiterator string stringbuilder stringrange stringsplitrange type utf8encoding variable void wrapper Editor addobjectwidget addresourcewindow anchoringsubtool animationeditor animationeditordata animationsettings animationtrackview arrowgizmo autocompletepopup backgroundtaskevent backgroundtasks bugreporterresponse calltippopup cogcommand colorevent colorscheme command consoletextevent consoleui contentpackage createdestroytool creationtool curvecontrolpoint curvedraggable curveevent curvetangent directproperty document documenteditor documentmanager dragselectsubtool editor editorcameracontroller editorevent editormain editorpackageloader editorviewport flattentool floatingcomposite formattedinplacetext generalsearchview gizmo gizmocreator gizmodrag gizmoevent gizmoraytestevent gizmospace gizmoupdateevent griddraw heightmanipulationtool heightmapimporter heightmapsubtool heightmaptool hotkeyeditor importbutton inplacetexteditor item itemgroup itemlist jointtool libraryview mainpropertyview manipulatortool manipulatortoolevent messageboxevent metacompositionwrapper metadropevent metapropertyeditor multiconvexmesheditor multiconvexmeshpoint multiconvexmeshpropertyviewinfo objectconnectingtool objectpollevent objectrotategizmo objectrotatetool objectscalegizmo objectscaletool objecttransformgizmo objecttransformgizmoevent objecttransformtool objecttranslategizmo objecttranslatetool objectview orientationbasisgizmo parentingtool physicscarwheelbasisgizmo pointmassselectorsubtool pointselectorsubtool popup postaddresourceevent previewwidget previewwidgetfactory propertyview propertywidget propertywidgetobject raiselowertool removedentry rendergrouphierarchies resourceeditors resourcetemplatedisplay resourcetemplatesearch resourcetypesearch revolutebasisgizmo ringgizmo ringgizmoevent ropecreatorsubtool rotategizmo rotategizmoupdateevent rotationbasisgizmo rotationbasisgizmoaabbqueryevent rotationbasisgizmoinitializationevent rotationbasisgizmometatransform scalegizmo scalegizmoupdateevent selectorspringsubtool selecttool selecttoolfrustumevent simpledebuggerlistener simplegizmobase smoothsharpentool springcreatorsubtool springpointproxy springpointproxyproperty springselectorsubtool springsubtool spriteframe spritepreview spritesheetimporter spritesourceeditor squaregizmo stresstest stresstestdialog texteditor texteditorevent textupdatedevent tileeditor2d tileeditor2ddrawtool tileeditor2dselecttool tileeditor2dsubtool tilepalettesource tilepalettesprite tilepaletteview tileview tileviewevent tileviewwidget tool toolcontrol toolgizmoevent tooluievent translategizmo translategizmoupdateevent treeevent treerow treeview treeviewheaderaddedevent uilegacytooltip valueeditorfactory valueevent viewporttextwidget weightedcomposite weightpaintertool Engine action actiondelay actiongroup actions actionsequence actionset actionspace actionsystem animation animationgraph animationgraphevent animationnode archetype archetyped archetypeinstance area areaevent asyncprocess asyncprocessevent basicanimation blockingtaskevent buildinfo chainnode cog cogarchetypeextension cogarchetypepropertyfilter coghashsetrange coginitializer coginitializerevent cogmetadatainheritance cogmetadisplay cogmetaoperations cogmetaserialization cogmetatransform cognamerange cogpath cogpathevent cogpathmetaserialization cogreplaceevent cogserializationfilter colorgradient component contentconfig contentlibraryreference contentlibraryreferencearray crossblend dataevent datareplaceevent dataresource dataresourceinheritance debugdraw debugengineevent debugsettings developerconfig directblend documentationlibrary documentresource dualblendchainnode dualblendcrossblend dualblenddirectblend dualblendselectivenode editorconfig editorflags editorsettings engine environment eventdirectorywatcher factory fileeditevent frameratesettings gameevent gamepad gamepadevent gamepads gamesession gamesessionrange heightmap heightmapevent heightmapsource heightpatch hierarchy hierarchycomposition hierarchyevent hierarchylistrange hierarchylistreverserange hierarchynamerange hierarchyrange hierarchyspline inputdeviceevent job joystick joystickevent joystickrange joysticks keyboard keyboardevent keyboardtextevent level linkid mainconfig metadependency metaeditorscriptobject metainterface metaresource mouse named objectlink objectlinkanchor objectlinkedge objectlinkevent objectlinkpointchangedevent objectlinkrange objectstore objecttrack operation operationbatch operationlistrange operationqueue operationqueueevent osfileselection osmousedropevent osmouseevent osshell oswindow oswindowevent posenode progressevent projectdescription projectsettings propertyoperation rawcontrolmapping raycaster raycastprovider recentprojects rectangle resourcedisplayfunctions resourceevent resourcelibrary resourcemetaoperations resourcemetaserialization resourcepackage resourcepackagedisplay resourcesystem resourcetable resourcetableentry resourcetableentryrange samplecurve savingevent scenegraphsource selectivenode sharedcontent shortcuts simpleanimation space spacemapvaluerange spaceobjects spacerange spline splinebakedpoint splinebakedpoints splinecontrolpoint splinecontrolpoints splineevent splinesampledata system textblock texteditorconfig texterrorevent textevent thickness timespace timesystem tracker transform transformmetatransform tweakables updateevent userconfig windowlaunchsettings zerometaarraycontentlibraryreferencearray nadacompiledevent nadacompileevent nadacompilefragmentevent nadadocumentresource nadalibraryresource nadapluginconfig nadaprecompilationevent Event acquirenethostinfo alternatesearchcompletedevent animationgraphevent areaevent asyncprocessevent audiobytedataevent audiofloatdataevent backgroundtaskevent basecollisionevent blockingtaskevent bugreporterresponse castfilterevent chromepopupevent coginitializerevent cogpathevent cogreplaceevent collisionevent collisiongroupevent colorevent commandevent commandupdateevent connectionevent consoletextevent contentsystemevent contextmenuevent curveevent customaudionodeevent customjointevent customphysicseffectevent dataevent datareplaceevent debugengineevent editorevent event fileeditevent focusevent gameevent gamepadevent gizmoevent gizmoraytestevent gizmoupdateevent graphicalevent graphicalsortevent handleableevent heightmapevent hierarchyevent highlightborderevent inputdeviceevent jointevent joystickevent keyboardevent keyboardtextevent keyframeevent mainwindowtransformevent manipulatortoolevent messageboxevent metadropevent metalibraryevent midievent modalbuttonevent modalconfirmevent mousedragevent mouseevent mousefiledropevent netchannelpropertychange neteventreceived neteventsent netgamestarted nethostlistupdate nethostrecordevent nethostupdate netlevelstarted netlinkconnected netlinkdisconnected netobjectoffline netobjectonline netpeerclosed netpeeropened netpeerreceivedconnectrequest netpeerreceivedconnectresponse netpeerreceiveduseraddrequest netpeerreceiveduseraddresponse netpeersentconnectrequest netpeersentconnectresponse netpeersentuseraddrequest netpeersentuseraddresponse netuseracquiredobjectownership netuserlostobjectownership netuserownerchanged notifyevent objectevent objectlinkevent objectlinkpointchangedevent objectpollevent objecttransformgizmoevent operationqueueevent osfileselection osmousedropevent osmouseevent oswindowevent particleevent postaddresourceevent presolveevent progressevent propertyevent querymodifiedsaveevent receiveddataevent rendertasksevent resourceevent resourcelistevent ringgizmoevent rotategizmoupdateevent rotationbasisgizmoaabbqueryevent rotationbasisgizmoinitializationevent savingevent scalegizmoupdateevent searchviewevent selectionchangedevent selecttoolfrustumevent sendableevent shaderinputsevent soundevent soundinstanceevent splineevent tabmodifiedevent tabrenamedevent tagevent texteditorevent texterrorevent textevent textupdatedevent tileviewevent toolgizmoevent tooluievent trackevent translategizmoupdateevent treeevent treeviewheaderaddedevent typeevent uifocusevent uitransformupdateevent updateevent valueevent viewportmouseevent webbrowserconsoleevent webbrowsercursorevent webbrowserdownloadevent webbrowserevent webbrowserpointqueryevent webbrowserpopupcreateevent webbrowsertextevent webbrowserurlevent webresponseevent windowtabevent nadacompiledevent nadacompileevent nadacompilefragmentevent nadaevent nadaprecompilationevent Gameplay cameraviewport chrome chromepopupevent defaultgamesetup gamewidget indexedhalfedge indexedhalfedgeface indexedhalfedgefaceedgeindexarray indexedhalfedgefaceedgeindexarrayrange indexedhalfedgemesh indexedhalfedgemeshedgearray indexedhalfedgemeshedgearrayrange indexedhalfedgemeshfacearray indexedhalfedgemeshfacearrayrange indexedhalfedgemeshvertexarray indexedhalfedgemeshvertexarrayrange mousecapture mousefiledropevent orientation quickhull3d randomcontext reactive reactivespace reactiveviewport splineparticleanimator splineparticleemitter tilemap tilemapsource unittestmousedropevent unittestmouseevent viewportmouseevent webbrowser webbrowserconsoleevent webbrowsercursorevent webbrowserdownloadevent webbrowserevent webbrowsermanager webbrowserpointqueryevent webbrowserpopupcreateevent webbrowsersetup webbrowsertextevent webbrowserurlevent webbrowserwidget zero Geometry aabb debugarc debugbox debugcapsule debugcircle debugcone debugcylinder debugfrustum debugline debuglinecross debugobb debugsphere debugtext debugtriangle frustum plane ray segment sphere Graphics arrayhandleofmaterial arrayhandleofrendergroup atlas basesprite blendsettings blendsettingsmrt bone boxparticleemitter camera childrendergrouplist colortargetmrt debuggraphical debuggraphicalprimitive debuggraphicaltext debuggraphicalthickline definitionset depthsettings font graphical graphicalentry graphicalentryrange graphicalevent graphicalrangeinterface graphicalsortevent graphics graphicsdriversupport graphicsengine graphicsraycastprovider graphicsspace heightmapmodel hidebasefilter imagedefinition indexbuffer linearparticleanimator material materialblock materialblockproxy materialfactory materiallist mesh meshparticleemitter model multirendertarget multisprite multispriteentry multispriteentryrange particle particleanimator particleattractor particlecollisionheightmap particlecollisionplane particlecoloranimator particleemitter particleemittershared particleevent particlelistrange particlesystem particletwister particlewander rendergroup rendergrouplist rendersettings rendertarget rendertasksevent resourcelistevent samplersettings selectionicon shaderinputs shaderinputsevent skeleton skinnedmodel sliceddefinition sphericalparticleemitter sprite spriteparticlesystem spritesource spritetext subrendergrouppass textdefinition texture texturedata vertexbuffer vertexsemanticrange nadafragment Meta cogcomponentmeta editorindexedstringarray editorpropertyextension editorrange editorrotationbasis editorslider event eventobject ipaddress localmodifications metaarray metaarraywrapper metaattribute metacomposition metacustomui metadatainheritance metadatainheritanceroot metadisplay metaeditorgizmo metaeditorresource metagroup metalibraryevent metaoperations metaowner metapropertybasicfilter metapropertyfilter metapropertyrename metaselection metaselectionrange metaserializedproperty metashaderinput metatransform notifyevent objectevent propertyevent propertypath referencecountedempty referencecountedeventobject referencecountedobject referencecountedsafeid32 referencecountedsafeid32eventobject referencecountedsafeid32object referencecountedsafeid64 referencecountedsafeid64eventobject referencecountedsafeid64object referencecountedthreadsafeid32 referencecountedthreadsafeid32eventobject referencecountedthreadsafeid32object referencecountedthreadsafeid64 referencecountedthreadsafeid64eventobject referencecountedthreadsafeid64object revision revisions safeid32 safeid32eventobject safeid32object safeid64 safeid64eventobject safeid64object selectionchangedevent stringnamedisplay threadsafeid32 threadsafeid32eventobject threadsafeid64 threadsafeid64eventobject threadsafeid64object threadsafereferencecounted typeevent typenamedisplay zerometaarrayrevisions Networking acquirenethostinfo bitstream blockingwebrequest connectiondata connectionevent editingamefilter eventbundle eventrange metanetproperty netchannel netchannelconfig netchannelpropertychange netchanneltype neteventreceived neteventsent netgamestarted nethost nethostlistupdate nethostrange nethostrecord nethostrecordevent nethostupdate netlevelstarted netlinkconnected netlinkdisconnected netobject netobjectoffline netobjectonline netpeer netpeerclosed netpeeropened netpeerreceivedconnectrequest netpeerreceivedconnectresponse netpeerreceiveduseraddrequest netpeerreceiveduseraddresponse netpeersentconnectrequest netpeersentconnectresponse netpeersentuseraddrequest netpeersentuseraddresponse netproperty netpropertyconfig netpropertyinfo netpropertyinfos netpropertytype netspace netuser netuseracquiredobjectownership netuserlostobjectownership netuserownerchanged netuserrange receiveddataevent sendableevent simplesocket tcpsocket threadedwebrequest webrequester webresponseevent zerometaarraynetpropertyinfos Physics basecastfilter basecollisionevent basicdirectioneffect basicpointeffect boxcollider buoyancyeffect capsulecollider carwheelarray carwheelref castfilter castfilterevent castresult castresults castresultsarrayrange castresultsrange collider collisionendblock collisionevent collisionfilter collisionfilterblock collisiongroup collisiongroupevent collisionpersistedblock collisionstartblock collisiontable constraintconfigblock contactblock contactgraphedge contactpoint contactpointrange contactrange convexmesh convexmeshcollider customcollisioneventtracker customconstraintinfo customjoint customjointblock customjointevent customphysicseffect customphysicseffectevent cylindercollider drageffect dynamicmotor ellipsoidcollider fixedanglejoint fixedanglejointblock floweffect forceeffect gearjoint gearjointblock genericphysicsmesh gravityeffect heightmapcollider ignorespaceeffects joint jointconfigoverride jointcreator jointdebugdrawconfig jointevent jointgraphedge jointlimit jointmotor jointrange jointspring linearaxisjoint linearaxisjointblock manipulatorjoint manipulatorjointblock massoverride meshcollider multiconvexmesh multiconvexmeshcollider multiconvexmeshindexdata multiconvexmeshindexrange multiconvexmeshsubmeshdata multiconvexmeshsubmeshrange multiconvexmeshvertexdata multiconvexmeshvertexrange phygunjoint phygunjointblock physicscar physicscarwheel physicseffect physicsengine physicsmaterial physicsmesh physicsmeshindexdata physicsmeshindexrange physicsmeshvertexdata physicsmeshvertexrange physicsraycastprovider physicssolverconfig physicsspace pointforceeffect pointgravityeffect positionjoint positionjointblock presolveblock presolveevent prismaticjoint prismaticjoint2d prismaticjoint2dblock prismaticjointblock pulleyjoint pulleyjointblock region relativevelocityjoint relativevelocityjointblock revolutejoint revolutejoint2d revolutejoint2dblock revolutejointblock rigidbody spherecollider stickjoint stickjointblock subconvexmesh sweepresult sweepresultrange thrusteffect torqueeffect universaljoint universaljointblock uprightjoint uprightjointblock vortexeffect weldjoint weldjointblock wheeljoint wheeljoint2d wheeljoint2dblock wheeljointblock windeffect Resource animation archetype atlas collisiongroup collisiontable colorgradient convexmesh dataresource definitionset documentresource font genericphysicsmesh heightmapsource imagedefinition level material mesh multiconvexmesh netchannelconfig netpropertyconfig physicsmaterial physicsmesh physicssolverconfig rendergroup resourcetable samplecurve sliceddefinition sound soundattenuator soundcue soundtag spritesource textblock textdefinition texture tilemapsource tilepalettesource nadadocumentresource nadafragment nadalibraryresource nadapluginlibrary nadapluginsource nadascript Serialization metaserialization metastringserialization serializationfilter Sound additivesynthnode addnoisenode adsrenvelope audio audiobytedataevent audiofloatdataevent audiosettings bandpassnode chorusnode compressornode customaudionode customaudionodeevent delaynode equalizernode expandernode flangernode generatedwavenode granularsynthnode highpassnode lowpassnode microphoneinputnode midievent modulationnode nodeinfolistrange nodeprintinfo panningnode pitchnode recordingnode reverbnode saveaudionode simplesound sound soundattenuator soundattenuatordisplay soundbuffer soundcue soundcuedisplay sounddisplay soundemitter soundemitterdisplay soundentry soundentrydisplay soundevent soundinstance soundinstanceevent soundinstancerange soundlistener soundnode sounds soundspace soundtag soundtagdisplay soundtagentry soundtagentrydisplay soundtags volumenode zerometaarraysounds zerometaarraysoundtags SpatialPartition boundingboxbroadphase boundingspherebroadphase dynamicaabbtreebroadphase dynamicbroadphasepropertyextension ibroadphase nsquaredbroadphase sapbroadphase staticaabbtreebroadphase UiWidget uidocklayout uifilllayout uifocusevent uilayout uirootwidget uistacklayout uitransformupdateevent uiwidget uiwidgetcastresultsrange uiwidgetcomponenthierarchy uiwidgetrange Widget alternatesearchcompletedevent basescrollarea buttonbase checkbox combobox commandevent commandexecuter commandmanager commandupdateevent composite contextmenuentry contextmenuentrychildrenrange contextmenuentrycommand contextmenuentrydivider contextmenuentrymenu contextmenuevent docklayout edgedocklayout edittext filllayout focusevent gridlayout handleableevent highlightborderevent iconbutton imagewidget label layout layoutarea listbox mainwindow mainwindowtransformevent menubar menubaritem metascriptshortcutattribute metascripttagattribute modal modalbuttonevent modalconfirmevent mousedragevent mouseevent mousemanipulation multidock multilinetext multimanager progressbar querymodifiedsaveevent ratiolayout rootwidget scrollarea searchview searchviewelement searchviewevent selectorbutton sizepolicies slider spacer splitter stacklayout stringcombobox tabarea tabmodifiedevent tabrenamedevent tagevent text textbox textbutton textcheckbox textureview toggleiconbutton tooltip viewport widget widgetmanager window windowtabevent WindowsShellSystem windowsoswindow NadaScript nadacomponent nadaevent nadaobject nadapluginlibrary nadapluginsource nadascript"
  },
  "docs/code_reference/command_reference.html": {
    "href": "docs/code_reference/command_reference.html",
    "title": "About | ZilchEngine",
    "keywords": "About Tags Shortcut Menu Selection No Tags No Keyboard Shortcut Add Add a new content item to the project Tags Shortcut Menu Selection Editor Ctrl + N AddComponent Add component to object Tags Shortcut Menu Selection No Tags Ctrl + M AlignCameraToSelectedCamera Aligns the editor camera to the selected camera Tags Shortcut Menu Selection Camera No Keyboard Shortcut AlignSelectedCameraToCamera Aligns the selected camera to the editor's camera Tags Shortcut Menu Selection Camera No Keyboard Shortcut Animator Show the Animator Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> Animator ArchiveProject Archive a project into a file Tags Shortcut Menu Selection Project No Keyboard Shortcut name=Project> ArchiveProject BackupProject Back up project to time stamped archive Tags Shortcut Menu Selection Project No Keyboard Shortcut name=Project> BackupProject BroadPhaseTracker Used to compare broad phase performance Tags Shortcut Menu Selection Editor No Keyboard Shortcut Browser Show the Browser Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> Browser BuildVersion Print this version date and revision number in the console and copies them to the clipboard Tags Shortcut Menu Selection Editor No Keyboard Shortcut CenterSelected Center the object in the view Tags Shortcut Menu Selection Select F name=Select> CenterSelected Chat A place where users can talk to each other and share content Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> Chat ClearConsole Clears output text from the console Tags Shortcut Menu Selection Editor No Keyboard Shortcut ClearObjectStore Clear the Object Store on this computer Tags Shortcut Menu Selection Editor No Keyboard Shortcut Commands Show the Command List Viewer Tags Shortcut Menu Selection Windows Ctrl + Shift + C name=Windows> Commands Console Toggle the Console Window Tags Shortcut Menu Selection Windows ~ name=Windows> Console Copy Copy objects to clipboard Tags Shortcut Menu Selection Edit Ctrl + C name=Edit> Copy CrashEngine Tags Shortcut Menu Selection No Tags No Keyboard Shortcut CreateBlockTower Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateBlockTower CreateCamera Create Camera Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateCamera CreateCube Create Cube Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateCube CreateCylinder Create Cylinder Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateCylinder CreateDirectionalLight Create DirectionalLight Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateDirectionalLight CreateDirectionalLightShadows Create DirectionalLightShadows Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateDirectionalLightShadows CreateGrid Create Grid Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateGrid CreatePointLight Create PointLight Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreatePointLight CreatePyramid Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreatePyramid CreateSphere Create Sphere Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateSphere CreateSpline Create Spline Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateSpline CreateSplineParticleSystem Create SplineParticleSystem Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateSplineParticleSystem CreateSpotLight Create SpotLight Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateSpotLight CreateSpotLightShadows Create SpotLightShadows Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateSpotLightShadows CreateSprite Create Sprite Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateSprite CreateSpriteParticles Create SpriteParticles Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateSpriteParticles CreateSpriteText Create SpriteText Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateSpriteText CreateTeeter Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateTeeter CreateTower Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateTower CreateTransform Create Transform Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateTransform CreateWall Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateWall CreateWedge Create Wedge Tags Shortcut Menu Selection Create No Keyboard Shortcut name=Create> CreateWedge CreationTool Enables the CreationTool tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut Cut Cut selected objects and save them to clipboard Tags Shortcut Menu Selection Edit Ctrl + X name=Edit> Cut DebugShaderTranslation Tags Shortcut Menu Selection No Tags No Keyboard Shortcut Delete Delete selected objects Tags Shortcut Menu Selection Edit Delete name=Edit> Delete DetachSelected Tags Shortcut Menu Selection No Tags No Keyboard Shortcut DisableAutoProjectScreenshot Disables automatically taking a project screen shot every time you save. Use the 'TakeProjectScreenshot' command to take the screen shot manually. Tags Shortcut Menu Selection No Tags No Keyboard Shortcut Documentation Tags Shortcut Menu Selection No Tags No Keyboard Shortcut DumpMemoryDebuggerStats Tags Shortcut Menu Selection No Tags No Keyboard Shortcut Duplicate Duplicate select objects Tags Shortcut Menu Selection Edit Ctrl + D name=Edit> Duplicate EditColorScheme Edit color scheme Tags Shortcut Menu Selection Editor No Keyboard Shortcut EnableAutoProjectScreenshot Enables automatically taking a project screen shot every time you save. Tags Shortcut Menu Selection No Tags No Keyboard Shortcut Exit Exit the editor Tags Shortcut Menu Selection File Alt + F4 ExportAndPlayGame Export the game and play it Tags Shortcut Menu Selection Export No Keyboard Shortcut ExportContent Export content to a folder for an installer Tags Shortcut Menu Selection Export No Keyboard Shortcut ExportContentPackage Tags Shortcut Menu Selection No Tags No Keyboard Shortcut ExportGame Export game to a standalone exe Tags Shortcut Menu Selection Export No Keyboard Shortcut ExportHeightMapToObj Tags Shortcut Menu Selection No Tags No Keyboard Shortcut ExportTypeList Tags Shortcut Menu Selection No Tags No Keyboard Shortcut FindAll Show the Find/Replace Window to search all documents Tags Shortcut Menu Selection Windows Ctrl + Shift + F name=Windows> FindAll FindNext Show the Find/Replace Window to search the current document Tags Shortcut Menu Selection Windows Ctrl + F name=Windows> FindNext FixArchetypeTransforms Tags Shortcut Menu Selection No Tags No Keyboard Shortcut ForceCompileAllShaders Tags Shortcut Menu Selection No Tags No Keyboard Shortcut FrameSelected Center and frame the object in the view Tags Shortcut Menu Selection Select FF name=Select> FrameSelected GoToDefinition Using the current cursor in the current open script we will attempt to go to the definition of that type, member, or variable Tags Shortcut Menu Selection Script F12 Graph Displays a graph Tags Shortcut Menu Selection Editor No Keyboard Shortcut GroupSelected Create a transform at the center of the selected objects and parent them to it Tags Shortcut Menu Selection Editor Ctrl + G HeightMapTool Enables the HeightMapTool tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut Help Display documentation for the engine Tags Shortcut Menu Selection Editor No Keyboard Shortcut HideConsole Hide the Console Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> HideConsole HideSelected Hide selected objects Tags Shortcut Menu Selection Hide No Keyboard Shortcut HostNadaDebugger Tags Shortcut Menu Selection No Tags No Keyboard Shortcut ImportContentPackage Tags Shortcut Menu Selection No Tags No Keyboard Shortcut ImportGroup Tags Shortcut Menu Selection No Tags No Keyboard Shortcut ImportHeightMap Tags Shortcut Menu Selection No Tags No Keyboard Shortcut ImportSpriteSheet Tags Shortcut Menu Selection No Tags No Keyboard Shortcut JointTool Enables the JointTool tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut Library Show the Library Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> Library ManipulatorTool Enables the Manipulator Tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut Market Show the Zilch Market where you can download content for your projects Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> Market Mode2D Tags Shortcut Menu Selection No Tags No Keyboard Shortcut Mode3D Tags Shortcut Menu Selection No Tags No Keyboard Shortcut MoveToLookPoint Tags Shortcut Menu Selection No Tags No Keyboard Shortcut NewProject Create a new project Tags Shortcut Menu Selection Project Ctrl + Shift + N name=Project> NewProject NextSelection Tags Shortcut Menu Selection Select Alt + Right name=Select> NextSelection Objects Show the Objects Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> Objects OnExportCommandsList Tags Shortcut Menu Selection No Tags No Keyboard Shortcut OpenProject Open a project Tags Shortcut Menu Selection Project Ctrl + O name=Project> OpenProject OpenTestWidgets Tags Shortcut Menu Selection No Tags No Keyboard Shortcut OperationHistory Show the Operation Queue Tags Shortcut Menu Selection Windows Ctrl + Shift + O name=Windows> OperationHistory ParentToPrimary Parents all selected objects to the primary selected object (highlighted in orange) Tags Shortcut Menu Selection Editor No Keyboard Shortcut ParentingTool Enables the ParentingTool tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut Paste Paste objects on clipboard to space Tags Shortcut Menu Selection Edit Ctrl + V name=Edit> Paste PauseGame Pause / resume the game Tags Shortcut Menu Selection Game F6 Performance Displays a performance graph Tags Shortcut Menu Selection Editor No Keyboard Shortcut PlayGame Play the game with the current level Tags Shortcut Menu Selection Game F5 PlayNewGame Play the game in an additional window Tags Shortcut Menu Selection Game Ctrl + F5 PlayUnitTestFile Tags Shortcut Menu Selection No Tags No Keyboard Shortcut PreviousSelection Tags Shortcut Menu Selection Select Alt + Left name=Select> PreviousSelection Properties Show the Property Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> Properties RecordUnitTestFile Tags Shortcut Menu Selection No Tags No Keyboard Shortcut Redo Redo last undo operation Tags Shortcut Menu Selection Edit Ctrl + Y name=Edit> Redo ReloadProject Reload the current project Tags Shortcut Menu Selection Project No Keyboard Shortcut name=Project> ReloadProject RenderGroupHierarchies Show the RenderGroup Hierarchies Window Tags Shortcut Menu Selection Editor No Keyboard Shortcut ReplaceAll Show the Find/Replace Window to replace in all documents Tags Shortcut Menu Selection Windows Ctrl + Shift + H name=Windows> ReplaceAll ReplaceNext Show the Find/Replace Window to replace in the current document Tags Shortcut Menu Selection Windows Ctrl + H name=Windows> ReplaceNext ReportBug Report a bug Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> ReportBug ResaveAllResources Tags Shortcut Menu Selection No Tags No Keyboard Shortcut ResetCamera Resets the camera to look at the origin Tags Shortcut Menu Selection Camera No Keyboard Shortcut ResetTransform Tags Shortcut Menu Selection No Tags No Keyboard Shortcut Restart Restart the editor Tags Shortcut Menu Selection File No Keyboard Shortcut RotateTool Enables the Rotate Tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut RunUnitTests Tags Shortcut Menu Selection No Tags No Keyboard Shortcut RunNadaDebugger Tags Shortcut Menu Selection No Tags No Keyboard Shortcut SaveProject Save project and all resources Tags Shortcut Menu Selection Project Ctrl + S name=Project> SaveProject ScaleTool Enables the Scale Tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut SelectAll Select all in scene Tags Shortcut Menu Selection Select Shift + A name=Select> SelectAll SelectAllInTree Select all in tree Tags Shortcut Menu Selection Select No Keyboard Shortcut name=Select> SelectAllInTree SelectChild Select the first child Tags Shortcut Menu Selection Select No Keyboard Shortcut name=Select> SelectChild SelectEditorConfig Show the Editor Config in the Property Window Tags Shortcut Menu Selection Select Shift + E name=Select> SelectEditorConfig SelectGame Select game Tags Shortcut Menu Selection Select Shift + G name=Select> SelectGame SelectNone Select no objects Tags Shortcut Menu Selection Select Shift + D name=Select> SelectNone SelectParent Select parent of current object Tags Shortcut Menu Selection Select Shift + W name=Select> SelectParent SelectProject Show the Project in the Property Window Tags Shortcut Menu Selection Select Shift + P name=Select> SelectProject SelectRoot Select root of tree Tags Shortcut Menu Selection Select Shift + Q name=Select> SelectRoot SelectSibling Select the next sibling Tags Shortcut Menu Selection Select No Keyboard Shortcut name=Select> SelectSibling SelectSpace Select the space Tags Shortcut Menu Selection Select Shift + S name=Select> SelectSpace SelectTool Picks objects in the scene. Tags Shortcut Menu Selection Tool No Keyboard Shortcut ShowConsole Show the Console Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> ShowConsole ShowContentOutput Show the project's content output folder Tags Shortcut Menu Selection Project No Keyboard Shortcut name=Project> ShowContentOutput ShowCoreLibrary Tags Shortcut Menu Selection Tool No Keyboard Shortcut ShowProjectFolder Show the folder the project is located in the file system Tags Shortcut Menu Selection Project No Keyboard Shortcut name=Project> ShowProjectFolder SoundNodeGraph Show the Sound Node Graph Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> SoundNodeGraph SpringTools Tags Shortcut Menu Selection No Tags No Keyboard Shortcut StepGame Step the game forward one frame Tags Shortcut Menu Selection Game F7 StopGame Stop the game Tags Shortcut Menu Selection Game F8 StressTest Stress test the engine by doing a bunch of random stuff Tags Shortcut Menu Selection Editor No Keyboard Shortcut TakeProjectScreenshot Takes a screen shot for the project. Disables automatically taking a project screen shot every time you save. Tags Shortcut Menu Selection No Tags No Keyboard Shortcut TileEditor2D Enables the TileEditor2D tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut ToggleFullScreen Tags Shortcut Menu Selection No Tags No Keyboard Shortcut Tools Show the Tools Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> Tools TranslateTool Enables the Translate Tool Tags Shortcut Menu Selection Tool No Keyboard Shortcut Undo Undo last operation Tags Shortcut Menu Selection Edit Ctrl + Z name=Edit> Undo UnhideAll Unhide all objects Tags Shortcut Menu Selection Hide No Keyboard Shortcut UnhideSelected Unhide selected objects Tags Shortcut Menu Selection Hide No Keyboard Shortcut VolumeMeter Show the Volume Meter Window Tags Shortcut Menu Selection Windows No Keyboard Shortcut name=Windows> VolumeMeter WriteBuildInfo Tags Shortcut Menu Selection No Tags No Keyboard Shortcut ZilchHub Tags Shortcut Menu Selection No Tags No Keyboard Shortcut"
  },
  "docs/code_reference/enum_reference.html": {
    "href": "docs/code_reference/enum_reference.html",
    "title": "| ZilchEngine",
    "keywords": "Enum ActionExecuteMode ActionState AnimationBlendMode AnimationBlendType AnimationPlayMode ArrowHeadType AtomFilter AudioCueImport AudioFileLoadType AudioLatency AudioMixTypes Authority AuthorityMode AxisDirection BasicNetType BasisType BlendEquation BlendFactor BlendMode BoundType Buttons CameraDragMode CapsuleScalingMode CastFilterState CellIndexType CogPathPreference ColliderType CollisionFilterBlockType CollisionFilterCollisionFlags CollisionType ConflictAction ConnectResponse ConnectResponseMode ConstraintPositionCorrection ControlMode ConvergenceState CullMode Cursor CurveType DefaultAddOnFilters DepthMode DetectionMode DisconnectReason DockArea Ease EditorMode Enum eUpdateTransformState FalloffCurveType Filter FlickedStick FragmentCountFilter FragmentFilter GeometryValue GizmoBasis GizmoDragMode GizmoGrab GizmoGrabMode GizmoPivot GizmoSnapMode GranularSynthWindows GraphicalSortMethod HeightTextureSelect HeightTool HorizontalAlignment ImageImport ImportFrames ImportMode IncludeMode IndicatorSide InputDevice InternalKeyState InternetProtocol JointFrameOfReference JointToolTypes JointTypes Keys KeyState LauncherAutoRunMode LinkState LinkStatus Location LoopingMode MeshEmitMode MeshImport Mode2DStates MouseButtons MultiConvexMeshAutoComputeMethod MultiConvexMeshAutoComputeMode MultiConvexMeshDrawMode MultiConvexMeshSnappingMode NetRefreshResult NetRole NetUserAddResponse Network ObjectIndex OrientationBases PerspectiveMode PhysicsContactTangentTypes PhysicsEffectEndCondition PhysicsEffectInterpolationType PhysicsEffectType PhysicsImport PhysicsIslandPreProcessingMode PhysicsIslandType PhysicsMeshType PhysicsSolverPositionCorrection PhysicsSolverSubType PhysicsSolverType Placement PlayGameOptions PrimitiveType Receipt ReceiveState ReliabilityMode ReplicationPhase RigidBodyDynamicState RouteMode ScaleConversion SendsEvents SerializationMode ShadowResolution SoundPlayMode SoundSelectMode SplineAnimatorMode SplineType SpringDebugDrawMode SpringDebugDrawType SpringSortOrder SpringSubTools SpriteFill SpriteGeometryMode SpriteOrigin SpriteParticleAnimationMode SpriteParticleGeometryMode SpriteParticleSortMode SpriteSampling StencilMode StencilOp StoreResult StreamOrigin StreamType SynthWaveType SystemSpace TabWidth TcpSocketBind TextAlign TextureAddressing TextureAnisotropy TextureCompareFunc TextureCompareMode TextureCompression TextureFace TextureFiltering TextureFormat TextureMipMapping TextureType TileEditor2DSubToolType TimeDisplay TimeMode ToolTipColorScheme TrackType TransferMode TransmissionDirection TransportProtocol UiDockMode UiFocusDirection UiHighlightColorMode UiHighlightColorOp UiHighlightMouseMode UiHorizontalAlignment UiScrollBarAxis UiSizePolicy UiStackLayoutDirection UiVerticalAlignment UpdateMode UserConnectResponse Verbosity VertexElementType VertexSemantic VerticalAlignment ViewportScaling WebBrowserModifiers WindowState WindowStyleFlags ActionExecuteMode EnumValue Description FrameUpdate LogicUpdate ActionState EnumValue Description Completed Running AnimationBlendMode EnumValue Description Auto Manual AnimationBlendType EnumValue Description Normalized Standard AnimationPlayMode EnumValue Description Loop Pingpong PlayOnce ArrowHeadType EnumValue Description Arrow Cube AtomFilter EnumValue Description AngularAxis LinearAxis AudioCueImport EnumValue Description Grouped None PerSound AudioFileLoadType The choices for how to load and play an audio file. EnumValue Description Auto This will choose whether to stream a file depending on its length. Files longer than 30 seconds will be streamed from memory, and those longer than 1 minute will be streamed from file. StreamFromFile The audio data will be read from the file and decompressed as it plays. StreamFromMemory The compressed audio data will be read into memory when the Sound resource is loaded and will be decompressed as it plays. Uncompressed The audio data will be decompressed and held in memory when the Sound resource is loaded. AudioLatency The latency setting used by the audio system. EnumValue Description High Audio will have a higher latency. This can fix some audio problems in some cases. Low The default setting, where audio will have a low amount of latency. AudioMixTypes The possible settings for the number of channels used by the audio system when creating audio. EnumValue Description AutoDetect The audio system will match its channels to the default output device. FiveOne Audio will be produced using a typical 5.1 speaker configuration. Mono Audio will be produced using only a single channel. Quad Audio will be produced using two left channels and two right channels. SevenOne Audio will be produced using a typical 7.1 speaker configuration. Stereo Audio will be produced using two channels, one for the left speaker and one for the right. Authority EnumValue Description Client Server AuthorityMode EnumValue Description Dynamic Fixed AxisDirection Defines a primary direction for an axis. EnumValue Description X Y Z BasicNetType Use Archetype \"ResourceId:Name\" String as ReplicaType? Otherwise we will use ResourceId u64 as ReplicaType (much more efficient). This impacts bandwidth performance when first spawning/cloning new NetObject types to remote peers. EnumValue Description Boolean Boolean2 Boolean3 Boolean4 Byte DoubleInteger DoubleReal Integer Integer2 Integer3 Integer4 Other Quaternion Real Real2 Real2x2 Real3 Real3x3 Real4 Real4x4 String BasisType EnumValue Description NegativeX NegativeY NegativeZ PositiveX PositiveY PositiveZ BlendEquation How pixel values (source) are combined with the active render target's values (destination). EnumValue Description Add Source is added to destination. Max The maximum value between source and destination is kept. Min The minimum value between source and destination is kept. ReverseSubtract Destination is subtracted from source. Subtract Source is subtracted from destination. BlendFactor Values that can be multiplied with the operands used in the blend equation. EnumValue Description DestAlpha The alpha channel of the destination value. DestColor The RGB of the destination value. InvDestAlpha One minus the alpha channel of the destination value. InvDestColor One minus the RGB of the destination value. InvSourceAlpha One minus the alpha channel of the source value. InvSourceColor One minus the RGB of the source value. One Multiplied by one, operand is unchanged. SourceAlpha The alpha channel of the source value. SourceAlphaSaturate Minimum of source alpha and one minus destination alpha. SourceColor The RGB of the source value. Zero BlendMode If blend equations are applied when writing to a render target. EnumValue Description Disabled Blending is not used. Enabled Blending is used, color and alpha use the same equations. Separate Blending is used, color and alpha use separate equations. BoundType EnumValue Description PrismJoint PrismJoint2d RevJoint RevJoint2d Buttons EnumValue Description A AnyButton B Back DpadDown DpadDownFiltered DpadLeft DpadLeftFiltered DpadRight DpadRightFiltered DpadUp DpadUpFiltered LeftShoulder LeftThumb RightShoulder RightThumb Start StickDown StickLeft StickRight StickUp X Y CameraDragMode EnumValue Description NotActive Pan Rotation Zoom CapsuleScalingMode How should a capsule collider respond to non-uniform scale? EnumValue Description PreserveHeight Scale applies to the height of the cylinder. PreserveScale Scale applies to the total size of the capsule. CastFilterState Controls custom cast filtering via the CastFilterEvent . Allows custom filter logic per object. EnumValue Description Accept Always accept this object for testing. DefaultBehavior Run the rest of the filtering logic on the cast filter. Reject Always reject this object for testing. CellIndexType EnumValue Description Absoulte Local CogPathPreference EnumValue Description Absolute CogRelative SpaceRelative ColliderType All possible collider types. Needed mostly for collision detection. The order is somewhat important as collision detection currently assumes that all simple shapes (primitive types) are before the complex shapes. EnumValue Description cBox cCapsule cConvexMesh cCylinder cEllipsoid cHeightMap cInvalid cMesh cMultiConvexMesh cSize cSphere CollisionFilterBlockType What kind of filter block this is. These blocks are used to send out/override collision group events of certain types (collision started, etc...) EnumValue Description CollisionEndedBlock CollisionPersistedBlock CollisionStartedBlock PreSolveBlock CollisionFilterCollisionFlags Controls what parts of collision detection/resolution are run for a CollisionGroup pair. EnumValue Description Resolve Run both collision detection and resolution as normal. SkipDetection Don't run collision detection. No events will be sent. SkipResolution Don't run collision resolution. Detection will still be run so events might be sent out. CollisionType Used to determine what kind of collision this is during event sending. EnumValue Description CollisionEnded CollisionPersisted CollisionStarted ConflictAction EnumValue Description Replace Skip ConnectResponse EnumValue Description Accept Deny DenyFull DenyTimeout ConnectResponseMode EnumValue Description Accept Custom Deny ConstraintPositionCorrection What kind of position correction behavior is desired for constraint or constraint type. EnumValue Description Baumgarte Use a baumgarte penalty force. Inherit Use the global position correction method. PostStabilization Directly fix position errors via translation. ControlMode EnumValue Description FirstPerson Orbit ZPlane ConvergenceState EnumValue Description Active None Resting CullMode How triangles should be culled (not rendered) depending on which way they face. EnumValue Description BackFace Clockwise triangles are not rendered. Disabled Triangles are always rendered. FrontFace Counter clockwise triangles are not rendered. Cursor Standard Mouse Cursors. EnumValue Description Arrow Cross Hand Invisible SizeAll SizeNESW SizeNS SizeNWSE SizeWE TextBeam Wait CurveType EnumValue Description BSpline CatmullRom Linear DefaultAddOnFilters EnumValue Description AllAngularAxes AllAxes AllLinearAxes SingleAngularAxis SingleAxis SingleLinearAxis DepthMode How pixels depth values should be tested to determine if the pixel renders. EnumValue Description Disabled No depth testing. Read Depth values are compared to the depth buffer. Write Depth values are compared to the depth buffer, if comparison succeeds the new value is written to the buffer. DetectionMode EnumValue Description Assume Automatic Manual Manumatic DisconnectReason EnumValue Description Latency Request Timeout DockArea EnumValue Description BotTool Bottom Center Count Floating Left Right Top TopTool Ease EnumValue Description BackIn BackInOut BackOut BounceIn BounceInOut BounceOut ElasticIn ElasticInOut ElasticOut Linear QuadIn QuadInOut QuadOut SinIn SinInOut SinOut WarpIn WarpInOut WarpOut EditorMode EnumValue Description Mode2D Mode3D Enum EnumValue Description eUpdateTransformState Internal enum used for determining what kind of transform update is happening. EnumValue Description cInitialize cUpdate FalloffCurveType The type of curve used for attenuating volume by SoundAttenuators. EnumValue Description Custom Sets the volume reduction using a SampleCurve resource. Linear Volume reduces linearly with distance. Log Volume reduces logarithmically, mimicking sound in real life. Sine Volume reduces linearly at first then slowly. SquareRoot Volume reduces quickly at first then linearly. Squared Volume reduces slowly at first then linearly. Filter EnumValue Description ActiveOffset DefaultOffset FilterFlag FlickedStick EnumValue Description Left None Right FragmentCountFilter EnumValue Description FiveFragments FourFragments OneFragment SixFragments ThreeFragments TwoFragments FragmentFilter EnumValue Description FreeAngularFragment FreeLinearFragment NoFreeAxesFragment SingleFragment GeometryValue EnumValue Description Albedo Depth Metallic None Normal Roughness Specular GizmoBasis EnumValue Description Local World GizmoDragMode EnumValue Description Line Plane ViewPlane GizmoGrab EnumValue Description Hold Toggle GizmoGrabMode EnumValue Description Hold Toggle GizmoPivot EnumValue Description Average Center Primary GizmoSnapMode EnumValue Description Relative WorldAxes WorldGrid GranularSynthWindows Types of windows (volume envelopes) that can be used for individual grains generated by the GranularSynthNode . EnumValue Description Linear A triangle-shaped linear envelope. Does not use attack and release times. Parabolic A smoothly curved envelope. Does not use attack and release times. RaisedCosine Uses cosine curves to smoothly ramp up and down during attack and release times. Trapezoid Uses linear ramps during attack and release times. More efficient than RaisedCosine but not as smooth. GraphicalSortMethod Method of sorting for determining the draw order of graphicals. EnumValue Description BackToFrontView Uses the distance in the view direction, furthest to nearest. FrontToBackView Uses the distance in the view direction, nearest to furthest. GraphicalSortValue Uses the sort value on the graphical component, lowest to highest. NegativeToPositiveX Uses the world space X-coordinate. NegativeToPositiveY Uses the world space Y-coordinate. NegativeToPositiveZ Uses the world space Z-coordinate. None Not sorted, draw order is undefined. PositiveToNegativeX Uses the world space X-coordinate. PositiveToNegativeY Uses the world space Y-coordinate. PositiveToNegativeZ Uses the world space Z-coordinate. SortEvent An event is sent on CameraViewport every frame for custom logic to determine the sort value. HeightTextureSelect EnumValue Description Texture0 Texture1 Texture2 Texture3 HeightTool EnumValue Description CreateDestroy Flatten RaiseLower SmoothSharpen WeightPainter HorizontalAlignment EnumValue Description Center Left Right ImageImport EnumValue Description Sprites Textures ImportFrames EnumValue Description AllFrames SelectedFrames ImportMode EnumValue Description FitToPatches MaintainAspectRatio IncludeMode EnumValue Description Children OnlyRoot IndicatorSide EnumValue Description Bottom Left Right Top InputDevice EnumValue Description Gamepad Joystick Keyboard Mouse InternalKeyState EnumValue Description KeyHeld KeyNotHeld KeyPressed KeyReleased InternetProtocol EnumValue Description Both Unspecified V4 V6 JointFrameOfReference EnumValue Description ObjectA ObjectB JointToolTypes EnumValue Description FixedAngleJoint GearJoint LinearAxisJoint ObjectLink PositionJoint PrismaticJoint PrismaticJoint2d PulleyJoint RevoluteJoint RevoluteJoint2d StickJoint UniversalJoint UprightJoint WeldJoint WheelJoint WheelJoint2d JointTypes EnumValue Description CustomJoint FixedAngleJoint GearJoint LinearAxisJoint ManipulatorJoint PhyGunJoint PositionJoint PrismaticJoint PrismaticJoint2d PulleyJoint RelativeVelocityJoint RevoluteJoint RevoluteJoint2d StickJoint UniversalJoint UprightJoint WeldJoint WheelJoint WheelJoint2d Keys EnumValue Description A Add Alt Apostrophe B Back Backslash C Capital Comma Control D Decimal Delete Divide Down E Eight End Enter Equal Escape F F1 F10 F11 F12 F2 F3 F4 F5 F6 F7 F8 F9 Five Four G H Home I Insert J K L Left LeftBracket M Minus Multiply N Nine None NumPad0 NumPad1 NumPad2 NumPad3 NumPad4 NumPad5 NumPad6 NumPad7 NumPad8 NumPad9 O One P PageDown PageUp Period Q R Right RightBracket S Semicolon Seven Shift Six Slash Space Subtract T Tab Three Tilde Two U Unknown Up V W X Y Z Zero KeyState EnumValue Description Down Repeated Up LauncherAutoRunMode EnumValue Description IfInstalled InstallAndRun None LinkState EnumValue Description Connected Disconnected ReceivedConnectRequest ReceivedDisconnectNotice ReceivedNegativeConnectResponse SentConnectRequest SentDisconnectNotice SentNegativeConnectResponse Unspecified LinkStatus EnumValue Description AttemptingConnection Connected Disconnected Unspecified Location EnumValue Description BottomCenter BottomLeft BottomRight Center CenterLeft CenterRight TopCenter TopLeft TopRight LoopingMode EnumValue Description Default Looping Once MeshEmitMode EnumValue Description Edge Face Vertex MeshImport EnumValue Description MultiMesh NoMesh SingleMesh Mode2DStates Represents what dimensions a RigidBody should operate in (how many degrees of freedom it has by default). EnumValue Description InheritFromSpace Use the Mode2D state on the PhysicsSpace . This allows easy changing of the entire space between 2D/3D. Mode2D Restricts the object's movement through physics to 2D. This lowers the object's degrees of freedom down to 3 (x-linear, y-linear, z-angular). Mode3D A regular 3D object (6 degrees of freedom). MouseButtons As the extra mouse buttons are typically Back and Forward they have been named accordingly. EnumValue Description Left Middle None Right XOneBack XTwoForward MultiConvexMeshAutoComputeMethod EnumValue Description MarchingSquares Pixels MultiConvexMeshAutoComputeMode EnumValue Description Alpha Intensity MultiConvexMeshDrawMode EnumValue Description Edges Filled None MultiConvexMeshSnappingMode EnumValue Description Always IfClose None NetRefreshResult Network refresh result. EnumValue Description DirectBasicHostInfo ExtraHostInfo IndirectBasicHostInfo NoResponse NetRole EnumValue Description Client MasterServer Offline Server Unspecified NetUserAddResponse Network user add response. EnumValue Description Accept Deny Network Network specification. EnumValue Description Internet LAN ObjectIndex EnumValue Description IndexA IndexB OrientationBases EnumValue Description Custom ForwardNegativeZUpY ForwardXUpY ForwardXUpZ ForwardYUpZ ForwardZUpY PerspectiveMode Method of 3D scene projection to a 2D plane. EnumValue Description Orthographic Projection is parallel with the viewing direction. Perspective Projection towards a single view point, making distant objects appear smaller. PhysicsContactTangentTypes How to compute the tangents for a contact point. Mainly for testing. EnumValue Description OrthonormalTangents RandomTangents VelocityTangents PhysicsEffectEndCondition Describes how interpolation is performed (if at all) outside of a physics effect's max distance. EnumValue Description ClampToMax Clamps to the max force value ContinueFalloff Continue the regular interpolation method NoEffect Don't apply a force past the max distance PhysicsEffectInterpolationType Describes how force values are interpolated between min/max values. EnumValue Description Linear Linearly interpolate between values. Quadratic Quadratically interpolate between values (uses t^2). PhysicsEffectType EnumValue Description Buoyancy Custom Drag Flow Force Gravity Invalid PointForce PointGravity Thrust Torque Vortex Wind PhysicsImport EnumValue Description ConvexMesh NoMesh StaticMesh PhysicsIslandPreProcessingMode What kind of pre-processing strategy should be used for merging islands. EnumValue Description ColliderCount ConstraintCount None PhysicsIslandType How should islands be built. Internal for testing (mostly legacy). EnumValue Description Composites ForcedOne Kinematics PhysicsMeshType EnumValue Description ConvexMesh PhysicsMesh PhysicsSolverPositionCorrection What kind of position correction should be applied for any constraint that is set to Inherit. EnumValue Description Baumgarte Use a baumgarte penalty force. PostStabilization Directly fix position errors via translation. PhysicsSolverSubType What kind of solver technique to use for position correction. Mainly for testing. EnumValue Description BasicSolving BlockSolving PhysicsSolverType What kind of a constraint solver should be used. A few pre-defined types meant for comparing performance. EnumValue Description Basic GenericBasic Normal Threaded Placement EnumValue Description CameraLocation LookAtPlane LookAtPoint OnTop PlaneXY ViewAtDepth PlayGameOptions EnumValue Description MultipleInstances SingleInstance PrimitiveType EnumValue Description Lines Points Triangles Receipt EnumValue Description ACK EXPIRED MAYBE NAK ReceiveState EnumValue Description cCloseConnection cDataReceived cNextConnection ReliabilityMode EnumValue Description Reliable Unreliable ReplicationPhase EnumValue Description Change Initialization Uninitialization RigidBodyDynamicState What kind of dynamics this body should have. Determines if forces are integrated and if collisions are resolved. EnumValue Description Dynamic A regular body that can be affected by forces. Kinematic An infinite mass body that approximates velocity when moved. Used for moving platforms and other movable infinite mass objects. Static An infinite mass body. Will not move via dynamics. RouteMode EnumValue Description Exclude Include ScaleConversion EnumValue Description CentimeterToInches CentimeterToMeter Custom InchesToCentimenters InchesToMeters MetersToCentimeters MetersToInches SendsEvents EnumValue Description False True SerializationMode EnumValue Description All Changed ShadowResolution EnumValue Description High Low Medium SoundPlayMode Whether a SoundCue should play once or loop continuously. EnumValue Description Looping The sound will loop continuously between its LoopStartTime and LoopEndTime. Single The sound will play once to its EndTime and then stop. SoundSelectMode Whether a SoundCue should pick a Sound to play randomly or sequentially. EnumValue Description Random The SoundCue will pick a Sound at random, taking into account the Weight values. Sequential Each time the SoundCue is played it will pick the next Sound in the order they are displayed. SplineAnimatorMode EnumValue Description Exact Spring SplineType EnumValue Description BSpline CatmullRom Linear SpringDebugDrawMode When should debug drawing of a spring system happen. EnumValue Description Always Always debug draw. None Never debug draw. WhenNoMesh Only debug draw if no graphical mesh is present. SpringDebugDrawType How should springs be drawn? EnumValue Description Normal Draw all springs equally (same color). Sorted Draw the springs in sorted order. This alters the color based upon the distance from an anchor point. SpringSortOrder How should springs be sorted for solving. This effects the convergence rate of a system. EnumValue Description BottomUp Sort so that springs further away from anchors are solved first. None No sorting is preserved. TopDown Sort so that springs closer to anchors are solved first. SpringSubTools EnumValue Description Anchoring PointSelector RopeCreator SpringCreator SpringSelector SpriteFill EnumValue Description NineSlice Stretch Tiled SpriteGeometryMode How the sprite quad is aligned in 3D space. EnumValue Description ViewPlane Aligned to always face the camera. ZPlane Aligned with the object's z axis. SpriteOrigin EnumValue Description BottomCenter BottomLeft Center Custom UpperLeft SpriteParticleAnimationMode EnumValue Description Looping Single SpriteParticleGeometryMode Sprite Particle System Enums. EnumValue Description Beam Billboarded FaceVelocity Flat Outward SpriteParticleSortMode EnumValue Description BackToFrontView FrontToBackView NegativeToPositiveX NegativeToPositiveY NegativeToPositiveZ None PositiveToNegativeX PositiveToNegativeY PositiveToNegativeZ SpriteSampling EnumValue Description Linear Nearest StencilMode How stencil buffer values should be tested to determine if a pixel renders. EnumValue Description Disabled No stencil testing. Enabled Stencil values will be tested with the active settings. Separate Stencil values will be tested, frontface/backface triangles will use separate settings. StencilOp Operations that can be applied to the stencil buffer. EnumValue Description Decrement Decrements the current stencil buffer value. Clamps to 0. DecrementWrap Decrements the current stencil buffer value. Wraps stencil buffer value to the maximum value when decrementing a stencil buffer value of zero. Increment Increments the current stencil buffer value. Clamps to the maximum value. IncrementWrap Increments the current stencil buffer value. Wraps stencil buffer value to zero when incrementing the maximum value. Invert Bitwise inverts the current stencil buffer value. Keep Keeps the current value. Replace Sets the stencil buffer value to the test value. Zero StoreResult EnumValue Description Added Failed Replaced StreamOrigin EnumValue Description Current End Start StreamType EnumValue Description StandardError StandardInput StandardOutput SynthWaveType Types of sound waves that can be used by SoundNodes. EnumValue Description Noise White noise produced by getting random values between -1 and 1. SawWave Audio generated by a saw wave (values go linearly from -1 to 1 then jump back to -1). SineWave Audio generated by a Sine wave. SquareWave Audio generated by a square wave (values are either -1 or 1). TriangleWave Audio generated by a triangle wave (values go linearly from -1 to 1 and back again). SystemSpace EnumValue Description LocalSpace WorldSpace TabWidth EnumValue Description FourSpaces TwoSpaces TcpSocketBind EnumValue Description Any Loopback TextAlign How text is positioned relative to the object position. EnumValue Description Center Center is aligned with the position. Left Left side is aligned with the position. Right Right side is aligned with the position. TextureAddressing How to address the texture with uv's outside of the range [0, 1] Clamp - Uses the last pixel at the border of the image Repeat - Wraps to the opposite side and continues to sample the image Mirror - Similar to Repeat but reverses image direction. EnumValue Description Clamp Mirror Repeat TextureAnisotropy How pixels are sampled when the ratio of pixels viewed along its u/v directions is not 1:1 (Typically when viewing a texture at an angle) The options represent how large of a ratio will be accounted for when sampling x1 = 1:1 (no anisotropy), x16 = 16:1 (high anisotropy), x16 being the best quality. EnumValue Description x1 x16 x2 x4 x8 TextureCompareFunc Method of comparison used when testing values against textures/buffers. EnumValue Description Always Compare always succeeds. Equal Compares if test value is equal to buffer value. Greater Compares if test value is greater than buffer value. GreaterEqual Compares if test value is greater than or equal to buffer value. Less Compares if test value is less than buffer value. LessEqual Compares if test value is less than or equal to buffer value. Never Compare never succeeds. NotEqual Compares if test value is not equal to buffer value. TextureCompareMode If texture sampling should do comparison. EnumValue Description Disabled Regular texture sampling. Enabled Sampling returns the result of a comparison. TextureCompression Block compression, lossy hardware supported formats with very high memory savings None - No compression will be used BC1 - RGB stored at 1/2 byte per pixel Used for color maps that don't need alpha, normal maps BC2 - RGB w/ low precision alpha stored at 1 byte per pixel No common usages BC3 - RGB w/ alpha stored at 1 byte per pixel Used for color maps that need alpha BC4 - R stored at 1/2 byte per pixel Used for single channel maps like height, specular, roughness BC5 - RG stored at 1 byte per pixel Used for two channel maps like normals with reconstructed Z BC6 - RGB floats stored at 1 byte per pixel Used for high dynamic range images. EnumValue Description BC1 BC2 BC3 BC4 BC5 BC6 None TextureFace EnumValue Description NegativeX NegativeY NegativeZ None PositiveX PositiveY PositiveZ TextureFiltering How pixels are sampled when viewing image at a different size Nearest - Gets the closest pixel unaltered Bilinear - Gets the 4 closest pixels and linearly blends between them Trilinear - Same as bilinear with an additional linear blend between mip levels. EnumValue Description Bilinear Nearest Trilinear TextureFormat EnumValue Description Depth16 Depth24 Depth24Stencil8 Depth32 Depth32f Depth32fStencil8Pad24 None R16 R16f R32f R8 RG16 RG16f RG32f RG8 RGB16 RGB16f RGB32f RGB8 RGBA16 RGBA16f RGBA32f RGBA8 SRGB8 SRGB8A8 TextureMipMapping Progressively scaled down versions of the image are produced to preserve image integrity when viewed at smaller scales None - No mipmaps are generated PreGenerated - Mipmaps are generated by the engine Uses higher quality filtering than the gpu Required for cubemaps in order to get perspective correct filtering over face edges GpuGenerated - Mipmaps are generated by the gpu at load time. EnumValue Description GpuGenerated None PreGenerated TextureType Type of the texture, must match sampler type in shaders Texture2D - Standard 2 dimensional texture TextureCube - Uses texture as a cubemap Faces are extracted from the image using aspect ratio to determine layout. EnumValue Description Texture2D TextureCube TileEditor2DSubToolType EnumValue Description DrawTool SelectionTool TimeDisplay EnumValue Description Frames Timecodes TimeMode EnumValue Description ActualFrametime FixedFrametime ToolTipColorScheme EnumValue Description Default Gray Green Orange Red Yellow TrackType EnumValue Description Component Invalid Object Property SubProperty TransferMode EnumValue Description Immediate Ordered Sequenced TransmissionDirection EnumValue Description Incoming Outgoing Unspecified TransportProtocol EnumValue Description Tcp Udp Unspecified UiDockMode EnumValue Description Bottom Left Right Top UiFocusDirection EnumValue Description Backward Forward UiHighlightColorMode EnumValue Description Hierarchy Local UiHighlightColorOp EnumValue Description Add Multiply Set UiHighlightMouseMode EnumValue Description Enter EnterHierarchy Hover UiHorizontalAlignment EnumValue Description Center Left Right UiScrollBarAxis EnumValue Description X Y UiSizePolicy EnumValue Description Auto Fixed Flex UiStackLayoutDirection EnumValue Description BottomToTop LeftToRight RightToLeft TopToBottom UiVerticalAlignment EnumValue Description Bottom Center Top UpdateMode EnumValue Description None TranslateRoot TranslateSelf UserConnectResponse EnumValue Description Accept Deny Pending Verbosity EnumValue Description Detailed Minimal VertexElementType EnumValue Description Byte Half NormByte NormShort Real Short VertexSemantic EnumValue Description Aux0 Aux1 Aux2 Aux3 Aux4 Aux5 Bitangent BoneIndices BoneWeights Color ColorAux None Normal Position Tangent Uv UvAux VerticalAlignment EnumValue Description Bottom Center Top ViewportScaling How the viewport should be sized within the window size. EnumValue Description Exact Viewport is not scaled. Fill Viewport fills the whole size. LargestMultiple Viewport is the largest multiple of the set resolution that fits in the window. Letterbox Viewport aspect ratio is always preserved. WebBrowserModifiers EnumValue Description Alt CapsLock Command Control IsKeyPad IsLeft IsRight LeftMouse MiddleMouse NumLock RightMouse Shift WindowState The state of the window for minimizing / maximizing. EnumValue Description Fullscreen Maximized Minimized Restore Windowed WindowStyleFlags EnumValue Description ClientOnly Close MainWindow NotVisible OnTaskBar Resizable TitleBar"
  },
  "docs/code_reference/event_reference.html": {
    "href": "docs/code_reference/event_reference.html",
    "title": "Event List | ZilchEngine",
    "keywords": "Event List Event EventType AcquireBasicNetHostInfo acquirenethostinfo AcquireExtraNetHostInfo acquirenethostinfo AnimationBlendEnded animationgraphevent AnimationEnded animationgraphevent AnimationLooped animationgraphevent AreaChanged areaevent PartialStandardErrorResponse asyncprocessevent PartialStandardOutputResponse asyncprocessevent MicrophoneCompressedByteData audiobytedataevent MicrophoneUncompressedFloatData audiofloatdataevent CastFilterCallback castfilterevent OperationRedone ChangedHistoryView OperationUndone ChangedHistoryView AllObjectsInitialized coginitializerevent CogPathCogChanged cogpathevent CollisionEnded collisionevent CollisionPersisted collisionevent CollisionStarted collisionevent GroupCollisionEnded collisiongroupevent GroupCollisionPersisted collisiongroupevent GroupCollisionStarted collisiongroupevent CommandExecute commandevent ConnectionCompleted connectionevent ConnectionFailed connectionevent Disconnected connectionevent ContextMenuCreated contextmenuevent CustomAudioNodeSamplesNeeded customaudionodeevent ComputeCustomJointInfo customjointevent ApplyCustomPhysicsEffect customphysicseffectevent CustomPhysicsEffectPrecalculatePhase customphysicseffectevent AnimationPostUpdate event CameraControllerUpdated event ChildrenOrderChanged event EditSpaces event GizmoObjectsDuplicated event RotationBasisGizmoBegin event RotationBasisGizmoEnd event RotationBasisGizmoModified event SelectionChanged event SelectionFinal event StandardErrorFinished event StandardOutputFinished event ToolActivate event ToolDeactivate event ToolDraw event GameFocusIn gameevent GameFocusOut gameevent GameLoad gameevent GameQuit gameevent GameRequestQuit gameevent GameSetup gameevent GameStarted gameevent LevelStarted gameevent ButtonDown gamepadevent ButtonUp gamepadevent GamepadStickFlicked gamepadevent GizmoPreDrag gizmoevent MouseEnterGizmo gizmoevent MouseEnterGizmoHierarchy gizmoevent MouseExitGizmo gizmoevent MouseExitGizmoHierarchy gizmoevent GizmoModified gizmoupdateevent ObjectTransformGizmoStart gizmoupdateevent EnterView graphicalevent EnterViewAny graphicalevent ExitView graphicalevent ExitViewAll graphicalevent GraphicalSort graphicalsortevent Closing handleableevent Attached hierarchyevent ChildAttached hierarchyevent ChildDetached hierarchyevent Detached hierarchyevent JointExceedImpulseLimit jointevent JointLowerLimitReached jointevent JointUpperLimitReached jointevent JoystickButtonDown joystickevent JoystickButtonUp joystickevent JoystickFound joystickevent JoystickLost joystickevent JoystickUpdated joystickevent HoverKeyDown keyboardevent HoverKeyPreview keyboardevent HoverKeyRepeated keyboardevent HoverKeyUp keyboardevent KeyDown keyboardevent KeyRepeated keyboardevent KeyUp keyboardevent TextTyped keyboardtextevent MainWindowTransformUpdated mainwindowtransformevent ManipulatorToolEnd manipulatortoolevent ManipulatorToolModified manipulatortoolevent ManipulatorToolStart manipulatortoolevent MetaDrop metadropevent MetaDropTest metadropevent MetaDropUpdate metadropevent MIDIModWheel midievent MIDINoteOff midievent MIDINoteOn midievent MIDIOtherControl midievent MIDIPitchWheel midievent MIDIVolume midievent MouseFileDrop mousefiledropevent NetChannelIncomingPropertyChanged netchannelpropertychange NetChannelIncomingPropertyInitialized netchannelpropertychange NetChannelIncomingPropertyUninitialized netchannelpropertychange NetChannelOutgoingPropertyChanged netchannelpropertychange NetChannelOutgoingPropertyInitialized netchannelpropertychange NetChannelOutgoingPropertyUninitialized netchannelpropertychange NetEventReceived neteventreceived NetEventSent neteventsent NetGameStarted netgamestarted NetHostListDiscovered nethostlistupdate NetHostListRefreshed nethostlistupdate NetHostRecordDiscovered nethostrecordevent NetHostRecordExpired nethostrecordevent NetHostRecordUpdate nethostrecordevent NetHostDiscovered nethostupdate NetHostRefreshed nethostupdate NetLevelStarted netlevelstarted NetLinkConnected netlinkconnected NetLinkDisconnected netlinkdisconnected NetGameOffline netobjectoffline NetObjectOffline netobjectoffline NetSpaceOffline netobjectoffline NetUserOffline netobjectoffline NetGameOnline netobjectonline NetObjectOnline netobjectonline NetSpaceOnline netobjectonline NetUserOnline netobjectonline NetPeerClosed netpeerclosed NetPeerOpened netpeeropened NetPeerReceivedConnectRequest netpeerreceivedconnectrequest NetPeerReceivedConnectResponse netpeerreceivedconnectresponse NetPeerReceivedUserAddRequest netpeerreceiveduseraddrequest NetPeerReceivedUserAddResponse netpeerreceiveduseraddresponse NetPeerSentConnectRequest netpeersentconnectrequest NetPeerSentConnectResponse netpeersentconnectresponse NetPeerSentUserAddRequest netpeersentuseraddrequest NetPeerSentUserAddResponse netpeersentuseraddresponse NetUserAcquiredObjectOwnership netuseracquiredobjectownership NetUserLostObjectOwnership netuserlostobjectownership NetUserOwnerChanged netuserownerchanged AllParticlesDead objectevent CogDelayedDestroy objectevent CogDestroy objectevent CogNameChanged objectevent ComponentsModified objectevent GamepadUpdated objectevent GamepadsUpdated objectevent GizmoTargetSet objectevent JoysticksChanged objectevent ObjectModified objectevent ObjectStructureModified objectevent ParticlesExhausted objectevent PhysicsUpdateFinished objectevent RigidBodyAwoke objectevent RigidBodySlept objectevent TransformUpdated objectevent ObjectLinkChanged objectlinkevent ObjectLinkPointChanged objectlinkpointchangedevent ObjectRotateGizmoModified objecttransformgizmoevent ObjectScaleGizmoModified objecttransformgizmoevent ObjectTransformGizmoEnd objecttransformgizmoevent ObjectTranslateGizmoModified objecttransformgizmoevent OperationQueued operationqueueevent OperationRedo operationqueueevent OperationUndo operationqueueevent ParticlesSpawned particleevent GroupCollisionPreSolve presolveevent PropertyModified propertyevent PropertyModifiedIntermediate propertyevent ReceivedData receiveddataevent RenderTasksUpdate rendertasksevent RingGizmoModified ringgizmoevent RotateGizmoModified rotategizmoupdateevent RotationBasisAabbQuery rotationbasisgizmoaabbqueryevent ScaleGizmoModified scalegizmoupdateevent AddedInstanceToTag soundevent AudioInterpolationDone soundevent SoundNodeDisconnected soundevent TagHasNoInstances soundevent MusicBar soundinstanceevent MusicBeat soundinstanceevent MusicCustomTime soundinstanceevent MusicEighthNote soundinstanceevent MusicHalfNote soundinstanceevent MusicQuarterNote soundinstanceevent MusicWholeNote soundinstanceevent SoundCuePostPlay soundinstanceevent SoundCuePrePlay soundinstanceevent SoundInstancePlayed soundinstanceevent SoundLooped soundinstanceevent SoundStopped soundinstanceevent QuerySpline splineevent SplineModified splineevent SocketError texterrorevent GetToolInfo tooluievent TranslateGizmoModified translategizmoupdateevent UiFocusGained uifocusevent UiFocusGainedHierarchy uifocusevent UiFocusGainedPreview uifocusevent UiFocusLost uifocusevent UiFocusLostHierarchy uifocusevent UiFocusReset uifocusevent UiPostUpdate uitransformupdateevent UiPreUpdate uitransformupdateevent CurrentInputDeviceChanged updateevent EngineUpdate updateevent FrameUpdate updateevent LogicUpdate updateevent PreviewUpdate updateevent DoubleClick viewportmouseevent LeftClick viewportmouseevent LeftMouseDown viewportmouseevent LeftMouseUp viewportmouseevent MiddleClick viewportmouseevent MiddleMouseDown viewportmouseevent MiddleMouseUp viewportmouseevent MouseDown viewportmouseevent MouseDragEnd viewportmouseevent MouseDragMove viewportmouseevent MouseDragStart viewportmouseevent MouseDragUpdate viewportmouseevent MouseEnter viewportmouseevent MouseEnterHierarchy viewportmouseevent MouseEnterPreview viewportmouseevent MouseExit viewportmouseevent MouseExitHierarchy viewportmouseevent MouseHold viewportmouseevent MouseHover viewportmouseevent MouseMove viewportmouseevent MouseScroll viewportmouseevent MouseUp viewportmouseevent MouseUpdate viewportmouseevent RightClick viewportmouseevent RightMouseDown viewportmouseevent RightMouseUp viewportmouseevent SelectToolPreSelect viewportmouseevent WebBrowserConsoleMessage webbrowserconsoleevent WebBrowserCursorChanged webbrowsercursorevent WebBrowserDownloadStarted webbrowserdownloadevent WebBrowserDownloadUpdated webbrowserdownloadevent WebBrowserPointQuery webbrowserpointqueryevent WebBrowserPopup webbrowserpopupcreateevent WebBrowserStatusChanged webbrowsertextevent WebBrowserTitleChanged webbrowsertextevent WebBrowserUrlChanged webbrowserurlevent WebResponse webresponseevent ZUiSliderChanged ZUiSliderEvent HistoryEntryUpdate nadaevent RedoRowsCleared nadaevent AcquireBasicNetHostInfo **Type: **acquirenethostinfo AcquireExtraNetHostInfo **Type: **acquirenethostinfo AnimationBlendEnded **Type: **animationgraphevent AnimationEnded **Type: **animationgraphevent AnimationLooped **Type: **animationgraphevent AreaChanged **Type: **areaevent PartialStandardErrorResponse **Type: **asyncprocessevent PartialStandardOutputResponse **Type: **asyncprocessevent MicrophoneCompressedByteData **Type: **audiobytedataevent MicrophoneUncompressedFloatData **Type: **audiofloatdataevent CastFilterCallback **Type: **castfilterevent OperationRedone **Type: **ChangedHistoryView OperationUndone **Type: **ChangedHistoryView AllObjectsInitialized **Type: **coginitializerevent CogPathCogChanged **Type: **cogpathevent CollisionEnded **Type: **collisionevent CollisionPersisted **Type: **collisionevent CollisionStarted **Type: **collisionevent GroupCollisionEnded **Type: **collisiongroupevent GroupCollisionPersisted **Type: **collisiongroupevent GroupCollisionStarted **Type: **collisiongroupevent CommandExecute **Type: **commandevent ConnectionCompleted **Type: **connectionevent ConnectionFailed **Type: **connectionevent Disconnected **Type: **connectionevent ContextMenuCreated **Type: **contextmenuevent CustomAudioNodeSamplesNeeded **Type: **customaudionodeevent ComputeCustomJointInfo **Type: **customjointevent ApplyCustomPhysicsEffect **Type: **customphysicseffectevent CustomPhysicsEffectPrecalculatePhase **Type: **customphysicseffectevent AnimationPostUpdate **Type: **event CameraControllerUpdated **Type: **event ChildrenOrderChanged **Type: **event EditSpaces **Type: **event GizmoObjectsDuplicated **Type: **event RotationBasisGizmoBegin **Type: **event RotationBasisGizmoEnd **Type: **event RotationBasisGizmoModified **Type: **event SelectionChanged **Type: **event SelectionFinal **Type: **event StandardErrorFinished **Type: **event StandardOutputFinished **Type: **event ToolActivate **Type: **event ToolDeactivate **Type: **event ToolDraw **Type: **event GameFocusIn **Type: **gameevent GameFocusOut **Type: **gameevent GameLoad **Type: **gameevent GameQuit **Type: **gameevent GameRequestQuit **Type: **gameevent GameSetup **Type: **gameevent GameStarted **Type: **gameevent LevelStarted **Type: **gameevent ButtonDown **Type: **gamepadevent ButtonUp **Type: **gamepadevent GamepadStickFlicked **Type: **gamepadevent GizmoPreDrag **Type: **gizmoevent MouseEnterGizmo **Type: **gizmoevent MouseEnterGizmoHierarchy **Type: **gizmoevent MouseExitGizmo **Type: **gizmoevent MouseExitGizmoHierarchy **Type: **gizmoevent GizmoModified **Type: **gizmoupdateevent ObjectTransformGizmoStart **Type: **gizmoupdateevent EnterView **Type: **graphicalevent EnterViewAny **Type: **graphicalevent ExitView **Type: **graphicalevent ExitViewAll **Type: **graphicalevent GraphicalSort **Type: **graphicalsortevent Closing **Type: **handleableevent Attached **Type: **hierarchyevent ChildAttached **Type: **hierarchyevent ChildDetached **Type: **hierarchyevent Detached **Type: **hierarchyevent JointExceedImpulseLimit **Type: **jointevent JointLowerLimitReached **Type: **jointevent JointUpperLimitReached **Type: **jointevent JoystickButtonDown **Type: **joystickevent JoystickButtonUp **Type: **joystickevent JoystickFound **Type: **joystickevent JoystickLost **Type: **joystickevent JoystickUpdated **Type: **joystickevent HoverKeyDown **Type: **keyboardevent HoverKeyPreview **Type: **keyboardevent HoverKeyRepeated **Type: **keyboardevent HoverKeyUp **Type: **keyboardevent KeyDown **Type: **keyboardevent KeyRepeated **Type: **keyboardevent KeyUp **Type: **keyboardevent TextTyped **Type: **keyboardtextevent MainWindowTransformUpdated **Type: **mainwindowtransformevent ManipulatorToolEnd **Type: **manipulatortoolevent ManipulatorToolModified **Type: **manipulatortoolevent ManipulatorToolStart **Type: **manipulatortoolevent MetaDrop **Type: **metadropevent MetaDropTest **Type: **metadropevent MetaDropUpdate **Type: **metadropevent MIDIModWheel **Type: **midievent MIDINoteOff **Type: **midievent MIDINoteOn **Type: **midievent MIDIOtherControl **Type: **midievent MIDIPitchWheel **Type: **midievent MIDIVolume **Type: **midievent MouseFileDrop **Type: **mousefiledropevent NetChannelIncomingPropertyChanged **Type: **netchannelpropertychange NetChannelIncomingPropertyInitialized **Type: **netchannelpropertychange NetChannelIncomingPropertyUninitialized **Type: **netchannelpropertychange NetChannelOutgoingPropertyChanged **Type: **netchannelpropertychange NetChannelOutgoingPropertyInitialized **Type: **netchannelpropertychange NetChannelOutgoingPropertyUninitialized **Type: **netchannelpropertychange NetEventReceived **Type: **neteventreceived NetEventSent **Type: **neteventsent NetGameStarted **Type: **netgamestarted NetHostListDiscovered **Type: **nethostlistupdate NetHostListRefreshed **Type: **nethostlistupdate NetHostRecordDiscovered **Type: **nethostrecordevent NetHostRecordExpired **Type: **nethostrecordevent NetHostRecordUpdate **Type: **nethostrecordevent NetHostDiscovered **Type: **nethostupdate NetHostRefreshed **Type: **nethostupdate NetLevelStarted **Type: **netlevelstarted NetLinkConnected **Type: **netlinkconnected NetLinkDisconnected **Type: **netlinkdisconnected NetGameOffline **Type: **netobjectoffline NetObjectOffline **Type: **netobjectoffline NetSpaceOffline **Type: **netobjectoffline NetUserOffline **Type: **netobjectoffline NetGameOnline **Type: **netobjectonline NetObjectOnline **Type: **netobjectonline NetSpaceOnline **Type: **netobjectonline NetUserOnline **Type: **netobjectonline NetPeerClosed **Type: **netpeerclosed NetPeerOpened **Type: **netpeeropened NetPeerReceivedConnectRequest **Type: **netpeerreceivedconnectrequest NetPeerReceivedConnectResponse **Type: **netpeerreceivedconnectresponse NetPeerReceivedUserAddRequest **Type: **netpeerreceiveduseraddrequest NetPeerReceivedUserAddResponse **Type: **netpeerreceiveduseraddresponse NetPeerSentConnectRequest **Type: **netpeersentconnectrequest NetPeerSentConnectResponse **Type: **netpeersentconnectresponse NetPeerSentUserAddRequest **Type: **netpeersentuseraddrequest NetPeerSentUserAddResponse **Type: **netpeersentuseraddresponse NetUserAcquiredObjectOwnership **Type: **netuseracquiredobjectownership NetUserLostObjectOwnership **Type: **netuserlostobjectownership NetUserOwnerChanged **Type: **netuserownerchanged AllParticlesDead **Type: **objectevent CogDelayedDestroy **Type: **objectevent CogDestroy **Type: **objectevent CogNameChanged **Type: **objectevent ComponentsModified **Type: **objectevent GamepadUpdated **Type: **objectevent GamepadsUpdated **Type: **objectevent GizmoTargetSet **Type: **objectevent JoysticksChanged **Type: **objectevent ObjectModified **Type: **objectevent ObjectStructureModified **Type: **objectevent ParticlesExhausted **Type: **objectevent PhysicsUpdateFinished **Type: **objectevent RigidBodyAwoke **Type: **objectevent RigidBodySlept **Type: **objectevent TransformUpdated **Type: **objectevent ObjectLinkChanged **Type: **objectlinkevent ObjectLinkPointChanged **Type: **objectlinkpointchangedevent ObjectRotateGizmoModified **Type: **objecttransformgizmoevent ObjectScaleGizmoModified **Type: **objecttransformgizmoevent ObjectTransformGizmoEnd **Type: **objecttransformgizmoevent ObjectTranslateGizmoModified **Type: **objecttransformgizmoevent OperationQueued **Type: **operationqueueevent OperationRedo **Type: **operationqueueevent OperationUndo **Type: **operationqueueevent ParticlesSpawned **Type: **particleevent GroupCollisionPreSolve **Type: **presolveevent PropertyModified **Type: **propertyevent PropertyModifiedIntermediate **Type: **propertyevent ReceivedData **Type: **receiveddataevent RenderTasksUpdate **Type: **rendertasksevent RingGizmoModified **Type: **ringgizmoevent RotateGizmoModified **Type: **rotategizmoupdateevent RotationBasisAabbQuery **Type: **rotationbasisgizmoaabbqueryevent ScaleGizmoModified **Type: **scalegizmoupdateevent AddedInstanceToTag **Type: **soundevent AudioInterpolationDone **Type: **soundevent SoundNodeDisconnected **Type: **soundevent TagHasNoInstances **Type: **soundevent MusicBar **Type: **soundinstanceevent MusicBeat **Type: **soundinstanceevent MusicCustomTime **Type: **soundinstanceevent MusicEighthNote **Type: **soundinstanceevent MusicHalfNote **Type: **soundinstanceevent MusicQuarterNote **Type: **soundinstanceevent MusicWholeNote **Type: **soundinstanceevent SoundCuePostPlay **Type: **soundinstanceevent SoundCuePrePlay **Type: **soundinstanceevent SoundInstancePlayed **Type: **soundinstanceevent SoundLooped **Type: **soundinstanceevent SoundStopped **Type: **soundinstanceevent QuerySpline **Type: **splineevent SplineModified **Type: **splineevent SocketError **Type: **texterrorevent GetToolInfo **Type: **tooluievent TranslateGizmoModified **Type: **translategizmoupdateevent UiFocusGained **Type: **uifocusevent UiFocusGainedHierarchy **Type: **uifocusevent UiFocusGainedPreview **Type: **uifocusevent UiFocusLost **Type: **uifocusevent UiFocusLostHierarchy **Type: **uifocusevent UiFocusReset **Type: **uifocusevent UiPostUpdate **Type: **uitransformupdateevent UiPreUpdate **Type: **uitransformupdateevent CurrentInputDeviceChanged **Type: **updateevent EngineUpdate **Type: **updateevent FrameUpdate **Type: **updateevent LogicUpdate **Type: **updateevent PreviewUpdate **Type: **updateevent DoubleClick **Type: **viewportmouseevent LeftClick **Type: **viewportmouseevent LeftMouseDown **Type: **viewportmouseevent LeftMouseUp **Type: **viewportmouseevent MiddleClick **Type: **viewportmouseevent MiddleMouseDown **Type: **viewportmouseevent MiddleMouseUp **Type: **viewportmouseevent MouseDown **Type: **viewportmouseevent MouseDragEnd **Type: **viewportmouseevent MouseDragMove **Type: **viewportmouseevent MouseDragStart **Type: **viewportmouseevent MouseDragUpdate **Type: **viewportmouseevent MouseEnter **Type: **viewportmouseevent MouseEnterHierarchy **Type: **viewportmouseevent MouseEnterPreview **Type: **viewportmouseevent MouseExit **Type: **viewportmouseevent MouseExitHierarchy **Type: **viewportmouseevent MouseHold **Type: **viewportmouseevent MouseHover **Type: **viewportmouseevent MouseMove **Type: **viewportmouseevent MouseScroll **Type: **viewportmouseevent MouseUp **Type: **viewportmouseevent MouseUpdate **Type: **viewportmouseevent RightClick **Type: **viewportmouseevent RightMouseDown **Type: **viewportmouseevent RightMouseUp **Type: **viewportmouseevent SelectToolPreSelect **Type: **viewportmouseevent WebBrowserConsoleMessage **Type: **webbrowserconsoleevent WebBrowserCursorChanged **Type: **webbrowsercursorevent WebBrowserDownloadStarted **Type: **webbrowserdownloadevent WebBrowserDownloadUpdated **Type: **webbrowserdownloadevent WebBrowserPointQuery **Type: **webbrowserpointqueryevent WebBrowserPopup **Type: **webbrowserpopupcreateevent WebBrowserStatusChanged **Type: **webbrowsertextevent WebBrowserTitleChanged **Type: **webbrowsertextevent WebBrowserUrlChanged **Type: **webbrowserurlevent WebResponse **Type: **webresponseevent ZUiSliderChanged **Type: **ZUiSliderEvent HistoryEntryUpdate **Type: **nadaevent RedoRowsCleared **Type: **nadaevent"
  },
  "docs/code_reference/flags_reference.html": {
    "href": "docs/code_reference/flags_reference.html",
    "title": "| ZilchEngine",
    "keywords": "Flags FileMode Members StreamCapabilities FileMode FlagName Description Append Read Sequential ShareDelete ShareRead ShareWrite Write Members FlagName Description All Extension Inherited InheritedInstance InheritedInstanceStatic InheritedStatic Instance InstanceStatic Static StreamCapabilities FlagName Description GetCount None Read Seek SetCount Write"
  },
  "docs/code_reference/nada_base_types.html": {
    "href": "docs/code_reference/nada_base_types.html",
    "title": "| ZilchEngine",
    "keywords": "anyhandle anytype [array_type ](nada_base_types/array_type .md) asciiencoding boolean boolean2 boolean2x2 boolean2x3 boolean2x4 boolean3 boolean3x2 boolean3x3 boolean3x4 boolean4 boolean4x2 boolean4x3 boolean4x4 boundtype buildevent byte color colors console consoleevent debuggerevent delegateparameter delegateparameterrange delegatetype doubleinteger doublereal errorevent errortype eventdata eventhandler events exception exceptionevent executablestate fatalerrorevent field fieldrange filepath filestream function functionrange gettersetter gettersetterrange [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /]] [hashmapkeyrange_key ](nada_base_types/hashmapkeyrange_key .md) [[zilch_engine_documentation/code_reference/nada_base_types/hashmaprange_key, value /]] [hashmapvaluerange_value ](nada_base_types/hashmapvaluerange_value .md) iencoding indirectiontype integer integer2 integer2x2 integer2x3 integer2x4 integer3 integer3x2 integer3x3 integer3x4 integer4 integer4x2 integer4x3 integer4x4 istream [[zilch_engine_documentation/code_reference/nada_base_types/keyvalue_key, value /]] library math member memberrange memoryleakevent multiplemethodsofthesamename multiprimitive null opcodeevent parseevent pluginevent processclass processstartinfo [property_type ](nada_base_types/property_type .md) propertyrange quaternion random real real2 real2x2 real2x3 real2x4 real3 real3x2 real3x3 real3x4 real4 real4x2 real4x3 real4x4 reflectionobject rune runeiterator string stringbuilder stringrange stringsplitrange type utf8encoding variable void wrapper"
  },
  "docs/code_reference/nada_base_types/anyhandle.html": {
    "href": "docs/code_reference/nada_base_types/anyhandle.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/nada_base_types/anytype.html": {
    "href": "docs/code_reference/nada_base_types/anytype.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes type Properties Methods"
  },
  "docs/code_reference/nada_base_types/array_t.html": {
    "href": "docs/code_reference/nada_base_types/array_t.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes [ Add](array_t .md#add-void) [ All](array_t .md#all-zilch-engine-document) [ Constructor](array_t .md#array-t-void) [ Capacity](array_t .md#capacity-zilch-engine-doc) [ Clear](array_t .md#clear-void) [ Count](array_t .md#count-zilch-engine-docume) [ Copy](array_t .md#copy-zilch-engine-documen) [ LastIndex](array_t .md#lastindex-zilch-engine-do) [ FindFirstIndex](array_t .md#findfirstindex-zilch-engi) [ Get](array_t .md#get-zilch-engine-document) [ Insert](array_t .md#insert-void) [ Pop](array_t .md#pop-zilch-engine-document) [ Push](array_t .md#push-void) [ Range](array_t .md#range-zilch-engine-docume) [ RemoveAll](array_t .md#removeall-zilch-engine-do) [ RemoveAt](array_t .md#removeat-void) [ RemoveFirst](array_t .md#removefirst-zilch-engine) [ RemoveSwap](array_t .md#removeswap-void) [ Reserve](array_t .md#reserve-void) [ Resize](array_t .md#resize-void) [ Set](array_t .md#set-void) [ Sort](array_t .md#sort-void) Properties All : ArrayRange[T] read-only var All : ArrayRange[T] Capacity : integer read-only var Capacity : Integer Count : integer read-only var Count : Integer LastIndex : integer read-only var LastIndex : Integer Methods Add : Void Name Type Description p0 T function Add(p0 : T) Array[T] : Void constructor Name Type Description function Array[T]() Array[T] : Void constructor Name Type Description size integer function Array[T](size : Integer) Array[T] : Void constructor Name Type Description size integer defaultValue T function Array[T](size : Integer, defaultValue : T) Clear : Void Name Type Description function Clear() Copy : Array[T] Name Type Description function Copy() : Array[T] FindFirstIndex : integer Name Type Description value T function FindFirstIndex(value : T) : Integer Get : T Name Type Description index integer function Get(index : Integer) : T Insert : Void Name Type Description index integer value T function Insert(index : Integer, value : T) Pop : T Name Type Description function Pop() : T Push : Void Name Type Description p0 T function Push(p0 : T) Range : ArrayRange[T] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[T] RemoveAll : integer Name Type Description value T function RemoveAll(value : T) : Integer RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveFirst : boolean Name Type Description value T function RemoveFirst(value : T) : Boolean RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer defaultValue T function Resize(size : Integer, defaultValue : T) Set : Void Name Type Description index integer value T function Set(index : Integer, value : T) Sort : Void Name Type Description compare delegate(left:any,right:any):boolean function Sort(compare : delegate(left:any,right:any):Boolean) Sort : Void Name Type Description compare delegate(left:any,right:any):integer function Sort(compare : delegate(left:any,right:any):Integer)"
  },
  "docs/code_reference/nada_base_types/array_type.html": {
    "href": "docs/code_reference/nada_base_types/array_type.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes [ Add](array_type .md#add-void) [ All](array_type .md#all-arrayrange) [ Constructor](array_type .md#array-type-void) [ Capacity](array_type .md#capacity-zilch-engine-doc) [ Clear](array_type .md#clear-void) [ Count](array_type .md#count-zilch-engine-docume) [ Copy](array_type .md#copy-zilch-engine-documen) [ LastIndex](array_type .md#lastindex-zilch-engine-do) [ FindFirstIndex](array_type .md#findfirstindex-zilch-engi) [ Get](array_type .md#get-zilch-engine-document) [ Insert](array_type .md#insert-void) [ Pop](array_type .md#pop-zilch-engine-document) [ Push](array_type .md#push-void) [ Range](array_type .md#range-zilch-engine-docume) [ RemoveAll](array_type .md#removeall-zilch-engine-do) [ RemoveAt](array_type .md#removeat-void) [ RemoveFirst](array_type .md#removefirst-zilch-engine) [ RemoveSwap](array_type .md#removeswap-void) [ Reserve](array_type .md#reserve-void) [ Resize](array_type .md#resize-void) [ Set](array_type .md#set-void) [ Sort](array_type .md#sort-void) Properties All : ArrayRange read-only var All : ArrayRange Capacity : integer read-only var Capacity : Integer Count : integer read-only var Count : Integer LastIndex : integer read-only var LastIndex : Integer Methods Add : Void Name Type Description p0 anyhandle function Add(p0 : AnyHandle) Add : Void Name Type Description p0 boolean function Add(p0 : Boolean) Add : Void Name Type Description p0 boolean2 function Add(p0 : Boolean2) Add : Void Name Type Description p0 boolean3 function Add(p0 : Boolean3) Add : Void Name Type Description p0 boolean4 function Add(p0 : Boolean4) Add : Void Name Type Description p0 byte function Add(p0 : Byte) Add : Void Name Type Description p0 cog function Add(p0 : Cog) Add : Void Name Type Description p0 delegate() function Add(p0 : delegate()) Add : Void Name Type Description p0 doubleinteger function Add(p0 : DoubleInteger) Add : Void Name Type Description p0 doublereal function Add(p0 : DoubleReal) Add : Void Name Type Description p0 integer function Add(p0 : Integer) Add : Void Name Type Description p0 integer2 function Add(p0 : Integer2) Add : Void Name Type Description p0 integer3 function Add(p0 : Integer3) Add : Void Name Type Description p0 integer4 function Add(p0 : Integer4) Add : Void Name Type Description p0 Key function Add(p0 : Key) Add : Void Name Type Description p0 quaternion function Add(p0 : Quaternion) Add : Void Name Type Description p0 real function Add(p0 : Real) Add : Void Name Type Description p0 real2 function Add(p0 : Real2) Add : Void Name Type Description p0 real3 function Add(p0 : Real3) Add : Void Name Type Description p0 real4 function Add(p0 : Real4) Add : Void Name Type Description p0 string function Add(p0 : String) Add : Void Name Type Description p0 T function Add(p0 : T) Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description function Array[Type]() Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer function Array[Type](size : Integer) Array[Type] : Void constructor Name Type Description size integer defaultValue anyhandle function Array[Type](size : Integer, defaultValue : AnyHandle) Array[Type] : Void constructor Name Type Description size integer defaultValue boolean function Array[Type](size : Integer, defaultValue : Boolean) Array[Type] : Void constructor Name Type Description size integer defaultValue boolean2 function Array[Type](size : Integer, defaultValue : Boolean2) Array[Type] : Void constructor Name Type Description size integer defaultValue boolean3 function Array[Type](size : Integer, defaultValue : Boolean3) Array[Type] : Void constructor Name Type Description size integer defaultValue boolean4 function Array[Type](size : Integer, defaultValue : Boolean4) Array[Type] : Void constructor Name Type Description size integer defaultValue byte function Array[Type](size : Integer, defaultValue : Byte) Array[Type] : Void constructor Name Type Description size integer defaultValue cog function Array[Type](size : Integer, defaultValue : Cog) Array[Type] : Void constructor Name Type Description size integer defaultValue delegate() function Array[Type](size : Integer, defaultValue : delegate()) Array[Type] : Void constructor Name Type Description size integer defaultValue doubleinteger function Array[Type](size : Integer, defaultValue : DoubleInteger) Array[Type] : Void constructor Name Type Description size integer defaultValue doublereal function Array[Type](size : Integer, defaultValue : DoubleReal) Array[Type] : Void constructor Name Type Description size integer defaultValue integer function Array[Type](size : Integer, defaultValue : Integer) Array[Type] : Void constructor Name Type Description size integer defaultValue integer2 function Array[Type](size : Integer, defaultValue : Integer2) Array[Type] : Void constructor Name Type Description size integer defaultValue integer3 function Array[Type](size : Integer, defaultValue : Integer3) Array[Type] : Void constructor Name Type Description size integer defaultValue integer4 function Array[Type](size : Integer, defaultValue : Integer4) Array[Type] : Void constructor Name Type Description size integer defaultValue Key function Array[Type](size : Integer, defaultValue : Key) Array[Type] : Void constructor Name Type Description size integer defaultValue quaternion function Array[Type](size : Integer, defaultValue : Quaternion) Array[Type] : Void constructor Name Type Description size integer defaultValue real function Array[Type](size : Integer, defaultValue : Real) Array[Type] : Void constructor Name Type Description size integer defaultValue real2 function Array[Type](size : Integer, defaultValue : Real2) Array[Type] : Void constructor Name Type Description size integer defaultValue real3 function Array[Type](size : Integer, defaultValue : Real3) Array[Type] : Void constructor Name Type Description size integer defaultValue real4 function Array[Type](size : Integer, defaultValue : Real4) Array[Type] : Void constructor Name Type Description size integer defaultValue string function Array[Type](size : Integer, defaultValue : String) Array[Type] : Void constructor Name Type Description size integer defaultValue T function Array[Type](size : Integer, defaultValue : T) Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Clear : Void Name Type Description function Clear() Copy : Array[integer2] Name Type Description function Copy() : Array[Integer2] Copy : Array[boolean4] Name Type Description function Copy() : Array[Boolean4] Copy : Array[cog] Name Type Description function Copy() : Array[Cog] Copy : Array[integer4] Name Type Description function Copy() : Array[Integer4] Copy : Array[byte] Name Type Description function Copy() : Array[Byte] Copy : Array[integer] Name Type Description function Copy() : Array[Integer] Copy : Array[anyhandle] Name Type Description function Copy() : Array[AnyHandle] Copy : Array[delegate()] Name Type Description function Copy() : Array[delegate()] Copy : Array[string] Name Type Description function Copy() : Array[String] Copy : Array[real3] Name Type Description function Copy() : Array[Real3] Copy : Array[real4] Name Type Description function Copy() : Array[Real4] Copy : Array[type] Name Type Description function Copy() : Array[Type] Copy : Array[real] Name Type Description function Copy() : Array[Real] Copy : Array[quaternion] Name Type Description function Copy() : Array[Quaternion] Copy : Array[boolean3] Name Type Description function Copy() : Array[Boolean3] Copy : Array[doubleinteger] Name Type Description function Copy() : Array[DoubleInteger] Copy : Array[integer3] Name Type Description function Copy() : Array[Integer3] Copy : Array[any] Name Type Description function Copy() : Array[any] Copy : Array[boolean] Name Type Description function Copy() : Array[Boolean] Copy : Array[real2] Name Type Description function Copy() : Array[Real2] Copy : Array[doublereal] Name Type Description function Copy() : Array[DoubleReal] Copy : Array[boolean2] Name Type Description function Copy() : Array[Boolean2] FindFirstIndex : integer Name Type Description value anyhandle function FindFirstIndex(value : AnyHandle) : Integer FindFirstIndex : integer Name Type Description value boolean function FindFirstIndex(value : Boolean) : Integer FindFirstIndex : integer Name Type Description value boolean2 function FindFirstIndex(value : Boolean2) : Integer FindFirstIndex : integer Name Type Description value boolean3 function FindFirstIndex(value : Boolean3) : Integer FindFirstIndex : integer Name Type Description value boolean4 function FindFirstIndex(value : Boolean4) : Integer FindFirstIndex : integer Name Type Description value byte function FindFirstIndex(value : Byte) : Integer FindFirstIndex : integer Name Type Description value cog function FindFirstIndex(value : Cog) : Integer FindFirstIndex : integer Name Type Description value delegate() function FindFirstIndex(value : delegate()) : Integer FindFirstIndex : integer Name Type Description value doubleinteger function FindFirstIndex(value : DoubleInteger) : Integer FindFirstIndex : integer Name Type Description value doublereal function FindFirstIndex(value : DoubleReal) : Integer FindFirstIndex : integer Name Type Description value integer function FindFirstIndex(value : Integer) : Integer FindFirstIndex : integer Name Type Description value integer2 function FindFirstIndex(value : Integer2) : Integer FindFirstIndex : integer Name Type Description value integer3 function FindFirstIndex(value : Integer3) : Integer FindFirstIndex : integer Name Type Description value integer4 function FindFirstIndex(value : Integer4) : Integer FindFirstIndex : integer Name Type Description value Key function FindFirstIndex(value : Key) : Integer FindFirstIndex : integer Name Type Description value quaternion function FindFirstIndex(value : Quaternion) : Integer FindFirstIndex : integer Name Type Description value real function FindFirstIndex(value : Real) : Integer FindFirstIndex : integer Name Type Description value real2 function FindFirstIndex(value : Real2) : Integer FindFirstIndex : integer Name Type Description value real3 function FindFirstIndex(value : Real3) : Integer FindFirstIndex : integer Name Type Description value real4 function FindFirstIndex(value : Real4) : Integer FindFirstIndex : integer Name Type Description value string function FindFirstIndex(value : String) : Integer FindFirstIndex : integer Name Type Description value T function FindFirstIndex(value : T) : Integer Get : Key Name Type Description index integer function Get(index : Integer) : Key Get : quaternion Name Type Description index integer function Get(index : Integer) : Quaternion Get : cog Name Type Description index integer function Get(index : Integer) : Cog Get : real2 Name Type Description index integer function Get(index : Integer) : Real2 Get : real3 Name Type Description index integer function Get(index : Integer) : Real3 Get : boolean2 Name Type Description index integer function Get(index : Integer) : Boolean2 Get : real Name Type Description index integer function Get(index : Integer) : Real Get : integer4 Name Type Description index integer function Get(index : Integer) : Integer4 Get : delegate() Name Type Description index integer function Get(index : Integer) : delegate() Get : byte Name Type Description index integer function Get(index : Integer) : Byte Get : doublereal Name Type Description index integer function Get(index : Integer) : DoubleReal Get : integer Name Type Description index integer function Get(index : Integer) : Integer Get : string Name Type Description index integer function Get(index : Integer) : String Get : real4 Name Type Description index integer function Get(index : Integer) : Real4 Get : boolean3 Name Type Description index integer function Get(index : Integer) : Boolean3 Get : doubleinteger Name Type Description index integer function Get(index : Integer) : DoubleInteger Get : boolean4 Name Type Description index integer function Get(index : Integer) : Boolean4 Get : integer2 Name Type Description index integer function Get(index : Integer) : Integer2 Get : integer3 Name Type Description index integer function Get(index : Integer) : Integer3 Get : boolean Name Type Description index integer function Get(index : Integer) : Boolean Get : T Name Type Description index integer function Get(index : Integer) : T Get : anyhandle Name Type Description index integer function Get(index : Integer) : AnyHandle Insert : Void Name Type Description index integer value anyhandle function Insert(index : Integer, value : AnyHandle) Insert : Void Name Type Description index integer value boolean function Insert(index : Integer, value : Boolean) Insert : Void Name Type Description index integer value boolean2 function Insert(index : Integer, value : Boolean2) Insert : Void Name Type Description index integer value boolean3 function Insert(index : Integer, value : Boolean3) Insert : Void Name Type Description index integer value boolean4 function Insert(index : Integer, value : Boolean4) Insert : Void Name Type Description index integer value byte function Insert(index : Integer, value : Byte) Insert : Void Name Type Description index integer value cog function Insert(index : Integer, value : Cog) Insert : Void Name Type Description index integer value delegate() function Insert(index : Integer, value : delegate()) Insert : Void Name Type Description index integer value doubleinteger function Insert(index : Integer, value : DoubleInteger) Insert : Void Name Type Description index integer value doublereal function Insert(index : Integer, value : DoubleReal) Insert : Void Name Type Description index integer value integer function Insert(index : Integer, value : Integer) Insert : Void Name Type Description index integer value integer2 function Insert(index : Integer, value : Integer2) Insert : Void Name Type Description index integer value integer3 function Insert(index : Integer, value : Integer3) Insert : Void Name Type Description index integer value integer4 function Insert(index : Integer, value : Integer4) Insert : Void Name Type Description index integer value Key function Insert(index : Integer, value : Key) Insert : Void Name Type Description index integer value quaternion function Insert(index : Integer, value : Quaternion) Insert : Void Name Type Description index integer value real function Insert(index : Integer, value : Real) Insert : Void Name Type Description index integer value real2 function Insert(index : Integer, value : Real2) Insert : Void Name Type Description index integer value real3 function Insert(index : Integer, value : Real3) Insert : Void Name Type Description index integer value real4 function Insert(index : Integer, value : Real4) Insert : Void Name Type Description index integer value string function Insert(index : Integer, value : String) Insert : Void Name Type Description index integer value T function Insert(index : Integer, value : T) Pop : integer4 Name Type Description function Pop() : Integer4 Pop : string Name Type Description function Pop() : String Pop : boolean2 Name Type Description function Pop() : Boolean2 Pop : T Name Type Description function Pop() : T Pop : Key Name Type Description function Pop() : Key Pop : real3 Name Type Description function Pop() : Real3 Pop : delegate() Name Type Description function Pop() : delegate() Pop : doublereal Name Type Description function Pop() : DoubleReal Pop : real4 Name Type Description function Pop() : Real4 Pop : integer3 Name Type Description function Pop() : Integer3 Pop : real2 Name Type Description function Pop() : Real2 Pop : boolean Name Type Description function Pop() : Boolean Pop : boolean3 Name Type Description function Pop() : Boolean3 Pop : integer Name Type Description function Pop() : Integer Pop : anyhandle Name Type Description function Pop() : AnyHandle Pop : boolean4 Name Type Description function Pop() : Boolean4 Pop : cog Name Type Description function Pop() : Cog Pop : doubleinteger Name Type Description function Pop() : DoubleInteger Pop : real Name Type Description function Pop() : Real Pop : integer2 Name Type Description function Pop() : Integer2 Pop : byte Name Type Description function Pop() : Byte Pop : quaternion Name Type Description function Pop() : Quaternion Push : Void Name Type Description p0 anyhandle function Push(p0 : AnyHandle) Push : Void Name Type Description p0 boolean function Push(p0 : Boolean) Push : Void Name Type Description p0 boolean2 function Push(p0 : Boolean2) Push : Void Name Type Description p0 boolean3 function Push(p0 : Boolean3) Push : Void Name Type Description p0 boolean4 function Push(p0 : Boolean4) Push : Void Name Type Description p0 byte function Push(p0 : Byte) Push : Void Name Type Description p0 cog function Push(p0 : Cog) Push : Void Name Type Description p0 delegate() function Push(p0 : delegate()) Push : Void Name Type Description p0 doubleinteger function Push(p0 : DoubleInteger) Push : Void Name Type Description p0 doublereal function Push(p0 : DoubleReal) Push : Void Name Type Description p0 integer function Push(p0 : Integer) Push : Void Name Type Description p0 integer2 function Push(p0 : Integer2) Push : Void Name Type Description p0 integer3 function Push(p0 : Integer3) Push : Void Name Type Description p0 integer4 function Push(p0 : Integer4) Push : Void Name Type Description p0 Key function Push(p0 : Key) Push : Void Name Type Description p0 quaternion function Push(p0 : Quaternion) Push : Void Name Type Description p0 real function Push(p0 : Real) Push : Void Name Type Description p0 real2 function Push(p0 : Real2) Push : Void Name Type Description p0 real3 function Push(p0 : Real3) Push : Void Name Type Description p0 real4 function Push(p0 : Real4) Push : Void Name Type Description p0 string function Push(p0 : String) Push : Void Name Type Description p0 T function Push(p0 : T) Range : ArrayRange[real] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[Real] Range : ArrayRange Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange Range : ArrayRange[integer3] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[Integer3] Range : ArrayRange[doublereal] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[DoubleReal] Range : ArrayRange[real3] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[Real3] Range : ArrayRange[boolean] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[Boolean] Range : ArrayRange[any] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[any] Range : ArrayRange[integer] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[Integer] Range : ArrayRange[byte] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[Byte] Range : ArrayRange[boolean3] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[Boolean3] Range : ArrayRange[cog] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[Cog] Range : ArrayRange[real4] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[Real4] Range : ArrayRange[doubleinteger] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[DoubleInteger] Range : ArrayRange[anyhandle] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[AnyHandle] Range : ArrayRange[real2] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[Real2] Range : ArrayRange[boolean2] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[Boolean2] Range : ArrayRange[string] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[String] Range : ArrayRange[integer2] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[Integer2] Range : ArrayRange[integer4] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[Integer4] Range : ArrayRange[delegate()] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[delegate()] Range : ArrayRange[quaternion] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[Quaternion] Range : ArrayRange[boolean4] Name Type Description start integer count integer function Range(start : Integer, count : Integer) : ArrayRange[Boolean4] RemoveAll : integer Name Type Description value anyhandle function RemoveAll(value : AnyHandle) : Integer RemoveAll : integer Name Type Description value boolean function RemoveAll(value : Boolean) : Integer RemoveAll : integer Name Type Description value boolean2 function RemoveAll(value : Boolean2) : Integer RemoveAll : integer Name Type Description value boolean3 function RemoveAll(value : Boolean3) : Integer RemoveAll : integer Name Type Description value boolean4 function RemoveAll(value : Boolean4) : Integer RemoveAll : integer Name Type Description value byte function RemoveAll(value : Byte) : Integer RemoveAll : integer Name Type Description value cog function RemoveAll(value : Cog) : Integer RemoveAll : integer Name Type Description value delegate() function RemoveAll(value : delegate()) : Integer RemoveAll : integer Name Type Description value doubleinteger function RemoveAll(value : DoubleInteger) : Integer RemoveAll : integer Name Type Description value doublereal function RemoveAll(value : DoubleReal) : Integer RemoveAll : integer Name Type Description value integer function RemoveAll(value : Integer) : Integer RemoveAll : integer Name Type Description value integer2 function RemoveAll(value : Integer2) : Integer RemoveAll : integer Name Type Description value integer3 function RemoveAll(value : Integer3) : Integer RemoveAll : integer Name Type Description value integer4 function RemoveAll(value : Integer4) : Integer RemoveAll : integer Name Type Description value Key function RemoveAll(value : Key) : Integer RemoveAll : integer Name Type Description value quaternion function RemoveAll(value : Quaternion) : Integer RemoveAll : integer Name Type Description value real function RemoveAll(value : Real) : Integer RemoveAll : integer Name Type Description value real2 function RemoveAll(value : Real2) : Integer RemoveAll : integer Name Type Description value real3 function RemoveAll(value : Real3) : Integer RemoveAll : integer Name Type Description value real4 function RemoveAll(value : Real4) : Integer RemoveAll : integer Name Type Description value string function RemoveAll(value : String) : Integer RemoveAll : integer Name Type Description value T function RemoveAll(value : T) : Integer RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveAt : Void Name Type Description index integer function RemoveAt(index : Integer) RemoveFirst : boolean Name Type Description value anyhandle function RemoveFirst(value : AnyHandle) : Boolean RemoveFirst : boolean Name Type Description value boolean function RemoveFirst(value : Boolean) : Boolean RemoveFirst : boolean Name Type Description value boolean2 function RemoveFirst(value : Boolean2) : Boolean RemoveFirst : boolean Name Type Description value boolean3 function RemoveFirst(value : Boolean3) : Boolean RemoveFirst : boolean Name Type Description value boolean4 function RemoveFirst(value : Boolean4) : Boolean RemoveFirst : boolean Name Type Description value byte function RemoveFirst(value : Byte) : Boolean RemoveFirst : boolean Name Type Description value cog function RemoveFirst(value : Cog) : Boolean RemoveFirst : boolean Name Type Description value delegate() function RemoveFirst(value : delegate()) : Boolean RemoveFirst : boolean Name Type Description value doubleinteger function RemoveFirst(value : DoubleInteger) : Boolean RemoveFirst : boolean Name Type Description value doublereal function RemoveFirst(value : DoubleReal) : Boolean RemoveFirst : boolean Name Type Description value integer function RemoveFirst(value : Integer) : Boolean RemoveFirst : boolean Name Type Description value integer2 function RemoveFirst(value : Integer2) : Boolean RemoveFirst : boolean Name Type Description value integer3 function RemoveFirst(value : Integer3) : Boolean RemoveFirst : boolean Name Type Description value integer4 function RemoveFirst(value : Integer4) : Boolean RemoveFirst : boolean Name Type Description value Key function RemoveFirst(value : Key) : Boolean RemoveFirst : boolean Name Type Description value quaternion function RemoveFirst(value : Quaternion) : Boolean RemoveFirst : boolean Name Type Description value real function RemoveFirst(value : Real) : Boolean RemoveFirst : boolean Name Type Description value real2 function RemoveFirst(value : Real2) : Boolean RemoveFirst : boolean Name Type Description value real3 function RemoveFirst(value : Real3) : Boolean RemoveFirst : boolean Name Type Description value real4 function RemoveFirst(value : Real4) : Boolean RemoveFirst : boolean Name Type Description value string function RemoveFirst(value : String) : Boolean RemoveFirst : boolean Name Type Description value T function RemoveFirst(value : T) : Boolean RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) RemoveSwap : Void Name Type Description index integer function RemoveSwap(index : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Reserve : Void Name Type Description capacity integer function Reserve(capacity : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer function Resize(size : Integer) Resize : Void Name Type Description size integer defaultValue anyhandle function Resize(size : Integer, defaultValue : AnyHandle) Resize : Void Name Type Description size integer defaultValue boolean function Resize(size : Integer, defaultValue : Boolean) Resize : Void Name Type Description size integer defaultValue boolean2 function Resize(size : Integer, defaultValue : Boolean2) Resize : Void Name Type Description size integer defaultValue boolean3 function Resize(size : Integer, defaultValue : Boolean3) Resize : Void Name Type Description size integer defaultValue boolean4 function Resize(size : Integer, defaultValue : Boolean4) Resize : Void Name Type Description size integer defaultValue byte function Resize(size : Integer, defaultValue : Byte) Resize : Void Name Type Description size integer defaultValue cog function Resize(size : Integer, defaultValue : Cog) Resize : Void Name Type Description size integer defaultValue delegate() function Resize(size : Integer, defaultValue : delegate()) Resize : Void Name Type Description size integer defaultValue doubleinteger function Resize(size : Integer, defaultValue : DoubleInteger) Resize : Void Name Type Description size integer defaultValue doublereal function Resize(size : Integer, defaultValue : DoubleReal) Resize : Void Name Type Description size integer defaultValue integer function Resize(size : Integer, defaultValue : Integer) Resize : Void Name Type Description size integer defaultValue integer2 function Resize(size : Integer, defaultValue : Integer2) Resize : Void Name Type Description size integer defaultValue integer3 function Resize(size : Integer, defaultValue : Integer3) Resize : Void Name Type Description size integer defaultValue integer4 function Resize(size : Integer, defaultValue : Integer4) Resize : Void Name Type Description size integer defaultValue Key function Resize(size : Integer, defaultValue : Key) Resize : Void Name Type Description size integer defaultValue quaternion function Resize(size : Integer, defaultValue : Quaternion) Resize : Void Name Type Description size integer defaultValue real function Resize(size : Integer, defaultValue : Real) Resize : Void Name Type Description size integer defaultValue real2 function Resize(size : Integer, defaultValue : Real2) Resize : Void Name Type Description size integer defaultValue real3 function Resize(size : Integer, defaultValue : Real3) Resize : Void Name Type Description size integer defaultValue real4 function Resize(size : Integer, defaultValue : Real4) Resize : Void Name Type Description size integer defaultValue string function Resize(size : Integer, defaultValue : String) Resize : Void Name Type Description size integer defaultValue T function Resize(size : Integer, defaultValue : T) Set : Void Name Type Description index integer value anyhandle function Set(index : Integer, value : AnyHandle) Set : Void Name Type Description index integer value boolean function Set(index : Integer, value : Boolean) Set : Void Name Type Description index integer value boolean2 function Set(index : Integer, value : Boolean2) Set : Void Name Type Description index integer value boolean3 function Set(index : Integer, value : Boolean3) Set : Void Name Type Description index integer value boolean4 function Set(index : Integer, value : Boolean4) Set : Void Name Type Description index integer value byte function Set(index : Integer, value : Byte) Set : Void Name Type Description index integer value cog function Set(index : Integer, value : Cog) Set : Void Name Type Description index integer value delegate() function Set(index : Integer, value : delegate()) Set : Void Name Type Description index integer value doubleinteger function Set(index : Integer, value : DoubleInteger) Set : Void Name Type Description index integer value doublereal function Set(index : Integer, value : DoubleReal) Set : Void Name Type Description index integer value integer function Set(index : Integer, value : Integer) Set : Void Name Type Description index integer value integer2 function Set(index : Integer, value : Integer2) Set : Void Name Type Description index integer value integer3 function Set(index : Integer, value : Integer3) Set : Void Name Type Description index integer value integer4 function Set(index : Integer, value : Integer4) Set : Void Name Type Description index integer value Key function Set(index : Integer, value : Key) Set : Void Name Type Description index integer value quaternion function Set(index : Integer, value : Quaternion) Set : Void Name Type Description index integer value real function Set(index : Integer, value : Real) Set : Void Name Type Description index integer value real2 function Set(index : Integer, value : Real2) Set : Void Name Type Description index integer value real3 function Set(index : Integer, value : Real3) Set : Void Name Type Description index integer value real4 function Set(index : Integer, value : Real4) Set : Void Name Type Description index integer value string function Set(index : Integer, value : String) Set : Void Name Type Description index integer value T function Set(index : Integer, value : T) Sort : Void Name Type Description compare delegate(left:any,right:any):boolean function Sort(compare : delegate(left:any,right:any):Boolean) Sort : Void Name Type Description compare delegate(left:any,right:any):integer function Sort(compare : delegate(left:any,right:any):Integer) Sort : Void Name Type Description compare delegate(left:anyhandle,right:anyhandle):boolean function Sort(compare : delegate(left:AnyHandle,right:AnyHandle):Boolean) Sort : Void Name Type Description compare delegate(left:anyhandle,right:anyhandle):integer function Sort(compare : delegate(left:AnyHandle,right:AnyHandle):Integer) Sort : Void Name Type Description compare delegate(left:boolean,right:boolean):boolean function Sort(compare : delegate(left:Boolean,right:Boolean):Boolean) Sort : Void Name Type Description compare delegate(left:boolean,right:boolean):integer function Sort(compare : delegate(left:Boolean,right:Boolean):Integer) Sort : Void Name Type Description compare delegate(left:boolean2,right:boolean2):boolean function Sort(compare : delegate(left:Boolean2,right:Boolean2):Boolean) Sort : Void Name Type Description compare delegate(left:boolean2,right:boolean2):integer function Sort(compare : delegate(left:Boolean2,right:Boolean2):Integer) Sort : Void Name Type Description compare delegate(left:boolean3,right:boolean3):boolean function Sort(compare : delegate(left:Boolean3,right:Boolean3):Boolean) Sort : Void Name Type Description compare delegate(left:boolean3,right:boolean3):integer function Sort(compare : delegate(left:Boolean3,right:Boolean3):Integer) Sort : Void Name Type Description compare delegate(left:boolean4,right:boolean4):boolean function Sort(compare : delegate(left:Boolean4,right:Boolean4):Boolean) Sort : Void Name Type Description compare delegate(left:boolean4,right:boolean4):integer function Sort(compare : delegate(left:Boolean4,right:Boolean4):Integer) Sort : Void Name Type Description compare delegate(left:byte,right:byte):boolean function Sort(compare : delegate(left:Byte,right:Byte):Boolean) Sort : Void Name Type Description compare delegate(left:byte,right:byte):integer function Sort(compare : delegate(left:Byte,right:Byte):Integer) Sort : Void Name Type Description compare delegate(left:cog,right:cog):boolean function Sort(compare : delegate(left:Cog,right:Cog):Boolean) Sort : Void Name Type Description compare delegate(left:cog,right:cog):integer function Sort(compare : delegate(left:Cog,right:Cog):Integer) Sort : Void Name Type Description compare delegate(left:delegate(),right:delegate()):boolean function Sort(compare : delegate(left:delegate(),right:delegate()):Boolean) Sort : Void Name Type Description compare delegate(left:delegate(),right:delegate()):integer function Sort(compare : delegate(left:delegate(),right:delegate()):Integer) Sort : Void Name Type Description compare delegate(left:doubleinteger,right:doubleinteger):boolean function Sort(compare : delegate(left:DoubleInteger,right:DoubleInteger):Boolean) Sort : Void Name Type Description compare delegate(left:doubleinteger,right:doubleinteger):integer function Sort(compare : delegate(left:DoubleInteger,right:DoubleInteger):Integer) Sort : Void Name Type Description compare delegate(left:doublereal,right:doublereal):boolean function Sort(compare : delegate(left:DoubleReal,right:DoubleReal):Boolean) Sort : Void Name Type Description compare delegate(left:doublereal,right:doublereal):integer function Sort(compare : delegate(left:DoubleReal,right:DoubleReal):Integer) Sort : Void Name Type Description compare delegate(left:integer,right:integer):boolean function Sort(compare : delegate(left:Integer,right:Integer):Boolean) Sort : Void Name Type Description compare delegate(left:integer,right:integer):integer function Sort(compare : delegate(left:Integer,right:Integer):Integer) Sort : Void Name Type Description compare delegate(left:integer2,right:integer2):boolean function Sort(compare : delegate(left:Integer2,right:Integer2):Boolean) Sort : Void Name Type Description compare delegate(left:integer2,right:integer2):integer function Sort(compare : delegate(left:Integer2,right:Integer2):Integer) Sort : Void Name Type Description compare delegate(left:integer3,right:integer3):boolean function Sort(compare : delegate(left:Integer3,right:Integer3):Boolean) Sort : Void Name Type Description compare delegate(left:integer3,right:integer3):integer function Sort(compare : delegate(left:Integer3,right:Integer3):Integer) Sort : Void Name Type Description compare delegate(left:integer4,right:integer4):boolean function Sort(compare : delegate(left:Integer4,right:Integer4):Boolean) Sort : Void Name Type Description compare delegate(left:integer4,right:integer4):integer function Sort(compare : delegate(left:Integer4,right:Integer4):Integer) Sort : Void Name Type Description compare delegate(left:Key,right:Key):boolean function Sort(compare : delegate(left:Key,right:Key):Boolean) Sort : Void Name Type Description compare delegate(left:Key,right:Key):integer function Sort(compare : delegate(left:Key,right:Key):Integer) Sort : Void Name Type Description compare delegate(left:quaternion,right:quaternion):boolean function Sort(compare : delegate(left:Quaternion,right:Quaternion):Boolean) Sort : Void Name Type Description compare delegate(left:quaternion,right:quaternion):integer function Sort(compare : delegate(left:Quaternion,right:Quaternion):Integer) Sort : Void Name Type Description compare delegate(left:real,right:real):boolean function Sort(compare : delegate(left:Real,right:Real):Boolean) Sort : Void Name Type Description compare delegate(left:real,right:real):integer function Sort(compare : delegate(left:Real,right:Real):Integer) Sort : Void Name Type Description compare delegate(left:real2,right:real2):boolean function Sort(compare : delegate(left:Real2,right:Real2):Boolean) Sort : Void Name Type Description compare delegate(left:real2,right:real2):integer function Sort(compare : delegate(left:Real2,right:Real2):Integer) Sort : Void Name Type Description compare delegate(left:real3,right:real3):boolean function Sort(compare : delegate(left:Real3,right:Real3):Boolean) Sort : Void Name Type Description compare delegate(left:real3,right:real3):integer function Sort(compare : delegate(left:Real3,right:Real3):Integer) Sort : Void Name Type Description compare delegate(left:real4,right:real4):boolean function Sort(compare : delegate(left:Real4,right:Real4):Boolean) Sort : Void Name Type Description compare delegate(left:real4,right:real4):integer function Sort(compare : delegate(left:Real4,right:Real4):Integer) Sort : Void Name Type Description compare delegate(left:string,right:string):boolean function Sort(compare : delegate(left:String,right:String):Boolean) Sort : Void Name Type Description compare delegate(left:string,right:string):integer function Sort(compare : delegate(left:String,right:String):Integer)"
  },
  "docs/code_reference/nada_base_types/arrayrange_t.html": {
    "href": "docs/code_reference/nada_base_types/arrayrange_t.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes [ Constructor](arrayrange_t .md#arrayrange-t-void) [ All](arrayrange_t .md#all-zilch-engine-document) [ MoveNext](arrayrange_t .md#movenext-void) [ Current](arrayrange_t .md#current-t) [ Reset](arrayrange_t .md#reset-void) [ IsEmpty](arrayrange_t .md#isempty-zilch-engine-docu) [ IsNotEmpty](arrayrange_t .md#isnotempty-zilch-engine-d) Properties All : ArrayRange[T] read-only var All : ArrayRange[T] Current : T read-only var Current : T IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods ArrayRange[T] : Void constructor Name Type Description function ArrayRange[T]() MoveNext : Void Name Type Description function MoveNext() Reset : Void Name Type Description function Reset()"
  },
  "docs/code_reference/nada_base_types/asciiencoding.html": {
    "href": "docs/code_reference/nada_base_types/asciiencoding.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes iencoding Properties Methods"
  },
  "docs/code_reference/nada_base_types/boolean.html": {
    "href": "docs/code_reference/nada_base_types/boolean.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor Count Get One GetAxis XAxis Set Zero Properties Count : integer read-only var Count : Integer One : boolean read-only static The one vector (a vector containing all ones). var One : Boolean XAxis : boolean read-only static var XAxis : Boolean Zero : boolean read-only static The zero vector (a vector containing all zeroes). var Zero : Boolean Methods Boolean : Void constructor Name Type Description function Boolean() Boolean : Void constructor Name Type Description scalar boolean function Boolean(scalar : Boolean) Get : boolean Name Type Description p0 integer function Get(p0 : Integer) : Boolean GetAxis : boolean static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0|integer| | function GetAxis(p0 : Integer) : Boolean Set : Void Name Type Description p0 integer p1 boolean function Set(p0 : Integer, p1 : Boolean)"
  },
  "docs/code_reference/nada_base_types/boolean2.html": {
    "href": "docs/code_reference/nada_base_types/boolean2.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor Count Get One GetAxis XAxis Set YAxis Zero Properties Count : integer read-only var Count : Integer One : boolean2 read-only static The one vector (a vector containing all ones). var One : Boolean2 XAxis : boolean2 read-only static var XAxis : Boolean2 YAxis : boolean2 read-only static var YAxis : Boolean2 Zero : boolean2 read-only static The zero vector (a vector containing all zeroes). var Zero : Boolean2 Methods Boolean2 : Void constructor Name Type Description function Boolean2() Boolean2 : Void constructor Name Type Description scalar boolean function Boolean2(scalar : Boolean) Boolean2 : Void constructor Name Type Description p0 boolean p1 boolean function Boolean2(p0 : Boolean, p1 : Boolean) Boolean2 : Void constructor Name Type Description p0 boolean2 function Boolean2(p0 : Boolean2) Get : boolean Name Type Description p0 integer function Get(p0 : Integer) : Boolean GetAxis : boolean2 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0|integer| | function GetAxis(p0 : Integer) : Boolean2 Set : Void Name Type Description p0 integer p1 boolean function Set(p0 : Integer, p1 : Boolean)"
  },
  "docs/code_reference/nada_base_types/boolean2x2.html": {
    "href": "docs/code_reference/nada_base_types/boolean2x2.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M10 M11 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : boolean var M00 : Boolean M01 : boolean var M01 : Boolean M10 : boolean var M10 : Boolean M11 : boolean var M11 : Boolean Methods Boolean2x2 : Void constructor Name Type Description function Boolean2x2() Boolean2x2 : Void constructor Name Type Description p0 boolean function Boolean2x2(p0 : Boolean) Boolean2x2 : Void constructor Name Type Description m00 boolean m01 boolean m10 boolean m11 boolean function Boolean2x2(m00 : Boolean, m01 : Boolean, m10 : Boolean, m11 : Boolean) Get : boolean2 Name Type Description y integer function Get(y : Integer) : Boolean2 Get : boolean Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Boolean GetByIndex : boolean Name Type Description index integer function GetByIndex(index : Integer) : Boolean Set : Void Name Type Description y integer value boolean2 function Set(y : Integer, value : Boolean2) Set : Void Name Type Description y integer x integer value boolean function Set(y : Integer, x : Integer, value : Boolean) SetByIndex : Void Name Type Description index integer value boolean function SetByIndex(index : Integer, value : Boolean)"
  },
  "docs/code_reference/nada_base_types/boolean2x3.html": {
    "href": "docs/code_reference/nada_base_types/boolean2x3.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M02 M10 M11 M12 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : boolean var M00 : Boolean M01 : boolean var M01 : Boolean M02 : boolean var M02 : Boolean M10 : boolean var M10 : Boolean M11 : boolean var M11 : Boolean M12 : boolean var M12 : Boolean Methods Boolean2x3 : Void constructor Name Type Description function Boolean2x3() Boolean2x3 : Void constructor Name Type Description p0 boolean function Boolean2x3(p0 : Boolean) Boolean2x3 : Void constructor Name Type Description m00 boolean m01 boolean m02 boolean m10 boolean m11 boolean m12 boolean function Boolean2x3(m00 : Boolean, m01 : Boolean, m02 : Boolean, m10 : Boolean, m11 : Boolean, m12 : Boolean) Get : boolean3 Name Type Description y integer function Get(y : Integer) : Boolean3 Get : boolean Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Boolean GetByIndex : boolean Name Type Description index integer function GetByIndex(index : Integer) : Boolean Set : Void Name Type Description y integer value boolean3 function Set(y : Integer, value : Boolean3) Set : Void Name Type Description y integer x integer value boolean function Set(y : Integer, x : Integer, value : Boolean) SetByIndex : Void Name Type Description index integer value boolean function SetByIndex(index : Integer, value : Boolean)"
  },
  "docs/code_reference/nada_base_types/boolean2x4.html": {
    "href": "docs/code_reference/nada_base_types/boolean2x4.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : boolean var M00 : Boolean M01 : boolean var M01 : Boolean M02 : boolean var M02 : Boolean M03 : boolean var M03 : Boolean M10 : boolean var M10 : Boolean M11 : boolean var M11 : Boolean M12 : boolean var M12 : Boolean M13 : boolean var M13 : Boolean Methods Boolean2x4 : Void constructor Name Type Description function Boolean2x4() Boolean2x4 : Void constructor Name Type Description p0 boolean function Boolean2x4(p0 : Boolean) Boolean2x4 : Void constructor Name Type Description m00 boolean m01 boolean m02 boolean m03 boolean m10 boolean m11 boolean m12 boolean m13 boolean function Boolean2x4(m00 : Boolean, m01 : Boolean, m02 : Boolean, m03 : Boolean, m10 : Boolean, m11 : Boolean, m12 : Boolean, m13 : Boolean) Get : boolean4 Name Type Description y integer function Get(y : Integer) : Boolean4 Get : boolean Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Boolean GetByIndex : boolean Name Type Description index integer function GetByIndex(index : Integer) : Boolean Set : Void Name Type Description y integer value boolean4 function Set(y : Integer, value : Boolean4) Set : Void Name Type Description y integer x integer value boolean function Set(y : Integer, x : Integer, value : Boolean) SetByIndex : Void Name Type Description index integer value boolean function SetByIndex(index : Integer, value : Boolean)"
  },
  "docs/code_reference/nada_base_types/boolean3.html": {
    "href": "docs/code_reference/nada_base_types/boolean3.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor Count Get One GetAxis XAxis Set YAxis ZAxis Zero Properties Count : integer read-only var Count : Integer One : boolean3 read-only static The one vector (a vector containing all ones). var One : Boolean3 XAxis : boolean3 read-only static var XAxis : Boolean3 YAxis : boolean3 read-only static var YAxis : Boolean3 ZAxis : boolean3 read-only static var ZAxis : Boolean3 Zero : boolean3 read-only static The zero vector (a vector containing all zeroes). var Zero : Boolean3 Methods Boolean3 : Void constructor Name Type Description function Boolean3() Boolean3 : Void constructor Name Type Description scalar boolean function Boolean3(scalar : Boolean) Boolean3 : Void constructor Name Type Description p0 boolean p1 boolean p2 boolean function Boolean3(p0 : Boolean, p1 : Boolean, p2 : Boolean) Boolean3 : Void constructor Name Type Description p0 boolean p1 boolean2 function Boolean3(p0 : Boolean, p1 : Boolean2) Boolean3 : Void constructor Name Type Description p0 boolean2 p1 boolean function Boolean3(p0 : Boolean2, p1 : Boolean) Get : boolean Name Type Description p0 integer function Get(p0 : Integer) : Boolean GetAxis : boolean3 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0|integer| | function GetAxis(p0 : Integer) : Boolean3 Set : Void Name Type Description p0 integer p1 boolean function Set(p0 : Integer, p1 : Boolean)"
  },
  "docs/code_reference/nada_base_types/boolean3x2.html": {
    "href": "docs/code_reference/nada_base_types/boolean3x2.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M10 M11 M20 M21 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : boolean var M00 : Boolean M01 : boolean var M01 : Boolean M10 : boolean var M10 : Boolean M11 : boolean var M11 : Boolean M20 : boolean var M20 : Boolean M21 : boolean var M21 : Boolean Methods Boolean3x2 : Void constructor Name Type Description function Boolean3x2() Boolean3x2 : Void constructor Name Type Description p0 boolean function Boolean3x2(p0 : Boolean) Boolean3x2 : Void constructor Name Type Description m00 boolean m01 boolean m10 boolean m11 boolean m20 boolean m21 boolean function Boolean3x2(m00 : Boolean, m01 : Boolean, m10 : Boolean, m11 : Boolean, m20 : Boolean, m21 : Boolean) Get : boolean2 Name Type Description y integer function Get(y : Integer) : Boolean2 Get : boolean Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Boolean GetByIndex : boolean Name Type Description index integer function GetByIndex(index : Integer) : Boolean Set : Void Name Type Description y integer value boolean2 function Set(y : Integer, value : Boolean2) Set : Void Name Type Description y integer x integer value boolean function Set(y : Integer, x : Integer, value : Boolean) SetByIndex : Void Name Type Description index integer value boolean function SetByIndex(index : Integer, value : Boolean)"
  },
  "docs/code_reference/nada_base_types/boolean3x3.html": {
    "href": "docs/code_reference/nada_base_types/boolean3x3.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M02 M10 M11 M12 M20 M21 M22 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : boolean var M00 : Boolean M01 : boolean var M01 : Boolean M02 : boolean var M02 : Boolean M10 : boolean var M10 : Boolean M11 : boolean var M11 : Boolean M12 : boolean var M12 : Boolean M20 : boolean var M20 : Boolean M21 : boolean var M21 : Boolean M22 : boolean var M22 : Boolean Methods Boolean3x3 : Void constructor Name Type Description function Boolean3x3() Boolean3x3 : Void constructor Name Type Description p0 boolean function Boolean3x3(p0 : Boolean) Boolean3x3 : Void constructor Name Type Description m00 boolean m01 boolean m02 boolean m10 boolean m11 boolean m12 boolean m20 boolean m21 boolean m22 boolean function Boolean3x3(m00 : Boolean, m01 : Boolean, m02 : Boolean, m10 : Boolean, m11 : Boolean, m12 : Boolean, m20 : Boolean, m21 : Boolean, m22 : Boolean) Get : boolean3 Name Type Description y integer function Get(y : Integer) : Boolean3 Get : boolean Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Boolean GetByIndex : boolean Name Type Description index integer function GetByIndex(index : Integer) : Boolean Set : Void Name Type Description y integer value boolean3 function Set(y : Integer, value : Boolean3) Set : Void Name Type Description y integer x integer value boolean function Set(y : Integer, x : Integer, value : Boolean) SetByIndex : Void Name Type Description index integer value boolean function SetByIndex(index : Integer, value : Boolean)"
  },
  "docs/code_reference/nada_base_types/boolean3x4.html": {
    "href": "docs/code_reference/nada_base_types/boolean3x4.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 M20 M21 M22 M23 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : boolean var M00 : Boolean M01 : boolean var M01 : Boolean M02 : boolean var M02 : Boolean M03 : boolean var M03 : Boolean M10 : boolean var M10 : Boolean M11 : boolean var M11 : Boolean M12 : boolean var M12 : Boolean M13 : boolean var M13 : Boolean M20 : boolean var M20 : Boolean M21 : boolean var M21 : Boolean M22 : boolean var M22 : Boolean M23 : boolean var M23 : Boolean Methods Boolean3x4 : Void constructor Name Type Description function Boolean3x4() Boolean3x4 : Void constructor Name Type Description p0 boolean function Boolean3x4(p0 : Boolean) Boolean3x4 : Void constructor Name Type Description m00 boolean m01 boolean m02 boolean m03 boolean m10 boolean m11 boolean m12 boolean m13 boolean m20 boolean m21 boolean m22 boolean m23 boolean function Boolean3x4(m00 : Boolean, m01 : Boolean, m02 : Boolean, m03 : Boolean, m10 : Boolean, m11 : Boolean, m12 : Boolean, m13 : Boolean, m20 : Boolean, m21 : Boolean, m22 : Boolean, m23 : Boolean) Get : boolean4 Name Type Description y integer function Get(y : Integer) : Boolean4 Get : boolean Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Boolean GetByIndex : boolean Name Type Description index integer function GetByIndex(index : Integer) : Boolean Set : Void Name Type Description y integer value boolean4 function Set(y : Integer, value : Boolean4) Set : Void Name Type Description y integer x integer value boolean function Set(y : Integer, x : Integer, value : Boolean) SetByIndex : Void Name Type Description index integer value boolean function SetByIndex(index : Integer, value : Boolean)"
  },
  "docs/code_reference/nada_base_types/boolean4.html": {
    "href": "docs/code_reference/nada_base_types/boolean4.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor Count Get One GetAxis WAxis Set XAxis YAxis ZAxis Zero Properties Count : integer read-only var Count : Integer One : boolean4 read-only static The one vector (a vector containing all ones). var One : Boolean4 WAxis : boolean4 read-only static var WAxis : Boolean4 XAxis : boolean4 read-only static var XAxis : Boolean4 YAxis : boolean4 read-only static var YAxis : Boolean4 ZAxis : boolean4 read-only static var ZAxis : Boolean4 Zero : boolean4 read-only static The zero vector (a vector containing all zeroes). var Zero : Boolean4 Methods Boolean4 : Void constructor Name Type Description function Boolean4() Boolean4 : Void constructor Name Type Description scalar boolean function Boolean4(scalar : Boolean) Boolean4 : Void constructor Name Type Description p0 boolean p1 boolean p2 boolean p3 boolean function Boolean4(p0 : Boolean, p1 : Boolean, p2 : Boolean, p3 : Boolean) Boolean4 : Void constructor Name Type Description p0 boolean p1 boolean p2 boolean2 function Boolean4(p0 : Boolean, p1 : Boolean, p2 : Boolean2) Boolean4 : Void constructor Name Type Description p0 boolean p1 boolean2 p2 boolean function Boolean4(p0 : Boolean, p1 : Boolean2, p2 : Boolean) Boolean4 : Void constructor Name Type Description p0 boolean p1 boolean3 function Boolean4(p0 : Boolean, p1 : Boolean3) Boolean4 : Void constructor Name Type Description p0 boolean2 p1 boolean p2 boolean function Boolean4(p0 : Boolean2, p1 : Boolean, p2 : Boolean) Boolean4 : Void constructor Name Type Description p0 boolean2 p1 boolean2 function Boolean4(p0 : Boolean2, p1 : Boolean2) Boolean4 : Void constructor Name Type Description p0 boolean3 p1 boolean function Boolean4(p0 : Boolean3, p1 : Boolean) Get : boolean Name Type Description p0 integer function Get(p0 : Integer) : Boolean GetAxis : boolean4 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0|integer| | function GetAxis(p0 : Integer) : Boolean4 Set : Void Name Type Description p0 integer p1 boolean function Set(p0 : Integer, p1 : Boolean)"
  },
  "docs/code_reference/nada_base_types/boolean4x2.html": {
    "href": "docs/code_reference/nada_base_types/boolean4x2.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M10 M11 M20 M21 M30 M31 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : boolean var M00 : Boolean M01 : boolean var M01 : Boolean M10 : boolean var M10 : Boolean M11 : boolean var M11 : Boolean M20 : boolean var M20 : Boolean M21 : boolean var M21 : Boolean M30 : boolean var M30 : Boolean M31 : boolean var M31 : Boolean Methods Boolean4x2 : Void constructor Name Type Description function Boolean4x2() Boolean4x2 : Void constructor Name Type Description p0 boolean function Boolean4x2(p0 : Boolean) Boolean4x2 : Void constructor Name Type Description m00 boolean m01 boolean m10 boolean m11 boolean m20 boolean m21 boolean m30 boolean m31 boolean function Boolean4x2(m00 : Boolean, m01 : Boolean, m10 : Boolean, m11 : Boolean, m20 : Boolean, m21 : Boolean, m30 : Boolean, m31 : Boolean) Get : boolean2 Name Type Description y integer function Get(y : Integer) : Boolean2 Get : boolean Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Boolean GetByIndex : boolean Name Type Description index integer function GetByIndex(index : Integer) : Boolean Set : Void Name Type Description y integer value boolean2 function Set(y : Integer, value : Boolean2) Set : Void Name Type Description y integer x integer value boolean function Set(y : Integer, x : Integer, value : Boolean) SetByIndex : Void Name Type Description index integer value boolean function SetByIndex(index : Integer, value : Boolean)"
  },
  "docs/code_reference/nada_base_types/boolean4x3.html": {
    "href": "docs/code_reference/nada_base_types/boolean4x3.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M02 M10 M11 M12 M20 M21 M22 M30 M31 M32 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : boolean var M00 : Boolean M01 : boolean var M01 : Boolean M02 : boolean var M02 : Boolean M10 : boolean var M10 : Boolean M11 : boolean var M11 : Boolean M12 : boolean var M12 : Boolean M20 : boolean var M20 : Boolean M21 : boolean var M21 : Boolean M22 : boolean var M22 : Boolean M30 : boolean var M30 : Boolean M31 : boolean var M31 : Boolean M32 : boolean var M32 : Boolean Methods Boolean4x3 : Void constructor Name Type Description function Boolean4x3() Boolean4x3 : Void constructor Name Type Description p0 boolean function Boolean4x3(p0 : Boolean) Boolean4x3 : Void constructor Name Type Description m00 boolean m01 boolean m02 boolean m10 boolean m11 boolean m12 boolean m20 boolean m21 boolean m22 boolean m30 boolean m31 boolean m32 boolean function Boolean4x3(m00 : Boolean, m01 : Boolean, m02 : Boolean, m10 : Boolean, m11 : Boolean, m12 : Boolean, m20 : Boolean, m21 : Boolean, m22 : Boolean, m30 : Boolean, m31 : Boolean, m32 : Boolean) Get : boolean3 Name Type Description y integer function Get(y : Integer) : Boolean3 Get : boolean Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Boolean GetByIndex : boolean Name Type Description index integer function GetByIndex(index : Integer) : Boolean Set : Void Name Type Description y integer value boolean3 function Set(y : Integer, value : Boolean3) Set : Void Name Type Description y integer x integer value boolean function Set(y : Integer, x : Integer, value : Boolean) SetByIndex : Void Name Type Description index integer value boolean function SetByIndex(index : Integer, value : Boolean)"
  },
  "docs/code_reference/nada_base_types/boolean4x4.html": {
    "href": "docs/code_reference/nada_base_types/boolean4x4.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor Count Get CountX GetByIndex CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 M20 M21 M22 M23 M30 M31 M32 M33 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : boolean var M00 : Boolean M01 : boolean var M01 : Boolean M02 : boolean var M02 : Boolean M03 : boolean var M03 : Boolean M10 : boolean var M10 : Boolean M11 : boolean var M11 : Boolean M12 : boolean var M12 : Boolean M13 : boolean var M13 : Boolean M20 : boolean var M20 : Boolean M21 : boolean var M21 : Boolean M22 : boolean var M22 : Boolean M23 : boolean var M23 : Boolean M30 : boolean var M30 : Boolean M31 : boolean var M31 : Boolean M32 : boolean var M32 : Boolean M33 : boolean var M33 : Boolean Methods Boolean4x4 : Void constructor Name Type Description function Boolean4x4() Boolean4x4 : Void constructor Name Type Description p0 boolean function Boolean4x4(p0 : Boolean) Boolean4x4 : Void constructor Name Type Description m00 boolean m01 boolean m02 boolean m03 boolean m10 boolean m11 boolean m12 boolean m13 boolean m20 boolean m21 boolean m22 boolean m23 boolean m30 boolean m31 boolean m32 boolean m33 boolean function Boolean4x4(m00 : Boolean, m01 : Boolean, m02 : Boolean, m03 : Boolean, m10 : Boolean, m11 : Boolean, m12 : Boolean, m13 : Boolean, m20 : Boolean, m21 : Boolean, m22 : Boolean, m23 : Boolean, m30 : Boolean, m31 : Boolean, m32 : Boolean, m33 : Boolean) Get : boolean4 Name Type Description y integer function Get(y : Integer) : Boolean4 Get : boolean Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Boolean GetByIndex : boolean Name Type Description index integer function GetByIndex(index : Integer) : Boolean Set : Void Name Type Description y integer value boolean4 function Set(y : Integer, value : Boolean4) Set : Void Name Type Description y integer x integer value boolean function Set(y : Integer, x : Integer, value : Boolean) SetByIndex : Void Name Type Description index integer value boolean function SetByIndex(index : Integer, value : Boolean)"
  },
  "docs/code_reference/nada_base_types/boundtype.html": {
    "href": "docs/code_reference/nada_base_types/boundtype.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes GetConstructor BaseType type GetField DefaultConstructor GetFunction Destructor GetGetterSetter Fields GetMember Functions GetProperty GetterSetters InstantiatePreConstructedObject IsNative IsTypeOrBaseNative Members PreConstructor Properties TemplateBaseName Properties BaseType : boundtype read-only var BaseType : BoundType DefaultConstructor : function read-only var DefaultConstructor : Function Destructor : function read-only var Destructor : Function Fields : fieldrange read-only var Fields : FieldRange Functions : functionrange read-only var Functions : FunctionRange GetterSetters : gettersetterrange read-only var GetterSetters : GetterSetterRange IsNative : boolean read-only var IsNative : Boolean IsTypeOrBaseNative : boolean read-only var IsTypeOrBaseNative : Boolean Members : memberrange read-only var Members : MemberRange PreConstructor : function read-only var PreConstructor : Function Properties : propertyrange read-only var Properties : PropertyRange TemplateBaseName : string read-only var TemplateBaseName : String Methods GetConstructor : function Name Type Description signatureType delegatetype inherited boolean function GetConstructor(signatureType : DelegateType, inherited : Boolean) : Function GetField : field Name Type Description name string function GetField(name : String) : Field GetField : field Name Type Description name string options Members function GetField(name : String, options : Members) : Field GetField : field Name Type Description name string declaredType type options Members function GetField(name : String, declaredType : Type, options : Members) : Field GetFunction : function Name Type Description name string function GetFunction(name : String) : Function GetFunction : function Name Type Description name string signatureType delegatetype options Members function GetFunction(name : String, signatureType : DelegateType, options : Members) : Function GetFunction : function Name Type Description name string options Members function GetFunction(name : String, options : Members) : Function GetGetterSetter : gettersetter Name Type Description name string function GetGetterSetter(name : String) : GetterSetter GetGetterSetter : gettersetter Name Type Description name string options Members function GetGetterSetter(name : String, options : Members) : GetterSetter GetGetterSetter : gettersetter Name Type Description name string declaredType type options Members function GetGetterSetter(name : String, declaredType : Type, options : Members) : GetterSetter GetMember : member Name Type Description name string function GetMember(name : String) : Member GetMember : member Name Type Description name string options Members function GetMember(name : String, options : Members) : Member GetMember : member Name Type Description name string declaredType type options Members function GetMember(name : String, declaredType : Type, options : Members) : Member GetProperty : Property Name Type Description name string function GetProperty(name : String) : Property GetProperty : Property Name Type Description name string options Members function GetProperty(name : String, options : Members) : Property GetProperty : Property Name Type Description name string declaredType type options Members function GetProperty(name : String, declaredType : Type, options : Members) : Property InstantiatePreConstructedObject : T Name Type Description function InstantiatePreConstructedObject() : T"
  },
  "docs/code_reference/nada_base_types/buildevent.html": {
    "href": "docs/code_reference/nada_base_types/buildevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes eventdata Properties Methods"
  },
  "docs/code_reference/nada_base_types/byte.html": {
    "href": "docs/code_reference/nada_base_types/byte.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Parse PositiveMax PositiveValueClosestToZero Properties PositiveMax : byte read-only static The largest (most positive) value that can be represented by a Byte. var PositiveMax : Byte PositiveValueClosestToZero : byte read-only static The positive value closest to zero that can be represented by a Byte. var PositiveValueClosestToZero : Byte Methods Parse : byte static Attempt to convert the given StringRange to a Byte. If parsing fails 0 is returned. |Name|Type|Description| |---|---|---| |p0|stringrange| | function Parse(p0 : StringRange) : Byte"
  },
  "docs/code_reference/nada_base_types/color.html": {
    "href": "docs/code_reference/nada_base_types/color.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes FromBytes FromHexString FromHsva FromInteger ToBytes ToHexString ToHsva ToInteger Properties Methods FromBytes : real4 static Converts RGB Bytes [0-255] into an RGBA Real4 (alpha defaults to 1.0). Integer is used in place of Byte for convenience. |Name|Type|Description| |---|---|---| |r|integer| | |g|integer| | |b|integer| | function FromBytes(r : Integer, g : Integer, b : Integer) : Real4 FromBytes : real4 static Converts RGBA Bytes [0-255] into an RGBA Real4. Integer is used in place of Byte for convenience. |Name|Type|Description| |---|---|---| |r|integer| | |g|integer| | |b|integer| | |a|integer| | function FromBytes(r : Integer, g : Integer, b : Integer, a : Integer) : Real4 FromBytes : real4 static Converts RGBA Bytes [0-255] into an RGBA Real4. Integer is used in place of Byte for convenience. |Name|Type|Description| |---|---|---| |rgba|integer4| | function FromBytes(rgba : Integer4) : Real4 FromHexString : real4 static Converts a hex String into an RGBA Real4. Must be a 3, 4, 6, or 8 digit RGB[A] representation with an optional preceding '#' or '0x' (case insensitive). E.g. #f00, #F00F, ff0000, 0x00FF00FF. |Name|Type|Description| |---|---|---| |value|string| | function FromHexString(value : String) : Real4 FromHsva : real4 static Converts HSV Reals into an RGBA Real4 (alpha defaults to 1.0). The hue parameter will wrap if is beyond [0-1]. The saturation and value parameters may go beyond [0-1] to represent HDR values. |Name|Type|Description| |---|---|---| |h|real| | |s|real| | |v|real| | function FromHsva(h : Real, s : Real, v : Real) : Real4 FromHsva : real4 static Converts HSVA Reals into an RGBA Real4. The hue parameter will wrap if is beyond [0-1]. The saturation and value parameters may go beyond [0-1] to represent HDR values. |Name|Type|Description| |---|---|---| |h|real| | |s|real| | |v|real| | |a|real| | function FromHsva(h : Real, s : Real, v : Real, a : Real) : Real4 FromHsva : real4 static Converts an HSVA Real4 into an RGBA Real4. The hue parameter will wrap if is beyond [0-1]. The saturation and value parameters may go beyond [0-1] to represent HDR values. |Name|Type|Description| |---|---|---| |hsva|real4| | function FromHsva(hsva : Real4) : Real4 FromInteger : real4 static Converts an RGBA packed Integer into an RGBA Real4. Endianness is handled so that 0x00FF00FF always means full green and full alpha. |Name|Type|Description| |---|---|---| |rgba|integer| | function FromInteger(rgba : Integer) : Real4 FromInteger : real4 static Converts an RGB packed Integer and an alpha Byte [0-255] into an RGBA Real4. Endianness is handled so that 0x00FF00FF always means full green and full alpha. |Name|Type|Description| |---|---|---| |rgb|integer| | |a|integer| | function FromInteger(rgb : Integer, a : Integer) : Real4 FromInteger : real4 static Converts an RGB packed Integer and an alpha Real into an RGBA Real4. Endianness is handled so that 0x00FF00FF always means full green and full alpha. |Name|Type|Description| |---|---|---| |rgb|integer| | |a|real| | function FromInteger(rgb : Integer, a : Real) : Real4 ToBytes : integer4 static Converts RGB Reals into an RGBA Integer4 [0-255] (alpha defaults to 255). Integer is used in place of Byte for convenience. |Name|Type|Description| |---|---|---| |r|real| | |g|real| | |b|real| | function ToBytes(r : Real, g : Real, b : Real) : Integer4 ToBytes : integer4 static Converts RGBA Reals into an RGBA Integer4 [0-255]. Integer is used in place of Byte for convenience. |Name|Type|Description| |---|---|---| |r|real| | |g|real| | |b|real| | |a|real| | function ToBytes(r : Real, g : Real, b : Real, a : Real) : Integer4 ToBytes : integer4 static Converts an RGBA Real4 into an RGBA Integer4 [0-255]. Integer is used in place of Byte for convenience. |Name|Type|Description| |---|---|---| |rgba|real4| | function ToBytes(rgba : Real4) : Integer4 ToHexString : string static Converts RGB Reals into the 8 digit hex format RRGGBBAA (alpha defaults to 1.0 so the end will always be FF). |Name|Type|Description| |---|---|---| |r|real| | |g|real| | |b|real| | function ToHexString(r : Real, g : Real, b : Real) : String ToHexString : string static Converts RGBA Reals into the 8 digit hex format RRGGBBAA. |Name|Type|Description| |---|---|---| |r|real| | |g|real| | |b|real| | |a|real| | function ToHexString(r : Real, g : Real, b : Real, a : Real) : String ToHexString : string static Converts an RGBA Real4 into the 8 digit hex format RRGGBBAA. |Name|Type|Description| |---|---|---| |rgba|real4| | function ToHexString(rgba : Real4) : String ToHsva : real4 static Converts RGB Reals into an HSVA Real4 (alpha defaults to 1.0). |Name|Type|Description| |---|---|---| |r|real| | |g|real| | |b|real| | function ToHsva(r : Real, g : Real, b : Real) : Real4 ToHsva : real4 static Converts RGBA Reals into an HSVA Real4. |Name|Type|Description| |---|---|---| |r|real| | |g|real| | |b|real| | |a|real| | function ToHsva(r : Real, g : Real, b : Real, a : Real) : Real4 ToHsva : real4 static Converts an RGBA Real4 into an HSVA Real4. |Name|Type|Description| |---|---|---| |rgba|real4| | function ToHsva(rgba : Real4) : Real4 ToInteger : integer static Converts RGB Reals into an RGBA packed Integer (alpha defaults to 255). Endianness is handled so that 0x00FF00FF always means full green and full alpha. |Name|Type|Description| |---|---|---| |r|real| | |g|real| | |b|real| | function ToInteger(r : Real, g : Real, b : Real) : Integer ToInteger : integer static Converts RGBA Reals into an RGBA packed Integer. Endianness is handled so that 0x00FF00FF always means full green and full alpha. |Name|Type|Description| |---|---|---| |r|real| | |g|real| | |b|real| | |a|real| | function ToInteger(r : Real, g : Real, b : Real, a : Real) : Integer ToInteger : integer static Converts an RGBA Real4 into an RGBA packed Integer. Endianness is handled so that 0x00FF00FF always means full green and full alpha. |Name|Type|Description| |---|---|---| |rgba|real4| | function ToInteger(rgba : Real4) : Integer"
  },
  "docs/code_reference/nada_base_types/colors.html": {
    "href": "docs/code_reference/nada_base_types/colors.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes AliceBlue AntiqueWhite Aqua Aquamarine Azure Beige Bisque Black BlanchedAlmond Blue BlueViolet Brown Burlywood CadetBlue Chartreuse Chocolate Clear Coral Cornflower Cornsilk Crimson Cyan DarkGoldenrod DarkGray DarkKhaki DarkMagenta DarkOliveGreen DarkOrange DarkOrchid DarkSalmon DarkSeaGreen DarkSlateBlue DarkSlateGray DarkTurquoise DarkViolet DeepGreen DeepPink DeepSkyBlue DimGray DodgerBlue Firebrick FloralWhite ForestGreen Fuchsia Gainsboro GhostWhite Gold Goldenrod Gray Green GreenYellow Honeydew HotPink IndianRed Indigo Ivory Khaki Lavender LavenderBlush LawnGreen LemonChiffon LightBlue LightCoral LightCyan LightGoldenrod LightGray LightGreen LightPink LightSalmon LightSeaGreen LightSkyBlue LightSlateGray LightSteelBlue LightYellow Lime LimeGreen Linen Magenta Maroon MediumAquamarine MediumBlue MediumOrchid MediumPurple MediumSeaGreen MediumSlateBlue MediumSpringGreen MediumTurquoise MediumVioletRed MidnightBlue MintCream MistyRose Moccasin NavajoWhite Navy OldLace Olive OliveDrab Orange OrangeRed Orchid PaleGoldenrod PaleGreen PaleTurquoise PaleVioletRed PapayaWhip PeachPuff Peru Pink Plum PowderBlue Purple RebeccaPurple Red RosyBrown RoyalBlue SaddleBrown Salmon SandyBrown SeaGreen Seashell Sienna Silver SkyBlue SlateBlue SlateGray Snow SpringGreen SteelBlue Tan Teal Thistle Tomato Turquoise Violet Wheat White WhiteSmoke Yellow YellowGreen Properties AliceBlue : real4 read-only static RGBA color of Real4(0.941176, 0.972549, 1, 1) or hex 0xF0F8FFFF var AliceBlue : Real4 AntiqueWhite : real4 read-only static RGBA color of Real4(0.980392, 0.921569, 0.843137, 1) or hex 0xFAEBD7FF var AntiqueWhite : Real4 Aqua : real4 read-only static RGBA color of Real4(0, 1, 1, 1) or hex 0x00FFFFFF var Aqua : Real4 Aquamarine : real4 read-only static RGBA color of Real4(0.498039, 1, 0.831373, 1) or hex 0x7FFFD4FF var Aquamarine : Real4 Azure : real4 read-only static RGBA color of Real4(0.941176, 1, 1, 1) or hex 0xF0FFFFFF var Azure : Real4 Beige : real4 read-only static RGBA color of Real4(0.960784, 0.960784, 0.862745, 1) or hex 0xF5F5DCFF var Beige : Real4 Bisque : real4 read-only static RGBA color of Real4(1, 0.894118, 0.768627, 1) or hex 0xFFE4C4FF var Bisque : Real4 Black : real4 read-only static RGBA color of Real4(0, 0, 0, 1) or hex 0x000000FF var Black : Real4 BlanchedAlmond : real4 read-only static RGBA color of Real4(1, 0.921569, 0.803922, 1) or hex 0xFFEBCDFF var BlanchedAlmond : Real4 Blue : real4 read-only static RGBA color of Real4(0, 0, 1, 1) or hex 0x0000FFFF var Blue : Real4 BlueViolet : real4 read-only static RGBA color of Real4(0.541176, 0.168627, 0.886275, 1) or hex 0x8A2BE2FF var BlueViolet : Real4 Brown : real4 read-only static RGBA color of Real4(0.647059, 0.164706, 0.164706, 1) or hex 0xA52A2AFF var Brown : Real4 Burlywood : real4 read-only static RGBA color of Real4(0.870588, 0.721569, 0.529412, 1) or hex 0xDEB887FF var Burlywood : Real4 CadetBlue : real4 read-only static RGBA color of Real4(0.372549, 0.619608, 0.627451, 1) or hex 0x5F9EA0FF var CadetBlue : Real4 Chartreuse : real4 read-only static RGBA color of Real4(0.498039, 1, 0, 1) or hex 0x7FFF00FF var Chartreuse : Real4 Chocolate : real4 read-only static RGBA color of Real4(0.823529, 0.411765, 0.117647, 1) or hex 0xD2691EFF var Chocolate : Real4 Clear : real4 read-only static RGBA color of Real4(1, 1, 1, 0) or hex 0xFFFFFF00 var Clear : Real4 Coral : real4 read-only static RGBA color of Real4(1, 0.498039, 0.313726, 1) or hex 0xFF7F50FF var Coral : Real4 Cornflower : real4 read-only static RGBA color of Real4(0.392157, 0.584314, 0.929412, 1) or hex 0x6495EDFF var Cornflower : Real4 Cornsilk : real4 read-only static RGBA color of Real4(1, 0.972549, 0.862745, 1) or hex 0xFFF8DCFF var Cornsilk : Real4 Crimson : real4 read-only static RGBA color of Real4(0.862745, 0.0784314, 0.235294, 1) or hex 0xDC143CFF var Crimson : Real4 Cyan : real4 read-only static RGBA color of Real4(0, 1, 1, 1) or hex 0x00FFFFFF var Cyan : Real4 DarkGoldenrod : real4 read-only static RGBA color of Real4(0.721569, 0.52549, 0.0431373, 1) or hex 0xB8860BFF var DarkGoldenrod : Real4 DarkGray : real4 read-only static RGBA color of Real4(0.662745, 0.662745, 0.662745, 1) or hex 0xA9A9A9FF var DarkGray : Real4 DarkKhaki : real4 read-only static RGBA color of Real4(0.741176, 0.717647, 0.419608, 1) or hex 0xBDB76BFF var DarkKhaki : Real4 DarkMagenta : real4 read-only static RGBA color of Real4(0.545098, 0, 0.545098, 1) or hex 0x8B008BFF var DarkMagenta : Real4 DarkOliveGreen : real4 read-only static RGBA color of Real4(0.333333, 0.419608, 0.184314, 1) or hex 0x556B2FFF var DarkOliveGreen : Real4 DarkOrange : real4 read-only static RGBA color of Real4(1, 0.54902, 0, 1) or hex 0xFF8C00FF var DarkOrange : Real4 DarkOrchid : real4 read-only static RGBA color of Real4(0.6, 0.196078, 0.8, 1) or hex 0x9932CCFF var DarkOrchid : Real4 DarkSalmon : real4 read-only static RGBA color of Real4(0.913725, 0.588235, 0.478431, 1) or hex 0xE9967AFF var DarkSalmon : Real4 DarkSeaGreen : real4 read-only static RGBA color of Real4(0.560784, 0.737255, 0.560784, 1) or hex 0x8FBC8FFF var DarkSeaGreen : Real4 DarkSlateBlue : real4 read-only static RGBA color of Real4(0.282353, 0.239216, 0.545098, 1) or hex 0x483D8BFF var DarkSlateBlue : Real4 DarkSlateGray : real4 read-only static RGBA color of Real4(0.184314, 0.309804, 0.309804, 1) or hex 0x2F4F4FFF var DarkSlateGray : Real4 DarkTurquoise : real4 read-only static RGBA color of Real4(0, 0.807843, 0.819608, 1) or hex 0x00CED1FF var DarkTurquoise : Real4 DarkViolet : real4 read-only static RGBA color of Real4(0.580392, 0, 0.827451, 1) or hex 0x9400D3FF var DarkViolet : Real4 DeepGreen : real4 read-only static RGBA color of Real4(0, 0.498039, 0, 1) or hex 0x007F00FF var DeepGreen : Real4 DeepPink : real4 read-only static RGBA color of Real4(1, 0.0784314, 0.576471, 1) or hex 0xFF1493FF var DeepPink : Real4 DeepSkyBlue : real4 read-only static RGBA color of Real4(0, 0.74902, 1, 1) or hex 0x00BFFFFF var DeepSkyBlue : Real4 DimGray : real4 read-only static RGBA color of Real4(0.411765, 0.411765, 0.411765, 1) or hex 0x696969FF var DimGray : Real4 DodgerBlue : real4 read-only static RGBA color of Real4(0.117647, 0.564706, 1, 1) or hex 0x1E90FFFF var DodgerBlue : Real4 Firebrick : real4 read-only static RGBA color of Real4(0.698039, 0.133333, 0.133333, 1) or hex 0xB22222FF var Firebrick : Real4 FloralWhite : real4 read-only static RGBA color of Real4(1, 0.980392, 0.941176, 1) or hex 0xFFFAF0FF var FloralWhite : Real4 ForestGreen : real4 read-only static RGBA color of Real4(0.133333, 0.545098, 0.133333, 1) or hex 0x228B22FF var ForestGreen : Real4 Fuchsia : real4 read-only static RGBA color of Real4(1, 0, 1, 1) or hex 0xFF00FFFF var Fuchsia : Real4 Gainsboro : real4 read-only static RGBA color of Real4(0.862745, 0.862745, 0.862745, 1) or hex 0xDCDCDCFF var Gainsboro : Real4 GhostWhite : real4 read-only static RGBA color of Real4(0.972549, 0.972549, 1, 1) or hex 0xF8F8FFFF var GhostWhite : Real4 Gold : real4 read-only static RGBA color of Real4(1, 0.843137, 0, 1) or hex 0xFFD700FF var Gold : Real4 Goldenrod : real4 read-only static RGBA color of Real4(0.854902, 0.647059, 0.12549, 1) or hex 0xDAA520FF var Goldenrod : Real4 Gray : real4 read-only static RGBA color of Real4(0.498039, 0.498039, 0.498039, 1) or hex 0x7F7F7FFF var Gray : Real4 Green : real4 read-only static RGBA color of Real4(0, 1, 0, 1) or hex 0x00FF00FF var Green : Real4 GreenYellow : real4 read-only static RGBA color of Real4(0.678431, 1, 0.184314, 1) or hex 0xADFF2FFF var GreenYellow : Real4 Honeydew : real4 read-only static RGBA color of Real4(0.941176, 1, 0.941176, 1) or hex 0xF0FFF0FF var Honeydew : Real4 HotPink : real4 read-only static RGBA color of Real4(1, 0.411765, 0.705882, 1) or hex 0xFF69B4FF var HotPink : Real4 IndianRed : real4 read-only static RGBA color of Real4(0.803922, 0.360784, 0.360784, 1) or hex 0xCD5C5CFF var IndianRed : Real4 Indigo : real4 read-only static RGBA color of Real4(0.294118, 0, 0.509804, 1) or hex 0x4B0082FF var Indigo : Real4 Ivory : real4 read-only static RGBA color of Real4(1, 1, 0.941176, 1) or hex 0xFFFFF0FF var Ivory : Real4 Khaki : real4 read-only static RGBA color of Real4(0.941176, 0.901961, 0.54902, 1) or hex 0xF0E68CFF var Khaki : Real4 Lavender : real4 read-only static RGBA color of Real4(0.901961, 0.901961, 0.980392, 1) or hex 0xE6E6FAFF var Lavender : Real4 LavenderBlush : real4 read-only static RGBA color of Real4(1, 0.941176, 0.960784, 1) or hex 0xFFF0F5FF var LavenderBlush : Real4 LawnGreen : real4 read-only static RGBA color of Real4(0.486275, 0.988235, 0, 1) or hex 0x7CFC00FF var LawnGreen : Real4 LemonChiffon : real4 read-only static RGBA color of Real4(1, 0.980392, 0.803922, 1) or hex 0xFFFACDFF var LemonChiffon : Real4 LightBlue : real4 read-only static RGBA color of Real4(0.678431, 0.847059, 0.901961, 1) or hex 0xADD8E6FF var LightBlue : Real4 LightCoral : real4 read-only static RGBA color of Real4(0.941176, 0.501961, 0.501961, 1) or hex 0xF08080FF var LightCoral : Real4 LightCyan : real4 read-only static RGBA color of Real4(0.878431, 1, 1, 1) or hex 0xE0FFFFFF var LightCyan : Real4 LightGoldenrod : real4 read-only static RGBA color of Real4(0.980392, 0.980392, 0.823529, 1) or hex 0xFAFAD2FF var LightGoldenrod : Real4 LightGray : real4 read-only static RGBA color of Real4(0.827451, 0.827451, 0.827451, 1) or hex 0xD3D3D3FF var LightGray : Real4 LightGreen : real4 read-only static RGBA color of Real4(0.564706, 0.933333, 0.564706, 1) or hex 0x90EE90FF var LightGreen : Real4 LightPink : real4 read-only static RGBA color of Real4(1, 0.713726, 0.756863, 1) or hex 0xFFB6C1FF var LightPink : Real4 LightSalmon : real4 read-only static RGBA color of Real4(1, 0.627451, 0.478431, 1) or hex 0xFFA07AFF var LightSalmon : Real4 LightSeaGreen : real4 read-only static RGBA color of Real4(0.12549, 0.698039, 0.666667, 1) or hex 0x20B2AAFF var LightSeaGreen : Real4 LightSkyBlue : real4 read-only static RGBA color of Real4(0.529412, 0.807843, 0.980392, 1) or hex 0x87CEFAFF var LightSkyBlue : Real4 LightSlateGray : real4 read-only static RGBA color of Real4(0.466667, 0.533333, 0.6, 1) or hex 0x778899FF var LightSlateGray : Real4 LightSteelBlue : real4 read-only static RGBA color of Real4(0.690196, 0.768627, 0.870588, 1) or hex 0xB0C4DEFF var LightSteelBlue : Real4 LightYellow : real4 read-only static RGBA color of Real4(1, 1, 0.878431, 1) or hex 0xFFFFE0FF var LightYellow : Real4 Lime : real4 read-only static RGBA color of Real4(0, 1, 0, 1) or hex 0x00FF00FF var Lime : Real4 LimeGreen : real4 read-only static RGBA color of Real4(0.196078, 0.803922, 0.196078, 1) or hex 0x32CD32FF var LimeGreen : Real4 Linen : real4 read-only static RGBA color of Real4(0.980392, 0.941176, 0.901961, 1) or hex 0xFAF0E6FF var Linen : Real4 Magenta : real4 read-only static RGBA color of Real4(1, 0, 1, 1) or hex 0xFF00FFFF var Magenta : Real4 Maroon : real4 read-only static RGBA color of Real4(0.498039, 0, 0, 1) or hex 0x7F0000FF var Maroon : Real4 MediumAquamarine : real4 read-only static RGBA color of Real4(0.4, 0.803922, 0.666667, 1) or hex 0x66CDAAFF var MediumAquamarine : Real4 MediumBlue : real4 read-only static RGBA color of Real4(0, 0, 0.803922, 1) or hex 0x0000CDFF var MediumBlue : Real4 MediumOrchid : real4 read-only static RGBA color of Real4(0.729412, 0.333333, 0.827451, 1) or hex 0xBA55D3FF var MediumOrchid : Real4 MediumPurple : real4 read-only static RGBA color of Real4(0.576471, 0.439216, 0.858824, 1) or hex 0x9370DBFF var MediumPurple : Real4 MediumSeaGreen : real4 read-only static RGBA color of Real4(0.235294, 0.701961, 0.443137, 1) or hex 0x3CB371FF var MediumSeaGreen : Real4 MediumSlateBlue : real4 read-only static RGBA color of Real4(0.482353, 0.407843, 0.933333, 1) or hex 0x7B68EEFF var MediumSlateBlue : Real4 MediumSpringGreen : real4 read-only static RGBA color of Real4(0, 0.980392, 0.603922, 1) or hex 0x00FA9AFF var MediumSpringGreen : Real4 MediumTurquoise : real4 read-only static RGBA color of Real4(0.282353, 0.819608, 0.8, 1) or hex 0x48D1CCFF var MediumTurquoise : Real4 MediumVioletRed : real4 read-only static RGBA color of Real4(0.780392, 0.0823529, 0.521569, 1) or hex 0xC71585FF var MediumVioletRed : Real4 MidnightBlue : real4 read-only static RGBA color of Real4(0.0980392, 0.0980392, 0.439216, 1) or hex 0x191970FF var MidnightBlue : Real4 MintCream : real4 read-only static RGBA color of Real4(0.960784, 1, 0.980392, 1) or hex 0xF5FFFAFF var MintCream : Real4 MistyRose : real4 read-only static RGBA color of Real4(1, 0.894118, 0.882353, 1) or hex 0xFFE4E1FF var MistyRose : Real4 Moccasin : real4 read-only static RGBA color of Real4(1, 0.894118, 0.709804, 1) or hex 0xFFE4B5FF var Moccasin : Real4 NavajoWhite : real4 read-only static RGBA color of Real4(1, 0.870588, 0.678431, 1) or hex 0xFFDEADFF var NavajoWhite : Real4 Navy : real4 read-only static RGBA color of Real4(0, 0, 0.501961, 1) or hex 0x000080FF var Navy : Real4 OldLace : real4 read-only static RGBA color of Real4(0.992157, 0.960784, 0.901961, 1) or hex 0xFDF5E6FF var OldLace : Real4 Olive : real4 read-only static RGBA color of Real4(0.501961, 0.501961, 0, 1) or hex 0x808000FF var Olive : Real4 OliveDrab : real4 read-only static RGBA color of Real4(0.419608, 0.556863, 0.137255, 1) or hex 0x6B8E23FF var OliveDrab : Real4 Orange : real4 read-only static RGBA color of Real4(1, 0.647059, 0, 1) or hex 0xFFA500FF var Orange : Real4 OrangeRed : real4 read-only static RGBA color of Real4(1, 0.270588, 0, 1) or hex 0xFF4500FF var OrangeRed : Real4 Orchid : real4 read-only static RGBA color of Real4(0.854902, 0.439216, 0.839216, 1) or hex 0xDA70D6FF var Orchid : Real4 PaleGoldenrod : real4 read-only static RGBA color of Real4(0.933333, 0.909804, 0.666667, 1) or hex 0xEEE8AAFF var PaleGoldenrod : Real4 PaleGreen : real4 read-only static RGBA color of Real4(0.596078, 0.984314, 0.596078, 1) or hex 0x98FB98FF var PaleGreen : Real4 PaleTurquoise : real4 read-only static RGBA color of Real4(0.686275, 0.933333, 0.933333, 1) or hex 0xAFEEEEFF var PaleTurquoise : Real4 PaleVioletRed : real4 read-only static RGBA color of Real4(0.858824, 0.439216, 0.576471, 1) or hex 0xDB7093FF var PaleVioletRed : Real4 PapayaWhip : real4 read-only static RGBA color of Real4(1, 0.937255, 0.835294, 1) or hex 0xFFEFD5FF var PapayaWhip : Real4 PeachPuff : real4 read-only static RGBA color of Real4(1, 0.854902, 0.72549, 1) or hex 0xFFDAB9FF var PeachPuff : Real4 Peru : real4 read-only static RGBA color of Real4(0.803922, 0.521569, 0.247059, 1) or hex 0xCD853FFF var Peru : Real4 Pink : real4 read-only static RGBA color of Real4(1, 0.752941, 0.796078, 1) or hex 0xFFC0CBFF var Pink : Real4 Plum : real4 read-only static RGBA color of Real4(0.866667, 0.627451, 0.866667, 1) or hex 0xDDA0DDFF var Plum : Real4 PowderBlue : real4 read-only static RGBA color of Real4(0.690196, 0.878431, 0.901961, 1) or hex 0xB0E0E6FF var PowderBlue : Real4 Purple : real4 read-only static RGBA color of Real4(0.498039, 0, 0.498039, 1) or hex 0x7F007FFF var Purple : Real4 RebeccaPurple : real4 read-only static RGBA color of Real4(0.4, 0.2, 0.6, 1) or hex 0x663399FF var RebeccaPurple : Real4 Red : real4 read-only static RGBA color of Real4(1, 0, 0, 1) or hex 0xFF0000FF var Red : Real4 RosyBrown : real4 read-only static RGBA color of Real4(0.737255, 0.560784, 0.560784, 1) or hex 0xBC8F8FFF var RosyBrown : Real4 RoyalBlue : real4 read-only static RGBA color of Real4(0.254902, 0.411765, 0.882353, 1) or hex 0x4169E1FF var RoyalBlue : Real4 SaddleBrown : real4 read-only static RGBA color of Real4(0.545098, 0.270588, 0.0745098, 1) or hex 0x8B4513FF var SaddleBrown : Real4 Salmon : real4 read-only static RGBA color of Real4(0.980392, 0.501961, 0.447059, 1) or hex 0xFA8072FF var Salmon : Real4 SandyBrown : real4 read-only static RGBA color of Real4(0.956863, 0.643137, 0.376471, 1) or hex 0xF4A460FF var SandyBrown : Real4 SeaGreen : real4 read-only static RGBA color of Real4(0.180392, 0.545098, 0.341176, 1) or hex 0x2E8B57FF var SeaGreen : Real4 Seashell : real4 read-only static RGBA color of Real4(1, 0.960784, 0.933333, 1) or hex 0xFFF5EEFF var Seashell : Real4 Sienna : real4 read-only static RGBA color of Real4(0.627451, 0.321569, 0.176471, 1) or hex 0xA0522DFF var Sienna : Real4 Silver : real4 read-only static RGBA color of Real4(0.752941, 0.752941, 0.752941, 1) or hex 0xC0C0C0FF var Silver : Real4 SkyBlue : real4 read-only static RGBA color of Real4(0.529412, 0.807843, 0.921569, 1) or hex 0x87CEEBFF var SkyBlue : Real4 SlateBlue : real4 read-only static RGBA color of Real4(0.415686, 0.352941, 0.803922, 1) or hex 0x6A5ACDFF var SlateBlue : Real4 SlateGray : real4 read-only static RGBA color of Real4(0.439216, 0.501961, 0.564706, 1) or hex 0x708090FF var SlateGray : Real4 Snow : real4 read-only static RGBA color of Real4(1, 0.980392, 0.980392, 1) or hex 0xFFFAFAFF var Snow : Real4 SpringGreen : real4 read-only static RGBA color of Real4(0, 1, 0.498039, 1) or hex 0x00FF7FFF var SpringGreen : Real4 SteelBlue : real4 read-only static RGBA color of Real4(0.27451, 0.509804, 0.705882, 1) or hex 0x4682B4FF var SteelBlue : Real4 Tan : real4 read-only static RGBA color of Real4(0.823529, 0.705882, 0.54902, 1) or hex 0xD2B48CFF var Tan : Real4 Teal : real4 read-only static RGBA color of Real4(0, 0.501961, 0.501961, 1) or hex 0x008080FF var Teal : Real4 Thistle : real4 read-only static RGBA color of Real4(0.847059, 0.74902, 0.847059, 1) or hex 0xD8BFD8FF var Thistle : Real4 Tomato : real4 read-only static RGBA color of Real4(1, 0.388235, 0.278431, 1) or hex 0xFF6347FF var Tomato : Real4 Turquoise : real4 read-only static RGBA color of Real4(0.25098, 0.878431, 0.815686, 1) or hex 0x40E0D0FF var Turquoise : Real4 Violet : real4 read-only static RGBA color of Real4(0.933333, 0.509804, 0.933333, 1) or hex 0xEE82EEFF var Violet : Real4 Wheat : real4 read-only static RGBA color of Real4(0.960784, 0.870588, 0.701961, 1) or hex 0xF5DEB3FF var Wheat : Real4 White : real4 read-only static RGBA color of Real4(1, 1, 1, 1) or hex 0xFFFFFFFF var White : Real4 WhiteSmoke : real4 read-only static RGBA color of Real4(0.960784, 0.960784, 0.960784, 1) or hex 0xF5F5F5FF var WhiteSmoke : Real4 Yellow : real4 read-only static RGBA color of Real4(1, 1, 0, 1) or hex 0xFFFF00FF var Yellow : Real4 YellowGreen : real4 read-only static RGBA color of Real4(0.603922, 0.803922, 0.196078, 1) or hex 0x9ACD32FF var YellowGreen : Real4 Methods"
  },
  "docs/code_reference/nada_base_types/console.html": {
    "href": "docs/code_reference/nada_base_types/console.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes DumpValue ReadBoolean ReadInteger ReadReal ReadString Write WriteLine Properties Methods DumpValue : Void static Name Type Description p0 T function DumpValue(p0 : T) DumpValue : Void static Name Type Description p0 T p1 integer function DumpValue(p0 : T, p1 : Integer) ReadBoolean : boolean static Name Type Description function ReadBoolean() : Boolean ReadInteger : integer static Name Type Description function ReadInteger() : Integer ReadReal : real static Name Type Description function ReadReal() : Real ReadString : string static Name Type Description function ReadString() : String Write : Void static Name Type Description p0 T function Write(p0 : T) Write : Void static Name Type Description p0 T p1 T function Write(p0 : T, p1 : T) Write : Void static Name Type Description p0 T p1 T p2 T function Write(p0 : T, p1 : T, p2 : T) Write : Void static Name Type Description p0 T p1 T p2 T p3 T function Write(p0 : T, p1 : T, p2 : T, p3 : T) Write : Void static Name Type Description p0 T p1 T p2 T p3 T p4 T function Write(p0 : T, p1 : T, p2 : T, p3 : T, p4 : T) WriteLine : Void static Name Type Description function WriteLine() WriteLine : Void static Name Type Description p0 T function WriteLine(p0 : T) WriteLine : Void static Name Type Description p0 T p1 T function WriteLine(p0 : T, p1 : T) WriteLine : Void static Name Type Description p0 T p1 T p2 T function WriteLine(p0 : T, p1 : T, p2 : T) WriteLine : Void static Name Type Description p0 T p1 T p2 T p3 T function WriteLine(p0 : T, p1 : T, p2 : T, p3 : T) WriteLine : Void static Name Type Description p0 T p1 T p2 T p3 T p4 T function WriteLine(p0 : T, p1 : T, p2 : T, p3 : T, p4 : T)"
  },
  "docs/code_reference/nada_base_types/consoleevent.html": {
    "href": "docs/code_reference/nada_base_types/consoleevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes eventdata Properties Methods"
  },
  "docs/code_reference/nada_base_types/debuggerevent.html": {
    "href": "docs/code_reference/nada_base_types/debuggerevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes eventdata Properties Methods"
  },
  "docs/code_reference/nada_base_types/delegateparameter.html": {
    "href": "docs/code_reference/nada_base_types/delegateparameter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Name Type Properties Name : string read-only var Name : String Type : type read-only var Type : Type Methods"
  },
  "docs/code_reference/nada_base_types/delegateparameterrange.html": {
    "href": "docs/code_reference/nada_base_types/delegateparameterrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor [[zilch_engine_documentation/code_reference/nada_base_types/delegateparameterrange/#all-delegate() All]] MoveNext [[zilch_engine_documentation/code_reference/nada_base_types/delegateparameterrange/#current-delegate() Current]] IsEmpty IsNotEmpty Properties All : delegate() read-only var All : delegate() Current : delegate() read-only var Current : delegate() IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods DelegateParameterRange : Void constructor Name Type Description function DelegateParameterRange() DelegateParameterRange : Void constructor Name Type Description p0 delegate() function DelegateParameterRange(p0 : delegate()) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/nada_base_types/delegatetype.html": {
    "href": "docs/code_reference/nada_base_types/delegatetype.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes [[zilch_engine_documentation/code_reference/nada_base_types/delegatetype/#parameters-delegate() Parameters]] type Return Signature Properties Parameters : delegate() read-only var Parameters : delegate() Return : type read-only var Return : Type Signature : string read-only var Signature : String Methods"
  },
  "docs/code_reference/nada_base_types/doubleinteger.html": {
    "href": "docs/code_reference/nada_base_types/doubleinteger.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Parse NegativeMin NegativeValueClosestToZero PositiveMax PositiveValueClosestToZero Properties NegativeMin : doubleinteger read-only static The smallest (most negative) value that can be represented by a DoubleInteger. var NegativeMin : DoubleInteger NegativeValueClosestToZero : doubleinteger read-only static The negative value closest to zero that can be represented by a DoubleInteger. var NegativeValueClosestToZero : DoubleInteger PositiveMax : doubleinteger read-only static The largest (most positive) value that can be represented by a DoubleInteger. var PositiveMax : DoubleInteger PositiveValueClosestToZero : doubleinteger read-only static The positive value closest to zero that can be represented by a DoubleInteger. var PositiveValueClosestToZero : DoubleInteger Methods Parse : doubleinteger static Attempt to convert the given StringRange to a DoubleInteger. If parsing fails 0 is returned. |Name|Type|Description| |---|---|---| |p0|stringrange| | function Parse(p0 : StringRange) : DoubleInteger"
  },
  "docs/code_reference/nada_base_types/doublereal.html": {
    "href": "docs/code_reference/nada_base_types/doublereal.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Parse NegativeMin NegativeValueClosestToZero PositiveMax PositiveValueClosestToZero Properties NegativeMin : doublereal read-only static The smallest (most negative) value that can be represented by a DoubleReal. var NegativeMin : DoubleReal NegativeValueClosestToZero : doublereal read-only static The negative value closest to zero that can be represented by a DoubleReal. var NegativeValueClosestToZero : DoubleReal PositiveMax : doublereal read-only static The largest (most positive) value that can be represented by a DoubleReal. var PositiveMax : DoubleReal PositiveValueClosestToZero : doublereal read-only static The positive value closest to zero that can be represented by a DoubleReal. var PositiveValueClosestToZero : DoubleReal Methods Parse : doublereal static Attempt to convert the given StringRange to a DoubleReal. If parsing fails 0 is returned. |Name|Type|Description| |---|---|---| |p0|stringrange| | function Parse(p0 : StringRange) : DoubleReal"
  },
  "docs/code_reference/nada_base_types/enum.html": {
    "href": "docs/code_reference/nada_base_types/enum.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes filemode members streamcapabilities streamorigin Properties Methods"
  },
  "docs/code_reference/nada_base_types/errorevent.html": {
    "href": "docs/code_reference/nada_base_types/errorevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes eventdata Properties Methods"
  },
  "docs/code_reference/nada_base_types/errortype.html": {
    "href": "docs/code_reference/nada_base_types/errortype.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/nada_base_types/eventdata.html": {
    "href": "docs/code_reference/nada_base_types/eventdata.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor buildevent consoleevent debuggerevent errorevent exceptionevent fatalerrorevent memoryleakevent opcodeevent parseevent pluginevent Properties Methods EventData : Void constructor Name Type Description function EventData()"
  },
  "docs/code_reference/nada_base_types/eventhandler.html": {
    "href": "docs/code_reference/nada_base_types/eventhandler.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor executablestate Properties Methods EventHandler : Void constructor Name Type Description function EventHandler()"
  },
  "docs/code_reference/nada_base_types/events.html": {
    "href": "docs/code_reference/nada_base_types/events.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Connect Send Properties Methods Connect : Void static Name Type Description sender anyhandle eventName string callback delegate() function Connect(sender : AnyHandle, eventName : String, callback : delegate()) Send : integer static Name Type Description sender anyhandle eventName string event eventdata function Send(sender : AnyHandle, eventName : String, event : EventData) : Integer"
  },
  "docs/code_reference/nada_base_types/exception.html": {
    "href": "docs/code_reference/nada_base_types/exception.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor Message Properties Message : string var Message : String Methods Exception : Void constructor Name Type Description function Exception() Exception : Void constructor Name Type Description p0 string function Exception(p0 : String)"
  },
  "docs/code_reference/nada_base_types/exceptionevent.html": {
    "href": "docs/code_reference/nada_base_types/exceptionevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes eventdata Properties Methods"
  },
  "docs/code_reference/nada_base_types/executablestate.html": {
    "href": "docs/code_reference/nada_base_types/executablestate.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes ExecuteStatement CallingState eventhandler Properties CallingState : executablestate read-only static var CallingState : ExecutableState Methods ExecuteStatement : T Name Type Description p0 string function ExecuteStatement(p0 : String) : T"
  },
  "docs/code_reference/nada_base_types/fatalerrorevent.html": {
    "href": "docs/code_reference/nada_base_types/fatalerrorevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes eventdata Properties Methods"
  },
  "docs/code_reference/nada_base_types/field.html": {
    "href": "docs/code_reference/nada_base_types/field.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Property Properties Methods"
  },
  "docs/code_reference/nada_base_types/fieldrange.html": {
    "href": "docs/code_reference/nada_base_types/fieldrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : fieldrange read-only var All : FieldRange Current : field read-only var Current : Field IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods FieldRange : Void constructor Name Type Description function FieldRange() FieldRange : Void constructor Name Type Description p0 fieldrange function FieldRange(p0 : FieldRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/nada_base_types/filemode.html": {
    "href": "docs/code_reference/nada_base_types/filemode.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Append enum Read Sequential ShareDelete ShareRead ShareWrite Write Properties Append : filemode read-only static var Append : FileMode Read : filemode read-only static var Read : FileMode Sequential : filemode read-only static var Sequential : FileMode ShareDelete : filemode read-only static var ShareDelete : FileMode ShareRead : filemode read-only static var ShareRead : FileMode ShareWrite : filemode read-only static var ShareWrite : FileMode Write : filemode read-only static var Write : FileMode Methods"
  },
  "docs/code_reference/nada_base_types/filepath.html": {
    "href": "docs/code_reference/nada_base_types/filepath.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes AddTrailingDirectorySeparator DirectorySeparator ChangeExtension ExecutableDirectory CombineDirectories ExecutableFile CombineDirectoriesAndFile TemporaryDirectory GetCanonicalizedPathFromAbsolutePath UserDocumentsDirectory GetComparablePathFromAbsolutePath UserLocalDirectory GetDirectoryName WorkingDirectory GetDirectoryPath GetExtensionWithDot GetExtensionWithoutDot GetFileNameWithExtension GetFileNameWithoutExtension IsRelative RemoveTrailingDirectorySeparator Properties DirectorySeparator : string read-only static Gets the character(s) used for separating directories and files. This value is often different depending on the operating system (generally either '/' or '') var DirectorySeparator : String ExecutableDirectory : string read-only static The directory the executable lives with in (exe, elf...). This will always include a directory separator at the end of the result. var ExecutableDirectory : String ExecutableFile : string read-only static A path directly to the executable itself (exe, elf...). var ExecutableFile : String TemporaryDirectory : string read-only static Temporary files should be placed here. This will always include a directory separator at the end of the result. var TemporaryDirectory : String UserDocumentsDirectory : string read-only static User saved data that the user can backup or modify should be placed here (read/write/create permissions should be allowed). This will always include a directory separator at the end of the result. var UserDocumentsDirectory : String UserLocalDirectory : string read-only static Application saved information should be placed here (read/write/create permissions should be allowed). This will always include a directory separator at the end of the result. var UserLocalDirectory : String WorkingDirectory : string static A directory that all relative paths start resolving from. In general the changing of the working directory is discouraged because it may affect assumptions of the host application. This will always include a directory separator at the end of the result. var WorkingDirectory : String Methods AddTrailingDirectorySeparator : string static Pass in a directory path with or without the separator and this will add it at the end (if needed). Example: ('Content\\Powerups') results in 'Content\\Powerups' Example: ('Content\\Powerups') results in 'Content\\Powerups' Name Type Description p0 string function AddTrailingDirectorySeparator(p0 : String) : String ChangeExtension : string static Changes the extension of a path (with file name at the end) to a new extension. If the file has no extension, then this will automatically add the extension to the end. The extension is allowed to contain a leading dot '.' character (or not). The path is also allowed to contain a trailing dot '.' character (or not). Example: ('Content\\Player.png', 'jpg') results in 'Content\\Player.jpg' Example: ('Content\\Player', 'jpg') results in 'Content\\Player.jpg' Example: ('Content\\Player.', '.jpg') results in 'Content\\Player.jpg' Name Type Description p0 string p1 string function ChangeExtension(p0 : String, p1 : String) : String CombineDirectories : string static Combines directory paths and directories names together (empty entries are skipped). This will always include a directory separator at the end of the result. Example: ('Content', 'Powerups') results in 'Content\\Powerups' Example: ('Content', 'Powerups') results in 'Content\\Powerups' Example: ('Content', '', 'Powerups') results in 'Content\\Powerups' Example: ('C:\\Sandbox', 'Content') results in 'C:\\Sandbox\\Content' Name Type Description dir0 string dir1 string function CombineDirectories(dir0 : String, dir1 : String) : String CombineDirectories : string static Combines directory paths and directories names together (empty entries are skipped). This will always include a directory separator at the end of the result. Example: ('Content', 'Powerups') results in 'Content\\Powerups' Example: ('Content', 'Powerups') results in 'Content\\Powerups' Example: ('Content', '', 'Powerups') results in 'Content\\Powerups' Example: ('C:\\Sandbox', 'Content') results in 'C:\\Sandbox\\Content' Name Type Description dir0 string dir1 string dir2 string function CombineDirectories(dir0 : String, dir1 : String, dir2 : String) : String CombineDirectories : string static Combines directory paths and directories names together (empty entries are skipped). This will always include a directory separator at the end of the result. Example: ('Content', 'Powerups') results in 'Content\\Powerups' Example: ('Content', 'Powerups') results in 'Content\\Powerups' Example: ('Content', '', 'Powerups') results in 'Content\\Powerups' Example: ('C:\\Sandbox', 'Content') results in 'C:\\Sandbox\\Content' Name Type Description dir0 string dir1 string dir2 string dir3 string function CombineDirectories(dir0 : String, dir1 : String, dir2 : String, dir3 : String) : String CombineDirectories : string static Combines directory paths and directories names together (empty entries are skipped). This will always include a directory separator at the end of the result. Example: ('Content', 'Powerups') results in 'Content\\Powerups' Example: ('Content', 'Powerups') results in 'Content\\Powerups' Example: ('Content', '', 'Powerups') results in 'Content\\Powerups' Example: ('C:\\Sandbox', 'Content') results in 'C:\\Sandbox\\Content' Name Type Description dir0 string dir1 string dir2 string dir3 string dir4 string function CombineDirectories(dir0 : String, dir1 : String, dir2 : String, dir3 : String, dir4 : String) : String CombineDirectoriesAndFile : string static Combines directory paths, directories names, and a single file name together (empty entries are skipped). Because we are combining a file name at the end, this will not result in a trailing directory separator. Example: ('Content\\Powerups', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('Content\\Powerups', '', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('Content', 'Powerups', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('C:\\Sandbox', 'Content\\Player.png') results in 'C:\\Sandbox\\Content\\Player.png' Name Type Description dir0 string fileName string function CombineDirectoriesAndFile(dir0 : String, fileName : String) : String CombineDirectoriesAndFile : string static Combines directory paths, directories names, and a single file name together (empty entries are skipped). Because we are combining a file name at the end, this will not result in a trailing directory separator. Example: ('Content\\Powerups', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('Content\\Powerups', '', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('Content', 'Powerups', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('C:\\Sandbox', 'Content\\Player.png') results in 'C:\\Sandbox\\Content\\Player.png' Name Type Description dir0 string dir1 string fileName string function CombineDirectoriesAndFile(dir0 : String, dir1 : String, fileName : String) : String CombineDirectoriesAndFile : string static Combines directory paths, directories names, and a single file name together (empty entries are skipped). Because we are combining a file name at the end, this will not result in a trailing directory separator. Example: ('Content\\Powerups', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('Content\\Powerups', '', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('Content', 'Powerups', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('C:\\Sandbox', 'Content\\Player.png') results in 'C:\\Sandbox\\Content\\Player.png' Name Type Description dir0 string dir1 string dir2 string fileName string function CombineDirectoriesAndFile(dir0 : String, dir1 : String, dir2 : String, fileName : String) : String CombineDirectoriesAndFile : string static Combines directory paths, directories names, and a single file name together (empty entries are skipped). Because we are combining a file name at the end, this will not result in a trailing directory separator. Example: ('Content\\Powerups', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('Content\\Powerups', '', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('Content', 'Powerups', 'Recharge.png') results in 'Content\\Powerups\\Recharge.png' Example: ('C:\\Sandbox', 'Content\\Player.png') results in 'C:\\Sandbox\\Content\\Player.png' Name Type Description dir0 string dir1 string dir2 string dir3 string fileName string function CombineDirectoriesAndFile(dir0 : String, dir1 : String, dir2 : String, dir3 : String, fileName : String) : String GetCanonicalizedPathFromAbsolutePath : string static Changes all directory separators to be the current operating system directory separator, removes duplicate separators, and removes '..' and '.' from the paths. Canonicalized is only guaranteed to work on absolute paths. This behavior is operating system dependent and may call the related OS functions. Example: ('C:/Sandbox//Engine/../Content/./Player.png') results in 'C:\\Sandbox\\Content\\Player.png' Name Type Description p0 string function GetCanonicalizedPathFromAbsolutePath(p0 : String) : String GetComparablePathFromAbsolutePath : string static First this normalizes the path, then if the operating system is case insensative, it will make the path all lowercase so that it compares. Example: ('C:\\Sandbox\\Engine..\\Content.\\Player.png') results in 'c:\\sandbox\\content\\player.png' Name Type Description p0 string function GetComparablePathFromAbsolutePath(p0 : String) : String GetDirectoryName : string static If a file path is passed in, this will return the name of the parent directory. If a directory path is passed in (ending in a separator), this will return the name of the directory. A directory path without a trailing separator is abiguous with a file that has no extension. In this case, we always assume it is a file and therefore get the parent directory's name. Example: ('Content\\Powerups\\Recharge.png') results in 'Powerups' Example: ('Content\\Powerups') results in 'Powerups' Example: ('Content\\Powerups') results in 'Content' Example: ('Content') results in '' Name Type Description p0 string function GetDirectoryName(p0 : String) : String GetDirectoryPath : string static If a file path is passed in, this will return the parent directory. If a directory path is passed in (ending in a separator), this will return the directy back with no modifications. A directory path without a trailing separator is abiguous with a file that has no extension. This will always include a directory separator at the end of the result. In this case, we always assume it is a file and therefore get the parent directory's name. Example: ('Content\\Powerups\\Recharge.png') results in 'Content\\Powerups' Example: ('Content\\Powerups') results in 'Content\\Powerups' Example: ('Content\\Powerups') results in 'Content' Example: ('Content') results in '' Name Type Description p0 string function GetDirectoryPath(p0 : String) : String GetExtensionWithDot : string static Returns only the extension of a file (everything after the last dot, including the dot). If the file has no extension then this will return an empty string. Example: ('Content\\Player.png') results in '.png' Example: ('Content\\Player.') results in '' Example: ('Parent.Directory\\Log') results in '' Name Type Description p0 string function GetExtensionWithDot(p0 : String) : String GetExtensionWithoutDot : string static Returns only the extension of a file (everything after the last dot, not including the dot). If the file has no extension then this will return an empty string. Example: ('Content\\Player.png') results in 'png' Example: ('Content\\Player.') results in '' Example: ('Parent.Directory\\Log') results in '' Name Type Description p0 string function GetExtensionWithoutDot(p0 : String) : String GetFileNameWithExtension : string static Returns only the file portion of a path (everything past the last separator including the extension). Example: ('Content\\Player.png') results in 'Player.png' Example: ('Content\\Powerups') results in '' Example: ('Content\\Powerups') results in 'Powerups' Name Type Description p0 string function GetFileNameWithExtension(p0 : String) : String GetFileNameWithoutExtension : string static Returns only the file portion of a path (everything past the last separator excluding the extension). Example: ('Content\\Player.png') results in 'Player' Example: ('Content\\Powerups') results in '' Example: ('Content\\Powerups') results in 'Powerups' Name Type Description p0 string function GetFileNameWithoutExtension(p0 : String) : String IsRelative : boolean static Returns true if a path has no root (such as a volume/hard drive specifier, or unix like systems a beginning slash). Even a beginning slash that means 'relative to the current working directory volume' is still relative. Empty paths will return that they are relative. Example: ('C:\\Sandbox\\Engine..\\Content.\\Player.png') results in 'false' Example: ('Sandbox') results in 'true' Example: ('Content\\Powerups\\Recharge.png') results in 'true' Example: ('/usr/Content/Player.png') results in 'false' Name Type Description p0 string function IsRelative(p0 : String) : Boolean RemoveTrailingDirectorySeparator : string static Pass in a directory path with or without the separator and this will remove it from the end (if needed). Example: ('Content\\Powerups') results in 'Content\\Powerups' Example: ('Content\\Powerups') results in 'Content\\Powerups' Name Type Description p0 string function RemoveTrailingDirectorySeparator(p0 : String) : String"
  },
  "docs/code_reference/nada_base_types/filestream.html": {
    "href": "docs/code_reference/nada_base_types/filestream.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Close istream Constructor Properties Methods Close : Void Name Type Description function Close() FileStream : Void constructor Name Type Description function FileStream() FileStream : Void constructor Name Type Description p0 filestream function FileStream(p0 : FileStream) FileStream : Void constructor Name Type Description filePath string mode FileMode function FileStream(filePath : String, mode : FileMode)"
  },
  "docs/code_reference/nada_base_types/function.html": {
    "href": "docs/code_reference/nada_base_types/function.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes CreateDelegate Type member Invoke Properties Type : delegatetype read-only var Type : DelegateType Methods CreateDelegate : T Name Type Description instance T function CreateDelegate(instance : T) : T Invoke : T Name Type Description instance T arguments Array[any] function Invoke(instance : T, arguments : Array[any]) : T"
  },
  "docs/code_reference/nada_base_types/functionrange.html": {
    "href": "docs/code_reference/nada_base_types/functionrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : functionrange read-only var All : FunctionRange Current : function read-only var Current : Function IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods FunctionRange : Void constructor Name Type Description function FunctionRange() FunctionRange : Void constructor Name Type Description p0 functionrange function FunctionRange(p0 : FunctionRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/nada_base_types/gettersetter.html": {
    "href": "docs/code_reference/nada_base_types/gettersetter.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Property Properties Methods"
  },
  "docs/code_reference/nada_base_types/gettersetterrange.html": {
    "href": "docs/code_reference/nada_base_types/gettersetterrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : gettersetterrange read-only var All : GetterSetterRange Current : gettersetter read-only var Current : GetterSetter IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods GetterSetterRange : Void constructor Name Type Description function GetterSetterRange() GetterSetterRange : Void constructor Name Type Description p0 gettersetterrange function GetterSetterRange(p0 : GetterSetterRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/nada_base_types/hashmap_key,_value.html": {
    "href": "docs/code_reference/nada_base_types/hashmap_key,_value.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core (NOTE) Hash Map is an Associative Hashed Container. Methods Properties Base Classes Derived Classes [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#add-void Add]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#all-zilch-engine-document All]] HashedContainer<Pair<KeyType,DataType>,PairHashAdapter<Hasher,KeyType,DataType>,Allocator> [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#clear-void Clear]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#count-zilch-engine-docume Count]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#contains-zilch-engine-doc Contains]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#keys-zilch-engine-documen Keys]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#get-zilch-engine-document Get]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#values-zilch-engine-docum Values]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#getordefault-zilch-engine GetOrDefault]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#getorerror-zilch-engine-d GetOrError]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#hashmap-key, value-void Constructor]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#removeorerror-void RemoveOrError]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#removeorignore-zilch-engi RemoveOrIgnore]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#set-zilch-engine-document Set]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#setorerror-void SetOrError]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#setorignore-zilch-engine SetOrIgnore]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key, value /#setoroverwrite-zilch-engi SetOrOverwrite]] Properties All : HashMapRange[Key,Value] read-only var All : HashMapRange[Key, Value] Count : integer read-only var Count : Integer Keys : HashMapKeyRange[Key] read-only var Keys : HashMapKeyRange[Key] Values : HashMapValueRange[Value] read-only var Values : HashMapValueRange[Value] Methods Add : Void Name Type Description Key Value function Add( : Key, : Value) Clear : Void Name Type Description function Clear() Contains : boolean Name Type Description Key function Contains( : Key) : Boolean Get : Value Name Type Description Key function Get( : Key) : Value GetOrDefault : Value Name Type Description Key function GetOrDefault( : Key) : Value GetOrDefault : Value Name Type Description Key Value function GetOrDefault( : Key, : Value) : Value GetOrError : Value Name Type Description Key function GetOrError( : Key) : Value HashMap[Key, Value] : Void constructor Name Type Description function HashMap[Key, Value]() RemoveOrError : Void Name Type Description Key function RemoveOrError( : Key) RemoveOrIgnore : boolean Name Type Description Key function RemoveOrIgnore( : Key) : Boolean Set : boolean Name Type Description Key Value function Set( : Key, : Value) : Boolean SetOrError : Void Name Type Description Key Value function SetOrError( : Key, : Value) SetOrIgnore : boolean Name Type Description Key Value function SetOrIgnore( : Key, : Value) : Boolean SetOrOverwrite : boolean Name Type Description Key Value function SetOrOverwrite( : Key, : Value) : Boolean"
  },
  "docs/code_reference/nada_base_types/hashmap_key,value.html": {
    "href": "docs/code_reference/nada_base_types/hashmap_key,value.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core(NOTE) Hash Map is an Associative Hashed Container. Methods Properties Base Classes Derived Classes [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#add-void Add]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#all-zilch-engine-document All]] HashedContainer<Pair<KeyType,DataType>,PairHashAdapter<Hasher,KeyType,DataType>,Allocator> [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#clear-void Clear]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#count-zilch-engine-docume Count]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#contains-zilch-engine-doc Contains]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#keys-zilch-engine-documen Keys]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#get-zilch-engine-document Get]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#values-zilch-engine-docum Values]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#getordefault-zilch-engine GetOrDefault]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#getorerror-zilch-engine-d GetOrError]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#hashmap-key,value-void Constructor]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#removeorerror-void RemoveOrError]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#removeorignore-zilch-engi RemoveOrIgnore]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#set-zilch-engine-document Set]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#setorerror-void SetOrError]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#setorignore-zilch-engine SetOrIgnore]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmap_key,value /#setoroverwrite-zilch-engi SetOrOverwrite]] Properties All : HashMapRange[Key,Value] read-only var All : HashMapRange[Key,Value] Count : integer read-only var Count : Integer Keys : HashMapKeyRange[Key] read-only var Keys : HashMapKeyRange[Key] Values : HashMap[Value] read-only var Values : HashMap[Value] Methods Add : Void Name Type Description Key Value function Add( : Key, : Value) Clear : Void Name Type Description function Clear() Contains : boolean Name Type Description Key function Contains( : Key) : Boolean Get : Value Name Type Description Key function Get( : Key) : Value GetOrDefault : Value Name Type Description Key function GetOrDefault( : Key) : Value GetOrDefault : Value Name Type Description Key Value function GetOrDefault( : Key, : Value) : Value GetOrError : Value Name Type Description Key function GetOrError( : Key) : Value HashMap[Key,Value] : Void constructor Name Type Description function HashMap[Key,Value]() RemoveOrError : Void Name Type Description Key function RemoveOrError( : Key) RemoveOrIgnore : boolean Name Type Description Key function RemoveOrIgnore( : Key) : Boolean Set : boolean Name Type Description Key Value function Set( : Key, : Value) : Boolean SetOrError : Void Name Type Description Key Value function SetOrError( : Key, : Value) SetOrIgnore : boolean Name Type Description Key Value function SetOrIgnore( : Key, : Value) : Boolean SetOrOverwrite : boolean Name Type Description Key Value function SetOrOverwrite( : Key, : Value) : Boolean"
  },
  "docs/code_reference/nada_base_types/hashmapkeyrange_key.html": {
    "href": "docs/code_reference/nada_base_types/hashmapkeyrange_key.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes [ Constructor](hashmapkeyrange_key .md#hashmapkeyrange-key-void) [ All](hashmapkeyrange_key .md#all-zilch-engine-document) [ MoveNext](hashmapkeyrange_key .md#movenext-void) [ Current](hashmapkeyrange_key .md#current-key) [ Reset](hashmapkeyrange_key .md#reset-void) [ IsEmpty](hashmapkeyrange_key .md#isempty-zilch-engine-docu) [ IsNotEmpty](hashmapkeyrange_key .md#isnotempty-zilch-engine-d) Properties All : HashMapKeyRange[Key] read-only var All : HashMapKeyRange[Key] Current : Key read-only var Current : Key IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods HashMapKeyRange[Key] : Void constructor Name Type Description function HashMapKeyRange[Key]() HashMapKeyRange[Key] : Void constructor Name Type Description function HashMapKeyRange[Key]() MoveNext : Void Name Type Description function MoveNext() MoveNext : Void Name Type Description function MoveNext() Reset : Void Name Type Description function Reset() Reset : Void Name Type Description function Reset()"
  },
  "docs/code_reference/nada_base_types/hashmaprange_key,_value.html": {
    "href": "docs/code_reference/nada_base_types/hashmaprange_key,_value.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes [[zilch_engine_documentation/code_reference/nada_base_types/hashmaprange_key, value /#hashmaprange-key, value Constructor]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmaprange_key, value /#all-zilch-engine-document All]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmaprange_key, value /#movenext-void MoveNext]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmaprange_key, value /#current-zilch-engine-docu Current]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmaprange_key, value /#reset-void Reset]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmaprange_key, value /#isempty-zilch-engine-docu IsEmpty]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmaprange_key, value /#isnotempty-zilch-engine-d IsNotEmpty]] Properties All : HashMapRange[Key,Value] read-only var All : HashMapRange[Key, Value] Current : KeyValue[Key,Value] read-only var Current : KeyValue[Key, Value] IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods HashMapRange[Key, Value] : Void constructor Name Type Description function HashMapRange[Key, Value]() HashMapRange[Key, Value] : Void constructor Name Type Description function HashMapRange[Key, Value]() MoveNext : Void Name Type Description function MoveNext() MoveNext : Void Name Type Description function MoveNext() Reset : Void Name Type Description function Reset() Reset : Void Name Type Description function Reset()"
  },
  "docs/code_reference/nada_base_types/hashmaprange_key,value.html": {
    "href": "docs/code_reference/nada_base_types/hashmaprange_key,value.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes [[zilch_engine_documentation/code_reference/nada_base_types/hashmaprange_key,value /#hashmaprange-key,value-v Constructor]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmaprange_key,value /#all-zilch-engine-document All]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmaprange_key,value /#movenext-void MoveNext]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmaprange_key,value /#current-zilch-engine-docu Current]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmaprange_key,value /#reset-void Reset]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmaprange_key,value /#isempty-zilch-engine-docu IsEmpty]] [[zilch_engine_documentation/code_reference/nada_base_types/hashmaprange_key,value /#isnotempty-zilch-engine-d IsNotEmpty]] Properties All : HashMapRange[Key,Value] read-only var All : HashMapRange[Key,Value] Current : KeyValue[Key,Value] read-only var Current : KeyValue[Key,Value] IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods HashMapRange[Key,Value] : Void constructor Name Type Description function HashMapRange[Key,Value]() HashMapRange[Key,Value] : Void constructor Name Type Description function HashMapRange[Key,Value]() MoveNext : Void Name Type Description function MoveNext() MoveNext : Void Name Type Description function MoveNext() Reset : Void Name Type Description function Reset() Reset : Void Name Type Description function Reset()"
  },
  "docs/code_reference/nada_base_types/hashmapvaluerange_value.html": {
    "href": "docs/code_reference/nada_base_types/hashmapvaluerange_value.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes [ Constructor](hashmapvaluerange_value .md#hashmapvaluerange-value) [ All](hashmapvaluerange_value .md#all-zilch-engine-document) [ MoveNext](hashmapvaluerange_value .md#movenext-void) [ Current](hashmapvaluerange_value .md#current-key) [ Reset](hashmapvaluerange_value .md#reset-void) [ IsEmpty](hashmapvaluerange_value .md#isempty-zilch-engine-docu) [ IsNotEmpty](hashmapvaluerange_value .md#isnotempty-zilch-engine-d) Properties All : HashMapValueRange[Value] read-only var All : HashMapValueRange[Value] Current : Key read-only var Current : Key IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods HashMapValueRange[Value] : Void constructor Name Type Description function HashMapValueRange[Value]() HashMapValueRange[Value] : Void constructor Name Type Description function HashMapValueRange[Value]() MoveNext : Void Name Type Description function MoveNext() MoveNext : Void Name Type Description function MoveNext() Reset : Void Name Type Description function Reset() Reset : Void Name Type Description function Reset()"
  },
  "docs/code_reference/nada_base_types/iencoding.html": {
    "href": "docs/code_reference/nada_base_types/iencoding.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor Ascii asciiencoding Read Utf8 utf8encoding Write Properties Ascii : asciiencoding read-only static var Ascii : AsciiEncoding Utf8 : utf8encoding read-only static var Utf8 : Utf8Encoding Methods IEncoding : Void constructor Name Type Description function IEncoding() Read : rune Name Type Description p0 istream function Read(p0 : IStream) : Rune Write : integer Name Type Description p0 rune p1 istream function Write(p0 : Rune, p1 : IStream) : Integer"
  },
  "docs/code_reference/nada_base_types/indirectiontype.html": {
    "href": "docs/code_reference/nada_base_types/indirectiontype.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes ReferencedType type Properties ReferencedType : boundtype read-only var ReferencedType : BoundType Methods"
  },
  "docs/code_reference/nada_base_types/integer.html": {
    "href": "docs/code_reference/nada_base_types/integer.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetAxis NegativeMin Constructor NegativeValueClosestToZero Parse One Reinterpret PositiveMax Set PositiveValueClosestToZero XAxis Zero Properties Count : integer read-only var Count : Integer NegativeMin : integer read-only static The smallest (most negative) value that can be represented by an Integer. var NegativeMin : Integer NegativeValueClosestToZero : integer read-only static The negative value closest to zero that can be represented by an Integer. var NegativeValueClosestToZero : Integer One : integer read-only static The one vector (a vector containing all ones). var One : Integer PositiveMax : integer read-only static The largest (most positive) value that can be represented by an Integer. var PositiveMax : Integer PositiveValueClosestToZero : integer read-only static The positive value closest to zero that can be represented by an Integer. var PositiveValueClosestToZero : Integer XAxis : integer read-only static var XAxis : Integer Zero : integer read-only static The zero vector (a vector containing all zeroes). var Zero : Integer Methods Get : integer Name Type Description p0 integer function Get(p0 : Integer) : Integer GetAxis : integer static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0|integer| | function GetAxis(p0 : Integer) : Integer Integer : Void constructor Name Type Description function Integer() Integer : Void constructor Name Type Description scalar integer function Integer(scalar : Integer) Parse : integer static Attempt to convert the given StringRange to an Integer. If parsing fails 0 is returned. |Name|Type|Description| |---|---|---| |p0|stringrange| | function Parse(p0 : StringRange) : Integer Reinterpret : integer static Name Type Description p0 real function Reinterpret(p0 : Real) : Integer Set : Void Name Type Description p0 integer p1 integer function Set(p0 : Integer, p1 : Integer)"
  },
  "docs/code_reference/nada_base_types/integer2.html": {
    "href": "docs/code_reference/nada_base_types/integer2.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetAxis NegativeMin Constructor NegativeValueClosestToZero Set One PositiveMax PositiveValueClosestToZero XAxis YAxis Zero Properties Count : integer read-only var Count : Integer NegativeMin : integer2 read-only static The smallest (most negative) value that can be represented by an Integer. var NegativeMin : Integer2 NegativeValueClosestToZero : integer2 read-only static The negative value closest to zero that can be represented by an Integer. var NegativeValueClosestToZero : Integer2 One : integer2 read-only static The one vector (a vector containing all ones). var One : Integer2 PositiveMax : integer2 read-only static The largest (most positive) value that can be represented by an Integer. var PositiveMax : Integer2 PositiveValueClosestToZero : integer2 read-only static The positive value closest to zero that can be represented by an Integer. var PositiveValueClosestToZero : Integer2 XAxis : integer2 read-only static var XAxis : Integer2 YAxis : integer2 read-only static var YAxis : Integer2 Zero : integer2 read-only static The zero vector (a vector containing all zeroes). var Zero : Integer2 Methods Get : integer Name Type Description p0 integer function Get(p0 : Integer) : Integer GetAxis : integer2 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0|integer| | function GetAxis(p0 : Integer) : Integer2 Integer2 : Void constructor Name Type Description function Integer2() Integer2 : Void constructor Name Type Description scalar integer function Integer2(scalar : Integer) Integer2 : Void constructor Name Type Description p0 integer p1 integer function Integer2(p0 : Integer, p1 : Integer) Integer2 : Void constructor Name Type Description p0 integer2 function Integer2(p0 : Integer2) Set : Void Name Type Description p0 integer p1 integer function Set(p0 : Integer, p1 : Integer)"
  },
  "docs/code_reference/nada_base_types/integer2x2.html": {
    "href": "docs/code_reference/nada_base_types/integer2x2.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M10 M11 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : integer var M00 : Integer M01 : integer var M01 : Integer M10 : integer var M10 : Integer M11 : integer var M11 : Integer Methods Get : integer2 Name Type Description y integer function Get(y : Integer) : Integer2 Get : integer Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Integer GetByIndex : integer Name Type Description index integer function GetByIndex(index : Integer) : Integer Integer2x2 : Void constructor Name Type Description function Integer2x2() Integer2x2 : Void constructor Name Type Description p0 integer function Integer2x2(p0 : Integer) Integer2x2 : Void constructor Name Type Description m00 integer m01 integer m10 integer m11 integer function Integer2x2(m00 : Integer, m01 : Integer, m10 : Integer, m11 : Integer) Set : Void Name Type Description y integer x integer value integer function Set(y : Integer, x : Integer, value : Integer) Set : Void Name Type Description y integer value integer2 function Set(y : Integer, value : Integer2) SetByIndex : Void Name Type Description index integer value integer function SetByIndex(index : Integer, value : Integer)"
  },
  "docs/code_reference/nada_base_types/integer2x3.html": {
    "href": "docs/code_reference/nada_base_types/integer2x3.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M10 M11 M12 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : integer var M00 : Integer M01 : integer var M01 : Integer M02 : integer var M02 : Integer M10 : integer var M10 : Integer M11 : integer var M11 : Integer M12 : integer var M12 : Integer Methods Get : integer3 Name Type Description y integer function Get(y : Integer) : Integer3 Get : integer Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Integer GetByIndex : integer Name Type Description index integer function GetByIndex(index : Integer) : Integer Integer2x3 : Void constructor Name Type Description function Integer2x3() Integer2x3 : Void constructor Name Type Description p0 integer function Integer2x3(p0 : Integer) Integer2x3 : Void constructor Name Type Description m00 integer m01 integer m02 integer m10 integer m11 integer m12 integer function Integer2x3(m00 : Integer, m01 : Integer, m02 : Integer, m10 : Integer, m11 : Integer, m12 : Integer) Set : Void Name Type Description y integer x integer value integer function Set(y : Integer, x : Integer, value : Integer) Set : Void Name Type Description y integer value integer3 function Set(y : Integer, value : Integer3) SetByIndex : Void Name Type Description index integer value integer function SetByIndex(index : Integer, value : Integer)"
  },
  "docs/code_reference/nada_base_types/integer2x4.html": {
    "href": "docs/code_reference/nada_base_types/integer2x4.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : integer var M00 : Integer M01 : integer var M01 : Integer M02 : integer var M02 : Integer M03 : integer var M03 : Integer M10 : integer var M10 : Integer M11 : integer var M11 : Integer M12 : integer var M12 : Integer M13 : integer var M13 : Integer Methods Get : integer4 Name Type Description y integer function Get(y : Integer) : Integer4 Get : integer Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Integer GetByIndex : integer Name Type Description index integer function GetByIndex(index : Integer) : Integer Integer2x4 : Void constructor Name Type Description function Integer2x4() Integer2x4 : Void constructor Name Type Description p0 integer function Integer2x4(p0 : Integer) Integer2x4 : Void constructor Name Type Description m00 integer m01 integer m02 integer m03 integer m10 integer m11 integer m12 integer m13 integer function Integer2x4(m00 : Integer, m01 : Integer, m02 : Integer, m03 : Integer, m10 : Integer, m11 : Integer, m12 : Integer, m13 : Integer) Set : Void Name Type Description y integer x integer value integer function Set(y : Integer, x : Integer, value : Integer) Set : Void Name Type Description y integer value integer4 function Set(y : Integer, value : Integer4) SetByIndex : Void Name Type Description index integer value integer function SetByIndex(index : Integer, value : Integer)"
  },
  "docs/code_reference/nada_base_types/integer3.html": {
    "href": "docs/code_reference/nada_base_types/integer3.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetAxis NegativeMin Constructor NegativeValueClosestToZero Set One PositiveMax PositiveValueClosestToZero XAxis YAxis ZAxis Zero Properties Count : integer read-only var Count : Integer NegativeMin : integer3 read-only static The smallest (most negative) value that can be represented by an Integer. var NegativeMin : Integer3 NegativeValueClosestToZero : integer3 read-only static The negative value closest to zero that can be represented by an Integer. var NegativeValueClosestToZero : Integer3 One : integer3 read-only static The one vector (a vector containing all ones). var One : Integer3 PositiveMax : integer3 read-only static The largest (most positive) value that can be represented by an Integer. var PositiveMax : Integer3 PositiveValueClosestToZero : integer3 read-only static The positive value closest to zero that can be represented by an Integer. var PositiveValueClosestToZero : Integer3 XAxis : integer3 read-only static var XAxis : Integer3 YAxis : integer3 read-only static var YAxis : Integer3 ZAxis : integer3 read-only static var ZAxis : Integer3 Zero : integer3 read-only static The zero vector (a vector containing all zeroes). var Zero : Integer3 Methods Get : integer Name Type Description p0 integer function Get(p0 : Integer) : Integer GetAxis : integer3 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0|integer| | function GetAxis(p0 : Integer) : Integer3 Integer3 : Void constructor Name Type Description function Integer3() Integer3 : Void constructor Name Type Description scalar integer function Integer3(scalar : Integer) Integer3 : Void constructor Name Type Description p0 integer p1 integer p2 integer function Integer3(p0 : Integer, p1 : Integer, p2 : Integer) Integer3 : Void constructor Name Type Description p0 integer p1 integer2 function Integer3(p0 : Integer, p1 : Integer2) Integer3 : Void constructor Name Type Description p0 integer2 p1 integer function Integer3(p0 : Integer2, p1 : Integer) Set : Void Name Type Description p0 integer p1 integer function Set(p0 : Integer, p1 : Integer)"
  },
  "docs/code_reference/nada_base_types/integer3x2.html": {
    "href": "docs/code_reference/nada_base_types/integer3x2.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M10 M11 M20 M21 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : integer var M00 : Integer M01 : integer var M01 : Integer M10 : integer var M10 : Integer M11 : integer var M11 : Integer M20 : integer var M20 : Integer M21 : integer var M21 : Integer Methods Get : integer2 Name Type Description y integer function Get(y : Integer) : Integer2 Get : integer Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Integer GetByIndex : integer Name Type Description index integer function GetByIndex(index : Integer) : Integer Integer3x2 : Void constructor Name Type Description function Integer3x2() Integer3x2 : Void constructor Name Type Description p0 integer function Integer3x2(p0 : Integer) Integer3x2 : Void constructor Name Type Description m00 integer m01 integer m10 integer m11 integer m20 integer m21 integer function Integer3x2(m00 : Integer, m01 : Integer, m10 : Integer, m11 : Integer, m20 : Integer, m21 : Integer) Set : Void Name Type Description y integer x integer value integer function Set(y : Integer, x : Integer, value : Integer) Set : Void Name Type Description y integer value integer2 function Set(y : Integer, value : Integer2) SetByIndex : Void Name Type Description index integer value integer function SetByIndex(index : Integer, value : Integer)"
  },
  "docs/code_reference/nada_base_types/integer3x3.html": {
    "href": "docs/code_reference/nada_base_types/integer3x3.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M10 M11 M12 M20 M21 M22 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : integer var M00 : Integer M01 : integer var M01 : Integer M02 : integer var M02 : Integer M10 : integer var M10 : Integer M11 : integer var M11 : Integer M12 : integer var M12 : Integer M20 : integer var M20 : Integer M21 : integer var M21 : Integer M22 : integer var M22 : Integer Methods Get : integer3 Name Type Description y integer function Get(y : Integer) : Integer3 Get : integer Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Integer GetByIndex : integer Name Type Description index integer function GetByIndex(index : Integer) : Integer Integer3x3 : Void constructor Name Type Description function Integer3x3() Integer3x3 : Void constructor Name Type Description p0 integer function Integer3x3(p0 : Integer) Integer3x3 : Void constructor Name Type Description m00 integer m01 integer m02 integer m10 integer m11 integer m12 integer m20 integer m21 integer m22 integer function Integer3x3(m00 : Integer, m01 : Integer, m02 : Integer, m10 : Integer, m11 : Integer, m12 : Integer, m20 : Integer, m21 : Integer, m22 : Integer) Set : Void Name Type Description y integer x integer value integer function Set(y : Integer, x : Integer, value : Integer) Set : Void Name Type Description y integer value integer3 function Set(y : Integer, value : Integer3) SetByIndex : Void Name Type Description index integer value integer function SetByIndex(index : Integer, value : Integer)"
  },
  "docs/code_reference/nada_base_types/integer3x4.html": {
    "href": "docs/code_reference/nada_base_types/integer3x4.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 M20 M21 M22 M23 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : integer var M00 : Integer M01 : integer var M01 : Integer M02 : integer var M02 : Integer M03 : integer var M03 : Integer M10 : integer var M10 : Integer M11 : integer var M11 : Integer M12 : integer var M12 : Integer M13 : integer var M13 : Integer M20 : integer var M20 : Integer M21 : integer var M21 : Integer M22 : integer var M22 : Integer M23 : integer var M23 : Integer Methods Get : integer4 Name Type Description y integer function Get(y : Integer) : Integer4 Get : integer Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Integer GetByIndex : integer Name Type Description index integer function GetByIndex(index : Integer) : Integer Integer3x4 : Void constructor Name Type Description function Integer3x4() Integer3x4 : Void constructor Name Type Description p0 integer function Integer3x4(p0 : Integer) Integer3x4 : Void constructor Name Type Description m00 integer m01 integer m02 integer m03 integer m10 integer m11 integer m12 integer m13 integer m20 integer m21 integer m22 integer m23 integer function Integer3x4(m00 : Integer, m01 : Integer, m02 : Integer, m03 : Integer, m10 : Integer, m11 : Integer, m12 : Integer, m13 : Integer, m20 : Integer, m21 : Integer, m22 : Integer, m23 : Integer) Set : Void Name Type Description y integer x integer value integer function Set(y : Integer, x : Integer, value : Integer) Set : Void Name Type Description y integer value integer4 function Set(y : Integer, value : Integer4) SetByIndex : Void Name Type Description index integer value integer function SetByIndex(index : Integer, value : Integer)"
  },
  "docs/code_reference/nada_base_types/integer4.html": {
    "href": "docs/code_reference/nada_base_types/integer4.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetAxis NegativeMin Constructor NegativeValueClosestToZero Set One PositiveMax PositiveValueClosestToZero WAxis XAxis YAxis ZAxis Zero Properties Count : integer read-only var Count : Integer NegativeMin : integer4 read-only static The smallest (most negative) value that can be represented by an Integer. var NegativeMin : Integer4 NegativeValueClosestToZero : integer4 read-only static The negative value closest to zero that can be represented by an Integer. var NegativeValueClosestToZero : Integer4 One : integer4 read-only static The one vector (a vector containing all ones). var One : Integer4 PositiveMax : integer4 read-only static The largest (most positive) value that can be represented by an Integer. var PositiveMax : Integer4 PositiveValueClosestToZero : integer4 read-only static The positive value closest to zero that can be represented by an Integer. var PositiveValueClosestToZero : Integer4 WAxis : integer4 read-only static var WAxis : Integer4 XAxis : integer4 read-only static var XAxis : Integer4 YAxis : integer4 read-only static var YAxis : Integer4 ZAxis : integer4 read-only static var ZAxis : Integer4 Zero : integer4 read-only static The zero vector (a vector containing all zeroes). var Zero : Integer4 Methods Get : integer Name Type Description p0 integer function Get(p0 : Integer) : Integer GetAxis : integer4 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0|integer| | function GetAxis(p0 : Integer) : Integer4 Integer4 : Void constructor Name Type Description function Integer4() Integer4 : Void constructor Name Type Description scalar integer function Integer4(scalar : Integer) Integer4 : Void constructor Name Type Description p0 integer p1 integer p2 integer p3 integer function Integer4(p0 : Integer, p1 : Integer, p2 : Integer, p3 : Integer) Integer4 : Void constructor Name Type Description p0 integer p1 integer p2 integer2 function Integer4(p0 : Integer, p1 : Integer, p2 : Integer2) Integer4 : Void constructor Name Type Description p0 integer p1 integer2 p2 integer function Integer4(p0 : Integer, p1 : Integer2, p2 : Integer) Integer4 : Void constructor Name Type Description p0 integer p1 integer3 function Integer4(p0 : Integer, p1 : Integer3) Integer4 : Void constructor Name Type Description p0 integer2 p1 integer p2 integer function Integer4(p0 : Integer2, p1 : Integer, p2 : Integer) Integer4 : Void constructor Name Type Description p0 integer2 p1 integer2 function Integer4(p0 : Integer2, p1 : Integer2) Integer4 : Void constructor Name Type Description p0 integer3 p1 integer function Integer4(p0 : Integer3, p1 : Integer) Set : Void Name Type Description p0 integer p1 integer function Set(p0 : Integer, p1 : Integer)"
  },
  "docs/code_reference/nada_base_types/integer4x2.html": {
    "href": "docs/code_reference/nada_base_types/integer4x2.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M10 M11 M20 M21 M30 M31 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : integer var M00 : Integer M01 : integer var M01 : Integer M10 : integer var M10 : Integer M11 : integer var M11 : Integer M20 : integer var M20 : Integer M21 : integer var M21 : Integer M30 : integer var M30 : Integer M31 : integer var M31 : Integer Methods Get : integer2 Name Type Description y integer function Get(y : Integer) : Integer2 Get : integer Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Integer GetByIndex : integer Name Type Description index integer function GetByIndex(index : Integer) : Integer Integer4x2 : Void constructor Name Type Description function Integer4x2() Integer4x2 : Void constructor Name Type Description p0 integer function Integer4x2(p0 : Integer) Integer4x2 : Void constructor Name Type Description m00 integer m01 integer m10 integer m11 integer m20 integer m21 integer m30 integer m31 integer function Integer4x2(m00 : Integer, m01 : Integer, m10 : Integer, m11 : Integer, m20 : Integer, m21 : Integer, m30 : Integer, m31 : Integer) Set : Void Name Type Description y integer x integer value integer function Set(y : Integer, x : Integer, value : Integer) Set : Void Name Type Description y integer value integer2 function Set(y : Integer, value : Integer2) SetByIndex : Void Name Type Description index integer value integer function SetByIndex(index : Integer, value : Integer)"
  },
  "docs/code_reference/nada_base_types/integer4x3.html": {
    "href": "docs/code_reference/nada_base_types/integer4x3.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M10 M11 M12 M20 M21 M22 M30 M31 M32 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : integer var M00 : Integer M01 : integer var M01 : Integer M02 : integer var M02 : Integer M10 : integer var M10 : Integer M11 : integer var M11 : Integer M12 : integer var M12 : Integer M20 : integer var M20 : Integer M21 : integer var M21 : Integer M22 : integer var M22 : Integer M30 : integer var M30 : Integer M31 : integer var M31 : Integer M32 : integer var M32 : Integer Methods Get : integer3 Name Type Description y integer function Get(y : Integer) : Integer3 Get : integer Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Integer GetByIndex : integer Name Type Description index integer function GetByIndex(index : Integer) : Integer Integer4x3 : Void constructor Name Type Description function Integer4x3() Integer4x3 : Void constructor Name Type Description p0 integer function Integer4x3(p0 : Integer) Integer4x3 : Void constructor Name Type Description m00 integer m01 integer m02 integer m10 integer m11 integer m12 integer m20 integer m21 integer m22 integer m30 integer m31 integer m32 integer function Integer4x3(m00 : Integer, m01 : Integer, m02 : Integer, m10 : Integer, m11 : Integer, m12 : Integer, m20 : Integer, m21 : Integer, m22 : Integer, m30 : Integer, m31 : Integer, m32 : Integer) Set : Void Name Type Description y integer x integer value integer function Set(y : Integer, x : Integer, value : Integer) Set : Void Name Type Description y integer value integer3 function Set(y : Integer, value : Integer3) SetByIndex : Void Name Type Description index integer value integer function SetByIndex(index : Integer, value : Integer)"
  },
  "docs/code_reference/nada_base_types/integer4x4.html": {
    "href": "docs/code_reference/nada_base_types/integer4x4.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 M20 M21 M22 M23 M30 M31 M32 M33 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : integer var M00 : Integer M01 : integer var M01 : Integer M02 : integer var M02 : Integer M03 : integer var M03 : Integer M10 : integer var M10 : Integer M11 : integer var M11 : Integer M12 : integer var M12 : Integer M13 : integer var M13 : Integer M20 : integer var M20 : Integer M21 : integer var M21 : Integer M22 : integer var M22 : Integer M23 : integer var M23 : Integer M30 : integer var M30 : Integer M31 : integer var M31 : Integer M32 : integer var M32 : Integer M33 : integer var M33 : Integer Methods Get : integer4 Name Type Description y integer function Get(y : Integer) : Integer4 Get : integer Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Integer GetByIndex : integer Name Type Description index integer function GetByIndex(index : Integer) : Integer Integer4x4 : Void constructor Name Type Description function Integer4x4() Integer4x4 : Void constructor Name Type Description p0 integer function Integer4x4(p0 : Integer) Integer4x4 : Void constructor Name Type Description m00 integer m01 integer m02 integer m03 integer m10 integer m11 integer m12 integer m13 integer m20 integer m21 integer m22 integer m23 integer m30 integer m31 integer m32 integer m33 integer function Integer4x4(m00 : Integer, m01 : Integer, m02 : Integer, m03 : Integer, m10 : Integer, m11 : Integer, m12 : Integer, m13 : Integer, m20 : Integer, m21 : Integer, m22 : Integer, m23 : Integer, m30 : Integer, m31 : Integer, m32 : Integer, m33 : Integer) Set : Void Name Type Description y integer x integer value integer function Set(y : Integer, x : Integer, value : Integer) Set : Void Name Type Description y integer value integer4 function Set(y : Integer, value : Integer4) SetByIndex : Void Name Type Description index integer value integer function SetByIndex(index : Integer, value : Integer)"
  },
  "docs/code_reference/nada_base_types/istream.html": {
    "href": "docs/code_reference/nada_base_types/istream.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Flush Capabilities filestream Constructor Count Read Position ReadAllText ReadByte ReadLine Seek Write WriteByte WriteText Properties Capabilities : StreamCapabilities read-only var Capabilities : StreamCapabilities Count : doubleinteger var Count : DoubleInteger Position : doubleinteger var Position : DoubleInteger Methods Flush : Void Name Type Description function Flush() IStream : Void constructor Name Type Description function IStream() Read : integer Name Type Description data Array[byte] byteStart integer byteCount integer function Read(data : Array[Byte], byteStart : Integer, byteCount : Integer) : Integer ReadAllText : string Name Type Description function ReadAllText() : String ReadAllText : string Name Type Description p0 iencoding function ReadAllText(p0 : IEncoding) : String ReadByte : integer Name Type Description function ReadByte() : Integer ReadLine : string Name Type Description function ReadLine() : String ReadLine : string Name Type Description p0 iencoding function ReadLine(p0 : IEncoding) : String Seek : boolean Name Type Description position doubleinteger origin StreamOrigin function Seek(position : DoubleInteger, origin : StreamOrigin) : Boolean Write : integer Name Type Description data Array[byte] function Write(data : Array[Byte]) : Integer Write : integer Name Type Description data Array[byte] byteStart integer byteCount integer function Write(data : Array[Byte], byteStart : Integer, byteCount : Integer) : Integer WriteByte : integer Name Type Description p0 byte function WriteByte(p0 : Byte) : Integer WriteText : integer Name Type Description text string function WriteText(text : String) : Integer WriteText : integer Name Type Description text string sourceStreamEncoding iencoding function WriteText(text : String, sourceStreamEncoding : IEncoding) : Integer"
  },
  "docs/code_reference/nada_base_types/keyvalue_key,_value.html": {
    "href": "docs/code_reference/nada_base_types/keyvalue_key,_value.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes [[zilch_engine_documentation/code_reference/nada_base_types/keyvalue_key, value /#keyvalue-key, value-void Constructor]] [[zilch_engine_documentation/code_reference/nada_base_types/keyvalue_key, value /#key-key Key]] [[zilch_engine_documentation/code_reference/nada_base_types/keyvalue_key, value /#value-value Value]] Properties Key : Key var Key : Key Value : Value var Value : Value Methods KeyValue[Key, Value] : Void constructor Name Type Description function KeyValue[Key, Value]() KeyValue[Key, Value] : Void constructor Name Type Description function KeyValue[Key, Value]()"
  },
  "docs/code_reference/nada_base_types/keyvalue_key,value.html": {
    "href": "docs/code_reference/nada_base_types/keyvalue_key,value.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes [[zilch_engine_documentation/code_reference/nada_base_types/keyvalue_key,value /#keyvalue-key,value-void Constructor]] [[zilch_engine_documentation/code_reference/nada_base_types/keyvalue_key,value /#key-zilch-engine-document Key]] [[zilch_engine_documentation/code_reference/nada_base_types/keyvalue_key,value /#value-zilch-engine-docume Value]] Properties Key : Key var Key : Key Value : Value var Value : Value Methods KeyValue[Key,Value] : Void constructor Name Type Description function KeyValue[Key,Value]() KeyValue[Key,Value] : Void constructor Name Type Description function KeyValue[Key,Value]()"
  },
  "docs/code_reference/nada_base_types/library.html": {
    "href": "docs/code_reference/nada_base_types/library.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/nada_base_types/math.html": {
    "href": "docs/code_reference/nada_base_types/math.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Abs E ACos Pi AllNonZero Angle2D AngleBetween AnyNonZero ApproximatelyEqual ASin ATan ATan2 AxisAngle Ceil Clamp Cos Cosh CountBits Cross Determinant Distance DistanceSq Dot Euler Exp Exp2 Floor FMod Frac GenerateRotationMatrix2x2 GenerateRotationMatrix3x3 GenerateRotationMatrix4x4 GenerateScaleMatrix2x2 GenerateScaleMatrix3x3 GenerateScaleMatrix4x4 GenerateTransformMatrix2x2 GenerateTransformMatrix3x3 GenerateTransformMatrix4x4 GenerateTranslationMatrix3x3 GenerateTranslationMatrix4x4 Invert Length LengthSq Lerp Log Log10 Log2 Max Min Multiply MultiplyNormal MultiplyPoint MultiplyPointNoDivide Normalize Pow Project ProjectOnPlane ProjectOnVector ReflectAcrossPlane ReflectAcrossVector Refract RotateTowards RotateVector RotationQuaternionBetween Round RSqrt Saturate Sign SignedAngle Sin Sinh Slerp SlerpUnnormalized SmoothStep Sqrt Step Tan Tanh ToDegrees ToQuaternion ToRadians ToReal3x3 Transpose Truncate Properties E : real read-only static Euler's number. var E : Real Pi : real read-only static var Pi : Real Methods Abs : integer static Returns the absolute value of value. |Name|Type|Description| |---|---|---| |p0|integer| | function Abs(p0 : Integer) : Integer Abs : integer2 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2| | function Abs(p0 : Integer2) : Integer2 Abs : integer2x2 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2x2| | function Abs(p0 : Integer2x2) : Integer2x2 Abs : integer2x3 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2x3| | function Abs(p0 : Integer2x3) : Integer2x3 Abs : integer2x4 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2x4| | function Abs(p0 : Integer2x4) : Integer2x4 Abs : integer3 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3| | function Abs(p0 : Integer3) : Integer3 Abs : integer3x2 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3x2| | function Abs(p0 : Integer3x2) : Integer3x2 Abs : integer3x3 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3x3| | function Abs(p0 : Integer3x3) : Integer3x3 Abs : integer3x4 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3x4| | function Abs(p0 : Integer3x4) : Integer3x4 Abs : integer4 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4| | function Abs(p0 : Integer4) : Integer4 Abs : integer4x2 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4x2| | function Abs(p0 : Integer4x2) : Integer4x2 Abs : integer4x3 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4x3| | function Abs(p0 : Integer4x3) : Integer4x3 Abs : integer4x4 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4x4| | function Abs(p0 : Integer4x4) : Integer4x4 Abs : real static Returns the absolute value of value. |Name|Type|Description| |---|---|---| |p0|real| | function Abs(p0 : Real) : Real Abs : real2 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | function Abs(p0 : Real2) : Real2 Abs : real2x2 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | function Abs(p0 : Real2x2) : Real2x2 Abs : real2x3 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | function Abs(p0 : Real2x3) : Real2x3 Abs : real2x4 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | function Abs(p0 : Real2x4) : Real2x4 Abs : real3 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | function Abs(p0 : Real3) : Real3 Abs : real3x2 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | function Abs(p0 : Real3x2) : Real3x2 Abs : real3x3 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | function Abs(p0 : Real3x3) : Real3x3 Abs : real3x4 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | function Abs(p0 : Real3x4) : Real3x4 Abs : real4 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | function Abs(p0 : Real4) : Real4 Abs : real4x2 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | function Abs(p0 : Real4x2) : Real4x2 Abs : real4x3 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | function Abs(p0 : Real4x3) : Real4x3 Abs : real4x4 static Returns the absolute value of value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | function Abs(p0 : Real4x4) : Real4x4 ACos : real static The transcendental function arc-cosine |Name|Type|Description| |---|---|---| |units|real| | function ACos(units : Real) : Real ACos : real2 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real2| | function ACos(units : Real2) : Real2 ACos : real2x2 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real2x2| | function ACos(units : Real2x2) : Real2x2 ACos : real2x3 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real2x3| | function ACos(units : Real2x3) : Real2x3 ACos : real2x4 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real2x4| | function ACos(units : Real2x4) : Real2x4 ACos : real3 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real3| | function ACos(units : Real3) : Real3 ACos : real3x2 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real3x2| | function ACos(units : Real3x2) : Real3x2 ACos : real3x3 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real3x3| | function ACos(units : Real3x3) : Real3x3 ACos : real3x4 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real3x4| | function ACos(units : Real3x4) : Real3x4 ACos : real4 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real4| | function ACos(units : Real4) : Real4 ACos : real4x2 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real4x2| | function ACos(units : Real4x2) : Real4x2 ACos : real4x3 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real4x3| | function ACos(units : Real4x3) : Real4x3 ACos : real4x4 static The transcendental function arc-cosine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real4x4| | function ACos(units : Real4x4) : Real4x4 AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0|boolean| | function AllNonZero(p0 : Boolean) : Boolean AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0|boolean2| | function AllNonZero(p0 : Boolean2) : Boolean AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0|boolean2x2| | function AllNonZero(p0 : Boolean2x2) : Boolean AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0|boolean2x3| | function AllNonZero(p0 : Boolean2x3) : Boolean AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0|boolean2x4| | function AllNonZero(p0 : Boolean2x4) : Boolean AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0|boolean3| | function AllNonZero(p0 : Boolean3) : Boolean AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0|boolean3x2| | function AllNonZero(p0 : Boolean3x2) : Boolean AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0|boolean3x3| | function AllNonZero(p0 : Boolean3x3) : Boolean AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0|boolean3x4| | function AllNonZero(p0 : Boolean3x4) : Boolean AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0|boolean4| | function AllNonZero(p0 : Boolean4) : Boolean AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0|boolean4x2| | function AllNonZero(p0 : Boolean4x2) : Boolean AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0|boolean4x3| | function AllNonZero(p0 : Boolean4x3) : Boolean AllNonZero : boolean static Returns true if all values are true. |Name|Type|Description| |---|---|---| |p0|boolean4x4| | function AllNonZero(p0 : Boolean4x4) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|integer| | function AllNonZero(p0 : Integer) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|integer2| | function AllNonZero(p0 : Integer2) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|integer2x2| | function AllNonZero(p0 : Integer2x2) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|integer2x3| | function AllNonZero(p0 : Integer2x3) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|integer2x4| | function AllNonZero(p0 : Integer2x4) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|integer3| | function AllNonZero(p0 : Integer3) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|integer3x2| | function AllNonZero(p0 : Integer3x2) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|integer3x3| | function AllNonZero(p0 : Integer3x3) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|integer3x4| | function AllNonZero(p0 : Integer3x4) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|integer4| | function AllNonZero(p0 : Integer4) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|integer4x2| | function AllNonZero(p0 : Integer4x2) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|integer4x3| | function AllNonZero(p0 : Integer4x3) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|integer4x4| | function AllNonZero(p0 : Integer4x4) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|real| | function AllNonZero(p0 : Real) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|real2| | function AllNonZero(p0 : Real2) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|real2x2| | function AllNonZero(p0 : Real2x2) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|real2x3| | function AllNonZero(p0 : Real2x3) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|real2x4| | function AllNonZero(p0 : Real2x4) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|real3| | function AllNonZero(p0 : Real3) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|real3x2| | function AllNonZero(p0 : Real3x2) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|real3x3| | function AllNonZero(p0 : Real3x3) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|real3x4| | function AllNonZero(p0 : Real3x4) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|real4| | function AllNonZero(p0 : Real4) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|real4x2| | function AllNonZero(p0 : Real4x2) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|real4x3| | function AllNonZero(p0 : Real4x3) : Boolean AllNonZero : boolean static Returns true if all values are not zero. |Name|Type|Description| |---|---|---| |p0|real4x4| | function AllNonZero(p0 : Real4x4) : Boolean Angle2D : real static Computes the angle (in radians) about the z-axis between the vector and the x-axis. |Name|Type|Description| |---|---|---| |p0|real3| | function Angle2D(p0 : Real3) : Real AngleBetween : real static Returns the angle between two Quaternions in radians. |Name|Type|Description| |---|---|---| |p0|quaternion| | |p1|quaternion| | function AngleBetween(p0 : Quaternion, p1 : Quaternion) : Real AngleBetween : real static Returns the angle between two Real2s in radians. |Name|Type|Description| |---|---|---| |p0|real2| | |p1|real2| | function AngleBetween(p0 : Real2, p1 : Real2) : Real AngleBetween : real static Returns the angle between two Real3s in radians. |Name|Type|Description| |---|---|---| |p0|real3| | |p1|real3| | function AngleBetween(p0 : Real3, p1 : Real3) : Real AngleBetween : real static Returns the angle between two Real4s in radians. |Name|Type|Description| |---|---|---| |p0|real4| | |p1|real4| | function AngleBetween(p0 : Real4, p1 : Real4) : Real AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0|boolean| | function AnyNonZero(p0 : Boolean) : Boolean AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0|boolean2| | function AnyNonZero(p0 : Boolean2) : Boolean AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0|boolean2x2| | function AnyNonZero(p0 : Boolean2x2) : Boolean AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0|boolean2x3| | function AnyNonZero(p0 : Boolean2x3) : Boolean AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0|boolean2x4| | function AnyNonZero(p0 : Boolean2x4) : Boolean AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0|boolean3| | function AnyNonZero(p0 : Boolean3) : Boolean AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0|boolean3x2| | function AnyNonZero(p0 : Boolean3x2) : Boolean AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0|boolean3x3| | function AnyNonZero(p0 : Boolean3x3) : Boolean AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0|boolean3x4| | function AnyNonZero(p0 : Boolean3x4) : Boolean AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0|boolean4| | function AnyNonZero(p0 : Boolean4) : Boolean AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0|boolean4x2| | function AnyNonZero(p0 : Boolean4x2) : Boolean AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0|boolean4x3| | function AnyNonZero(p0 : Boolean4x3) : Boolean AnyNonZero : boolean static Returns true if any value is true. |Name|Type|Description| |---|---|---| |p0|boolean4x4| | function AnyNonZero(p0 : Boolean4x4) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|integer| | function AnyNonZero(p0 : Integer) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|integer2| | function AnyNonZero(p0 : Integer2) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|integer2x2| | function AnyNonZero(p0 : Integer2x2) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|integer2x3| | function AnyNonZero(p0 : Integer2x3) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|integer2x4| | function AnyNonZero(p0 : Integer2x4) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|integer3| | function AnyNonZero(p0 : Integer3) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|integer3x2| | function AnyNonZero(p0 : Integer3x2) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|integer3x3| | function AnyNonZero(p0 : Integer3x3) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|integer3x4| | function AnyNonZero(p0 : Integer3x4) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|integer4| | function AnyNonZero(p0 : Integer4) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|integer4x2| | function AnyNonZero(p0 : Integer4x2) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|integer4x3| | function AnyNonZero(p0 : Integer4x3) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|integer4x4| | function AnyNonZero(p0 : Integer4x4) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|real| | function AnyNonZero(p0 : Real) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|real2| | function AnyNonZero(p0 : Real2) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|real2x2| | function AnyNonZero(p0 : Real2x2) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|real2x3| | function AnyNonZero(p0 : Real2x3) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|real2x4| | function AnyNonZero(p0 : Real2x4) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|real3| | function AnyNonZero(p0 : Real3) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|real3x2| | function AnyNonZero(p0 : Real3x2) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|real3x3| | function AnyNonZero(p0 : Real3x3) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|real3x4| | function AnyNonZero(p0 : Real3x4) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|real4| | function AnyNonZero(p0 : Real4) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|real4x2| | function AnyNonZero(p0 : Real4x2) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|real4x3| | function AnyNonZero(p0 : Real4x3) : Boolean AnyNonZero : boolean static Returns true if any value is not zero. |Name|Type|Description| |---|---|---| |p0|real4x4| | function AnyNonZero(p0 : Real4x4) : Boolean ApproximatelyEqual : boolean static Checks if the two values are within epsilon distance from each other. |Name|Type|Description| |---|---|---| |p0|real| | |p1|real| | |epsilon|real| | function ApproximatelyEqual(p0 : Real, p1 : Real, epsilon : Real) : Boolean ApproximatelyEqual : boolean2 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | |p1|real2| | |epsilon|real| | function ApproximatelyEqual(p0 : Real2, p1 : Real2, epsilon : Real) : Boolean2 ApproximatelyEqual : boolean2x2 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | |p1|real2x2| | |epsilon|real| | function ApproximatelyEqual(p0 : Real2x2, p1 : Real2x2, epsilon : Real) : Boolean2x2 ApproximatelyEqual : boolean2x3 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | |p1|real2x3| | |epsilon|real| | function ApproximatelyEqual(p0 : Real2x3, p1 : Real2x3, epsilon : Real) : Boolean2x3 ApproximatelyEqual : boolean2x4 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | |p1|real2x4| | |epsilon|real| | function ApproximatelyEqual(p0 : Real2x4, p1 : Real2x4, epsilon : Real) : Boolean2x4 ApproximatelyEqual : boolean3 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | |p1|real3| | |epsilon|real| | function ApproximatelyEqual(p0 : Real3, p1 : Real3, epsilon : Real) : Boolean3 ApproximatelyEqual : boolean3x2 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | |p1|real3x2| | |epsilon|real| | function ApproximatelyEqual(p0 : Real3x2, p1 : Real3x2, epsilon : Real) : Boolean3x2 ApproximatelyEqual : boolean3x3 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | |p1|real3x3| | |epsilon|real| | function ApproximatelyEqual(p0 : Real3x3, p1 : Real3x3, epsilon : Real) : Boolean3x3 ApproximatelyEqual : boolean3x4 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | |p1|real3x4| | |epsilon|real| | function ApproximatelyEqual(p0 : Real3x4, p1 : Real3x4, epsilon : Real) : Boolean3x4 ApproximatelyEqual : boolean4 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | |p1|real4| | |epsilon|real| | function ApproximatelyEqual(p0 : Real4, p1 : Real4, epsilon : Real) : Boolean4 ApproximatelyEqual : boolean4x2 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | |p1|real4x2| | |epsilon|real| | function ApproximatelyEqual(p0 : Real4x2, p1 : Real4x2, epsilon : Real) : Boolean4x2 ApproximatelyEqual : boolean4x3 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | |p1|real4x3| | |epsilon|real| | function ApproximatelyEqual(p0 : Real4x3, p1 : Real4x3, epsilon : Real) : Boolean4x3 ApproximatelyEqual : boolean4x4 static Checks if the two values are within epsilon distance from each other. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | |p1|real4x4| | |epsilon|real| | function ApproximatelyEqual(p0 : Real4x4, p1 : Real4x4, epsilon : Real) : Boolean4x4 ASin : real static The transcendental function arc-sine |Name|Type|Description| |---|---|---| |units|real| | function ASin(units : Real) : Real ASin : real2 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real2| | function ASin(units : Real2) : Real2 ASin : real2x2 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real2x2| | function ASin(units : Real2x2) : Real2x2 ASin : real2x3 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real2x3| | function ASin(units : Real2x3) : Real2x3 ASin : real2x4 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real2x4| | function ASin(units : Real2x4) : Real2x4 ASin : real3 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real3| | function ASin(units : Real3) : Real3 ASin : real3x2 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real3x2| | function ASin(units : Real3x2) : Real3x2 ASin : real3x3 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real3x3| | function ASin(units : Real3x3) : Real3x3 ASin : real3x4 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real3x4| | function ASin(units : Real3x4) : Real3x4 ASin : real4 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real4| | function ASin(units : Real4) : Real4 ASin : real4x2 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real4x2| | function ASin(units : Real4x2) : Real4x2 ASin : real4x3 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real4x3| | function ASin(units : Real4x3) : Real4x3 ASin : real4x4 static The transcendental function arc-sine Performed component-wise. |Name|Type|Description| |---|---|---| |units|real4x4| | function ASin(units : Real4x4) : Real4x4 ATan : real static The transcendental function arc-tangent. The return type is in radians. |Name|Type|Description| |---|---|---| |units|real| | function ATan(units : Real) : Real ATan : real2 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units|real2| | function ATan(units : Real2) : Real2 ATan : real2x2 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units|real2x2| | function ATan(units : Real2x2) : Real2x2 ATan : real2x3 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units|real2x3| | function ATan(units : Real2x3) : Real2x3 ATan : real2x4 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units|real2x4| | function ATan(units : Real2x4) : Real2x4 ATan : real3 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units|real3| | function ATan(units : Real3) : Real3 ATan : real3x2 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units|real3x2| | function ATan(units : Real3x2) : Real3x2 ATan : real3x3 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units|real3x3| | function ATan(units : Real3x3) : Real3x3 ATan : real3x4 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units|real3x4| | function ATan(units : Real3x4) : Real3x4 ATan : real4 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units|real4| | function ATan(units : Real4) : Real4 ATan : real4x2 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units|real4x2| | function ATan(units : Real4x2) : Real4x2 ATan : real4x3 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units|real4x3| | function ATan(units : Real4x3) : Real4x3 ATan : real4x4 static The transcendental function arc-tangent. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |units|real4x4| | function ATan(units : Real4x4) : Real4x4 ATan2 : real static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. |Name|Type|Description| |---|---|---| |y|real| | |x|real| | function ATan2(y : Real, x : Real) : Real ATan2 : real2 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real2| | |x|real2| | function ATan2(y : Real2, x : Real2) : Real2 ATan2 : real2x2 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real2x2| | |x|real2x2| | function ATan2(y : Real2x2, x : Real2x2) : Real2x2 ATan2 : real2x3 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real2x3| | |x|real2x3| | function ATan2(y : Real2x3, x : Real2x3) : Real2x3 ATan2 : real2x4 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real2x4| | |x|real2x4| | function ATan2(y : Real2x4, x : Real2x4) : Real2x4 ATan2 : real3 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real3| | |x|real3| | function ATan2(y : Real3, x : Real3) : Real3 ATan2 : real3x2 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real3x2| | |x|real3x2| | function ATan2(y : Real3x2, x : Real3x2) : Real3x2 ATan2 : real3x3 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real3x3| | |x|real3x3| | function ATan2(y : Real3x3, x : Real3x3) : Real3x3 ATan2 : real3x4 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real3x4| | |x|real3x4| | function ATan2(y : Real3x4, x : Real3x4) : Real3x4 ATan2 : real4 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real4| | |x|real4| | function ATan2(y : Real4, x : Real4) : Real4 ATan2 : real4x2 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real4x2| | |x|real4x2| | function ATan2(y : Real4x2, x : Real4x2) : Real4x2 ATan2 : real4x3 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real4x3| | |x|real4x3| | function ATan2(y : Real4x3, x : Real4x3) : Real4x3 ATan2 : real4x4 static Performs the arc-tangent using the signs of x and y to determine what quadrant the angle lies in. Returns a value in the range of [-pi, pi]. The return type is in radians. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real4x4| | |x|real4x4| | function ATan2(y : Real4x4, x : Real4x4) : Real4x4 AxisAngle : quaternion static Generates the quaternion that rotates about the axis vector by the given radians. |Name|Type|Description| |---|---|---| |axis|real3| | |radians|real| | function AxisAngle(axis : Real3, radians : Real) : Quaternion Ceil : real static Rounds value upward. |Name|Type|Description| |---|---|---| |p0|real| | function Ceil(p0 : Real) : Real Ceil : real static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). |Name|Type|Description| |---|---|---| |value|real| | |places|integer| | function Ceil(value : Real, places : Integer) : Real Ceil : real static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). |Name|Type|Description| |---|---|---| |value|real| | |places|integer| | |numericalBase|integer| | function Ceil(value : Real, places : Integer, numericalBase : Integer) : Real Ceil : real2 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | function Ceil(p0 : Real2) : Real2 Ceil : real2 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2| | |places|integer| | function Ceil(value : Real2, places : Integer) : Real2 Ceil : real2 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2| | |places|integer| | |numericalBase|integer| | function Ceil(value : Real2, places : Integer, numericalBase : Integer) : Real2 Ceil : real2x2 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | function Ceil(p0 : Real2x2) : Real2x2 Ceil : real2x2 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x2| | |places|integer| | function Ceil(value : Real2x2, places : Integer) : Real2x2 Ceil : real2x2 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x2| | |places|integer| | |numericalBase|integer| | function Ceil(value : Real2x2, places : Integer, numericalBase : Integer) : Real2x2 Ceil : real2x3 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | function Ceil(p0 : Real2x3) : Real2x3 Ceil : real2x3 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x3| | |places|integer| | function Ceil(value : Real2x3, places : Integer) : Real2x3 Ceil : real2x3 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x3| | |places|integer| | |numericalBase|integer| | function Ceil(value : Real2x3, places : Integer, numericalBase : Integer) : Real2x3 Ceil : real2x4 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | function Ceil(p0 : Real2x4) : Real2x4 Ceil : real2x4 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x4| | |places|integer| | function Ceil(value : Real2x4, places : Integer) : Real2x4 Ceil : real2x4 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x4| | |places|integer| | |numericalBase|integer| | function Ceil(value : Real2x4, places : Integer, numericalBase : Integer) : Real2x4 Ceil : real3 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | function Ceil(p0 : Real3) : Real3 Ceil : real3 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3| | |places|integer| | function Ceil(value : Real3, places : Integer) : Real3 Ceil : real3 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3| | |places|integer| | |numericalBase|integer| | function Ceil(value : Real3, places : Integer, numericalBase : Integer) : Real3 Ceil : real3x2 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | function Ceil(p0 : Real3x2) : Real3x2 Ceil : real3x2 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x2| | |places|integer| | function Ceil(value : Real3x2, places : Integer) : Real3x2 Ceil : real3x2 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x2| | |places|integer| | |numericalBase|integer| | function Ceil(value : Real3x2, places : Integer, numericalBase : Integer) : Real3x2 Ceil : real3x3 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | function Ceil(p0 : Real3x3) : Real3x3 Ceil : real3x3 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x3| | |places|integer| | function Ceil(value : Real3x3, places : Integer) : Real3x3 Ceil : real3x3 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x3| | |places|integer| | |numericalBase|integer| | function Ceil(value : Real3x3, places : Integer, numericalBase : Integer) : Real3x3 Ceil : real3x4 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | function Ceil(p0 : Real3x4) : Real3x4 Ceil : real3x4 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x4| | |places|integer| | function Ceil(value : Real3x4, places : Integer) : Real3x4 Ceil : real3x4 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x4| | |places|integer| | |numericalBase|integer| | function Ceil(value : Real3x4, places : Integer, numericalBase : Integer) : Real3x4 Ceil : real4 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | function Ceil(p0 : Real4) : Real4 Ceil : real4 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4| | |places|integer| | function Ceil(value : Real4, places : Integer) : Real4 Ceil : real4 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4| | |places|integer| | |numericalBase|integer| | function Ceil(value : Real4, places : Integer, numericalBase : Integer) : Real4 Ceil : real4x2 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | function Ceil(p0 : Real4x2) : Real4x2 Ceil : real4x2 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x2| | |places|integer| | function Ceil(value : Real4x2, places : Integer) : Real4x2 Ceil : real4x2 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x2| | |places|integer| | |numericalBase|integer| | function Ceil(value : Real4x2, places : Integer, numericalBase : Integer) : Real4x2 Ceil : real4x3 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | function Ceil(p0 : Real4x3) : Real4x3 Ceil : real4x3 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x3| | |places|integer| | function Ceil(value : Real4x3, places : Integer) : Real4x3 Ceil : real4x3 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x3| | |places|integer| | |numericalBase|integer| | function Ceil(value : Real4x3, places : Integer, numericalBase : Integer) : Real4x3 Ceil : real4x4 static Rounds value upward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | function Ceil(p0 : Real4x4) : Real4x4 Ceil : real4x4 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x4| | |places|integer| | function Ceil(value : Real4x4, places : Integer) : Real4x4 Ceil : real4x4 static Rounds value upward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x4| | |places|integer| | |numericalBase|integer| | function Ceil(value : Real4x4, places : Integer, numericalBase : Integer) : Real4x4 Clamp : integer static Limits the value between the provided min and max. |Name|Type|Description| |---|---|---| |value|integer| | |min|integer| | |max|integer| | function Clamp(value : Integer, min : Integer, max : Integer) : Integer Clamp : integer2 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|integer2| | |min|integer2| | |max|integer2| | function Clamp(value : Integer2, min : Integer2, max : Integer2) : Integer2 Clamp : integer2x2 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|integer2x2| | |min|integer2x2| | |max|integer2x2| | function Clamp(value : Integer2x2, min : Integer2x2, max : Integer2x2) : Integer2x2 Clamp : integer2x3 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|integer2x3| | |min|integer2x3| | |max|integer2x3| | function Clamp(value : Integer2x3, min : Integer2x3, max : Integer2x3) : Integer2x3 Clamp : integer2x4 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|integer2x4| | |min|integer2x4| | |max|integer2x4| | function Clamp(value : Integer2x4, min : Integer2x4, max : Integer2x4) : Integer2x4 Clamp : integer3 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|integer3| | |min|integer3| | |max|integer3| | function Clamp(value : Integer3, min : Integer3, max : Integer3) : Integer3 Clamp : integer3x2 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|integer3x2| | |min|integer3x2| | |max|integer3x2| | function Clamp(value : Integer3x2, min : Integer3x2, max : Integer3x2) : Integer3x2 Clamp : integer3x3 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|integer3x3| | |min|integer3x3| | |max|integer3x3| | function Clamp(value : Integer3x3, min : Integer3x3, max : Integer3x3) : Integer3x3 Clamp : integer3x4 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|integer3x4| | |min|integer3x4| | |max|integer3x4| | function Clamp(value : Integer3x4, min : Integer3x4, max : Integer3x4) : Integer3x4 Clamp : integer4 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|integer4| | |min|integer4| | |max|integer4| | function Clamp(value : Integer4, min : Integer4, max : Integer4) : Integer4 Clamp : integer4x2 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|integer4x2| | |min|integer4x2| | |max|integer4x2| | function Clamp(value : Integer4x2, min : Integer4x2, max : Integer4x2) : Integer4x2 Clamp : integer4x3 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|integer4x3| | |min|integer4x3| | |max|integer4x3| | function Clamp(value : Integer4x3, min : Integer4x3, max : Integer4x3) : Integer4x3 Clamp : integer4x4 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|integer4x4| | |min|integer4x4| | |max|integer4x4| | function Clamp(value : Integer4x4, min : Integer4x4, max : Integer4x4) : Integer4x4 Clamp : real static Limits the value between the provided min and max. |Name|Type|Description| |---|---|---| |value|real| | |min|real| | |max|real| | function Clamp(value : Real, min : Real, max : Real) : Real Clamp : real2 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2| | |min|real2| | |max|real2| | function Clamp(value : Real2, min : Real2, max : Real2) : Real2 Clamp : real2x2 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x2| | |min|real2x2| | |max|real2x2| | function Clamp(value : Real2x2, min : Real2x2, max : Real2x2) : Real2x2 Clamp : real2x3 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x3| | |min|real2x3| | |max|real2x3| | function Clamp(value : Real2x3, min : Real2x3, max : Real2x3) : Real2x3 Clamp : real2x4 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x4| | |min|real2x4| | |max|real2x4| | function Clamp(value : Real2x4, min : Real2x4, max : Real2x4) : Real2x4 Clamp : real3 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3| | |min|real3| | |max|real3| | function Clamp(value : Real3, min : Real3, max : Real3) : Real3 Clamp : real3x2 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x2| | |min|real3x2| | |max|real3x2| | function Clamp(value : Real3x2, min : Real3x2, max : Real3x2) : Real3x2 Clamp : real3x3 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x3| | |min|real3x3| | |max|real3x3| | function Clamp(value : Real3x3, min : Real3x3, max : Real3x3) : Real3x3 Clamp : real3x4 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x4| | |min|real3x4| | |max|real3x4| | function Clamp(value : Real3x4, min : Real3x4, max : Real3x4) : Real3x4 Clamp : real4 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4| | |min|real4| | |max|real4| | function Clamp(value : Real4, min : Real4, max : Real4) : Real4 Clamp : real4x2 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x2| | |min|real4x2| | |max|real4x2| | function Clamp(value : Real4x2, min : Real4x2, max : Real4x2) : Real4x2 Clamp : real4x3 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x3| | |min|real4x3| | |max|real4x3| | function Clamp(value : Real4x3, min : Real4x3, max : Real4x3) : Real4x3 Clamp : real4x4 static Limits the value between the provided min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x4| | |min|real4x4| | |max|real4x4| | function Clamp(value : Real4x4, min : Real4x4, max : Real4x4) : Real4x4 Cos : real static The transcendental function cosine. |Name|Type|Description| |---|---|---| |radians|real| | function Cos(radians : Real) : Real Cos : real2 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2| | function Cos(radians : Real2) : Real2 Cos : real2x2 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x2| | function Cos(radians : Real2x2) : Real2x2 Cos : real2x3 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x3| | function Cos(radians : Real2x3) : Real2x3 Cos : real2x4 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x4| | function Cos(radians : Real2x4) : Real2x4 Cos : real3 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3| | function Cos(radians : Real3) : Real3 Cos : real3x2 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x2| | function Cos(radians : Real3x2) : Real3x2 Cos : real3x3 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x3| | function Cos(radians : Real3x3) : Real3x3 Cos : real3x4 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x4| | function Cos(radians : Real3x4) : Real3x4 Cos : real4 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4| | function Cos(radians : Real4) : Real4 Cos : real4x2 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x2| | function Cos(radians : Real4x2) : Real4x2 Cos : real4x3 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x3| | function Cos(radians : Real4x3) : Real4x3 Cos : real4x4 static The transcendental function cosine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x4| | function Cos(radians : Real4x4) : Real4x4 Cosh : real static The hyperbolic cosine function. |Name|Type|Description| |---|---|---| |radians|real| | function Cosh(radians : Real) : Real Cosh : real2 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2| | function Cosh(radians : Real2) : Real2 Cosh : real2x2 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x2| | function Cosh(radians : Real2x2) : Real2x2 Cosh : real2x3 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x3| | function Cosh(radians : Real2x3) : Real2x3 Cosh : real2x4 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x4| | function Cosh(radians : Real2x4) : Real2x4 Cosh : real3 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3| | function Cosh(radians : Real3) : Real3 Cosh : real3x2 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x2| | function Cosh(radians : Real3x2) : Real3x2 Cosh : real3x3 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x3| | function Cosh(radians : Real3x3) : Real3x3 Cosh : real3x4 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x4| | function Cosh(radians : Real3x4) : Real3x4 Cosh : real4 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4| | function Cosh(radians : Real4) : Real4 Cosh : real4x2 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x2| | function Cosh(radians : Real4x2) : Real4x2 Cosh : real4x3 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x3| | function Cosh(radians : Real4x3) : Real4x3 Cosh : real4x4 static The hyperbolic cosine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x4| | function Cosh(radians : Real4x4) : Real4x4 CountBits : integer static Counts the number of bits set on the input. |Name|Type|Description| |---|---|---| |p0|integer| | function CountBits(p0 : Integer) : Integer CountBits : integer2 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2| | function CountBits(p0 : Integer2) : Integer2 CountBits : integer2x2 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2x2| | function CountBits(p0 : Integer2x2) : Integer2x2 CountBits : integer2x3 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2x3| | function CountBits(p0 : Integer2x3) : Integer2x3 CountBits : integer2x4 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2x4| | function CountBits(p0 : Integer2x4) : Integer2x4 CountBits : integer3 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3| | function CountBits(p0 : Integer3) : Integer3 CountBits : integer3x2 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3x2| | function CountBits(p0 : Integer3x2) : Integer3x2 CountBits : integer3x3 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3x3| | function CountBits(p0 : Integer3x3) : Integer3x3 CountBits : integer3x4 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3x4| | function CountBits(p0 : Integer3x4) : Integer3x4 CountBits : integer4 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4| | function CountBits(p0 : Integer4) : Integer4 CountBits : integer4x2 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4x2| | function CountBits(p0 : Integer4x2) : Integer4x2 CountBits : integer4x3 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4x3| | function CountBits(p0 : Integer4x3) : Integer4x3 CountBits : integer4x4 static Counts the number of bits set on the input. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4x4| | function CountBits(p0 : Integer4x4) : Integer4x4 Cross : real2 static 2D cross product. Equivalent to Cross(Real3(0, 0, p0), Real3(p1.x, p1.y, 0)). |Name|Type|Description| |---|---|---| |p0|real| | |p1|real2| | function Cross(p0 : Real, p1 : Real2) : Real2 Cross : real2 static 2D cross product. Equivalent to Cross(Real3(p0.x, p0.y, 0), Real3(0, 0, p1)). |Name|Type|Description| |---|---|---| |p0|real2| | |p1|real| | function Cross(p0 : Real2, p1 : Real) : Real2 Cross : real static 2D cross product. Equivalent to Cross(Real3(p0.x, p0.y, 0), Real3(p1.x, p1.y, 0)). |Name|Type|Description| |---|---|---| |p0|real2| | |p1|real2| | function Cross(p0 : Real2, p1 : Real2) : Real Cross : real3 static The vector cross product. Creates a new vector perpendicular to p0 and p1 using the right hand rule. |Name|Type|Description| |---|---|---| |p0|real3| | |p1|real3| | function Cross(p0 : Real3, p1 : Real3) : Real3 Determinant : real static Computes the determinant of the given matrix |Name|Type|Description| |---|---|---| |p0|real2x2| | function Determinant(p0 : Real2x2) : Real Determinant : real static Computes the determinant of the given matrix |Name|Type|Description| |---|---|---| |p0|real3x3| | function Determinant(p0 : Real3x3) : Real Determinant : real static Computes the determinant of the given matrix |Name|Type|Description| |---|---|---| |p0|real4x4| | function Determinant(p0 : Real4x4) : Real Distance : real static Returns the distance between two points. |Name|Type|Description| |---|---|---| |p0|real2| | |p1|real2| | function Distance(p0 : Real2, p1 : Real2) : Real Distance : real static Returns the distance between two points. |Name|Type|Description| |---|---|---| |p0|real3| | |p1|real3| | function Distance(p0 : Real3, p1 : Real3) : Real Distance : real static Returns the distance between two points. |Name|Type|Description| |---|---|---| |p0|real4| | |p1|real4| | function Distance(p0 : Real4, p1 : Real4) : Real DistanceSq : real static Returns the squared distance between two points. |Name|Type|Description| |---|---|---| |p0|real2| | |p1|real2| | function DistanceSq(p0 : Real2, p1 : Real2) : Real DistanceSq : real static Returns the squared distance between two points. |Name|Type|Description| |---|---|---| |p0|real3| | |p1|real3| | function DistanceSq(p0 : Real3, p1 : Real3) : Real DistanceSq : real static Returns the squared distance between two points. |Name|Type|Description| |---|---|---| |p0|real4| | |p1|real4| | function DistanceSq(p0 : Real4, p1 : Real4) : Real Dot : real static The vector dot product |Name|Type|Description| |---|---|---| |p0|quaternion| | |p1|quaternion| | function Dot(p0 : Quaternion, p1 : Quaternion) : Real Dot : real static The vector dot product |Name|Type|Description| |---|---|---| |p0|real2| | |p1|real2| | function Dot(p0 : Real2, p1 : Real2) : Real Dot : real static The vector dot product |Name|Type|Description| |---|---|---| |p0|real3| | |p1|real3| | function Dot(p0 : Real3, p1 : Real3) : Real Dot : real static The vector dot product |Name|Type|Description| |---|---|---| |p0|real4| | |p1|real4| | function Dot(p0 : Real4, p1 : Real4) : Real Euler : quaternion static Generates the orientation from the given Euler angle vector |Name|Type|Description| |---|---|---| |eulerRadians|real3| | function Euler(eulerRadians : Real3) : Quaternion Exp : real static Returns the base-e exponentiation of value, which is e^value. |Name|Type|Description| |---|---|---| |p0|real| | function Exp(p0 : Real) : Real Exp : real2 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | function Exp(p0 : Real2) : Real2 Exp : real2x2 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | function Exp(p0 : Real2x2) : Real2x2 Exp : real2x3 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | function Exp(p0 : Real2x3) : Real2x3 Exp : real2x4 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | function Exp(p0 : Real2x4) : Real2x4 Exp : real3 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | function Exp(p0 : Real3) : Real3 Exp : real3x2 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | function Exp(p0 : Real3x2) : Real3x2 Exp : real3x3 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | function Exp(p0 : Real3x3) : Real3x3 Exp : real3x4 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | function Exp(p0 : Real3x4) : Real3x4 Exp : real4 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | function Exp(p0 : Real4) : Real4 Exp : real4x2 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | function Exp(p0 : Real4x2) : Real4x2 Exp : real4x3 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | function Exp(p0 : Real4x3) : Real4x3 Exp : real4x4 static Returns the base-e exponentiation of value, which is e^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | function Exp(p0 : Real4x4) : Real4x4 Exp2 : real static Returns the base-2 exponentiation of value, which is 2^value. |Name|Type|Description| |---|---|---| |p0|real| | function Exp2(p0 : Real) : Real Exp2 : real2 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | function Exp2(p0 : Real2) : Real2 Exp2 : real2x2 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | function Exp2(p0 : Real2x2) : Real2x2 Exp2 : real2x3 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | function Exp2(p0 : Real2x3) : Real2x3 Exp2 : real2x4 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | function Exp2(p0 : Real2x4) : Real2x4 Exp2 : real3 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | function Exp2(p0 : Real3) : Real3 Exp2 : real3x2 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | function Exp2(p0 : Real3x2) : Real3x2 Exp2 : real3x3 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | function Exp2(p0 : Real3x3) : Real3x3 Exp2 : real3x4 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | function Exp2(p0 : Real3x4) : Real3x4 Exp2 : real4 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | function Exp2(p0 : Real4) : Real4 Exp2 : real4x2 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | function Exp2(p0 : Real4x2) : Real4x2 Exp2 : real4x3 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | function Exp2(p0 : Real4x3) : Real4x3 Exp2 : real4x4 static Returns the base-2 exponentiation of value, which is 2^value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | function Exp2(p0 : Real4x4) : Real4x4 Floor : real static Rounds value downward. |Name|Type|Description| |---|---|---| |p0|real| | function Floor(p0 : Real) : Real Floor : real static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). |Name|Type|Description| |---|---|---| |value|real| | |places|integer| | function Floor(value : Real, places : Integer) : Real Floor : real static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). |Name|Type|Description| |---|---|---| |value|real| | |places|integer| | |numericalBase|integer| | function Floor(value : Real, places : Integer, numericalBase : Integer) : Real Floor : real2 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | function Floor(p0 : Real2) : Real2 Floor : real2 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2| | |places|integer| | function Floor(value : Real2, places : Integer) : Real2 Floor : real2 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2| | |places|integer| | |numericalBase|integer| | function Floor(value : Real2, places : Integer, numericalBase : Integer) : Real2 Floor : real2x2 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | function Floor(p0 : Real2x2) : Real2x2 Floor : real2x2 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x2| | |places|integer| | function Floor(value : Real2x2, places : Integer) : Real2x2 Floor : real2x2 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x2| | |places|integer| | |numericalBase|integer| | function Floor(value : Real2x2, places : Integer, numericalBase : Integer) : Real2x2 Floor : real2x3 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | function Floor(p0 : Real2x3) : Real2x3 Floor : real2x3 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x3| | |places|integer| | function Floor(value : Real2x3, places : Integer) : Real2x3 Floor : real2x3 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x3| | |places|integer| | |numericalBase|integer| | function Floor(value : Real2x3, places : Integer, numericalBase : Integer) : Real2x3 Floor : real2x4 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | function Floor(p0 : Real2x4) : Real2x4 Floor : real2x4 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x4| | |places|integer| | function Floor(value : Real2x4, places : Integer) : Real2x4 Floor : real2x4 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x4| | |places|integer| | |numericalBase|integer| | function Floor(value : Real2x4, places : Integer, numericalBase : Integer) : Real2x4 Floor : real3 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | function Floor(p0 : Real3) : Real3 Floor : real3 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3| | |places|integer| | function Floor(value : Real3, places : Integer) : Real3 Floor : real3 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3| | |places|integer| | |numericalBase|integer| | function Floor(value : Real3, places : Integer, numericalBase : Integer) : Real3 Floor : real3x2 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | function Floor(p0 : Real3x2) : Real3x2 Floor : real3x2 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x2| | |places|integer| | function Floor(value : Real3x2, places : Integer) : Real3x2 Floor : real3x2 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x2| | |places|integer| | |numericalBase|integer| | function Floor(value : Real3x2, places : Integer, numericalBase : Integer) : Real3x2 Floor : real3x3 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | function Floor(p0 : Real3x3) : Real3x3 Floor : real3x3 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x3| | |places|integer| | function Floor(value : Real3x3, places : Integer) : Real3x3 Floor : real3x3 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x3| | |places|integer| | |numericalBase|integer| | function Floor(value : Real3x3, places : Integer, numericalBase : Integer) : Real3x3 Floor : real3x4 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | function Floor(p0 : Real3x4) : Real3x4 Floor : real3x4 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x4| | |places|integer| | function Floor(value : Real3x4, places : Integer) : Real3x4 Floor : real3x4 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x4| | |places|integer| | |numericalBase|integer| | function Floor(value : Real3x4, places : Integer, numericalBase : Integer) : Real3x4 Floor : real4 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | function Floor(p0 : Real4) : Real4 Floor : real4 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4| | |places|integer| | function Floor(value : Real4, places : Integer) : Real4 Floor : real4 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4| | |places|integer| | |numericalBase|integer| | function Floor(value : Real4, places : Integer, numericalBase : Integer) : Real4 Floor : real4x2 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | function Floor(p0 : Real4x2) : Real4x2 Floor : real4x2 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x2| | |places|integer| | function Floor(value : Real4x2, places : Integer) : Real4x2 Floor : real4x2 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x2| | |places|integer| | |numericalBase|integer| | function Floor(value : Real4x2, places : Integer, numericalBase : Integer) : Real4x2 Floor : real4x3 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | function Floor(p0 : Real4x3) : Real4x3 Floor : real4x3 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x3| | |places|integer| | function Floor(value : Real4x3, places : Integer) : Real4x3 Floor : real4x3 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x3| | |places|integer| | |numericalBase|integer| | function Floor(value : Real4x3, places : Integer, numericalBase : Integer) : Real4x3 Floor : real4x4 static Rounds value downward. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | function Floor(p0 : Real4x4) : Real4x4 Floor : real4x4 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x4| | |places|integer| | function Floor(value : Real4x4, places : Integer) : Real4x4 Floor : real4x4 static Rounds value downward. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x4| | |places|integer| | |numericalBase|integer| | function Floor(value : Real4x4, places : Integer, numericalBase : Integer) : Real4x4 FMod : real static Returns the floating-point remainder of numerator/denominator (rounded towards zero). |Name|Type|Description| |---|---|---| |numerator|real| | |denominator|real| | function FMod(numerator : Real, denominator : Real) : Real FMod : real2 static Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator|real2| | |denominator|real2| | function FMod(numerator : Real2, denominator : Real2) : Real2 FMod : real2x2 static Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator|real2x2| | |denominator|real2x2| | function FMod(numerator : Real2x2, denominator : Real2x2) : Real2x2 FMod : real2x3 static Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator|real2x3| | |denominator|real2x3| | function FMod(numerator : Real2x3, denominator : Real2x3) : Real2x3 FMod : real2x4 static Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator|real2x4| | |denominator|real2x4| | function FMod(numerator : Real2x4, denominator : Real2x4) : Real2x4 FMod : real3 static Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator|real3| | |denominator|real3| | function FMod(numerator : Real3, denominator : Real3) : Real3 FMod : real3x2 static Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator|real3x2| | |denominator|real3x2| | function FMod(numerator : Real3x2, denominator : Real3x2) : Real3x2 FMod : real3x3 static Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator|real3x3| | |denominator|real3x3| | function FMod(numerator : Real3x3, denominator : Real3x3) : Real3x3 FMod : real3x4 static Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator|real3x4| | |denominator|real3x4| | function FMod(numerator : Real3x4, denominator : Real3x4) : Real3x4 FMod : real4 static Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator|real4| | |denominator|real4| | function FMod(numerator : Real4, denominator : Real4) : Real4 FMod : real4x2 static Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator|real4x2| | |denominator|real4x2| | function FMod(numerator : Real4x2, denominator : Real4x2) : Real4x2 FMod : real4x3 static Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator|real4x3| | |denominator|real4x3| | function FMod(numerator : Real4x3, denominator : Real4x3) : Real4x3 FMod : real4x4 static Returns the floating-point remainder of numerator/denominator (rounded towards zero). Performed component-wise. |Name|Type|Description| |---|---|---| |numerator|real4x4| | |denominator|real4x4| | function FMod(numerator : Real4x4, denominator : Real4x4) : Real4x4 Frac : real static Returns the fractional part of value, a value between 0 and 1. |Name|Type|Description| |---|---|---| |p0|real| | function Frac(p0 : Real) : Real Frac : real2 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | function Frac(p0 : Real2) : Real2 Frac : real2x2 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | function Frac(p0 : Real2x2) : Real2x2 Frac : real2x3 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | function Frac(p0 : Real2x3) : Real2x3 Frac : real2x4 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | function Frac(p0 : Real2x4) : Real2x4 Frac : real3 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | function Frac(p0 : Real3) : Real3 Frac : real3x2 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | function Frac(p0 : Real3x2) : Real3x2 Frac : real3x3 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | function Frac(p0 : Real3x3) : Real3x3 Frac : real3x4 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | function Frac(p0 : Real3x4) : Real3x4 Frac : real4 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | function Frac(p0 : Real4) : Real4 Frac : real4x2 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | function Frac(p0 : Real4x2) : Real4x2 Frac : real4x3 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | function Frac(p0 : Real4x3) : Real4x3 Frac : real4x4 static Returns the fractional part of value, a value between 0 and 1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | function Frac(p0 : Real4x4) : Real4x4 GenerateRotationMatrix2x2 : real2x2 static Generates a two-dimensional rotation matrix. |Name|Type|Description| |---|---|---| |radians|real| | function GenerateRotationMatrix2x2(radians : Real) : Real2x2 GenerateRotationMatrix3x3 : real3x3 static Generates a two-dimensional rotation matrix. |Name|Type|Description| |---|---|---| |radians|real| | function GenerateRotationMatrix3x3(radians : Real) : Real3x3 GenerateRotationMatrix3x3 : real3x3 static Generates a three-dimensional rotation matrix. |Name|Type|Description| |---|---|---| |axis|real3| | |radians|real| | function GenerateRotationMatrix3x3(axis : Real3, radians : Real) : Real3x3 GenerateRotationMatrix4x4 : real4x4 static Generates a three-dimensional rotation matrix. |Name|Type|Description| |---|---|---| |axis|real3| | |radians|real| | function GenerateRotationMatrix4x4(axis : Real3, radians : Real) : Real4x4 GenerateScaleMatrix2x2 : real2x2 static Generates a two-dimensional scale matrix. |Name|Type|Description| |---|---|---| |scale|real2| | function GenerateScaleMatrix2x2(scale : Real2) : Real2x2 GenerateScaleMatrix3x3 : real3x3 static Generates a two-dimensional scale matrix. |Name|Type|Description| |---|---|---| |scale|real2| | function GenerateScaleMatrix3x3(scale : Real2) : Real3x3 GenerateScaleMatrix3x3 : real3x3 static Generates a three-dimensional scale matrix. |Name|Type|Description| |---|---|---| |scale|real3| | function GenerateScaleMatrix3x3(scale : Real3) : Real3x3 GenerateScaleMatrix4x4 : real4x4 static Generates a three-dimensional scale matrix. |Name|Type|Description| |---|---|---| |scale|real3| | function GenerateScaleMatrix4x4(scale : Real3) : Real4x4 GenerateTransformMatrix2x2 : real2x2 static Generates a two-dimensional transform. |Name|Type|Description| |---|---|---| |radians|real| | |scale|real2| | function GenerateTransformMatrix2x2(radians : Real, scale : Real2) : Real2x2 GenerateTransformMatrix3x3 : real3x3 static Generates a three-dimensions transform. |Name|Type|Description| |---|---|---| |rotation|quaternion| | |scale|real3| | function GenerateTransformMatrix3x3(rotation : Quaternion, scale : Real3) : Real3x3 GenerateTransformMatrix3x3 : real3x3 static Generates a two-dimensions transform. |Name|Type|Description| |---|---|---| |translation|real2| | |radians|real| | |scale|real2| | function GenerateTransformMatrix3x3(translation : Real2, radians : Real, scale : Real2) : Real3x3 GenerateTransformMatrix3x3 : real3x3 static Generates a three-dimensions transform. |Name|Type|Description| |---|---|---| |rotation|real3x3| | |scale|real3| | function GenerateTransformMatrix3x3(rotation : Real3x3, scale : Real3) : Real3x3 GenerateTransformMatrix4x4 : real4x4 static Generates a three-dimensional translation matrix. |Name|Type|Description| |---|---|---| |translation|real3| | |rotation|quaternion| | |scale|real3| | function GenerateTransformMatrix4x4(translation : Real3, rotation : Quaternion, scale : Real3) : Real4x4 GenerateTransformMatrix4x4 : real4x4 static Generates a three-dimensional translation matrix. |Name|Type|Description| |---|---|---| |translation|real3| | |rotation|real3x3| | |scale|real3| | function GenerateTransformMatrix4x4(translation : Real3, rotation : Real3x3, scale : Real3) : Real4x4 GenerateTranslationMatrix3x3 : real3x3 static Generates a two-dimensional translation matrix. |Name|Type|Description| |---|---|---| |translation|real2| | function GenerateTranslationMatrix3x3(translation : Real2) : Real3x3 GenerateTranslationMatrix4x4 : real4x4 static Generates a three-dimensional translation matrix. |Name|Type|Description| |---|---|---| |translation|real3| | function GenerateTranslationMatrix4x4(translation : Real3) : Real4x4 Invert : quaternion static Returns the inverse rotation. |Name|Type|Description| |---|---|---| |p0|quaternion| | function Invert(p0 : Quaternion) : Quaternion Invert : real2x2 static Computes the inverse of the given matrix if it exists. Undefined if the matrix is uninvertible |Name|Type|Description| |---|---|---| |p0|real2x2| | function Invert(p0 : Real2x2) : Real2x2 Invert : real3x3 static Computes the inverse of the given matrix if it exists. Undefined if the matrix is uninvertible |Name|Type|Description| |---|---|---| |p0|real3x3| | function Invert(p0 : Real3x3) : Real3x3 Invert : real4x4 static Computes the inverse of the given matrix if it exists. Undefined if the matrix is uninvertible |Name|Type|Description| |---|---|---| |p0|real4x4| | function Invert(p0 : Real4x4) : Real4x4 Length : real static The length of the vector. |Name|Type|Description| |---|---|---| |p0|quaternion| | function Length(p0 : Quaternion) : Real Length : real static The length of the vector. |Name|Type|Description| |---|---|---| |p0|real2| | function Length(p0 : Real2) : Real Length : real static The length of the vector. |Name|Type|Description| |---|---|---| |p0|real3| | function Length(p0 : Real3) : Real Length : real static The length of the vector. |Name|Type|Description| |---|---|---| |p0|real4| | function Length(p0 : Real4) : Real LengthSq : real static The squared length of the vector. Used to avoid a square root when possible. |Name|Type|Description| |---|---|---| |p0|quaternion| | function LengthSq(p0 : Quaternion) : Real LengthSq : real static The squared length of the vector. Used to avoid a square root when possible. |Name|Type|Description| |---|---|---| |p0|real2| | function LengthSq(p0 : Real2) : Real LengthSq : real static The squared length of the vector. Used to avoid a square root when possible. |Name|Type|Description| |---|---|---| |p0|real3| | function LengthSq(p0 : Real3) : Real LengthSq : real static The squared length of the vector. Used to avoid a square root when possible. |Name|Type|Description| |---|---|---| |p0|real4| | function LengthSq(p0 : Real4) : Real Lerp : real static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. |Name|Type|Description| |---|---|---| |start|real| | |end|real| | |t|real| | function Lerp(start : Real, end : Real, t : Real) : Real Lerp : real2 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real2| | |end|real2| | |t|real| | function Lerp(start : Real2, end : Real2, t : Real) : Real2 Lerp : real2 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real2| | |end|real2| | |t|real2| | function Lerp(start : Real2, end : Real2, t : Real2) : Real2 Lerp : real2x2 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real2x2| | |end|real2x2| | |t|real| | function Lerp(start : Real2x2, end : Real2x2, t : Real) : Real2x2 Lerp : real2x2 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real2x2| | |end|real2x2| | |t|real2x2| | function Lerp(start : Real2x2, end : Real2x2, t : Real2x2) : Real2x2 Lerp : real2x3 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real2x3| | |end|real2x3| | |t|real| | function Lerp(start : Real2x3, end : Real2x3, t : Real) : Real2x3 Lerp : real2x3 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real2x3| | |end|real2x3| | |t|real2x3| | function Lerp(start : Real2x3, end : Real2x3, t : Real2x3) : Real2x3 Lerp : real2x4 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real2x4| | |end|real2x4| | |t|real| | function Lerp(start : Real2x4, end : Real2x4, t : Real) : Real2x4 Lerp : real2x4 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real2x4| | |end|real2x4| | |t|real2x4| | function Lerp(start : Real2x4, end : Real2x4, t : Real2x4) : Real2x4 Lerp : real3 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real3| | |end|real3| | |t|real| | function Lerp(start : Real3, end : Real3, t : Real) : Real3 Lerp : real3 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real3| | |end|real3| | |t|real3| | function Lerp(start : Real3, end : Real3, t : Real3) : Real3 Lerp : real3x2 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real3x2| | |end|real3x2| | |t|real| | function Lerp(start : Real3x2, end : Real3x2, t : Real) : Real3x2 Lerp : real3x2 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real3x2| | |end|real3x2| | |t|real3x2| | function Lerp(start : Real3x2, end : Real3x2, t : Real3x2) : Real3x2 Lerp : real3x3 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real3x3| | |end|real3x3| | |t|real| | function Lerp(start : Real3x3, end : Real3x3, t : Real) : Real3x3 Lerp : real3x3 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real3x3| | |end|real3x3| | |t|real3x3| | function Lerp(start : Real3x3, end : Real3x3, t : Real3x3) : Real3x3 Lerp : real3x4 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real3x4| | |end|real3x4| | |t|real| | function Lerp(start : Real3x4, end : Real3x4, t : Real) : Real3x4 Lerp : real3x4 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real3x4| | |end|real3x4| | |t|real3x4| | function Lerp(start : Real3x4, end : Real3x4, t : Real3x4) : Real3x4 Lerp : real4 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real4| | |end|real4| | |t|real| | function Lerp(start : Real4, end : Real4, t : Real) : Real4 Lerp : real4 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real4| | |end|real4| | |t|real4| | function Lerp(start : Real4, end : Real4, t : Real4) : Real4 Lerp : real4x2 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real4x2| | |end|real4x2| | |t|real| | function Lerp(start : Real4x2, end : Real4x2, t : Real) : Real4x2 Lerp : real4x2 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real4x2| | |end|real4x2| | |t|real4x2| | function Lerp(start : Real4x2, end : Real4x2, t : Real4x2) : Real4x2 Lerp : real4x3 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real4x3| | |end|real4x3| | |t|real| | function Lerp(start : Real4x3, end : Real4x3, t : Real) : Real4x3 Lerp : real4x3 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real4x3| | |end|real4x3| | |t|real4x3| | function Lerp(start : Real4x3, end : Real4x3, t : Real4x3) : Real4x3 Lerp : real4x4 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real4x4| | |end|real4x4| | |t|real| | function Lerp(start : Real4x4, end : Real4x4, t : Real) : Real4x4 Lerp : real4x4 static Linearly interpolates from start to end by the fraction t. T of 0 is start and t of 1 is end. Performed component-wise. |Name|Type|Description| |---|---|---| |start|real4x4| | |end|real4x4| | |t|real4x4| | function Lerp(start : Real4x4, end : Real4x4, t : Real4x4) : Real4x4 Log : real static Base e logarithm. |Name|Type|Description| |---|---|---| |p0|real| | function Log(p0 : Real) : Real Log : real2 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | function Log(p0 : Real2) : Real2 Log : real2x2 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | function Log(p0 : Real2x2) : Real2x2 Log : real2x3 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | function Log(p0 : Real2x3) : Real2x3 Log : real2x4 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | function Log(p0 : Real2x4) : Real2x4 Log : real3 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | function Log(p0 : Real3) : Real3 Log : real3x2 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | function Log(p0 : Real3x2) : Real3x2 Log : real3x3 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | function Log(p0 : Real3x3) : Real3x3 Log : real3x4 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | function Log(p0 : Real3x4) : Real3x4 Log : real4 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | function Log(p0 : Real4) : Real4 Log : real4x2 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | function Log(p0 : Real4x2) : Real4x2 Log : real4x3 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | function Log(p0 : Real4x3) : Real4x3 Log : real4x4 static Base e logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | function Log(p0 : Real4x4) : Real4x4 Log10 : real static Base 10 logarithm. |Name|Type|Description| |---|---|---| |p0|real| | function Log10(p0 : Real) : Real Log10 : real2 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | function Log10(p0 : Real2) : Real2 Log10 : real2x2 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | function Log10(p0 : Real2x2) : Real2x2 Log10 : real2x3 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | function Log10(p0 : Real2x3) : Real2x3 Log10 : real2x4 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | function Log10(p0 : Real2x4) : Real2x4 Log10 : real3 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | function Log10(p0 : Real3) : Real3 Log10 : real3x2 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | function Log10(p0 : Real3x2) : Real3x2 Log10 : real3x3 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | function Log10(p0 : Real3x3) : Real3x3 Log10 : real3x4 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | function Log10(p0 : Real3x4) : Real3x4 Log10 : real4 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | function Log10(p0 : Real4) : Real4 Log10 : real4x2 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | function Log10(p0 : Real4x2) : Real4x2 Log10 : real4x3 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | function Log10(p0 : Real4x3) : Real4x3 Log10 : real4x4 static Base 10 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | function Log10(p0 : Real4x4) : Real4x4 Log2 : real static Base 2 logarithm. |Name|Type|Description| |---|---|---| |p0|real| | function Log2(p0 : Real) : Real Log2 : real2 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | function Log2(p0 : Real2) : Real2 Log2 : real2x2 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | function Log2(p0 : Real2x2) : Real2x2 Log2 : real2x3 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | function Log2(p0 : Real2x3) : Real2x3 Log2 : real2x4 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | function Log2(p0 : Real2x4) : Real2x4 Log2 : real3 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | function Log2(p0 : Real3) : Real3 Log2 : real3x2 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | function Log2(p0 : Real3x2) : Real3x2 Log2 : real3x3 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | function Log2(p0 : Real3x3) : Real3x3 Log2 : real3x4 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | function Log2(p0 : Real3x4) : Real3x4 Log2 : real4 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | function Log2(p0 : Real4) : Real4 Log2 : real4x2 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | function Log2(p0 : Real4x2) : Real4x2 Log2 : real4x3 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | function Log2(p0 : Real4x3) : Real4x3 Log2 : real4x4 static Base 2 logarithm. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | function Log2(p0 : Real4x4) : Real4x4 Max : integer static Returns whichever value is larger. |Name|Type|Description| |---|---|---| |p0|integer| | |p1|integer| | function Max(p0 : Integer, p1 : Integer) : Integer Max : integer2 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2| | |p1|integer2| | function Max(p0 : Integer2, p1 : Integer2) : Integer2 Max : integer2x2 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2x2| | |p1|integer2x2| | function Max(p0 : Integer2x2, p1 : Integer2x2) : Integer2x2 Max : integer2x3 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2x3| | |p1|integer2x3| | function Max(p0 : Integer2x3, p1 : Integer2x3) : Integer2x3 Max : integer2x4 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2x4| | |p1|integer2x4| | function Max(p0 : Integer2x4, p1 : Integer2x4) : Integer2x4 Max : integer3 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3| | |p1|integer3| | function Max(p0 : Integer3, p1 : Integer3) : Integer3 Max : integer3x2 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3x2| | |p1|integer3x2| | function Max(p0 : Integer3x2, p1 : Integer3x2) : Integer3x2 Max : integer3x3 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3x3| | |p1|integer3x3| | function Max(p0 : Integer3x3, p1 : Integer3x3) : Integer3x3 Max : integer3x4 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3x4| | |p1|integer3x4| | function Max(p0 : Integer3x4, p1 : Integer3x4) : Integer3x4 Max : integer4 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4| | |p1|integer4| | function Max(p0 : Integer4, p1 : Integer4) : Integer4 Max : integer4x2 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4x2| | |p1|integer4x2| | function Max(p0 : Integer4x2, p1 : Integer4x2) : Integer4x2 Max : integer4x3 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4x3| | |p1|integer4x3| | function Max(p0 : Integer4x3, p1 : Integer4x3) : Integer4x3 Max : integer4x4 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4x4| | |p1|integer4x4| | function Max(p0 : Integer4x4, p1 : Integer4x4) : Integer4x4 Max : real static Returns whichever value is larger. |Name|Type|Description| |---|---|---| |p0|real| | |p1|real| | function Max(p0 : Real, p1 : Real) : Real Max : real2 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | |p1|real2| | function Max(p0 : Real2, p1 : Real2) : Real2 Max : real2x2 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | |p1|real2x2| | function Max(p0 : Real2x2, p1 : Real2x2) : Real2x2 Max : real2x3 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | |p1|real2x3| | function Max(p0 : Real2x3, p1 : Real2x3) : Real2x3 Max : real2x4 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | |p1|real2x4| | function Max(p0 : Real2x4, p1 : Real2x4) : Real2x4 Max : real3 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | |p1|real3| | function Max(p0 : Real3, p1 : Real3) : Real3 Max : real3x2 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | |p1|real3x2| | function Max(p0 : Real3x2, p1 : Real3x2) : Real3x2 Max : real3x3 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | |p1|real3x3| | function Max(p0 : Real3x3, p1 : Real3x3) : Real3x3 Max : real3x4 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | |p1|real3x4| | function Max(p0 : Real3x4, p1 : Real3x4) : Real3x4 Max : real4 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | |p1|real4| | function Max(p0 : Real4, p1 : Real4) : Real4 Max : real4x2 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | |p1|real4x2| | function Max(p0 : Real4x2, p1 : Real4x2) : Real4x2 Max : real4x3 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | |p1|real4x3| | function Max(p0 : Real4x3, p1 : Real4x3) : Real4x3 Max : real4x4 static Returns whichever value is larger. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | |p1|real4x4| | function Max(p0 : Real4x4, p1 : Real4x4) : Real4x4 Min : integer static Returns whichever value is smaller. |Name|Type|Description| |---|---|---| |p0|integer| | |p1|integer| | function Min(p0 : Integer, p1 : Integer) : Integer Min : integer2 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2| | |p1|integer2| | function Min(p0 : Integer2, p1 : Integer2) : Integer2 Min : integer2x2 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2x2| | |p1|integer2x2| | function Min(p0 : Integer2x2, p1 : Integer2x2) : Integer2x2 Min : integer2x3 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2x3| | |p1|integer2x3| | function Min(p0 : Integer2x3, p1 : Integer2x3) : Integer2x3 Min : integer2x4 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2x4| | |p1|integer2x4| | function Min(p0 : Integer2x4, p1 : Integer2x4) : Integer2x4 Min : integer3 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3| | |p1|integer3| | function Min(p0 : Integer3, p1 : Integer3) : Integer3 Min : integer3x2 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3x2| | |p1|integer3x2| | function Min(p0 : Integer3x2, p1 : Integer3x2) : Integer3x2 Min : integer3x3 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3x3| | |p1|integer3x3| | function Min(p0 : Integer3x3, p1 : Integer3x3) : Integer3x3 Min : integer3x4 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3x4| | |p1|integer3x4| | function Min(p0 : Integer3x4, p1 : Integer3x4) : Integer3x4 Min : integer4 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4| | |p1|integer4| | function Min(p0 : Integer4, p1 : Integer4) : Integer4 Min : integer4x2 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4x2| | |p1|integer4x2| | function Min(p0 : Integer4x2, p1 : Integer4x2) : Integer4x2 Min : integer4x3 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4x3| | |p1|integer4x3| | function Min(p0 : Integer4x3, p1 : Integer4x3) : Integer4x3 Min : integer4x4 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4x4| | |p1|integer4x4| | function Min(p0 : Integer4x4, p1 : Integer4x4) : Integer4x4 Min : real static Returns whichever value is smaller. |Name|Type|Description| |---|---|---| |p0|real| | |p1|real| | function Min(p0 : Real, p1 : Real) : Real Min : real2 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | |p1|real2| | function Min(p0 : Real2, p1 : Real2) : Real2 Min : real2x2 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | |p1|real2x2| | function Min(p0 : Real2x2, p1 : Real2x2) : Real2x2 Min : real2x3 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | |p1|real2x3| | function Min(p0 : Real2x3, p1 : Real2x3) : Real2x3 Min : real2x4 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | |p1|real2x4| | function Min(p0 : Real2x4, p1 : Real2x4) : Real2x4 Min : real3 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | |p1|real3| | function Min(p0 : Real3, p1 : Real3) : Real3 Min : real3x2 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | |p1|real3x2| | function Min(p0 : Real3x2, p1 : Real3x2) : Real3x2 Min : real3x3 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | |p1|real3x3| | function Min(p0 : Real3x3, p1 : Real3x3) : Real3x3 Min : real3x4 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | |p1|real3x4| | function Min(p0 : Real3x4, p1 : Real3x4) : Real3x4 Min : real4 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | |p1|real4| | function Min(p0 : Real4, p1 : Real4) : Real4 Min : real4x2 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | |p1|real4x2| | function Min(p0 : Real4x2, p1 : Real4x2) : Real4x2 Min : real4x3 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | |p1|real4x3| | function Min(p0 : Real4x3, p1 : Real4x3) : Real4x3 Min : real4x4 static Returns whichever value is smaller. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | |p1|real4x4| | function Min(p0 : Real4x4, p1 : Real4x4) : Real4x4 Multiply : integer2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer2x2| | |the|integer2| | function Multiply(by : Integer2x2, the : Integer2) : Integer2 Multiply : integer2x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer2x2| | |the|integer2x2| | function Multiply(by : Integer2x2, the : Integer2x2) : Integer2x2 Multiply : integer2x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer2x2| | |the|integer2x3| | function Multiply(by : Integer2x2, the : Integer2x3) : Integer2x3 Multiply : integer2x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer2x2| | |the|integer2x4| | function Multiply(by : Integer2x2, the : Integer2x4) : Integer2x4 Multiply : integer2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer2x3| | |the|integer3| | function Multiply(by : Integer2x3, the : Integer3) : Integer2 Multiply : integer2x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer2x3| | |the|integer3x2| | function Multiply(by : Integer2x3, the : Integer3x2) : Integer2x2 Multiply : integer2x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer2x3| | |the|integer3x3| | function Multiply(by : Integer2x3, the : Integer3x3) : Integer2x3 Multiply : integer2x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer2x3| | |the|integer3x4| | function Multiply(by : Integer2x3, the : Integer3x4) : Integer2x4 Multiply : integer2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer2x4| | |the|integer4| | function Multiply(by : Integer2x4, the : Integer4) : Integer2 Multiply : integer2x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer2x4| | |the|integer4x2| | function Multiply(by : Integer2x4, the : Integer4x2) : Integer2x2 Multiply : integer2x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer2x4| | |the|integer4x3| | function Multiply(by : Integer2x4, the : Integer4x3) : Integer2x3 Multiply : integer2x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer2x4| | |the|integer4x4| | function Multiply(by : Integer2x4, the : Integer4x4) : Integer2x4 Multiply : integer3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer3x2| | |the|integer2| | function Multiply(by : Integer3x2, the : Integer2) : Integer3 Multiply : integer3x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer3x2| | |the|integer2x2| | function Multiply(by : Integer3x2, the : Integer2x2) : Integer3x2 Multiply : integer3x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer3x2| | |the|integer2x3| | function Multiply(by : Integer3x2, the : Integer2x3) : Integer3x3 Multiply : integer3x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer3x2| | |the|integer2x4| | function Multiply(by : Integer3x2, the : Integer2x4) : Integer3x4 Multiply : integer3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer3x3| | |the|integer3| | function Multiply(by : Integer3x3, the : Integer3) : Integer3 Multiply : integer3x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer3x3| | |the|integer3x2| | function Multiply(by : Integer3x3, the : Integer3x2) : Integer3x2 Multiply : integer3x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer3x3| | |the|integer3x3| | function Multiply(by : Integer3x3, the : Integer3x3) : Integer3x3 Multiply : integer3x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer3x3| | |the|integer3x4| | function Multiply(by : Integer3x3, the : Integer3x4) : Integer3x4 Multiply : integer3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer3x4| | |the|integer4| | function Multiply(by : Integer3x4, the : Integer4) : Integer3 Multiply : integer3x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer3x4| | |the|integer4x2| | function Multiply(by : Integer3x4, the : Integer4x2) : Integer3x2 Multiply : integer3x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer3x4| | |the|integer4x3| | function Multiply(by : Integer3x4, the : Integer4x3) : Integer3x3 Multiply : integer3x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer3x4| | |the|integer4x4| | function Multiply(by : Integer3x4, the : Integer4x4) : Integer3x4 Multiply : integer4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer4x2| | |the|integer2| | function Multiply(by : Integer4x2, the : Integer2) : Integer4 Multiply : integer4x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer4x2| | |the|integer2x2| | function Multiply(by : Integer4x2, the : Integer2x2) : Integer4x2 Multiply : integer4x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer4x2| | |the|integer2x3| | function Multiply(by : Integer4x2, the : Integer2x3) : Integer4x3 Multiply : integer4x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer4x2| | |the|integer2x4| | function Multiply(by : Integer4x2, the : Integer2x4) : Integer4x4 Multiply : integer4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer4x3| | |the|integer3| | function Multiply(by : Integer4x3, the : Integer3) : Integer4 Multiply : integer4x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer4x3| | |the|integer3x2| | function Multiply(by : Integer4x3, the : Integer3x2) : Integer4x2 Multiply : integer4x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer4x3| | |the|integer3x3| | function Multiply(by : Integer4x3, the : Integer3x3) : Integer4x3 Multiply : integer4x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer4x3| | |the|integer3x4| | function Multiply(by : Integer4x3, the : Integer3x4) : Integer4x4 Multiply : integer4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer4x4| | |the|integer4| | function Multiply(by : Integer4x4, the : Integer4) : Integer4 Multiply : integer4x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer4x4| | |the|integer4x2| | function Multiply(by : Integer4x4, the : Integer4x2) : Integer4x2 Multiply : integer4x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer4x4| | |the|integer4x3| | function Multiply(by : Integer4x4, the : Integer4x3) : Integer4x3 Multiply : integer4x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|integer4x4| | |the|integer4x4| | function Multiply(by : Integer4x4, the : Integer4x4) : Integer4x4 Multiply : quaternion static Creates a new rotation that represents rotating by parameter 2 and then parameter 1. |Name|Type|Description| |---|---|---| |by|quaternion| | |the|quaternion| | function Multiply(by : Quaternion, the : Quaternion) : Quaternion Multiply : real3 static Creates a new vector that represents parameter 2 being rotated by parameter 1. |Name|Type|Description| |---|---|---| |by|quaternion| | |the|real3| | function Multiply(by : Quaternion, the : Real3) : Real3 Multiply : real2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real2x2| | |the|real2| | function Multiply(by : Real2x2, the : Real2) : Real2 Multiply : real2x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real2x2| | |the|real2x2| | function Multiply(by : Real2x2, the : Real2x2) : Real2x2 Multiply : real2x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real2x2| | |the|real2x3| | function Multiply(by : Real2x2, the : Real2x3) : Real2x3 Multiply : real2x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real2x2| | |the|real2x4| | function Multiply(by : Real2x2, the : Real2x4) : Real2x4 Multiply : real2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real2x3| | |the|real3| | function Multiply(by : Real2x3, the : Real3) : Real2 Multiply : real2x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real2x3| | |the|real3x2| | function Multiply(by : Real2x3, the : Real3x2) : Real2x2 Multiply : real2x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real2x3| | |the|real3x3| | function Multiply(by : Real2x3, the : Real3x3) : Real2x3 Multiply : real2x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real2x3| | |the|real3x4| | function Multiply(by : Real2x3, the : Real3x4) : Real2x4 Multiply : real2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real2x4| | |the|real4| | function Multiply(by : Real2x4, the : Real4) : Real2 Multiply : real2x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real2x4| | |the|real4x2| | function Multiply(by : Real2x4, the : Real4x2) : Real2x2 Multiply : real2x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real2x4| | |the|real4x3| | function Multiply(by : Real2x4, the : Real4x3) : Real2x3 Multiply : real2x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real2x4| | |the|real4x4| | function Multiply(by : Real2x4, the : Real4x4) : Real2x4 Multiply : real3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real3x2| | |the|real2| | function Multiply(by : Real3x2, the : Real2) : Real3 Multiply : real3x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real3x2| | |the|real2x2| | function Multiply(by : Real3x2, the : Real2x2) : Real3x2 Multiply : real3x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real3x2| | |the|real2x3| | function Multiply(by : Real3x2, the : Real2x3) : Real3x3 Multiply : real3x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real3x2| | |the|real2x4| | function Multiply(by : Real3x2, the : Real2x4) : Real3x4 Multiply : real3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real3x3| | |the|real3| | function Multiply(by : Real3x3, the : Real3) : Real3 Multiply : real3x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real3x3| | |the|real3x2| | function Multiply(by : Real3x3, the : Real3x2) : Real3x2 Multiply : real3x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real3x3| | |the|real3x3| | function Multiply(by : Real3x3, the : Real3x3) : Real3x3 Multiply : real3x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real3x3| | |the|real3x4| | function Multiply(by : Real3x3, the : Real3x4) : Real3x4 Multiply : real3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real3x4| | |the|real4| | function Multiply(by : Real3x4, the : Real4) : Real3 Multiply : real3x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real3x4| | |the|real4x2| | function Multiply(by : Real3x4, the : Real4x2) : Real3x2 Multiply : real3x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real3x4| | |the|real4x3| | function Multiply(by : Real3x4, the : Real4x3) : Real3x3 Multiply : real3x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real3x4| | |the|real4x4| | function Multiply(by : Real3x4, the : Real4x4) : Real3x4 Multiply : real4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real4x2| | |the|real2| | function Multiply(by : Real4x2, the : Real2) : Real4 Multiply : real4x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real4x2| | |the|real2x2| | function Multiply(by : Real4x2, the : Real2x2) : Real4x2 Multiply : real4x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real4x2| | |the|real2x3| | function Multiply(by : Real4x2, the : Real2x3) : Real4x3 Multiply : real4x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real4x2| | |the|real2x4| | function Multiply(by : Real4x2, the : Real2x4) : Real4x4 Multiply : real4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real4x3| | |the|real3| | function Multiply(by : Real4x3, the : Real3) : Real4 Multiply : real4x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real4x3| | |the|real3x2| | function Multiply(by : Real4x3, the : Real3x2) : Real4x2 Multiply : real4x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real4x3| | |the|real3x3| | function Multiply(by : Real4x3, the : Real3x3) : Real4x3 Multiply : real4x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real4x3| | |the|real3x4| | function Multiply(by : Real4x3, the : Real3x4) : Real4x4 Multiply : real4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real4x4| | |the|real4| | function Multiply(by : Real4x4, the : Real4) : Real4 Multiply : real4x2 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real4x4| | |the|real4x2| | function Multiply(by : Real4x4, the : Real4x2) : Real4x2 Multiply : real4x3 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real4x4| | |the|real4x3| | function Multiply(by : Real4x4, the : Real4x3) : Real4x3 Multiply : real4x4 static Multiplies the two matrices together. Matrix multiplication is in right-to-left order, that is if the matrices represent transformations, then 'the' is applied first followed by 'by'. |Name|Type|Description| |---|---|---| |by|real4x4| | |the|real4x4| | function Multiply(by : Real4x4, the : Real4x4) : Real4x4 MultiplyNormal : real static Multiplies the given vector as a vector (0 for the last component) |Name|Type|Description| |---|---|---| |by|real2x2| | |the|real| | function MultiplyNormal(by : Real2x2, the : Real) : Real MultiplyNormal : real2 static Multiplies the given vector as a vector (0 for the last component) |Name|Type|Description| |---|---|---| |by|real3x3| | |the|real2| | function MultiplyNormal(by : Real3x3, the : Real2) : Real2 MultiplyNormal : real3 static Multiplies the given vector as a vector (0 for the last component) |Name|Type|Description| |---|---|---| |by|real4x4| | |the|real3| | function MultiplyNormal(by : Real4x4, the : Real3) : Real3 MultiplyPoint : real static Multiplies the given vector as a point while performing the homogeneous division |Name|Type|Description| |---|---|---| |by|real2x2| | |the|real| | function MultiplyPoint(by : Real2x2, the : Real) : Real MultiplyPoint : real2 static Multiplies the given vector as a point while performing the homogeneous division |Name|Type|Description| |---|---|---| |by|real3x3| | |the|real2| | function MultiplyPoint(by : Real3x3, the : Real2) : Real2 MultiplyPoint : real3 static Multiplies the given vector as a point while performing the homogeneous division |Name|Type|Description| |---|---|---| |by|real4x4| | |the|real3| | function MultiplyPoint(by : Real4x4, the : Real3) : Real3 MultiplyPointNoDivide : real static Multiplies the given vector as a point without performing the homogeneous division |Name|Type|Description| |---|---|---| |by|real2x2| | |the|real| | function MultiplyPointNoDivide(by : Real2x2, the : Real) : Real MultiplyPointNoDivide : real2 static Multiplies the given vector as a point without performing the homogeneous division |Name|Type|Description| |---|---|---| |by|real3x3| | |the|real2| | function MultiplyPointNoDivide(by : Real3x3, the : Real2) : Real2 MultiplyPointNoDivide : real3 static Multiplies the given vector as a point without performing the homogeneous division |Name|Type|Description| |---|---|---| |by|real4x4| | |the|real3| | function MultiplyPointNoDivide(by : Real4x4, the : Real3) : Real3 Normalize : quaternion static Returns a unit quaternion that represents a pure rotation. |Name|Type|Description| |---|---|---| |p0|quaternion| | function Normalize(p0 : Quaternion) : Quaternion Normalize : real2 static Returns a vector that points in the same direction but has a length of 1. |Name|Type|Description| |---|---|---| |p0|real2| | function Normalize(p0 : Real2) : Real2 Normalize : real3 static Returns a vector that points in the same direction but has a length of 1. |Name|Type|Description| |---|---|---| |p0|real3| | function Normalize(p0 : Real3) : Real3 Normalize : real4 static Returns a vector that points in the same direction but has a length of 1. |Name|Type|Description| |---|---|---| |p0|real4| | function Normalize(p0 : Real4) : Real4 Pow : real static Returns base raised to the power of the exponent. |Name|Type|Description| |---|---|---| |base|real| | |exponent|real| | function Pow(base : Real, exponent : Real) : Real Pow : real2 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base|real2| | |exponent|real2| | function Pow(base : Real2, exponent : Real2) : Real2 Pow : real2x2 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base|real2x2| | |exponent|real2x2| | function Pow(base : Real2x2, exponent : Real2x2) : Real2x2 Pow : real2x3 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base|real2x3| | |exponent|real2x3| | function Pow(base : Real2x3, exponent : Real2x3) : Real2x3 Pow : real2x4 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base|real2x4| | |exponent|real2x4| | function Pow(base : Real2x4, exponent : Real2x4) : Real2x4 Pow : real3 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base|real3| | |exponent|real3| | function Pow(base : Real3, exponent : Real3) : Real3 Pow : real3x2 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base|real3x2| | |exponent|real3x2| | function Pow(base : Real3x2, exponent : Real3x2) : Real3x2 Pow : real3x3 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base|real3x3| | |exponent|real3x3| | function Pow(base : Real3x3, exponent : Real3x3) : Real3x3 Pow : real3x4 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base|real3x4| | |exponent|real3x4| | function Pow(base : Real3x4, exponent : Real3x4) : Real3x4 Pow : real4 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base|real4| | |exponent|real4| | function Pow(base : Real4, exponent : Real4) : Real4 Pow : real4x2 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base|real4x2| | |exponent|real4x2| | function Pow(base : Real4x2, exponent : Real4x2) : Real4x2 Pow : real4x3 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base|real4x3| | |exponent|real4x3| | function Pow(base : Real4x3, exponent : Real4x3) : Real4x3 Pow : real4x4 static Returns base raised to the power of the exponent. Performed component-wise. |Name|Type|Description| |---|---|---| |base|real4x4| | |exponent|real4x4| | function Pow(base : Real4x4, exponent : Real4x4) : Real4x4 Project : real3 static Projects the input vector onto the given normalized vector. Note: This function is legacy. Instead call ProjectOnVector. |Name|Type|Description| |---|---|---| |toBeProjected|real3| | |normalizedVector|real3| | function Project(toBeProjected : Real3, normalizedVector : Real3) : Real3 ProjectOnPlane : real2 static Projects the input vector onto plane defined by the given normal. |Name|Type|Description| |---|---|---| |toBeProjected|real2| | |planeNormal|real2| | function ProjectOnPlane(toBeProjected : Real2, planeNormal : Real2) : Real2 ProjectOnPlane : real3 static Projects the input vector onto plane defined by the given normal. |Name|Type|Description| |---|---|---| |toBeProjected|real3| | |planeNormal|real3| | function ProjectOnPlane(toBeProjected : Real3, planeNormal : Real3) : Real3 ProjectOnPlane : real4 static Projects the input vector onto plane defined by the given normal. |Name|Type|Description| |---|---|---| |toBeProjected|real4| | |planeNormal|real4| | function ProjectOnPlane(toBeProjected : Real4, planeNormal : Real4) : Real4 ProjectOnVector : real2 static Projects the input vector onto the given normalized vector. |Name|Type|Description| |---|---|---| |toBeProjected|real2| | |normalizedVector|real2| | function ProjectOnVector(toBeProjected : Real2, normalizedVector : Real2) : Real2 ProjectOnVector : real3 static Projects the input vector onto the given normalized vector. |Name|Type|Description| |---|---|---| |toBeProjected|real3| | |normalizedVector|real3| | function ProjectOnVector(toBeProjected : Real3, normalizedVector : Real3) : Real3 ProjectOnVector : real4 static Projects the input vector onto the given normalized vector. |Name|Type|Description| |---|---|---| |toBeProjected|real4| | |normalizedVector|real4| | function ProjectOnVector(toBeProjected : Real4, normalizedVector : Real4) : Real4 ReflectAcrossPlane : real2 static Reflects the input vector across the plane defined by the given normal. |Name|Type|Description| |---|---|---| |toBeReflected|real2| | |planeNormal|real2| | function ReflectAcrossPlane(toBeReflected : Real2, planeNormal : Real2) : Real2 ReflectAcrossPlane : real3 static Reflects the input vector across the plane defined by the given normal. |Name|Type|Description| |---|---|---| |toBeReflected|real3| | |planeNormal|real3| | function ReflectAcrossPlane(toBeReflected : Real3, planeNormal : Real3) : Real3 ReflectAcrossPlane : real4 static Reflects the input vector across the plane defined by the given normal. |Name|Type|Description| |---|---|---| |toBeReflected|real4| | |planeNormal|real4| | function ReflectAcrossPlane(toBeReflected : Real4, planeNormal : Real4) : Real4 ReflectAcrossVector : real2 static Reflects the input vector across the given vector. |Name|Type|Description| |---|---|---| |toBeReflected|real2| | |vector|real2| | function ReflectAcrossVector(toBeReflected : Real2, vector : Real2) : Real2 ReflectAcrossVector : real3 static Reflects the input vector across the given vector. |Name|Type|Description| |---|---|---| |toBeReflected|real3| | |vector|real3| | function ReflectAcrossVector(toBeReflected : Real3, vector : Real3) : Real3 ReflectAcrossVector : real4 static Reflects the input vector across the given vector. |Name|Type|Description| |---|---|---| |toBeReflected|real4| | |vector|real4| | function ReflectAcrossVector(toBeReflected : Real4, vector : Real4) : Real4 Refract : real2 static Calculates the refraction vector through a plane given a certain index of refraction. |Name|Type|Description| |---|---|---| |toBeRefracted|real2| | |planeNormal|real2| | |refractionIndex|real| | function Refract(toBeRefracted : Real2, planeNormal : Real2, refractionIndex : Real) : Real2 Refract : real3 static Calculates the refraction vector through a plane given a certain index of refraction. |Name|Type|Description| |---|---|---| |toBeRefracted|real3| | |planeNormal|real3| | |refractionIndex|real| | function Refract(toBeRefracted : Real3, planeNormal : Real3, refractionIndex : Real) : Real3 Refract : real4 static Calculates the refraction vector through a plane given a certain index of refraction. |Name|Type|Description| |---|---|---| |toBeRefracted|real4| | |planeNormal|real4| | |refractionIndex|real| | function Refract(toBeRefracted : Real4, planeNormal : Real4, refractionIndex : Real) : Real4 RotateTowards : quaternion static Rotate a quaternion towards another quaternion changing at most maxRadians. |Name|Type|Description| |---|---|---| |p0|quaternion| | |p1|quaternion| | |maxRadians|real| | function RotateTowards(p0 : Quaternion, p1 : Quaternion, maxRadians : Real) : Quaternion RotateTowards : real2 static Rotate a vector towards another vector changing at most maxRadians. |Name|Type|Description| |---|---|---| |p0|real2| | |p1|real2| | |maxRadians|real| | function RotateTowards(p0 : Real2, p1 : Real2, maxRadians : Real) : Real2 RotateTowards : real3 static Rotate a vector towards another vector changing at most maxRadians. |Name|Type|Description| |---|---|---| |p0|real3| | |p1|real3| | |maxRadians|real| | function RotateTowards(p0 : Real3, p1 : Real3, maxRadians : Real) : Real3 RotateVector : real3 static Rotate a vector about an axis by the given radians. |Name|Type|Description| |---|---|---| |vector|real3| | |axis|real3| | |radians|real| | function RotateVector(vector : Real3, axis : Real3, radians : Real) : Real3 RotationQuaternionBetween : quaternion static Generates the quaternion that rotates from parameter 1 to parameter 2. |Name|Type|Description| |---|---|---| |start|real3| | |end|real3| | function RotationQuaternionBetween(start : Real3, end : Real3) : Quaternion Round : real static Returns the integer value closest to value. |Name|Type|Description| |---|---|---| |p0|real| | function Round(p0 : Real) : Real Round : real static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). |Name|Type|Description| |---|---|---| |value|real| | |places|integer| | function Round(value : Real, places : Integer) : Real Round : real static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). |Name|Type|Description| |---|---|---| |value|real| | |places|integer| | |numericalBase|integer| | function Round(value : Real, places : Integer, numericalBase : Integer) : Real Round : real2 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | function Round(p0 : Real2) : Real2 Round : real2 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2| | |places|integer| | function Round(value : Real2, places : Integer) : Real2 Round : real2 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2| | |places|integer| | |numericalBase|integer| | function Round(value : Real2, places : Integer, numericalBase : Integer) : Real2 Round : real2x2 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | function Round(p0 : Real2x2) : Real2x2 Round : real2x2 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x2| | |places|integer| | function Round(value : Real2x2, places : Integer) : Real2x2 Round : real2x2 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x2| | |places|integer| | |numericalBase|integer| | function Round(value : Real2x2, places : Integer, numericalBase : Integer) : Real2x2 Round : real2x3 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | function Round(p0 : Real2x3) : Real2x3 Round : real2x3 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x3| | |places|integer| | function Round(value : Real2x3, places : Integer) : Real2x3 Round : real2x3 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x3| | |places|integer| | |numericalBase|integer| | function Round(value : Real2x3, places : Integer, numericalBase : Integer) : Real2x3 Round : real2x4 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | function Round(p0 : Real2x4) : Real2x4 Round : real2x4 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x4| | |places|integer| | function Round(value : Real2x4, places : Integer) : Real2x4 Round : real2x4 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x4| | |places|integer| | |numericalBase|integer| | function Round(value : Real2x4, places : Integer, numericalBase : Integer) : Real2x4 Round : real3 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | function Round(p0 : Real3) : Real3 Round : real3 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3| | |places|integer| | function Round(value : Real3, places : Integer) : Real3 Round : real3 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3| | |places|integer| | |numericalBase|integer| | function Round(value : Real3, places : Integer, numericalBase : Integer) : Real3 Round : real3x2 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | function Round(p0 : Real3x2) : Real3x2 Round : real3x2 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x2| | |places|integer| | function Round(value : Real3x2, places : Integer) : Real3x2 Round : real3x2 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x2| | |places|integer| | |numericalBase|integer| | function Round(value : Real3x2, places : Integer, numericalBase : Integer) : Real3x2 Round : real3x3 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | function Round(p0 : Real3x3) : Real3x3 Round : real3x3 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x3| | |places|integer| | function Round(value : Real3x3, places : Integer) : Real3x3 Round : real3x3 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x3| | |places|integer| | |numericalBase|integer| | function Round(value : Real3x3, places : Integer, numericalBase : Integer) : Real3x3 Round : real3x4 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | function Round(p0 : Real3x4) : Real3x4 Round : real3x4 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x4| | |places|integer| | function Round(value : Real3x4, places : Integer) : Real3x4 Round : real3x4 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x4| | |places|integer| | |numericalBase|integer| | function Round(value : Real3x4, places : Integer, numericalBase : Integer) : Real3x4 Round : real4 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | function Round(p0 : Real4) : Real4 Round : real4 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4| | |places|integer| | function Round(value : Real4, places : Integer) : Real4 Round : real4 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4| | |places|integer| | |numericalBase|integer| | function Round(value : Real4, places : Integer, numericalBase : Integer) : Real4 Round : real4x2 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | function Round(p0 : Real4x2) : Real4x2 Round : real4x2 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x2| | |places|integer| | function Round(value : Real4x2, places : Integer) : Real4x2 Round : real4x2 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x2| | |places|integer| | |numericalBase|integer| | function Round(value : Real4x2, places : Integer, numericalBase : Integer) : Real4x2 Round : real4x3 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | function Round(p0 : Real4x3) : Real4x3 Round : real4x3 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x3| | |places|integer| | function Round(value : Real4x3, places : Integer) : Real4x3 Round : real4x3 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x3| | |places|integer| | |numericalBase|integer| | function Round(value : Real4x3, places : Integer, numericalBase : Integer) : Real4x3 Round : real4x4 static Returns the integer value closest to value. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | function Round(p0 : Real4x4) : Real4x4 Round : real4x4 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x4| | |places|integer| | function Round(value : Real4x4, places : Integer) : Real4x4 Round : real4x4 static Returns the integer value closest to value. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x4| | |places|integer| | |numericalBase|integer| | function Round(value : Real4x4, places : Integer, numericalBase : Integer) : Real4x4 RSqrt : real static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. |Name|Type|Description| |---|---|---| |p0|real| | function RSqrt(p0 : Real) : Real RSqrt : real2 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | function RSqrt(p0 : Real2) : Real2 RSqrt : real2x2 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | function RSqrt(p0 : Real2x2) : Real2x2 RSqrt : real2x3 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | function RSqrt(p0 : Real2x3) : Real2x3 RSqrt : real2x4 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | function RSqrt(p0 : Real2x4) : Real2x4 RSqrt : real3 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | function RSqrt(p0 : Real3) : Real3 RSqrt : real3x2 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | function RSqrt(p0 : Real3x2) : Real3x2 RSqrt : real3x3 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | function RSqrt(p0 : Real3x3) : Real3x3 RSqrt : real3x4 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | function RSqrt(p0 : Real3x4) : Real3x4 RSqrt : real4 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | function RSqrt(p0 : Real4) : Real4 RSqrt : real4x2 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | function RSqrt(p0 : Real4x2) : Real4x2 RSqrt : real4x3 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | function RSqrt(p0 : Real4x3) : Real4x3 RSqrt : real4x4 static Reciprocal square root approximation. Used for efficiency when higher accuracy is not need. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | function RSqrt(p0 : Real4x4) : Real4x4 Saturate : real static Limits the value between 0 and 1 |Name|Type|Description| |---|---|---| |p0|real| | function Saturate(p0 : Real) : Real Saturate : real2 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | function Saturate(p0 : Real2) : Real2 Saturate : real2x2 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | function Saturate(p0 : Real2x2) : Real2x2 Saturate : real2x3 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | function Saturate(p0 : Real2x3) : Real2x3 Saturate : real2x4 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | function Saturate(p0 : Real2x4) : Real2x4 Saturate : real3 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | function Saturate(p0 : Real3) : Real3 Saturate : real3x2 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | function Saturate(p0 : Real3x2) : Real3x2 Saturate : real3x3 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | function Saturate(p0 : Real3x3) : Real3x3 Saturate : real3x4 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | function Saturate(p0 : Real3x4) : Real3x4 Saturate : real4 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | function Saturate(p0 : Real4) : Real4 Saturate : real4x2 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | function Saturate(p0 : Real4x2) : Real4x2 Saturate : real4x3 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | function Saturate(p0 : Real4x3) : Real4x3 Saturate : real4x4 static Limits the value between 0 and 1 Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | function Saturate(p0 : Real4x4) : Real4x4 Sign : integer static Returns the sign of the value as either 1 or -1. |Name|Type|Description| |---|---|---| |p0|integer| | function Sign(p0 : Integer) : Integer Sign : integer2 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2| | function Sign(p0 : Integer2) : Integer2 Sign : integer2x2 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2x2| | function Sign(p0 : Integer2x2) : Integer2x2 Sign : integer2x3 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2x3| | function Sign(p0 : Integer2x3) : Integer2x3 Sign : integer2x4 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer2x4| | function Sign(p0 : Integer2x4) : Integer2x4 Sign : integer3 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3| | function Sign(p0 : Integer3) : Integer3 Sign : integer3x2 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3x2| | function Sign(p0 : Integer3x2) : Integer3x2 Sign : integer3x3 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3x3| | function Sign(p0 : Integer3x3) : Integer3x3 Sign : integer3x4 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer3x4| | function Sign(p0 : Integer3x4) : Integer3x4 Sign : integer4 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4| | function Sign(p0 : Integer4) : Integer4 Sign : integer4x2 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4x2| | function Sign(p0 : Integer4x2) : Integer4x2 Sign : integer4x3 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4x3| | function Sign(p0 : Integer4x3) : Integer4x3 Sign : integer4x4 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|integer4x4| | function Sign(p0 : Integer4x4) : Integer4x4 Sign : integer static Returns the sign of the value as either 1 or -1. |Name|Type|Description| |---|---|---| |p0|real| | function Sign(p0 : Real) : Integer Sign : integer2 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | function Sign(p0 : Real2) : Integer2 Sign : integer2x2 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | function Sign(p0 : Real2x2) : Integer2x2 Sign : integer2x3 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | function Sign(p0 : Real2x3) : Integer2x3 Sign : integer2x4 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | function Sign(p0 : Real2x4) : Integer2x4 Sign : integer3 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | function Sign(p0 : Real3) : Integer3 Sign : integer3x2 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | function Sign(p0 : Real3x2) : Integer3x2 Sign : integer3x3 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | function Sign(p0 : Real3x3) : Integer3x3 Sign : integer3x4 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | function Sign(p0 : Real3x4) : Integer3x4 Sign : integer4 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | function Sign(p0 : Real4) : Integer4 Sign : integer4x2 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | function Sign(p0 : Real4x2) : Integer4x2 Sign : integer4x3 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | function Sign(p0 : Real4x3) : Integer4x3 Sign : integer4x4 static Returns the sign of the value as either 1 or -1. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | function Sign(p0 : Real4x4) : Integer4x4 SignedAngle : real static Get the rotation angle between two vectors in radians. |Name|Type|Description| |---|---|---| |p0|real3| | |p1|real3| | |up|real3| | function SignedAngle(p0 : Real3, p1 : Real3, up : Real3) : Real Sin : real static The transcendental function sine. |Name|Type|Description| |---|---|---| |radians|real| | function Sin(radians : Real) : Real Sin : real2 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2| | function Sin(radians : Real2) : Real2 Sin : real2x2 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x2| | function Sin(radians : Real2x2) : Real2x2 Sin : real2x3 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x3| | function Sin(radians : Real2x3) : Real2x3 Sin : real2x4 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x4| | function Sin(radians : Real2x4) : Real2x4 Sin : real3 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3| | function Sin(radians : Real3) : Real3 Sin : real3x2 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x2| | function Sin(radians : Real3x2) : Real3x2 Sin : real3x3 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x3| | function Sin(radians : Real3x3) : Real3x3 Sin : real3x4 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x4| | function Sin(radians : Real3x4) : Real3x4 Sin : real4 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4| | function Sin(radians : Real4) : Real4 Sin : real4x2 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x2| | function Sin(radians : Real4x2) : Real4x2 Sin : real4x3 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x3| | function Sin(radians : Real4x3) : Real4x3 Sin : real4x4 static The transcendental function sine. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x4| | function Sin(radians : Real4x4) : Real4x4 Sinh : real static The hyperbolic sine function. |Name|Type|Description| |---|---|---| |radians|real| | function Sinh(radians : Real) : Real Sinh : real2 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2| | function Sinh(radians : Real2) : Real2 Sinh : real2x2 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x2| | function Sinh(radians : Real2x2) : Real2x2 Sinh : real2x3 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x3| | function Sinh(radians : Real2x3) : Real2x3 Sinh : real2x4 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x4| | function Sinh(radians : Real2x4) : Real2x4 Sinh : real3 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3| | function Sinh(radians : Real3) : Real3 Sinh : real3x2 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x2| | function Sinh(radians : Real3x2) : Real3x2 Sinh : real3x3 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x3| | function Sinh(radians : Real3x3) : Real3x3 Sinh : real3x4 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x4| | function Sinh(radians : Real3x4) : Real3x4 Sinh : real4 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4| | function Sinh(radians : Real4) : Real4 Sinh : real4x2 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x2| | function Sinh(radians : Real4x2) : Real4x2 Sinh : real4x3 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x3| | function Sinh(radians : Real4x3) : Real4x3 Sinh : real4x4 static The hyperbolic sine function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x4| | function Sinh(radians : Real4x4) : Real4x4 Slerp : quaternion static Spherical linear interpolation. Used to interpolate between two rotations by the parameter t. |Name|Type|Description| |---|---|---| |start|quaternion| | |end|quaternion| | |t|real| | function Slerp(start : Quaternion, end : Quaternion, t : Real) : Quaternion Slerp : real2 static Spherical linear interpolation. Used to interpolate between two vectors by the parameter t. |Name|Type|Description| |---|---|---| |start|real2| | |end|real2| | |t|real| | function Slerp(start : Real2, end : Real2, t : Real) : Real2 Slerp : real3 static Spherical linear interpolation. Used to interpolate between two vectors by the parameter t. |Name|Type|Description| |---|---|---| |start|real3| | |end|real3| | |t|real| | function Slerp(start : Real3, end : Real3, t : Real) : Real3 SlerpUnnormalized : real2 static Spherical linear interpolation. Used to interpolate between two vectors by the parameter t. This is the 'pure' mathematical Slerp function that works on un-normalized input. This effectively traces along an ellipse defined by the two input vectors. |Name|Type|Description| |---|---|---| |start|real2| | |end|real2| | |t|real| | function SlerpUnnormalized(start : Real2, end : Real2, t : Real) : Real2 SlerpUnnormalized : real3 static Spherical linear interpolation. Used to interpolate between two vectors by the parameter t. This is the 'pure' mathematical Slerp function that works on un-normalized input. This effectively traces along an ellipse defined by the two input vectors. |Name|Type|Description| |---|---|---| |start|real3| | |end|real3| | |t|real| | function SlerpUnnormalized(start : Real3, end : Real3, t : Real) : Real3 SmoothStep : real static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. |Name|Type|Description| |---|---|---| |min|real| | |max|real| | |x|real| | function SmoothStep(min : Real, max : Real, x : Real) : Real SmoothStep : real2 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real2| | |max|real2| | |t|real| | function SmoothStep(min : Real2, max : Real2, t : Real) : Real2 SmoothStep : real2 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real2| | |max|real2| | |x|real2| | function SmoothStep(min : Real2, max : Real2, x : Real2) : Real2 SmoothStep : real2x2 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real2x2| | |max|real2x2| | |t|real| | function SmoothStep(min : Real2x2, max : Real2x2, t : Real) : Real2x2 SmoothStep : real2x2 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real2x2| | |max|real2x2| | |x|real2x2| | function SmoothStep(min : Real2x2, max : Real2x2, x : Real2x2) : Real2x2 SmoothStep : real2x3 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real2x3| | |max|real2x3| | |t|real| | function SmoothStep(min : Real2x3, max : Real2x3, t : Real) : Real2x3 SmoothStep : real2x3 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real2x3| | |max|real2x3| | |x|real2x3| | function SmoothStep(min : Real2x3, max : Real2x3, x : Real2x3) : Real2x3 SmoothStep : real2x4 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real2x4| | |max|real2x4| | |t|real| | function SmoothStep(min : Real2x4, max : Real2x4, t : Real) : Real2x4 SmoothStep : real2x4 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real2x4| | |max|real2x4| | |x|real2x4| | function SmoothStep(min : Real2x4, max : Real2x4, x : Real2x4) : Real2x4 SmoothStep : real3 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real3| | |max|real3| | |t|real| | function SmoothStep(min : Real3, max : Real3, t : Real) : Real3 SmoothStep : real3 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real3| | |max|real3| | |x|real3| | function SmoothStep(min : Real3, max : Real3, x : Real3) : Real3 SmoothStep : real3x2 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real3x2| | |max|real3x2| | |t|real| | function SmoothStep(min : Real3x2, max : Real3x2, t : Real) : Real3x2 SmoothStep : real3x2 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real3x2| | |max|real3x2| | |x|real3x2| | function SmoothStep(min : Real3x2, max : Real3x2, x : Real3x2) : Real3x2 SmoothStep : real3x3 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real3x3| | |max|real3x3| | |t|real| | function SmoothStep(min : Real3x3, max : Real3x3, t : Real) : Real3x3 SmoothStep : real3x3 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real3x3| | |max|real3x3| | |x|real3x3| | function SmoothStep(min : Real3x3, max : Real3x3, x : Real3x3) : Real3x3 SmoothStep : real3x4 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real3x4| | |max|real3x4| | |t|real| | function SmoothStep(min : Real3x4, max : Real3x4, t : Real) : Real3x4 SmoothStep : real3x4 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real3x4| | |max|real3x4| | |x|real3x4| | function SmoothStep(min : Real3x4, max : Real3x4, x : Real3x4) : Real3x4 SmoothStep : real4 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real4| | |max|real4| | |t|real| | function SmoothStep(min : Real4, max : Real4, t : Real) : Real4 SmoothStep : real4 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real4| | |max|real4| | |x|real4| | function SmoothStep(min : Real4, max : Real4, x : Real4) : Real4 SmoothStep : real4x2 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real4x2| | |max|real4x2| | |t|real| | function SmoothStep(min : Real4x2, max : Real4x2, t : Real) : Real4x2 SmoothStep : real4x2 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real4x2| | |max|real4x2| | |x|real4x2| | function SmoothStep(min : Real4x2, max : Real4x2, x : Real4x2) : Real4x2 SmoothStep : real4x3 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real4x3| | |max|real4x3| | |t|real| | function SmoothStep(min : Real4x3, max : Real4x3, t : Real) : Real4x3 SmoothStep : real4x3 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real4x3| | |max|real4x3| | |x|real4x3| | function SmoothStep(min : Real4x3, max : Real4x3, x : Real4x3) : Real4x3 SmoothStep : real4x4 static Returns a smooth Hermite interpolation between 0 and 1 if t is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real4x4| | |max|real4x4| | |t|real| | function SmoothStep(min : Real4x4, max : Real4x4, t : Real) : Real4x4 SmoothStep : real4x4 static Returns a smooth Hermite interpolation between 0 and 1 if x is in-between min and max. Performed component-wise. |Name|Type|Description| |---|---|---| |min|real4x4| | |max|real4x4| | |x|real4x4| | function SmoothStep(min : Real4x4, max : Real4x4, x : Real4x4) : Real4x4 Sqrt : real static Computes the square root |Name|Type|Description| |---|---|---| |p0|real| | function Sqrt(p0 : Real) : Real Sqrt : real2 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | function Sqrt(p0 : Real2) : Real2 Sqrt : real2x2 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | function Sqrt(p0 : Real2x2) : Real2x2 Sqrt : real2x3 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | function Sqrt(p0 : Real2x3) : Real2x3 Sqrt : real2x4 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | function Sqrt(p0 : Real2x4) : Real2x4 Sqrt : real3 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | function Sqrt(p0 : Real3) : Real3 Sqrt : real3x2 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | function Sqrt(p0 : Real3x2) : Real3x2 Sqrt : real3x3 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | function Sqrt(p0 : Real3x3) : Real3x3 Sqrt : real3x4 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | function Sqrt(p0 : Real3x4) : Real3x4 Sqrt : real4 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | function Sqrt(p0 : Real4) : Real4 Sqrt : real4x2 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | function Sqrt(p0 : Real4x2) : Real4x2 Sqrt : real4x3 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | function Sqrt(p0 : Real4x3) : Real4x3 Sqrt : real4x4 static Computes the square root Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | function Sqrt(p0 : Real4x4) : Real4x4 Step : real static If y <= x then 1 is returned, otherwise 0 is returned. |Name|Type|Description| |---|---|---| |y|real| | |x|real| | function Step(y : Real, x : Real) : Real Step : real2 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real2| | |x|real2| | function Step(y : Real2, x : Real2) : Real2 Step : real2x2 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real2x2| | |x|real2x2| | function Step(y : Real2x2, x : Real2x2) : Real2x2 Step : real2x3 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real2x3| | |x|real2x3| | function Step(y : Real2x3, x : Real2x3) : Real2x3 Step : real2x4 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real2x4| | |x|real2x4| | function Step(y : Real2x4, x : Real2x4) : Real2x4 Step : real3 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real3| | |x|real3| | function Step(y : Real3, x : Real3) : Real3 Step : real3x2 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real3x2| | |x|real3x2| | function Step(y : Real3x2, x : Real3x2) : Real3x2 Step : real3x3 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real3x3| | |x|real3x3| | function Step(y : Real3x3, x : Real3x3) : Real3x3 Step : real3x4 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real3x4| | |x|real3x4| | function Step(y : Real3x4, x : Real3x4) : Real3x4 Step : real4 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real4| | |x|real4| | function Step(y : Real4, x : Real4) : Real4 Step : real4x2 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real4x2| | |x|real4x2| | function Step(y : Real4x2, x : Real4x2) : Real4x2 Step : real4x3 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real4x3| | |x|real4x3| | function Step(y : Real4x3, x : Real4x3) : Real4x3 Step : real4x4 static If y <= x then 1 is returned, otherwise 0 is returned. Performed component-wise. |Name|Type|Description| |---|---|---| |y|real4x4| | |x|real4x4| | function Step(y : Real4x4, x : Real4x4) : Real4x4 Tan : real static The transcendental function tangent. |Name|Type|Description| |---|---|---| |radians|real| | function Tan(radians : Real) : Real Tan : real2 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2| | function Tan(radians : Real2) : Real2 Tan : real2x2 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x2| | function Tan(radians : Real2x2) : Real2x2 Tan : real2x3 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x3| | function Tan(radians : Real2x3) : Real2x3 Tan : real2x4 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x4| | function Tan(radians : Real2x4) : Real2x4 Tan : real3 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3| | function Tan(radians : Real3) : Real3 Tan : real3x2 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x2| | function Tan(radians : Real3x2) : Real3x2 Tan : real3x3 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x3| | function Tan(radians : Real3x3) : Real3x3 Tan : real3x4 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x4| | function Tan(radians : Real3x4) : Real3x4 Tan : real4 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4| | function Tan(radians : Real4) : Real4 Tan : real4x2 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x2| | function Tan(radians : Real4x2) : Real4x2 Tan : real4x3 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x3| | function Tan(radians : Real4x3) : Real4x3 Tan : real4x4 static The transcendental function tangent. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x4| | function Tan(radians : Real4x4) : Real4x4 Tanh : real static The hyperbolic tangent function. |Name|Type|Description| |---|---|---| |radians|real| | function Tanh(radians : Real) : Real Tanh : real2 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2| | function Tanh(radians : Real2) : Real2 Tanh : real2x2 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x2| | function Tanh(radians : Real2x2) : Real2x2 Tanh : real2x3 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x3| | function Tanh(radians : Real2x3) : Real2x3 Tanh : real2x4 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x4| | function Tanh(radians : Real2x4) : Real2x4 Tanh : real3 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3| | function Tanh(radians : Real3) : Real3 Tanh : real3x2 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x2| | function Tanh(radians : Real3x2) : Real3x2 Tanh : real3x3 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x3| | function Tanh(radians : Real3x3) : Real3x3 Tanh : real3x4 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x4| | function Tanh(radians : Real3x4) : Real3x4 Tanh : real4 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4| | function Tanh(radians : Real4) : Real4 Tanh : real4x2 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x2| | function Tanh(radians : Real4x2) : Real4x2 Tanh : real4x3 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x3| | function Tanh(radians : Real4x3) : Real4x3 Tanh : real4x4 static The hyperbolic tangent function. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x4| | function Tanh(radians : Real4x4) : Real4x4 ToDegrees : real static Converts the given radians to degrees. |Name|Type|Description| |---|---|---| |radians|real| | function ToDegrees(radians : Real) : Real ToDegrees : real2 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2| | function ToDegrees(radians : Real2) : Real2 ToDegrees : real2x2 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x2| | function ToDegrees(radians : Real2x2) : Real2x2 ToDegrees : real2x3 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x3| | function ToDegrees(radians : Real2x3) : Real2x3 ToDegrees : real2x4 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real2x4| | function ToDegrees(radians : Real2x4) : Real2x4 ToDegrees : real3 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3| | function ToDegrees(radians : Real3) : Real3 ToDegrees : real3x2 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x2| | function ToDegrees(radians : Real3x2) : Real3x2 ToDegrees : real3x3 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x3| | function ToDegrees(radians : Real3x3) : Real3x3 ToDegrees : real3x4 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real3x4| | function ToDegrees(radians : Real3x4) : Real3x4 ToDegrees : real4 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4| | function ToDegrees(radians : Real4) : Real4 ToDegrees : real4x2 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x2| | function ToDegrees(radians : Real4x2) : Real4x2 ToDegrees : real4x3 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x3| | function ToDegrees(radians : Real4x3) : Real4x3 ToDegrees : real4x4 static Converts the given radians to degrees. Performed component-wise. |Name|Type|Description| |---|---|---| |radians|real4x4| | function ToDegrees(radians : Real4x4) : Real4x4 ToQuaternion : quaternion static Generates the orientation from the given Euler angles. |Name|Type|Description| |---|---|---| |xRadians|real| | |yRadians|real| | |zRadians|real| | function ToQuaternion(xRadians : Real, yRadians : Real, zRadians : Real) : Quaternion ToQuaternion : quaternion static Generates the orientation from the given Euler angle vector |Name|Type|Description| |---|---|---| |eulerRadians|real3| | function ToQuaternion(eulerRadians : Real3) : Quaternion ToQuaternion : quaternion static Generates the quaternion that rotates about the axis vector by the given radians. |Name|Type|Description| |---|---|---| |axis|real3| | |radians|real| | function ToQuaternion(axis : Real3, radians : Real) : Quaternion ToQuaternion : quaternion static Generates the orientation represented by the given facing and up vectors. |Name|Type|Description| |---|---|---| |facing|real3| | |up|real3| | function ToQuaternion(facing : Real3, up : Real3) : Quaternion ToQuaternion : quaternion static Generates the orientation represented by the given facing, up, and right vectors. |Name|Type|Description| |---|---|---| |facing|real3| | |up|real3| | |right|real3| | function ToQuaternion(facing : Real3, up : Real3, right : Real3) : Quaternion ToQuaternion : quaternion static Converts a rotation matrix into a quaternion. |Name|Type|Description| |---|---|---| |rotationMatrix|real3x3| | function ToQuaternion(rotationMatrix : Real3x3) : Quaternion ToRadians : real static Converts the given degrees to radians. |Name|Type|Description| |---|---|---| |degrees|real| | function ToRadians(degrees : Real) : Real ToRadians : real2 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees|real2| | function ToRadians(degrees : Real2) : Real2 ToRadians : real2x2 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees|real2x2| | function ToRadians(degrees : Real2x2) : Real2x2 ToRadians : real2x3 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees|real2x3| | function ToRadians(degrees : Real2x3) : Real2x3 ToRadians : real2x4 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees|real2x4| | function ToRadians(degrees : Real2x4) : Real2x4 ToRadians : real3 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees|real3| | function ToRadians(degrees : Real3) : Real3 ToRadians : real3x2 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees|real3x2| | function ToRadians(degrees : Real3x2) : Real3x2 ToRadians : real3x3 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees|real3x3| | function ToRadians(degrees : Real3x3) : Real3x3 ToRadians : real3x4 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees|real3x4| | function ToRadians(degrees : Real3x4) : Real3x4 ToRadians : real4 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees|real4| | function ToRadians(degrees : Real4) : Real4 ToRadians : real4x2 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees|real4x2| | function ToRadians(degrees : Real4x2) : Real4x2 ToRadians : real4x3 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees|real4x3| | function ToRadians(degrees : Real4x3) : Real4x3 ToRadians : real4x4 static Converts the given degrees to radians. Performed component-wise. |Name|Type|Description| |---|---|---| |degrees|real4x4| | function ToRadians(degrees : Real4x4) : Real4x4 ToReal3x3 : real3x3 static Converts a quaternion into a rotation matrix. |Name|Type|Description| |---|---|---| |rotation|quaternion| | function ToReal3x3(rotation : Quaternion) : Real3x3 ToReal3x3 : real3x3 static Generates the orientation from the given Euler angles. |Name|Type|Description| |---|---|---| |xRadians|real| | |yRadians|real| | |zRadians|real| | function ToReal3x3(xRadians : Real, yRadians : Real, zRadians : Real) : Real3x3 ToReal3x3 : real3x3 static Generates the three dimensional rotation matrix that rotates about 'axis' by 'radians'. |Name|Type|Description| |---|---|---| |axis|real3| | |radians|real| | function ToReal3x3(axis : Real3, radians : Real) : Real3x3 ToReal3x3 : real3x3 static Generates the orientation represented by the given facing and up vectors. |Name|Type|Description| |---|---|---| |facing|real3| | |up|real3| | function ToReal3x3(facing : Real3, up : Real3) : Real3x3 ToReal3x3 : real3x3 static Generates the orientation represented by the given facing, up, and right vectors. |Name|Type|Description| |---|---|---| |facing|real3| | |up|real3| | |right|real3| | function ToReal3x3(facing : Real3, up : Real3, right : Real3) : Real3x3 Transpose : boolean2x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|boolean2x2| | function Transpose(p0 : Boolean2x2) : Boolean2x2 Transpose : boolean3x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|boolean2x3| | function Transpose(p0 : Boolean2x3) : Boolean3x2 Transpose : boolean4x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|boolean2x4| | function Transpose(p0 : Boolean2x4) : Boolean4x2 Transpose : boolean2x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|boolean3x2| | function Transpose(p0 : Boolean3x2) : Boolean2x3 Transpose : boolean3x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|boolean3x3| | function Transpose(p0 : Boolean3x3) : Boolean3x3 Transpose : boolean4x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|boolean3x4| | function Transpose(p0 : Boolean3x4) : Boolean4x3 Transpose : boolean2x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|boolean4x2| | function Transpose(p0 : Boolean4x2) : Boolean2x4 Transpose : boolean3x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|boolean4x3| | function Transpose(p0 : Boolean4x3) : Boolean3x4 Transpose : boolean4x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|boolean4x4| | function Transpose(p0 : Boolean4x4) : Boolean4x4 Transpose : integer2x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|integer2x2| | function Transpose(p0 : Integer2x2) : Integer2x2 Transpose : integer3x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|integer2x3| | function Transpose(p0 : Integer2x3) : Integer3x2 Transpose : integer4x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|integer2x4| | function Transpose(p0 : Integer2x4) : Integer4x2 Transpose : integer2x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|integer3x2| | function Transpose(p0 : Integer3x2) : Integer2x3 Transpose : integer3x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|integer3x3| | function Transpose(p0 : Integer3x3) : Integer3x3 Transpose : integer4x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|integer3x4| | function Transpose(p0 : Integer3x4) : Integer4x3 Transpose : integer2x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|integer4x2| | function Transpose(p0 : Integer4x2) : Integer2x4 Transpose : integer3x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|integer4x3| | function Transpose(p0 : Integer4x3) : Integer3x4 Transpose : integer4x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|integer4x4| | function Transpose(p0 : Integer4x4) : Integer4x4 Transpose : real2x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|real2x2| | function Transpose(p0 : Real2x2) : Real2x2 Transpose : real3x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|real2x3| | function Transpose(p0 : Real2x3) : Real3x2 Transpose : real4x2 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|real2x4| | function Transpose(p0 : Real2x4) : Real4x2 Transpose : real2x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|real3x2| | function Transpose(p0 : Real3x2) : Real2x3 Transpose : real3x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|real3x3| | function Transpose(p0 : Real3x3) : Real3x3 Transpose : real4x3 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|real3x4| | function Transpose(p0 : Real3x4) : Real4x3 Transpose : real2x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|real4x2| | function Transpose(p0 : Real4x2) : Real2x4 Transpose : real3x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|real4x3| | function Transpose(p0 : Real4x3) : Real3x4 Transpose : real4x4 static Returns the transposed matrix. A transposed matrix is one where all rows are turned into columns, i.e. A^T[j][i] = A[i][j] |Name|Type|Description| |---|---|---| |p0|real4x4| | function Transpose(p0 : Real4x4) : Real4x4 Truncate : real static Rounds value towards zero. |Name|Type|Description| |---|---|---| |p0|real| | function Truncate(p0 : Real) : Real Truncate : real static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). |Name|Type|Description| |---|---|---| |value|real| | |places|integer| | function Truncate(value : Real, places : Integer) : Real Truncate : real static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). |Name|Type|Description| |---|---|---| |value|real| | |places|integer| | |numericalBase|integer| | function Truncate(value : Real, places : Integer, numericalBase : Integer) : Real Truncate : real2 static Rounds value towards zero. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2| | function Truncate(p0 : Real2) : Real2 Truncate : real2 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2| | |places|integer| | function Truncate(value : Real2, places : Integer) : Real2 Truncate : real2 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2| | |places|integer| | |numericalBase|integer| | function Truncate(value : Real2, places : Integer, numericalBase : Integer) : Real2 Truncate : real2x2 static Rounds value towards zero. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x2| | function Truncate(p0 : Real2x2) : Real2x2 Truncate : real2x2 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x2| | |places|integer| | function Truncate(value : Real2x2, places : Integer) : Real2x2 Truncate : real2x2 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x2| | |places|integer| | |numericalBase|integer| | function Truncate(value : Real2x2, places : Integer, numericalBase : Integer) : Real2x2 Truncate : real2x3 static Rounds value towards zero. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x3| | function Truncate(p0 : Real2x3) : Real2x3 Truncate : real2x3 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x3| | |places|integer| | function Truncate(value : Real2x3, places : Integer) : Real2x3 Truncate : real2x3 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x3| | |places|integer| | |numericalBase|integer| | function Truncate(value : Real2x3, places : Integer, numericalBase : Integer) : Real2x3 Truncate : real2x4 static Rounds value towards zero. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real2x4| | function Truncate(p0 : Real2x4) : Real2x4 Truncate : real2x4 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x4| | |places|integer| | function Truncate(value : Real2x4, places : Integer) : Real2x4 Truncate : real2x4 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real2x4| | |places|integer| | |numericalBase|integer| | function Truncate(value : Real2x4, places : Integer, numericalBase : Integer) : Real2x4 Truncate : real3 static Rounds value towards zero. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3| | function Truncate(p0 : Real3) : Real3 Truncate : real3 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3| | |places|integer| | function Truncate(value : Real3, places : Integer) : Real3 Truncate : real3 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3| | |places|integer| | |numericalBase|integer| | function Truncate(value : Real3, places : Integer, numericalBase : Integer) : Real3 Truncate : real3x2 static Rounds value towards zero. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x2| | function Truncate(p0 : Real3x2) : Real3x2 Truncate : real3x2 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x2| | |places|integer| | function Truncate(value : Real3x2, places : Integer) : Real3x2 Truncate : real3x2 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x2| | |places|integer| | |numericalBase|integer| | function Truncate(value : Real3x2, places : Integer, numericalBase : Integer) : Real3x2 Truncate : real3x3 static Rounds value towards zero. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x3| | function Truncate(p0 : Real3x3) : Real3x3 Truncate : real3x3 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x3| | |places|integer| | function Truncate(value : Real3x3, places : Integer) : Real3x3 Truncate : real3x3 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x3| | |places|integer| | |numericalBase|integer| | function Truncate(value : Real3x3, places : Integer, numericalBase : Integer) : Real3x3 Truncate : real3x4 static Rounds value towards zero. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real3x4| | function Truncate(p0 : Real3x4) : Real3x4 Truncate : real3x4 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x4| | |places|integer| | function Truncate(value : Real3x4, places : Integer) : Real3x4 Truncate : real3x4 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real3x4| | |places|integer| | |numericalBase|integer| | function Truncate(value : Real3x4, places : Integer, numericalBase : Integer) : Real3x4 Truncate : real4 static Rounds value towards zero. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4| | function Truncate(p0 : Real4) : Real4 Truncate : real4 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4| | |places|integer| | function Truncate(value : Real4, places : Integer) : Real4 Truncate : real4 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4| | |places|integer| | |numericalBase|integer| | function Truncate(value : Real4, places : Integer, numericalBase : Integer) : Real4 Truncate : real4x2 static Rounds value towards zero. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x2| | function Truncate(p0 : Real4x2) : Real4x2 Truncate : real4x2 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x2| | |places|integer| | function Truncate(value : Real4x2, places : Integer) : Real4x2 Truncate : real4x2 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x2| | |places|integer| | |numericalBase|integer| | function Truncate(value : Real4x2, places : Integer, numericalBase : Integer) : Real4x2 Truncate : real4x3 static Rounds value towards zero. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x3| | function Truncate(p0 : Real4x3) : Real4x3 Truncate : real4x3 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x3| | |places|integer| | function Truncate(value : Real4x3, places : Integer) : Real4x3 Truncate : real4x3 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x3| | |places|integer| | |numericalBase|integer| | function Truncate(value : Real4x3, places : Integer, numericalBase : Integer) : Real4x3 Truncate : real4x4 static Rounds value towards zero. Performed component-wise. |Name|Type|Description| |---|---|---| |p0|real4x4| | function Truncate(p0 : Real4x4) : Real4x4 Truncate : real4x4 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x4| | |places|integer| | function Truncate(value : Real4x4, places : Integer) : Real4x4 Truncate : real4x4 static Rounds value towards zero. The place represents where in the number we want to perform rounding (0 is the 1s place, 1 is the 10s place, -1 is the tenths place, etc). Performed component-wise. |Name|Type|Description| |---|---|---| |value|real4x4| | |places|integer| | |numericalBase|integer| | function Truncate(value : Real4x4, places : Integer, numericalBase : Integer) : Real4x4"
  },
  "docs/code_reference/nada_base_types/member.html": {
    "href": "docs/code_reference/nada_base_types/member.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes IsStatic reflectionobject function Library Name Owner Type Properties IsStatic : boolean read-only var IsStatic : Boolean Library : library read-only var Library : Library Name : string read-only var Name : String Owner : boundtype read-only var Owner : BoundType Type : type read-only var Type : Type Methods"
  },
  "docs/code_reference/nada_base_types/memberrange.html": {
    "href": "docs/code_reference/nada_base_types/memberrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor All MoveNext Current IsEmpty IsNotEmpty Properties All : memberrange read-only var All : MemberRange Current : member read-only var Current : Member IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MemberRange : Void constructor Name Type Description function MemberRange() MemberRange : Void constructor Name Type Description p0 memberrange function MemberRange(p0 : MemberRange) MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/nada_base_types/members.html": {
    "href": "docs/code_reference/nada_base_types/members.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes All enum Extension Inherited InheritedInstance InheritedInstanceStatic InheritedStatic Instance InstanceStatic Static Properties All : members read-only static var All : Members Extension : members read-only static var Extension : Members Inherited : members read-only static var Inherited : Members InheritedInstance : members read-only static var InheritedInstance : Members InheritedInstanceStatic : members read-only static var InheritedInstanceStatic : Members InheritedStatic : members read-only static var InheritedStatic : Members Instance : members read-only static var Instance : Members InstanceStatic : members read-only static var InstanceStatic : Members Static : members read-only static var Static : Members Methods"
  },
  "docs/code_reference/nada_base_types/memoryleakevent.html": {
    "href": "docs/code_reference/nada_base_types/memoryleakevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes eventdata Properties Methods"
  },
  "docs/code_reference/nada_base_types/multiplemethodsofthesamename.html": {
    "href": "docs/code_reference/nada_base_types/multiplemethodsofthesamename.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/nada_base_types/multiprimitive.html": {
    "href": "docs/code_reference/nada_base_types/multiprimitive.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/nada_base_types/nadalibrary.html": {
    "href": "docs/code_reference/nada_base_types/nadalibrary.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Properties Methods"
  },
  "docs/code_reference/nada_base_types/null.html": {
    "href": "docs/code_reference/nada_base_types/null.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/nada_base_types/opcodeevent.html": {
    "href": "docs/code_reference/nada_base_types/opcodeevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes eventdata Properties Methods"
  },
  "docs/code_reference/nada_base_types/parseevent.html": {
    "href": "docs/code_reference/nada_base_types/parseevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes eventdata Properties Methods"
  },
  "docs/code_reference/nada_base_types/pluginevent.html": {
    "href": "docs/code_reference/nada_base_types/pluginevent.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes eventdata Properties Methods"
  },
  "docs/code_reference/nada_base_types/processclass.html": {
    "href": "docs/code_reference/nada_base_types/processclass.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Close StandardError IsRunning StandardInput Constructor StandardOutput Start Terminate WaitForClose Properties StandardError : filestream read-only The stream where standard error is re-directed to. Null if not re-directed var StandardError : FileStream StandardInput : filestream read-only The stream where standard input is re-directed to. Null if not re-directed var StandardInput : FileStream StandardOutput : filestream read-only The stream where standard output is re-directed to. Null if not re-directed var StandardOutput : FileStream Methods Close : Void Closes the wrapper around the process, does not close the process launched. |Name|Type|Description| |---|---|---| function Close() IsRunning : boolean Returns true if the process is still running, false otherwise. |Name|Type|Description| |---|---|---| function IsRunning() : Boolean ProcessClass : Void constructor Process class used for managing external processes and redirecting their stdio. Used to launch and monitor various external programs. |Name|Type|Description| |---|---|---| function ProcessClass() Start : Void Begins the execution of another process using the given parameters. |Name|Type|Description| |---|---|---| |startInfo|processstartinfo| | function Start(startInfo : ProcessStartInfo) Terminate : Void Attempts to manually shut down the process. This is not safe for the other process or what it's handling. |Name|Type|Description| |---|---|---| function Terminate() WaitForClose : integer Waits for a process to close, this will block until the process closes. |Name|Type|Description| |---|---|---| function WaitForClose() : Integer"
  },
  "docs/code_reference/nada_base_types/processstartinfo.html": {
    "href": "docs/code_reference/nada_base_types/processstartinfo.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor ApplicationName Arguments RedirectStandardError RedirectStandardInput RedirectStandardOutput SearchPath ShowWindow WorkingDirectory Properties ApplicationName : string Name of the application to execute. No quoting of this string is necessary. var ApplicationName : String Arguments : string Arguments to pass to the application. var Arguments : String RedirectStandardError : boolean Whether or not we should redirect the Standard Error of the process for capturing. var RedirectStandardError : Boolean RedirectStandardInput : boolean Whether or not we should redirect the Standard Input of the process for writing. var RedirectStandardInput : Boolean RedirectStandardOutput : boolean Whether or not we should redirect the Standard Output of the process for capturing. var RedirectStandardOutput : Boolean SearchPath : boolean Whether or not we should search the path for the application. var SearchPath : Boolean ShowWindow : boolean Whether or not the window of the launched application should be shown. var ShowWindow : Boolean WorkingDirectory : string The working directory for the process to start with. No quoting of this string is necessary. var WorkingDirectory : String Methods ProcessStartInfo : Void constructor Class used to set up parameters before launching a process. |Name|Type|Description| |---|---|---| function ProcessStartInfo()"
  },
  "docs/code_reference/nada_base_types/property.html": {
    "href": "docs/code_reference/nada_base_types/property.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Methods Properties Base Classes Derived Classes GetValue Getter member field SetValue Setter gettersetter Properties Getter : function read-only var Getter : Function Setter : function read-only var Setter : Function Methods GetValue : T Name Type Description instance T function GetValue(instance : T) : T SetValue : Void Name Type Description instance T value T function SetValue(instance : T, value : T)"
  },
  "docs/code_reference/nada_base_types/property_type.html": {
    "href": "docs/code_reference/nada_base_types/property_type.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes [ GetValue](property_type .md#getvalue-zilch-engine-doc) [[zilch_engine_documentation/code_reference/nada_base_types/property_type /#get-delegate () : key Get]] [ Constructor](property_type .md#property-type-void) [ Getter](property_type .md#getter-zilch-engine-docum) [ SetValue](property_type .md#setvalue-void) [ Instance](property_type .md#instance-t) [ Property](property_type .md#property-zilch-engine-doc) [[zilch_engine_documentation/code_reference/nada_base_types/property_type /#set-delegate (value : ke Set]] [ Setter](property_type .md#setter-zilch-engine-docum) Properties Get : delegate():Key var Get : delegate () : Key Getter : function read-only var Getter : Function Instance : T var Instance : T Property : Property[type] var Property : Property[Type] Set : delegate(value:Key) var Set : delegate (value : Key) Setter : function read-only var Setter : Function Methods GetValue : T Name Type Description instance T function GetValue(instance : T) : T Property[Type] : Void constructor Name Type Description function Property[Type]() Property[Type] : Void constructor Name Type Description function Property[Type]() Property[Type] : Void constructor Name Type Description function Property[Type]() Property[Type] : Void constructor Name Type Description function Property[Type]() Property[Type] : Void constructor Name Type Description function Property[Type]() Property[Type] : Void constructor Name Type Description function Property[Type]() Property[Type] : Void constructor Name Type Description function Property[Type]() Property[Type] : Void constructor Name Type Description function Property[Type]() Property[Type] : Void constructor Name Type Description function Property[Type]() SetValue : Void Name Type Description instance T value T function SetValue(instance : T, value : T)"
  },
  "docs/code_reference/nada_base_types/propertyrange.html": {
    "href": "docs/code_reference/nada_base_types/propertyrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes MoveNext All Constructor Current IsEmpty IsNotEmpty Properties All : propertyrange read-only var All : PropertyRange Current : Property read-only var Current : Property IsEmpty : boolean read-only var IsEmpty : Boolean IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext() PropertyRange : Void constructor Name Type Description function PropertyRange() PropertyRange : Void constructor Name Type Description p0 propertyrange function PropertyRange(p0 : PropertyRange)"
  },
  "docs/code_reference/nada_base_types/quaternion.html": {
    "href": "docs/code_reference/nada_base_types/quaternion.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count Constructor Identity Set Properties Count : integer read-only var Count : Integer Identity : quaternion read-only static var Identity : Quaternion Methods Get : real Name Type Description p0 integer function Get(p0 : Integer) : Real Quaternion : Void constructor Name Type Description function Quaternion() Quaternion : Void constructor Name Type Description scalar real function Quaternion(scalar : Real) Quaternion : Void constructor Name Type Description p0 real p1 real p2 real p3 real function Quaternion(p0 : Real, p1 : Real, p2 : Real, p3 : Real) Quaternion : Void constructor Name Type Description p0 real p1 real p2 real2 function Quaternion(p0 : Real, p1 : Real, p2 : Real2) Quaternion : Void constructor Name Type Description p0 real p1 real2 p2 real function Quaternion(p0 : Real, p1 : Real2, p2 : Real) Quaternion : Void constructor Name Type Description p0 real p1 real3 function Quaternion(p0 : Real, p1 : Real3) Quaternion : Void constructor Name Type Description p0 real2 p1 real p2 real function Quaternion(p0 : Real2, p1 : Real, p2 : Real) Quaternion : Void constructor Name Type Description p0 real2 p1 real2 function Quaternion(p0 : Real2, p1 : Real2) Quaternion : Void constructor Name Type Description p0 real3 p1 real function Quaternion(p0 : Real3, p1 : Real) Set : Void Name Type Description p0 integer p1 real function Set(p0 : Integer, p1 : Real)"
  },
  "docs/code_reference/nada_base_types/random.html": {
    "href": "docs/code_reference/nada_base_types/random.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core (NOTE) Contains utility functions for random generation. Methods Properties Base Classes Derived Classes BellCurve MaxInteger Boolean Seed CoinFlip DieRoll DoubleRange DoubleReal Integer Probability Quaternion Constructor Range RangeExclusiveMax RangeInclusiveMax Real Real2 Real3 Rotation UnitReal2 UnitReal3 Variance Properties MaxInteger : integer read-only static Returns the max integer value that can be returned. var MaxInteger : Integer Seed : integer The seed controls what random numbers are generated in a sequence (determanistically) The same seed will always generate the same string of random numbers. var Seed : Integer Methods BellCurve : real Samples a bell curve with standard normal distribution in the range [0,1] This is equivalent to a Gaussian distribution with standard deviation of 1. |Name|Type|Description| |---|---|---| function BellCurve() : Real BellCurve : real Samples a bell curve with in the range [center - range, center + range] This uses a standard deviation of 1. |Name|Type|Description| |---|---|---| |center|real| | |range|real| | function BellCurve(center : Real, range : Real) : Real BellCurve : real Samples a bell curve in the range [center - range, center + range] with the given standard deviation. Around 68% will lie within the 1st standard deviation. |Name|Type|Description| |---|---|---| |center|real| | |range|real| | |standardDeviation|real| | function BellCurve(center : Real, range : Real, standardDeviation : Real) : Real Boolean : boolean Returns a random boolean value. |Name|Type|Description| |---|---|---| function Boolean() : Boolean CoinFlip : boolean Returns true if the coin flips heads. |Name|Type|Description| |---|---|---| function CoinFlip() : Boolean DieRoll : integer Randomly rolls a number in the range [1, sides]. |Name|Type|Description| |---|---|---| |sides|integer| | function DieRoll(sides : Integer) : Integer DoubleRange : doublereal Name Type Description doublereal doublereal function DoubleRange( : DoubleReal, : DoubleReal) : DoubleReal DoubleReal : doublereal Returns a random double real in the range [0,1]. |Name|Type|Description| |---|---|---| function DoubleReal() : DoubleReal Integer : integer Returns a random integer in the range of [0, MaxInt]. |Name|Type|Description| |---|---|---| function Integer() : Integer Probability : boolean Takes a given probability that we get a true value. |Name|Type|Description| |---|---|---| |probOfTrue|real| | function Probability(probOfTrue : Real) : Boolean Quaternion : quaternion Random unit length quaternion. This is also a unit quaternion. |Name|Type|Description| |---|---|---| function Quaternion() : Quaternion Random : Void constructor Default constructor (grabs the random seed) |Name|Type|Description| |---|---|---| function Random() Random : Void constructor Construct a random generator with a specific seed. |Name|Type|Description| |---|---|---| |seed|integer| | function Random(seed : Integer) Range : real A random Real in the range [min,max]. |Name|Type|Description| |---|---|---| |min|real| | |max|real| | function Range(min : Real, max : Real) : Real RangeExclusiveMax : integer Integer in the range [min, max]. |Name|Type|Description| |---|---|---| |min|integer| | |max|integer| | function RangeExclusiveMax(min : Integer, max : Integer) : Integer RangeInclusiveMax : integer Integer in the range [min, max) |Name|Type|Description| |---|---|---| |min|integer| | |max|integer| | function RangeInclusiveMax(min : Integer, max : Integer) : Integer Real : real Returns a random real in the range [0,1]. |Name|Type|Description| |---|---|---| function Real() : Real Real2 : real2 Randomly generates a Real2 with its length between min and max. |Name|Type|Description| |---|---|---| |minLength|real| | |maxLength|real| | function Real2(minLength : Real, maxLength : Real) : Real2 Real3 : real3 Randomly generates a Real3 with its length between min and max. |Name|Type|Description| |---|---|---| |minLength|real| | |maxLength|real| | function Real3(minLength : Real, maxLength : Real) : Real3 Rotation : quaternion Random rotation quaternion. This is the same as calling Quaternion() |Name|Type|Description| |---|---|---| function Rotation() : Quaternion UnitReal2 : real2 Generates a unit length Real2. |Name|Type|Description| |---|---|---| function UnitReal2() : Real2 UnitReal3 : real3 Generates a unit length Real3. |Name|Type|Description| |---|---|---| function UnitReal3() : Real3 Variance : doublereal Integer in the range [base - variance, base + variance]. |Name|Type|Description| |---|---|---| ||doublereal| | ||doublereal| | function Variance( : DoubleReal, : DoubleReal) : DoubleReal Variance : integer Integer in the range [base - variance, base + variance]. |Name|Type|Description| |---|---|---| |base|integer| | |variance|integer| | function Variance(base : Integer, variance : Integer) : Integer Variance : real Returns a number in the range [base - variance, base + variance]. |Name|Type|Description| |---|---|---| |base|real| | |variance|real| | function Variance(base : Real, variance : Real) : Real"
  },
  "docs/code_reference/nada_base_types/real.html": {
    "href": "docs/code_reference/nada_base_types/real.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetAxis NegativeMin Parse NegativeValueClosestToZero Constructor One Reinterpret PositiveMax Set PositiveValueClosestToZero XAxis Zero Properties Count : integer read-only var Count : Integer NegativeMin : real read-only static The smallest (most negative) value that can be represented by a Real. var NegativeMin : Real NegativeValueClosestToZero : real read-only static The negative value closest to zero that can be represented by a Real. var NegativeValueClosestToZero : Real One : real read-only static The one vector (a vector containing all ones). var One : Real PositiveMax : real read-only static The largest (most positive) value that can be represented by a Real. var PositiveMax : Real PositiveValueClosestToZero : real read-only static The positive value closest to zero that can be represented by a Real. var PositiveValueClosestToZero : Real XAxis : real read-only static var XAxis : Real Zero : real read-only static The zero vector (a vector containing all zeroes). var Zero : Real Methods Get : real Name Type Description p0 integer function Get(p0 : Integer) : Real GetAxis : real static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0|integer| | function GetAxis(p0 : Integer) : Real Parse : real static Attempt to convert the given StringRange to a Real. If parsing fails 0 is returned. |Name|Type|Description| |---|---|---| |p0|stringrange| | function Parse(p0 : StringRange) : Real Real : Void constructor Name Type Description function Real() Real : Void constructor Name Type Description scalar real function Real(scalar : Real) Reinterpret : real static Name Type Description p0 integer function Reinterpret(p0 : Integer) : Real Set : Void Name Type Description p0 integer p1 real function Set(p0 : Integer, p1 : Real)"
  },
  "docs/code_reference/nada_base_types/real2.html": {
    "href": "docs/code_reference/nada_base_types/real2.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetAxis NegativeMin Constructor NegativeValueClosestToZero Set One PositiveMax PositiveValueClosestToZero XAxis YAxis Zero Properties Count : integer read-only var Count : Integer NegativeMin : real2 read-only static The smallest (most negative) value that can be represented by a Real. var NegativeMin : Real2 NegativeValueClosestToZero : real2 read-only static The negative value closest to zero that can be represented by a Real. var NegativeValueClosestToZero : Real2 One : real2 read-only static The one vector (a vector containing all ones). var One : Real2 PositiveMax : real2 read-only static The largest (most positive) value that can be represented by a Real. var PositiveMax : Real2 PositiveValueClosestToZero : real2 read-only static The positive value closest to zero that can be represented by a Real. var PositiveValueClosestToZero : Real2 XAxis : real2 read-only static var XAxis : Real2 YAxis : real2 read-only static var YAxis : Real2 Zero : real2 read-only static The zero vector (a vector containing all zeroes). var Zero : Real2 Methods Get : real Name Type Description p0 integer function Get(p0 : Integer) : Real GetAxis : real2 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0|integer| | function GetAxis(p0 : Integer) : Real2 Real2 : Void constructor Name Type Description function Real2() Real2 : Void constructor Name Type Description scalar real function Real2(scalar : Real) Real2 : Void constructor Name Type Description p0 real p1 real function Real2(p0 : Real, p1 : Real) Real2 : Void constructor Name Type Description p0 real2 function Real2(p0 : Real2) Set : Void Name Type Description p0 integer p1 real function Set(p0 : Integer, p1 : Real)"
  },
  "docs/code_reference/nada_base_types/real2x2.html": {
    "href": "docs/code_reference/nada_base_types/real2x2.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M10 M11 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : real var M00 : Real M01 : real var M01 : Real M10 : real var M10 : Real M11 : real var M11 : Real Methods Get : real2 Name Type Description y integer function Get(y : Integer) : Real2 Get : real Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Real GetByIndex : real Name Type Description index integer function GetByIndex(index : Integer) : Real Real2x2 : Void constructor Name Type Description function Real2x2() Real2x2 : Void constructor Name Type Description p0 real function Real2x2(p0 : Real) Real2x2 : Void constructor Name Type Description m00 real m01 real m10 real m11 real function Real2x2(m00 : Real, m01 : Real, m10 : Real, m11 : Real) Set : Void Name Type Description y integer x integer value real function Set(y : Integer, x : Integer, value : Real) Set : Void Name Type Description y integer value real2 function Set(y : Integer, value : Real2) SetByIndex : Void Name Type Description index integer value real function SetByIndex(index : Integer, value : Real)"
  },
  "docs/code_reference/nada_base_types/real2x3.html": {
    "href": "docs/code_reference/nada_base_types/real2x3.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M10 M11 M12 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : real var M00 : Real M01 : real var M01 : Real M02 : real var M02 : Real M10 : real var M10 : Real M11 : real var M11 : Real M12 : real var M12 : Real Methods Get : real3 Name Type Description y integer function Get(y : Integer) : Real3 Get : real Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Real GetByIndex : real Name Type Description index integer function GetByIndex(index : Integer) : Real Real2x3 : Void constructor Name Type Description function Real2x3() Real2x3 : Void constructor Name Type Description p0 real function Real2x3(p0 : Real) Real2x3 : Void constructor Name Type Description m00 real m01 real m02 real m10 real m11 real m12 real function Real2x3(m00 : Real, m01 : Real, m02 : Real, m10 : Real, m11 : Real, m12 : Real) Set : Void Name Type Description y integer x integer value real function Set(y : Integer, x : Integer, value : Real) Set : Void Name Type Description y integer value real3 function Set(y : Integer, value : Real3) SetByIndex : Void Name Type Description index integer value real function SetByIndex(index : Integer, value : Real)"
  },
  "docs/code_reference/nada_base_types/real2x4.html": {
    "href": "docs/code_reference/nada_base_types/real2x4.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : real var M00 : Real M01 : real var M01 : Real M02 : real var M02 : Real M03 : real var M03 : Real M10 : real var M10 : Real M11 : real var M11 : Real M12 : real var M12 : Real M13 : real var M13 : Real Methods Get : real4 Name Type Description y integer function Get(y : Integer) : Real4 Get : real Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Real GetByIndex : real Name Type Description index integer function GetByIndex(index : Integer) : Real Real2x4 : Void constructor Name Type Description function Real2x4() Real2x4 : Void constructor Name Type Description p0 real function Real2x4(p0 : Real) Real2x4 : Void constructor Name Type Description m00 real m01 real m02 real m03 real m10 real m11 real m12 real m13 real function Real2x4(m00 : Real, m01 : Real, m02 : Real, m03 : Real, m10 : Real, m11 : Real, m12 : Real, m13 : Real) Set : Void Name Type Description y integer x integer value real function Set(y : Integer, x : Integer, value : Real) Set : Void Name Type Description y integer value real4 function Set(y : Integer, value : Real4) SetByIndex : Void Name Type Description index integer value real function SetByIndex(index : Integer, value : Real)"
  },
  "docs/code_reference/nada_base_types/real3.html": {
    "href": "docs/code_reference/nada_base_types/real3.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetAxis NegativeMin Constructor NegativeValueClosestToZero Set One PositiveMax PositiveValueClosestToZero XAxis YAxis ZAxis Zero Properties Count : integer read-only var Count : Integer NegativeMin : real3 read-only static The smallest (most negative) value that can be represented by a Real. var NegativeMin : Real3 NegativeValueClosestToZero : real3 read-only static The negative value closest to zero that can be represented by a Real. var NegativeValueClosestToZero : Real3 One : real3 read-only static The one vector (a vector containing all ones). var One : Real3 PositiveMax : real3 read-only static The largest (most positive) value that can be represented by a Real. var PositiveMax : Real3 PositiveValueClosestToZero : real3 read-only static The positive value closest to zero that can be represented by a Real. var PositiveValueClosestToZero : Real3 XAxis : real3 read-only static var XAxis : Real3 YAxis : real3 read-only static var YAxis : Real3 ZAxis : real3 read-only static var ZAxis : Real3 Zero : real3 read-only static The zero vector (a vector containing all zeroes). var Zero : Real3 Methods Get : real Name Type Description p0 integer function Get(p0 : Integer) : Real GetAxis : real3 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0|integer| | function GetAxis(p0 : Integer) : Real3 Real3 : Void constructor Name Type Description function Real3() Real3 : Void constructor Name Type Description scalar real function Real3(scalar : Real) Real3 : Void constructor Name Type Description p0 real p1 real p2 real function Real3(p0 : Real, p1 : Real, p2 : Real) Real3 : Void constructor Name Type Description p0 real p1 real2 function Real3(p0 : Real, p1 : Real2) Real3 : Void constructor Name Type Description p0 real2 p1 real function Real3(p0 : Real2, p1 : Real) Set : Void Name Type Description p0 integer p1 real function Set(p0 : Integer, p1 : Real)"
  },
  "docs/code_reference/nada_base_types/real3x2.html": {
    "href": "docs/code_reference/nada_base_types/real3x2.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M10 M11 M20 M21 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : real var M00 : Real M01 : real var M01 : Real M10 : real var M10 : Real M11 : real var M11 : Real M20 : real var M20 : Real M21 : real var M21 : Real Methods Get : real2 Name Type Description y integer function Get(y : Integer) : Real2 Get : real Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Real GetByIndex : real Name Type Description index integer function GetByIndex(index : Integer) : Real Real3x2 : Void constructor Name Type Description function Real3x2() Real3x2 : Void constructor Name Type Description p0 real function Real3x2(p0 : Real) Real3x2 : Void constructor Name Type Description m00 real m01 real m10 real m11 real m20 real m21 real function Real3x2(m00 : Real, m01 : Real, m10 : Real, m11 : Real, m20 : Real, m21 : Real) Set : Void Name Type Description y integer x integer value real function Set(y : Integer, x : Integer, value : Real) Set : Void Name Type Description y integer value real2 function Set(y : Integer, value : Real2) SetByIndex : Void Name Type Description index integer value real function SetByIndex(index : Integer, value : Real)"
  },
  "docs/code_reference/nada_base_types/real3x3.html": {
    "href": "docs/code_reference/nada_base_types/real3x3.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M10 M11 M12 M20 M21 M22 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : real var M00 : Real M01 : real var M01 : Real M02 : real var M02 : Real M10 : real var M10 : Real M11 : real var M11 : Real M12 : real var M12 : Real M20 : real var M20 : Real M21 : real var M21 : Real M22 : real var M22 : Real Methods Get : real3 Name Type Description y integer function Get(y : Integer) : Real3 Get : real Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Real GetByIndex : real Name Type Description index integer function GetByIndex(index : Integer) : Real Real3x3 : Void constructor Name Type Description function Real3x3() Real3x3 : Void constructor Name Type Description p0 real function Real3x3(p0 : Real) Real3x3 : Void constructor Name Type Description m00 real m01 real m02 real m10 real m11 real m12 real m20 real m21 real m22 real function Real3x3(m00 : Real, m01 : Real, m02 : Real, m10 : Real, m11 : Real, m12 : Real, m20 : Real, m21 : Real, m22 : Real) Set : Void Name Type Description y integer x integer value real function Set(y : Integer, x : Integer, value : Real) Set : Void Name Type Description y integer value real3 function Set(y : Integer, value : Real3) SetByIndex : Void Name Type Description index integer value real function SetByIndex(index : Integer, value : Real)"
  },
  "docs/code_reference/nada_base_types/real3x4.html": {
    "href": "docs/code_reference/nada_base_types/real3x4.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 M20 M21 M22 M23 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : real var M00 : Real M01 : real var M01 : Real M02 : real var M02 : Real M03 : real var M03 : Real M10 : real var M10 : Real M11 : real var M11 : Real M12 : real var M12 : Real M13 : real var M13 : Real M20 : real var M20 : Real M21 : real var M21 : Real M22 : real var M22 : Real M23 : real var M23 : Real Methods Get : real4 Name Type Description y integer function Get(y : Integer) : Real4 Get : real Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Real GetByIndex : real Name Type Description index integer function GetByIndex(index : Integer) : Real Real3x4 : Void constructor Name Type Description function Real3x4() Real3x4 : Void constructor Name Type Description p0 real function Real3x4(p0 : Real) Real3x4 : Void constructor Name Type Description m00 real m01 real m02 real m03 real m10 real m11 real m12 real m13 real m20 real m21 real m22 real m23 real function Real3x4(m00 : Real, m01 : Real, m02 : Real, m03 : Real, m10 : Real, m11 : Real, m12 : Real, m13 : Real, m20 : Real, m21 : Real, m22 : Real, m23 : Real) Set : Void Name Type Description y integer x integer value real function Set(y : Integer, x : Integer, value : Real) Set : Void Name Type Description y integer value real4 function Set(y : Integer, value : Real4) SetByIndex : Void Name Type Description index integer value real function SetByIndex(index : Integer, value : Real)"
  },
  "docs/code_reference/nada_base_types/real4.html": {
    "href": "docs/code_reference/nada_base_types/real4.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetAxis NegativeMin Constructor NegativeValueClosestToZero Set One PositiveMax PositiveValueClosestToZero WAxis XAxis YAxis ZAxis Zero Properties Count : integer read-only var Count : Integer NegativeMin : real4 read-only static The smallest (most negative) value that can be represented by a Real. var NegativeMin : Real4 NegativeValueClosestToZero : real4 read-only static The negative value closest to zero that can be represented by a Real. var NegativeValueClosestToZero : Real4 One : real4 read-only static The one vector (a vector containing all ones). var One : Real4 PositiveMax : real4 read-only static The largest (most positive) value that can be represented by a Real. var PositiveMax : Real4 PositiveValueClosestToZero : real4 read-only static The positive value closest to zero that can be represented by a Real. var PositiveValueClosestToZero : Real4 WAxis : real4 read-only static var WAxis : Real4 XAxis : real4 read-only static var XAxis : Real4 YAxis : real4 read-only static var YAxis : Real4 ZAxis : real4 read-only static var ZAxis : Real4 Zero : real4 read-only static The zero vector (a vector containing all zeroes). var Zero : Real4 Methods Get : real Name Type Description p0 integer function Get(p0 : Integer) : Real GetAxis : real4 static Returns an axis vector from the given index (ie. 0 is XAxis, 1 is YAxis, etc... |Name|Type|Description| |---|---|---| |p0|integer| | function GetAxis(p0 : Integer) : Real4 Real4 : Void constructor Name Type Description function Real4() Real4 : Void constructor Name Type Description scalar real function Real4(scalar : Real) Real4 : Void constructor Name Type Description p0 real p1 real p2 real p3 real function Real4(p0 : Real, p1 : Real, p2 : Real, p3 : Real) Real4 : Void constructor Name Type Description p0 real p1 real p2 real2 function Real4(p0 : Real, p1 : Real, p2 : Real2) Real4 : Void constructor Name Type Description p0 real p1 real2 p2 real function Real4(p0 : Real, p1 : Real2, p2 : Real) Real4 : Void constructor Name Type Description p0 real p1 real3 function Real4(p0 : Real, p1 : Real3) Real4 : Void constructor Name Type Description p0 real2 p1 real p2 real function Real4(p0 : Real2, p1 : Real, p2 : Real) Real4 : Void constructor Name Type Description p0 real2 p1 real2 function Real4(p0 : Real2, p1 : Real2) Real4 : Void constructor Name Type Description p0 real3 p1 real function Real4(p0 : Real3, p1 : Real) Set : Void Name Type Description p0 integer p1 real function Set(p0 : Integer, p1 : Real)"
  },
  "docs/code_reference/nada_base_types/real4x2.html": {
    "href": "docs/code_reference/nada_base_types/real4x2.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M10 M11 M20 M21 M30 M31 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : real var M00 : Real M01 : real var M01 : Real M10 : real var M10 : Real M11 : real var M11 : Real M20 : real var M20 : Real M21 : real var M21 : Real M30 : real var M30 : Real M31 : real var M31 : Real Methods Get : real2 Name Type Description y integer function Get(y : Integer) : Real2 Get : real Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Real GetByIndex : real Name Type Description index integer function GetByIndex(index : Integer) : Real Real4x2 : Void constructor Name Type Description function Real4x2() Real4x2 : Void constructor Name Type Description p0 real function Real4x2(p0 : Real) Real4x2 : Void constructor Name Type Description m00 real m01 real m10 real m11 real m20 real m21 real m30 real m31 real function Real4x2(m00 : Real, m01 : Real, m10 : Real, m11 : Real, m20 : Real, m21 : Real, m30 : Real, m31 : Real) Set : Void Name Type Description y integer x integer value real function Set(y : Integer, x : Integer, value : Real) Set : Void Name Type Description y integer value real2 function Set(y : Integer, value : Real2) SetByIndex : Void Name Type Description index integer value real function SetByIndex(index : Integer, value : Real)"
  },
  "docs/code_reference/nada_base_types/real4x3.html": {
    "href": "docs/code_reference/nada_base_types/real4x3.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M10 M11 M12 M20 M21 M22 M30 M31 M32 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : real var M00 : Real M01 : real var M01 : Real M02 : real var M02 : Real M10 : real var M10 : Real M11 : real var M11 : Real M12 : real var M12 : Real M20 : real var M20 : Real M21 : real var M21 : Real M22 : real var M22 : Real M30 : real var M30 : Real M31 : real var M31 : Real M32 : real var M32 : Real Methods Get : real3 Name Type Description y integer function Get(y : Integer) : Real3 Get : real Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Real GetByIndex : real Name Type Description index integer function GetByIndex(index : Integer) : Real Real4x3 : Void constructor Name Type Description function Real4x3() Real4x3 : Void constructor Name Type Description p0 real function Real4x3(p0 : Real) Real4x3 : Void constructor Name Type Description m00 real m01 real m02 real m10 real m11 real m12 real m20 real m21 real m22 real m30 real m31 real m32 real function Real4x3(m00 : Real, m01 : Real, m02 : Real, m10 : Real, m11 : Real, m12 : Real, m20 : Real, m21 : Real, m22 : Real, m30 : Real, m31 : Real, m32 : Real) Set : Void Name Type Description y integer x integer value real function Set(y : Integer, x : Integer, value : Real) Set : Void Name Type Description y integer value real3 function Set(y : Integer, value : Real3) SetByIndex : Void Name Type Description index integer value real function SetByIndex(index : Integer, value : Real)"
  },
  "docs/code_reference/nada_base_types/real4x4.html": {
    "href": "docs/code_reference/nada_base_types/real4x4.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Get Count GetByIndex CountX Constructor CountY Set M00 SetByIndex M01 M02 M03 M10 M11 M12 M13 M20 M21 M22 M23 M30 M31 M32 M33 Properties Count : integer read-only var Count : Integer CountX : integer read-only var CountX : Integer CountY : integer read-only var CountY : Integer M00 : real var M00 : Real M01 : real var M01 : Real M02 : real var M02 : Real M03 : real var M03 : Real M10 : real var M10 : Real M11 : real var M11 : Real M12 : real var M12 : Real M13 : real var M13 : Real M20 : real var M20 : Real M21 : real var M21 : Real M22 : real var M22 : Real M23 : real var M23 : Real M30 : real var M30 : Real M31 : real var M31 : Real M32 : real var M32 : Real M33 : real var M33 : Real Methods Get : real4 Name Type Description y integer function Get(y : Integer) : Real4 Get : real Name Type Description y integer x integer function Get(y : Integer, x : Integer) : Real GetByIndex : real Name Type Description index integer function GetByIndex(index : Integer) : Real Real4x4 : Void constructor Name Type Description function Real4x4() Real4x4 : Void constructor Name Type Description p0 real function Real4x4(p0 : Real) Real4x4 : Void constructor Name Type Description m00 real m01 real m02 real m03 real m10 real m11 real m12 real m13 real m20 real m21 real m22 real m23 real m30 real m31 real m32 real m33 real function Real4x4(m00 : Real, m01 : Real, m02 : Real, m03 : Real, m10 : Real, m11 : Real, m12 : Real, m13 : Real, m20 : Real, m21 : Real, m22 : Real, m23 : Real, m30 : Real, m31 : Real, m32 : Real, m33 : Real) Set : Void Name Type Description y integer x integer value real function Set(y : Integer, x : Integer, value : Real) Set : Void Name Type Description y integer value real4 function Set(y : Integer, value : Real4) SetByIndex : Void Name Type Description index integer value real function SetByIndex(index : Integer, value : Real)"
  },
  "docs/code_reference/nada_base_types/reflectionobject.html": {
    "href": "docs/code_reference/nada_base_types/reflectionobject.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes member type variable Properties Methods"
  },
  "docs/code_reference/nada_base_types/rune.html": {
    "href": "docs/code_reference/nada_base_types/rune.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Constructor Value Properties Value : integer var Value : Integer Methods Rune : Void constructor Name Type Description function Rune() Rune : Void constructor Name Type Description value integer function Rune(value : Integer)"
  },
  "docs/code_reference/nada_base_types/runeiterator.html": {
    "href": "docs/code_reference/nada_base_types/runeiterator.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Decrement All Equals ByteIndex Increment Current MoveNext IsNotEmpty Constructor OriginalString Properties All : runeiterator read-only var All : RuneIterator ByteIndex : integer read-only var ByteIndex : Integer Current : rune read-only var Current : Rune IsNotEmpty : boolean read-only var IsNotEmpty : Boolean OriginalString : string read-only var OriginalString : String Methods Decrement : Void Name Type Description function Decrement() Equals : boolean Name Type Description p0 runeiterator function Equals(p0 : RuneIterator) : Boolean Increment : Void Name Type Description function Increment() MoveNext : Void Name Type Description function MoveNext() RuneIterator : Void constructor Name Type Description function RuneIterator()"
  },
  "docs/code_reference/nada_base_types/streamcapabilities.html": {
    "href": "docs/code_reference/nada_base_types/streamcapabilities.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes GetCount enum None Read Seek SetCount Write Properties GetCount : streamcapabilities read-only static var GetCount : StreamCapabilities None : streamcapabilities read-only static var None : StreamCapabilities Read : streamcapabilities read-only static var Read : StreamCapabilities Seek : streamcapabilities read-only static var Seek : StreamCapabilities SetCount : streamcapabilities read-only static var SetCount : StreamCapabilities Write : streamcapabilities read-only static var Write : StreamCapabilities Methods"
  },
  "docs/code_reference/nada_base_types/streamorigin.html": {
    "href": "docs/code_reference/nada_base_types/streamorigin.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Current enum End Start Properties Current : streamorigin read-only static var Current : StreamOrigin End : streamorigin read-only static var End : StreamOrigin Start : streamorigin read-only static var Start : StreamOrigin Methods"
  },
  "docs/code_reference/nada_base_types/string.html": {
    "href": "docs/code_reference/nada_base_types/string.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Compare All CompareTo Begin ComputeRuneCount ByteCount Concatenate Count Contains Empty EndsWith End FindFirstOf IsNotEmpty FindLastOf FindRangeExclusive FindRangeInclusive FormatC FromRune Get IsNullOrEmpty IsNullOrWhitespace Join Replace RuneIteratorFromByteIndex RuneIteratorFromRuneIndex Split StartsWith SubString SubStringBytes SubStringFromRuneIndices ToLower ToUpper Trim TrimEnd TrimStart Properties All : stringrange read-only Converts the string into a string range. var All : StringRange Begin : runeiterator read-only Returns the RuneIterator at the start of this string. var Begin : RuneIterator ByteCount : integer read-only Returns the number of bytes in the string. var ByteCount : Integer Count : integer read-only Returns the number of bytes in the string. var Count : Integer Empty : boolean read-only Returns true if the string is emtpy. var Empty : Boolean End : runeiterator read-only Returns the RuneIterator at the end (one past the last Rune) of this string. var End : RuneIterator IsNotEmpty : boolean read-only Returns true if the string is not empty. var IsNotEmpty : Boolean Methods Compare : integer static Compares the two strings and returns an integer to denote their relative sort order. |Name|Type|Description| |---|---|---| |left|string| | |right|string| | function Compare(left : String, right : String) : Integer CompareTo : integer Compares this string to the given string and returns an integer to denote their relative sort order. |Name|Type|Description| |---|---|---| |p0|stringrange| | function CompareTo(p0 : StringRange) : Integer ComputeRuneCount : integer Compute the number of runes in the string. |Name|Type|Description| |---|---|---| function ComputeRuneCount() : Integer Concatenate : string static Combines the two strings into a new string. |Name|Type|Description| |---|---|---| |p0|string| | |p1|string| | function Concatenate(p0 : String, p1 : String) : String Concatenate : string static Combines the two string ranges into a new string. |Name|Type|Description| |---|---|---| |p0|stringrange| | |p1|stringrange| | function Concatenate(p0 : StringRange, p1 : StringRange) : String Contains : boolean Returns if the string Contains the specified substring. |Name|Type|Description| |---|---|---| |p0|stringrange| | function Contains(p0 : StringRange) : Boolean EndsWith : boolean Returns if the string ends with the specified substring. |Name|Type|Description| |---|---|---| |p0|stringrange| | function EndsWith(p0 : StringRange) : Boolean FindFirstOf : stringrange Returns a StringRange that Contains the first occurrence of given StringRange. |Name|Type|Description| |---|---|---| |p0|stringrange| | function FindFirstOf(p0 : StringRange) : StringRange FindLastOf : stringrange Returns a StringRange that Contains the last occurrence of given StringRange. |Name|Type|Description| |---|---|---| |p0|stringrange| | function FindLastOf(p0 : StringRange) : StringRange FindRangeExclusive : stringrange Finds the first StringRange that starts with 'startRange' and ends with 'endRange'. This substring excludes 'startRange' and 'endRange'. |Name|Type|Description| |---|---|---| |startRange|stringrange| | |endRange|stringrange| | function FindRangeExclusive(startRange : StringRange, endRange : StringRange) : StringRange FindRangeInclusive : stringrange Finds the first StringRange that starts with 'startRange' and ends with 'endRange'. This substring includes 'startRange' and 'endRange'. |Name|Type|Description| |---|---|---| |startRange|stringrange| | |endRange|stringrange| | function FindRangeInclusive(startRange : StringRange, endRange : StringRange) : StringRange FormatC : string static Name Type Description format string p1 T function FormatC(format : String, p1 : T) : String FormatC : string static Name Type Description format string p1 T p2 T function FormatC(format : String, p1 : T, p2 : T) : String FormatC : string static Name Type Description format string p1 T p2 T p3 T function FormatC(format : String, p1 : T, p2 : T, p3 : T) : String FormatC : string static Name Type Description format string p1 T p2 T p3 T p4 T function FormatC(format : String, p1 : T, p2 : T, p3 : T, p4 : T) : String FormatC : string static Name Type Description format string p1 T p2 T p3 T p4 T p5 T function FormatC(format : String, p1 : T, p2 : T, p3 : T, p4 : T, p5 : T) : String FormatC : string static Name Type Description format string p1 T p2 T p3 T p4 T p5 T p6 T function FormatC(format : String, p1 : T, p2 : T, p3 : T, p4 : T, p5 : T, p6 : T) : String FormatC : string static Name Type Description format string p1 T p2 T p3 T p4 T p5 T p6 T p7 T function FormatC(format : String, p1 : T, p2 : T, p3 : T, p4 : T, p5 : T, p6 : T, p7 : T) : String FormatC : string static Name Type Description format string p1 T p2 T p3 T p4 T p5 T p6 T p7 T p8 T function FormatC(format : String, p1 : T, p2 : T, p3 : T, p4 : T, p5 : T, p6 : T, p7 : T, p8 : T) : String FormatC : string static Name Type Description format string p1 T p2 T p3 T p4 T p5 T p6 T p7 T p8 T p9 T function FormatC(format : String, p1 : T, p2 : T, p3 : T, p4 : T, p5 : T, p6 : T, p7 : T, p8 : T, p9 : T) : String FormatC : string static Name Type Description format string p1 T p2 T p3 T p4 T p5 T p6 T p7 T p8 T p9 T p10 T function FormatC(format : String, p1 : T, p2 : T, p3 : T, p4 : T, p5 : T, p6 : T, p7 : T, p8 : T, p9 : T, p10 : T) : String FromRune : string static Constructs a string from the utf-8 code point of a rune. |Name|Type|Description| |---|---|---| |p0|integer| | function FromRune(p0 : Integer) : String FromRune : string static Constructs a string from a rune. |Name|Type|Description| |---|---|---| |p0|rune| | function FromRune(p0 : Rune) : String Get : rune String operator Get is deprecated. To iterate through a String use a StringRange (.All) or StringIterator (.Begin). |Name|Type|Description| |---|---|---| |index|integer| | function Get(index : Integer) : Rune IsNullOrEmpty : boolean static Returns if the given string is null or empty. |Name|Type|Description| |---|---|---| |p0|stringrange| | function IsNullOrEmpty(p0 : StringRange) : Boolean IsNullOrWhitespace : boolean static Returns if the given string is null, empty, or all whitespace. |Name|Type|Description| |---|---|---| |p0|stringrange| | function IsNullOrWhitespace(p0 : StringRange) : Boolean Join : string static Concatenates the given strings with the given separator string. |Name|Type|Description| |---|---|---| |separator|stringrange| | |value0|stringrange| | |value1|stringrange| | function Join(separator : StringRange, value0 : StringRange, value1 : StringRange) : String Join : string static Concatenates the given strings with the given separator string. |Name|Type|Description| |---|---|---| |separator|stringrange| | |value0|stringrange| | |value1|stringrange| | |value2|stringrange| | function Join(separator : StringRange, value0 : StringRange, value1 : StringRange, value2 : StringRange) : String Join : string static Concatenates the given strings with the given separator string. |Name|Type|Description| |---|---|---| |separator|stringrange| | |value0|stringrange| | |value1|stringrange| | |value2|stringrange| | |value3|stringrange| | function Join(separator : StringRange, value0 : StringRange, value1 : StringRange, value2 : StringRange, value3 : StringRange) : String Replace : string Returns a new string with all occurances of a substrings replaced with another substring. |Name|Type|Description| |---|---|---| |oldValue|stringrange| | |newValue|stringrange| | function Replace(oldValue : StringRange, newValue : StringRange) : String RuneIteratorFromByteIndex : runeiterator Finds the iterator from a byte index. WARNING: Strings are UTF8 and constructing an iterator from bytes indices can make an iterator in the middle of a rune. |Name|Type|Description| |---|---|---| |byteIndex|integer| | function RuneIteratorFromByteIndex(byteIndex : Integer) : RuneIterator RuneIteratorFromRuneIndex : runeiterator Finds the iterator from a rune index. WARNING: this may be slow as finding an iterator from rune index requires a linear search. |Name|Type|Description| |---|---|---| |runeIndex|integer| | function RuneIteratorFromRuneIndex(runeIndex : Integer) : RuneIterator Split : stringsplitrange Splits the string, according to the separator string, into a range of substrings. |Name|Type|Description| |---|---|---| |separator|stringrange| | function Split(separator : StringRange) : StringSplitRange StartsWith : boolean Returns if the string starts with the specified substring. |Name|Type|Description| |---|---|---| |p0|stringrange| | function StartsWith(p0 : StringRange) : Boolean SubString : string Name Type Description start runeiterator end runeiterator function SubString(start : RuneIterator, end : RuneIterator) : String SubStringBytes : stringrange Constructs a substring based upon a number of bytes. WARNING: strings are UTF8 so indexing by bytes could produce unexpected results on non-ascii strings. |Name|Type|Description| |---|---|---| |startByteIndex|integer| | |lengthInBytes|integer| | function SubStringBytes(startByteIndex : Integer, lengthInBytes : Integer) : StringRange SubStringFromRuneIndices : string Creates a substring from start and end indices. WARNING: this may be slow as finding an index for a UTF8 string requires a linear search. |Name|Type|Description| |---|---|---| |startIndex|integer| | |endIndex|integer| | function SubStringFromRuneIndices(startIndex : Integer, endIndex : Integer) : String ToLower : string Returns a copy of the string that has been converted to lowercase. |Name|Type|Description| |---|---|---| function ToLower() : String ToUpper : string Returns a copy of the string that has been converted to uppercase. |Name|Type|Description| |---|---|---| function ToUpper() : String Trim : stringrange Trims all leading and trailing whitespace. |Name|Type|Description| |---|---|---| function Trim() : StringRange TrimEnd : stringrange Trims all trailing whitespace. |Name|Type|Description| |---|---|---| function TrimEnd() : StringRange TrimStart : stringrange Trims all leading whitespace. |Name|Type|Description| |---|---|---| function TrimStart() : StringRange"
  },
  "docs/code_reference/nada_base_types/stringbuilder.html": {
    "href": "docs/code_reference/nada_base_types/stringbuilder.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Clear Constructor ToString Write WriteLine Properties Methods Clear : Void Name Type Description function Clear() StringBuilder : Void constructor Name Type Description function StringBuilder() ToString : string Name Type Description function ToString() : String Write : Void Name Type Description p0 T function Write(p0 : T) WriteLine : Void Name Type Description function WriteLine() WriteLine : Void Name Type Description p0 T function WriteLine(p0 : T)"
  },
  "docs/code_reference/nada_base_types/stringrange.html": {
    "href": "docs/code_reference/nada_base_types/stringrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Compare All CompareTo Begin Contains Current EndsWith Empty FindFirstOf End FindLastOf IsNotEmpty FindRangeExclusive OriginalString FindRangeInclusive MoveNext Replace RuneIteratorFromByteIndex RuneIteratorFromRuneIndex Split StartsWith Constructor SubString SubStringBytes ToLower ToString ToUpper Trim TrimEnd TrimStart Properties All : stringrange read-only var All : StringRange Begin : runeiterator read-only Returns the RuneIterator at the start of this range. var Begin : RuneIterator Current : rune read-only var Current : Rune Empty : boolean read-only var Empty : Boolean End : runeiterator read-only Returns the RuneIterator at the end (one past the last Rune) of this range. var End : RuneIterator IsNotEmpty : boolean read-only var IsNotEmpty : Boolean OriginalString : string read-only Returns the entire string that this range was constructed from. var OriginalString : String Methods Compare : integer static Compares the two string ranges and returns an integer to denote their relative sort order. |Name|Type|Description| |---|---|---| |left|stringrange| | |right|stringrange| | function Compare(left : StringRange, right : StringRange) : Integer CompareTo : integer Returns if this string range is equal to the given range. |Name|Type|Description| |---|---|---| |p0|stringrange| | function CompareTo(p0 : StringRange) : Integer Contains : boolean Returns if the string Contains the specified substring. |Name|Type|Description| |---|---|---| |p0|stringrange| | function Contains(p0 : StringRange) : Boolean EndsWith : boolean Returns if the string ends with the specified substring. |Name|Type|Description| |---|---|---| |p0|stringrange| | function EndsWith(p0 : StringRange) : Boolean FindFirstOf : stringrange Returns a StringRange that Contains the first occurrence of given StringRange. |Name|Type|Description| |---|---|---| |p0|stringrange| | function FindFirstOf(p0 : StringRange) : StringRange FindLastOf : stringrange Returns a StringRange that Contains the last occurrence of given StringRange. |Name|Type|Description| |---|---|---| |p0|stringrange| | function FindLastOf(p0 : StringRange) : StringRange FindRangeExclusive : stringrange Finds the first StringRange that starts with 'startRange' and ends with 'endRange'. This substring excludes 'startRange' and 'endRange'. |Name|Type|Description| |---|---|---| |startRange|stringrange| | |endRange|stringrange| | function FindRangeExclusive(startRange : StringRange, endRange : StringRange) : StringRange FindRangeInclusive : stringrange Finds the first StringRange that starts with 'startRange' and ends with 'endRange'. This substring includes 'startRange' and 'endRange'. |Name|Type|Description| |---|---|---| |startRange|stringrange| | |endRange|stringrange| | function FindRangeInclusive(startRange : StringRange, endRange : StringRange) : StringRange MoveNext : Void Name Type Description function MoveNext() Replace : string Returns a new string with all occurances of a substrings replaced with another substring. |Name|Type|Description| |---|---|---| |oldValue|stringrange| | |newValue|stringrange| | function Replace(oldValue : StringRange, newValue : StringRange) : String RuneIteratorFromByteIndex : runeiterator Finds the iterator from a byte index. WARNING: Strings are UTF8 and constructing an iterator from bytes indices can make an iterator in the middle of a rune. |Name|Type|Description| |---|---|---| |byteIndex|integer| | function RuneIteratorFromByteIndex(byteIndex : Integer) : RuneIterator RuneIteratorFromRuneIndex : runeiterator Finds the iterator from a rune index (the 'character' index). WARNING: this may be slow as finding an iterator from rune index requires a linear search. |Name|Type|Description| |---|---|---| |runeIndex|integer| | function RuneIteratorFromRuneIndex(runeIndex : Integer) : RuneIterator Split : stringsplitrange Splits the string, according to the separator string, into a range of substrings. |Name|Type|Description| |---|---|---| |separator|stringrange| | function Split(separator : StringRange) : StringSplitRange StartsWith : boolean Returns if the string ends with the specified substring. |Name|Type|Description| |---|---|---| |p0|stringrange| | function StartsWith(p0 : StringRange) : Boolean StringRange : Void constructor Name Type Description function StringRange() SubString : stringrange Constructs a StringRange from the given begin and end iterators. |Name|Type|Description| |---|---|---| |begin|runeiterator| | |end|runeiterator| | function SubString(begin : RuneIterator, end : RuneIterator) : StringRange SubStringBytes : stringrange Constructs a substring based upon a number of bytes. WARNING: strings are UTF8 so indexing by bytes could produce unexpected results on non-ascii strings. |Name|Type|Description| |---|---|---| |startByteIndex|integer| | |lengthInBytes|integer| | function SubStringBytes(startByteIndex : Integer, lengthInBytes : Integer) : StringRange ToLower : string Returns a copy of the string that has been converted to lowercase. |Name|Type|Description| |---|---|---| function ToLower() : String ToString : string Returns a new string of the current range. |Name|Type|Description| |---|---|---| function ToString() : String ToUpper : string Returns a copy of the string that has been converted to uppercase. |Name|Type|Description| |---|---|---| function ToUpper() : String Trim : stringrange Trims all leading and trailing whitespace. |Name|Type|Description| |---|---|---| function Trim() : StringRange TrimEnd : stringrange Trims all trailing whitespace. |Name|Type|Description| |---|---|---| function TrimEnd() : StringRange TrimStart : stringrange Trims all leading whitespace. |Name|Type|Description| |---|---|---| function TrimStart() : StringRange"
  },
  "docs/code_reference/nada_base_types/stringsplitrange.html": {
    "href": "docs/code_reference/nada_base_types/stringsplitrange.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes MoveNext All Current IsNotEmpty Properties All : stringsplitrange read-only var All : StringSplitRange Current : stringrange read-only var Current : StringRange IsNotEmpty : boolean read-only var IsNotEmpty : Boolean Methods MoveNext : Void Name Type Description function MoveNext()"
  },
  "docs/code_reference/nada_base_types/type.html": {
    "href": "docs/code_reference/nada_base_types/type.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes IsA IsAny reflectionobject anytype IsCastableTo IsDelegate boundtype IsRawCastableTo IsEnum delegatetype IsEnumOrFlags indirectiontype IsFlags IsHandle IsValue Library Name Properties IsAny : boolean read-only var IsAny : Boolean IsDelegate : boolean read-only var IsDelegate : Boolean IsEnum : boolean read-only var IsEnum : Boolean IsEnumOrFlags : boolean read-only var IsEnumOrFlags : Boolean IsFlags : boolean read-only var IsFlags : Boolean IsHandle : boolean read-only var IsHandle : Boolean IsValue : boolean read-only var IsValue : Boolean Library : library read-only var Library : Library Name : string read-only var Name : String Methods IsA : boolean Name Type Description baseType type function IsA(baseType : Type) : Boolean IsCastableTo : boolean Name Type Description toType type function IsCastableTo(toType : Type) : Boolean IsRawCastableTo : boolean Name Type Description toType type function IsRawCastableTo(toType : Type) : Boolean"
  },
  "docs/code_reference/nada_base_types/utf8encoding.html": {
    "href": "docs/code_reference/nada_base_types/utf8encoding.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes iencoding Properties Methods"
  },
  "docs/code_reference/nada_base_types/variable.html": {
    "href": "docs/code_reference/nada_base_types/variable.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes reflectionobject Properties Methods"
  },
  "docs/code_reference/nada_base_types/void.html": {
    "href": "docs/code_reference/nada_base_types/void.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/nada_base_types/wrapper.html": {
    "href": "docs/code_reference/nada_base_types/wrapper.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Core Methods Properties Base Classes Derived Classes Properties Methods"
  },
  "docs/code_reference/nada_base_types/zilchrune.html": {
    "href": "docs/code_reference/nada_base_types/zilchrune.html",
    "title": "Properties | ZilchEngine",
    "keywords": "Properties Methods"
  },
  "docs/getting_started.html": {
    "href": "docs/getting_started.html",
    "title": "Download the Engine | ZilchEngine",
    "keywords": "Welcome to ZilchHub, the open source project development hub for the Zilch Engine community. The Zilch Engine is a powerful simulation engine custom built in C++ by DigiPen Research & Development, a team of DigiPen graduates. Download the Engine min_specs.md Installing the Zilch Engine (and Zilch Launcher) Zilch Engine is downloaded through a separate application called the Zilch Launcher, which provides features such as multiple build installation and access, new project creation, and a browser for recent projects. Learn how to use the Zilch Launcher. Zilch Engine Features The Zilch Engine can be used to make simulations of any kind. Projects range from simple prototypes to professional 2D and 3D games, simple physics or graphics demonstrations to robust, realistic simulations. Versatility of the engine is made possible by the features in the following sections: Editor A discrete launcher that provides access to all project and engine builds Editor modes customized for 2D and 3D projects Full-featured text editor with dozens of hotkeys and configuration options Architecture Component-based architecture applied across the engine in the form of : NadaComponents for game object behaviors NadaFragment for fragment, vertex, and geometry shaders ContentComponents for Resources meta data Graphics Fully modifiable, scripted rendering pipeline With a physically-based renderer provided as the default renderer Dedicated render thread Physics Custom-built, three-dimensional, constraint-based physics engine Regions that can apply both pre-defined and user-defined PhysicsEffects Robust, customizable joint system Audio Scripted, node-based DST system 3D sound positioning and attenuation Nada High-level scripting and shader language Learning the Zilch Engine Not all users have the same level of experience, with Zilch Engine or game engines in general. The following guidelines and recommendations provide recommendations for any level of user with different types of background and experience to become productive in Zilch. Novice Users So you have never made a game or even programmed before. No problem! We have a sequence of tutorials and manual pages that will instruct you in the basics of both Zilch and game programming in general. We suggest users of this level take the following steps to get started. New To Everything The standard tutorial sequence will get you up and interacting with the Editor in the shortest amount of time possible. It is an excellent place to start if you want to dive right in. The ZilchManual contains a wealth of information If you find yourself curious about about a certain major engine system, imported or generated resource, or concept, such as components, Events, or archetypes. Some Prior Game Engine Experience If you have some experience with another game engine, you may wish to create a new project and start playing around. The best way to learn is to do and experiment. If you find yourself stuck or curious about a part of the engine you're unfamiliar with, check out the ZilchManual for detailed coverage of the major systems, individual elements, and concepts unique to the Zilch Engine. Once you've mastered the basics taught in the Basics and Beginner tutorial_sequences and feel comfortable with the Editor UI and essential features, continue down to Intermediate Users. Intermediate Users If you have some experience making games and programming, you will be able to pick things up fairly quickly. Start with the nada_in_zilch. You will probably want to jump into scripting pretty quickly. Read the zilchmanual starting with the editor, architecture, and gameplay sections. Browse physics, editor and audio sections for topics that are applicable to your project. Read the remaining zilchmanual sections at your own pace. If you are not fully confident in your ability to start operating in the engine, try out some tutorials. Remember that you can always look things up in the code_reference"
  },
  "docs/getting_started/features.html": {
    "href": "docs/getting_started/features.html",
    "title": "Ten Exciting Features of the Zilch Engine (and also Spaces) | ZilchEngine",
    "keywords": "Ten Exciting Features of the Zilch Engine (and also Spaces) Events Zilch Engine's Event system takes component-based design to new levels of freedom and flexibility. A Zilch Engine Event mimics its real-world counterpart: a situation that arises. How your game handles that situation is up to you. When your hero takes damage, the camera following her can shake. When a cannonball reaches the apex of its flight, an audio filter can be applied to the level's music. Every game object is a potential event dispatcher, and every object's events are up for grabs. When you work with events from the beginning of a project, you allow yourself greater freedom to rapidly explore new features and ideas with minimal refactoring of your existing code. Nested Archetypes An archetype defines a game object, its child objects, and even other nested archetypes within the hierarchy. Need to make changes to an Archetype that is nested under multiple of other Archetypes? We've got you covered. Every Archetype will automatically receive updates made to nested Archetypes. Did all those Archetypes have local modifications made to the nested one? We've still got you covered. Zilch Engine preserves local modifications when updates are made to an Archetype. Nada Nada is a high-level programming language developed by us to solve some of the most interesting problems in game development. Use Nada to program and customize game scripts, editor tools and commands, and even your shaders. All of that, done in an integrated text editor equipped with full code completion and inline tooltips from documentation. Nada features extremely fast compilation and patching/hot loading for live game editing. C++ Plugins Scripts are awesome, but at the end of the day they can't do everything that life has to offer. Whether it's a library that you want to use or you need to do some heavy lifting for performance reasons, C++ can always get the job done. With a C++ plugin you have all the power you need, wrapped up and ready to use in your game. There's no complicated setup, just create a new plugin resource and it will make you a Visual Studio solution, pre-hooked with a new component. Changes to your plugin are automatically detected by Zilch Engine, and your project updates itself on the spot. Lightweight Game Objects Zilch Engine's game objects are lightweight and versatile. We call them cogs because they're 'Game Object Compositions' (and “gocs” doesn't sound as cool). Cogs can house as many components and child objects as needed, and the engine is incredibly good at making and destroying them, so you never have to worry about object pooling. Shader Compositing Zilch Engine's Materials are a component based way to write shaders. Write individual shader fragments to encapsulate a desired behavior, and add the fragments you want to your Materials, just like components, to create the desired effects. The shader compositor does all the work of putting the components together to create a complete shader program for graphics hardware. It also controls the flow of inputs and outputs between fragments, so that a single fragment can modify data, like UV coordinates, before it is used as input to a following fragment. Scriptable Rendering Pipeline We're in the business of rapid iteration, and the rendering pipeline is no exception. Zilch Engine offers unparalleled control over the aesthetics of your game with the ability for scripts to define a series of tasks for the renderer. Written in script, your rendering pipeline becomes anything you can imagine, make your pipeline change dynamically with a simple condition, or even in response to an Event. Add any rendering technique to your game, including the ones that haven't been invented yet. But there's no need start from scratch: Zilch Engine comes pre-loaded with all the scripts and shaders needed for a modern physically based rendering pipeline. If that's what you're looking for, you're done. If you want more, you can use it as a starting point for customization. Scriptable Sound Nodes Zilch Engine features a powerful custom audio system. At its core is the sound node graph, a flexible, fully scriptable structure that controls the flow of audio through your game. Sound nodes can play or generate audio, apply effects, control parameters, and more, and they can be added, removed, and swapped at any time. When the sound node graph is used together with Zilch Engine's built-in event system, it's easy to apply DSP effects to just the right sounds, just when you need them. In-House Physics Like most things in the Zilch Engine, our physics system is developed by us. That may seem like an unnecessary amount of work, but we want features that pair well with the design and vision for Zilch Engine as a whole and we don't want to be held back. Zilch Engine's physics system includes features like collision groups that allow detection without resolution, regions that can apply force effects, and even scriptable joint definitions that run through our constraint solver. One-Click Network Replication Networking is easy! ... Okay we're kidding, but the road to easier networking is full of innovation, and what's easier than one mouse click? Zilch Engine continues to use component based design to every advantage we can come up with. Just add the NetObject component and now any property from your object can be replicated over the network with a single click of a button in the UI. Start from our networked project template to get a head start with some of the harder stuff. Spaces The concept of the space is quite unique: a space is a collection of game objects that interact normally with one another, but not with objects in other spaces. Physics is simulated in each space separately, so objects in two spaces running simultaneously could experience completely different gravity, force effects, and collision rules. Separate spaces can be paused independently, so your game can be frozen in one space while the animations keep going in another, such as in a menu. The output of cameras from separate spaces can be overlaid, split screened, or embedded in objects in a level, so an in-world TV screen could be used to play a game-within-a-game. A space can even be created with no cameras in it at all, serving instead as a storage repository for data that should persist between levels or even networked game sessions."
  },
  "docs/getting_started/min_specs.html": {
    "href": "docs/getting_started/min_specs.html",
    "title": "Zilch Launcher & Editor | ZilchEngine",
    "keywords": "Zilch Launcher & Editor Operating System: Windows 7 64-bit or later Processor: Quad-core 2.5 GHz or faster Graphics Card: NVIDIA GeForce 470 GTX or better Memory: 4 GB RAM or more Hard Disk: At least 2 GB available C++ Plugin Development Plugin development has the same requirements as the launcher and editor with the addition of: IDE: Visual Studio 2015"
  },
  "docs/nada_documentation.html": {
    "href": "docs/nada_documentation.html",
    "title": "| ZilchEngine",
    "keywords": "Developer documentation of the Nada Scripting Language."
  },
  "docs/nada_documentation/automaticbinding.html": {
    "href": "docs/nada_documentation/automaticbinding.html",
    "title": "Internal Binding | ZilchEngine",
    "keywords": "Nada comes with a set of templates/macros that allow your C++ classes and functions to be called by Nada code. We recommend that you read up on the LibraryBuilder documentation first. Internally, the macros simply create a LibraryBuilder and automatically add BoundTypes, Properties, and Functions to it. Internal Binding The first thing we need to do is create a class that derives from StaticLibrary. That class must be visible to all the places where we're going to be doinNadach binding (generally in a header). We can use thNadachDeclareStaticLibrary macro to declare the entire class and singleton implementation. Below we have an example of a header file that contains the static library Wallaby and two example classes that might belong to that library. Remember, the name of the library can be anything you want. # pragma once #include \"Nada.hpp\" using namespace Nada; NadaDeclareStaticLibrary(Wallaby); class Character : public INadaObject { public: // Using internal binding we'll declare that this class should be registered with Nada // This macro is only a declaration, and somewhere in a single cpp file we must use the 'NadaDefineBaseType' macro // ReferenceType means it will be allocated on the heap and always referenced by handle NadaDeclareBaseType(Character, TypeCopyMode::ReferenceType); // Various types of members we may want to bind Character(); virtual ~Character(); virtual void Speak() const; void Yell(float volume) const; void Yell() const; static int ComputeLives(float mana, int level); static const int MaxLives = 100; int Lives; float InternalHealth; float GetHealth() const; void SetHealth(float value); }; class Player : public Character { public: // Note here that we use the 'Derived' macro to inform Nada that Player derives from Character // This allows implicit casting operations in Nada as well as dynamic down-casts // The TypeCopyMode of the base type is used here (ReferenceType can only inherit from ReferenceType, and so on) NadaDeclareDerivedType(Player, Character); // Various types of members we may want to bind String Name; Player(const String& name, float startingHealth); virtual ~Player(); // Note that we don't bind Speak again because it gets inherited from the base virtual void Speak() const; }; With Internal Binding we must use the NadaDeclareBaseType and NadaDeclareDerivedType macros in a public section of the class (typically at the beginning, but make sure to use public!). The Character class also publicly inherits from INadaObject, which is not required but allows the character->NadaGetDerivedType() function to be virtual, which will retrieve the BoundType for Player instead of Character. The following code should appear once within a translational unit (do not put this within a header): # include \"Wallaby.hpp\" NadaDefineStaticLibrary(Wallaby) { // We have to initialize all types that we have bound to our library // Ideally we could use pre-main or automatic registration, but there's a major issue where // compilers will automatically remove \"unreferenced\" classes, even if they are referenced // by globals/pre-main initializations. This method ensures that all classes will be properly bound NadaInitializeType(Character); NadaInitializeType(Player); } // This allows us to define all the members on Character (as well as which library it belongs to: Wallaby) // The 'builder' and 'type' members are only there to let the user know they can do builder->... or type->... NadaDefineType(Character, \"Character\", Wallaby, builder, type) { // The 'NadaNoNames' macro is simply a way of saying that there are no parameter names for the argument types // Nada supports named parameter calling, so feel free to provide them // We should generally always bind a constructor and destructor, // especially if this is a dervied class and the base is constructable NadaBindConstructor(builder, type, Character, NadaNoNames); NadaBindDestructor(builder, type, Character); // The 'NadaNoOverload' lets the binding know that there are no overloads of the same name // Otherwise, we'd have to pass in the type/signature of the member function in parentheses NadaBindMethod(builder, type, &Character::Speak, NadaNoOverload, \"Speak\", NadaNoNames); // Bind both overloads of Yell NadaBindMethod(builder, type, &Character::Yell, (void (Character::*)(float) const), \"Speak\", \"volume\"); NadaBindMethod(builder, type, &Character::Yell, (void (Character::*)() const), \"Speak\", NadaNoNames); // The binding templates/macros can automatically determine if you're binding a static or instance member function // You can also bind global functions to a class NadaBindMethod(builder, type, &Character::ComputeLives, NadaNoOverload, \"ComputeLives\", \"mana, level\"); // Nada does not have the concept of 'const' (therefore we remove all consts from bound C++ members) // It is up to us to be very careful here and bind const members as 'Get' only NadaBindField(builder, type, &Character::MaxLives, \"MaxLives\", PropertyBinding::Get); NadaBindField(builder, type, &Character::Lives, \"Lives\", PropertyBinding::GetSet); // We can specially bind getters and setters in C++ as a single property in Nada NadaBindProperty(builder, type, &Character::GetHealth, &Character::SetHealth, \"Health\"); } NadaDefineType(Player, \"Player\", Wallaby, builder, type) { // Be sure to always pass the correct types in to all the bindings // Do NOT pass Character, for example, and avoid copy pasting from other bindings! // Even though we only have a non-overloaded constructor, we unfortunately cannot // detect the argument types automatically for constructors due to a limitation in C++ // The argument types must be explicitly passed in NadaBindConstructor(builder, type, Player, \"name, startingHealth\", const String&, float); NadaBindDestructor(builder, type, Player); NadaBindField(builder, type, &Player::Name, \"Name\", PropertyBinding::GetSet); // Note that we don't bind Speak again because it gets inherited from the base } The macro NadaDefineStaticLibrary is a place where we must initialize all types defined within our library. Because that list of types must exist somewhere within code, we often place that entire NadaDefineStaticLibrary in its own translational unit (cpp). The macros NadaDefineType can be placed all in a single file, or next to their respective class implementations (such as in a Character.cpp and Player.cpp). Be aware that placing them all in the same file encourages merge conflicts. The parameters builder and type can be used to out A call to GetLibrary will automatically build the library. If you place breakpoints or prints in the NadaDefineStaticLibrary or NadaDefineType macro-functions you will see the code running. GetLibrary will most likely get called when you populate dependencies: dependencies.push_back(Wallaby::GetLibrary()); External Binding If you don't want your classes to have knowledge abouNadach (for example you do not wish to includNadach.hpp in your core class headers), you can use our External Binding macros. The external binding has one major limitation which is that you cannot callNadachGetDerivedType` on a C++ base class, because the function will not exist. It is possible to mix internal and external binding together, which is especially common when binding types that you cannot change the definition of. External binding works the same as internal binding, except the following differences: NadaDeclareBaseType and NadaDeclareDerivedType become NadaDeclareExternalBaseType and NadaDeclareExternalDerivedType Must be used outside the class definition in a place where the rest of the binding can see. Typically you declare them in a header or at the top of a translational unit that you place all of the external binding. NadaDefineType becomes NadaDefineExternalType Binding Enumerations or Flags Since enumerations cannot be virtual or have methods declare inside of them, all enums must be bound using External Binding. At the moment, enumerations MUST be the same size as the int type, which you can generally force either be using the new C++ class enums or by making an enum value set to 0x7FFFFFFF. Inside the NadaDefineExternalType macro at the beginning use the following lines: // You can also pass in SpecialType::Flags if all the values of the enum are bit flags NadaBindEnum(builder, type, SpecialType::Enumeration); NadaBindEnumValue(builder, type, YourEnum::ValueName, \"ValueName\"); Built-in Types Available To Binding The following list is not exhaustive, but contains the most common types that we accept in binding automatically. Technically anything defined in Nada.hpp that either internal or external binding and is bound to the Core library can be used. Note that most primitives (int, float, etc) are simply type-defined as Integer, Real, etc and can be used in binding. Boolean Boolean2 Boolean3 Boolean4 Byte Integer Integer2 Integer3 Integer4 Real Real2 Real3 Real4 Quaternion String DoubleReal DoubleInteger Handle (binds to a special type that can accept any handle to any object type) Delegate (binds to a special type that can accept any delegate) Any (can accept any type in Nada) StringBuilderExtended [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] [[ | ArrayClass ]] The following types are automatically redirected to the Nada Integer type (except unsigned long long which redirects to DoubleInteger): char signed char signed short unsigned short unsigned int signed long unsigned long unsigned long long Limitations At the moment, there is no way in binding to accept templates (such as HashMapClass or ArrayClass) templated upon any other type other than specified above."
  },
  "docs/nada_documentation/binding.html": {
    "href": "docs/nada_documentation/binding.html",
    "title": "Compiling C++ | ZilchEngine",
    "keywords": "To get started, download the latest F{Nada library}. For convenience, all of the Nada C++ code is compacted into one header and one cpp. WARNING: Nada uses its own containers, including Array, HashMap, String, etc. For compatibility with STL, the containers support .begin() and .end() iterators, as well as .size(). The String class supports .c_str(). Compiling C++ Include the Nada.cpp into your compilation process, and start by having your main include the Nada.hpp # include \"Nada.hpp\" using namespace Nada; int main() { return 0; } So long as Nada.cpp is built and linked in, this program should fully compile. Compiling a Nada script # include \"Nada.hpp\" using namespace Nada; int main() { // Any one time startup and static initialization Nada needs to do // This also registers a custom assertion handler (Nada code has many user friendly asserts!) NadaSetup setup(StartupFlags::None); // A project contains all of the code we combine together to make a single Nada library // The project also sends events for compilation errors that occur (includes friendly messages / error codes) Project project; // Here, we can register our own callback for when compilation errors occur // The default callback prints the file, line/character number, and message to stderr EventConnect(&project, Events::CompilationError, DefaultErrorCallback); // Add some test Nada code that does NOT compile, just to try it out! // The second parameter provides a name for when compilation errors come up, in this case 'MyCode' project.AddCodeFromString(\"class Foozle++\", \"MyCode\"); // Create a list of dependent libraries, in our case we're really not adding anything to this // A side note: the Core library in Nada is always added as a dependency, because Core includes // things like Integer, Boolean, Real, the basic vector types, String, etc Module dependencies; // Compile all the code we added together into a single library named \"Game\" // We already know this is going to fail to compile, so the error callback // we provided above should get called project.Compile(\"Game\", dependencies, EvaluationMode::Project); return 0; } Running a Nada script As a language meant to be called and run from C++, Nada has no 'main entrypoint' of its own. Instead it is up to the user to instantiate types defined witNadailch scripts and call functions on them (or invoke static methods). Create a Nada script with code that we want to test out. Player.Nada class Player { var Health : Real = 100; [Static] function SayHello() { Console.WriteLine(\"Hello world!\"); } function TakeDamage(amount : Real) { this.Health -= amount; Console.WriteLine(\"Ouch! I've got `this.Health` health left!\"); } } From the C++ side change AddCodeFromString to AddCodeFromFile. project.AddCodeFromFile(\"Player.nada\"); WARNING: Make sure to put the Player.nada file side by side with the executable, or make sure that the working directory is setup correctly so that the executable can find the script file. We now need to compile the code into a Library, and finally link that library into an ExecutableState. A Library stores all the compiled types and functions. The ExecutableState has its own stack and virtual machine, and is responsible for executing Nada code. # include \"Nada.hpp\" using namespace Nada; int main() { // Any one time startup and static initialization Nada needs to do // This also registers a custom assertion handler (Nada code has many user friendly asserts!) NadaSetup setup(StartupFlags::None); // A project contains all of the code we combine together to make a single Nada library // The project also sends events for all compilation errors that occur (which includes friendly messages and error codes) Project project; // Here, we can register our own callback for when compilation errors occur // The default callback prints the file, line/character number, and message to stderr EventConnect(&project, Events::CompilationError, DefaultErrorCallback); // Load the Nada code for our Player class from disk (make sure the working directory is setup properly) project.AddCodeFromFile(\"Player.nada\"); // Create a list of dependent libraries, in our case we're really not adding anything to this // A side note: the Core library in Nada is always added as a dependency, because Core includes // things like Integer, Boolean, Real, the basic vector types, String, etc Module dependencies; // The 'Compile' function actually returns a Nada Library // Be careful! If the code fails to compile, this function will return null LibraryRef library = project.Compile(\"Test\", dependencies, EvaluationMode::Project); ErrorIf(library == nullptr, \"Failed to compiler library\"); // We want to link together all the libraries that we depended upon, along with our own library dependencies.push_back(library); // Link all the libraries together into one ExecutableState ExecutableState* state = dependencies.Link(); ErrorIf(state == nullptr, \"Failed to link libraries together\"); // Find the Player type we created in Nada BoundType* playerType = library->BoundTypes.findValue(\"Player\", nullptr); ErrorIf(playerType == nullptr, \"Failed to find a Nada type named 'Player'\"); // Find the static SayHello function we defined on the Player type // We pass in an array of types to specify the arguments we want, in this case its an empty array // We also pass in the void type because we don't expect a return value Function* sayHelloFunction = playerType->FindFunction(\"SayHello\", Array<Type*>(), NadaTypeId(void), FindMemberOptions::Static); ErrorIf(sayHelloFunction == nullptr, \"Failed to find function 'SayHello' on Nada type 'Player'\"); // Find the instance 'TakeDamage' function on the Player which accepts a Real and returns nothing (Void) Function* takeDamageFunction = playerType->FindFunction(\"TakeDamage\", Array<Type*>(ZilchInit, NadaTypeId(Real)), NadaTypeId(void), FindMemberOptions::None); ErrorIf(takeDamageFunction == nullptr, \"Failed to find function 'TakeDamage' on Nada type 'Player'\"); // Find the instance data member 'Health' on the Player (a data member is called a Field in Nada) Field* healthField = playerType->InstanceFields.findValue(\"Health\", nullptr); ErrorIf(healthField == nullptr, \"Failed to find field 'Health' on Nada type 'Player'\"); // Setup the console so that when we call 'Console.WriteLine' it outputs to stdio EventConnect(&Console::Events, Events::ConsoleWrite, DefaultWriteText); // We can also setup the console so that any 'Read' functions will attempt to read from stdin EventConnect(&Console::Events, Events::ConsoleRead, DefaultReadText); // The call object uses its constructor to initialize a stack frame in // the ExecutableState, and removes that stack frame inside its destructor // It is important to wrap this in a scope to ensure destruction happens when we intend it to // Player.SayHello() { // The exception report stores any exceptions that may have occurred while executing code // Exceptions include accessing arrays out of bounds, dereferencing null, etc ExceptionReport report; // Invoke the SayHello function, which should print out to the console Call call(sayHelloFunction, state); call.Invoke(report); // You can check 'report.HasThrownExceptions()' to see if the script threw an exception // This is useful if you want to stop a particular script from running again, or abort the program } // var playerInstance = new Player(); // playerInstance.Health = 200.0; // playerInstance.TakeDamage(10.0); { // Allocate the player and call a default constructor if one is provided // It is legal to allocate Nada objects that have no defined default constructor // The object will first be entirely set to zero (all null and zero values) // Then the pre-constructor will run, which initializes any members in the class to the value after the '=' ExceptionReport report; Handle playerInstance = state->AllocateDefaultConstructedHeapObject(playerType, report, HeapFlags::ReferenceCounted); // Set the health field by invoking its automatically generated setter function // Getters and setters always take the form of: // Get() : PropertyType // Set(value : PropertyType) // We're invoking the setter, so parameter 0 must be of type Real { Call call(healthField->Set, state); call.Set<Handle>(Call::This, playerInstance); call.Set<Real>(0, 200.0f); call.Invoke(report); } // Now invoke the member function 'TakeDamage' { Call call(takeDamageFunction, state); call.Set<Handle>(Call::This, playerInstance); call.Set<Real>(0, 10.0f); call.Invoke(report); } } // Finally, we're done with the executable state so get rid of it delete state; return 0; }"
  },
  "docs/nada_documentation/boundtype.html": {
    "href": "docs/nada_documentation/boundtype.html",
    "title": "Enumerating Members | ZilchEngine",
    "keywords": "NOTE: All code written here assumes using namespace Nada Bound types are created through the [ | LibraryBuilder]. This article will cover particular areas of interest on a bound type. Enumerating Members To loop through all properties on a type, you can use the AllProperties array. The array stores both Property objects and Fields (which inherit from Property). The order of AllProperties is the order it was defined in, making it ideal for displaying properties on a property-grid or serialization (turns out users really hate it when the properties are in the wrong order). The containers we use in Nada are range based containers, so the typical way you iterate through them is not the same as the STL. The method all() on Array will return a range (basically a struct that stores the STL equivalent of the begin() and end(). To walk the range, first check if its empty() then call front() to get the current value. At the end of the loop, call popFront() to iterate to the next item. PropertyArrayRange range = boundType->AllProperties.all(); while (range.empty() == false) { Property* property = range.front(); // We can use DynamicCast to see if this is a field Field* field = TypeBinding::DynamicCast<Field*>(property); if (field != nullptr) { // ... } range.popFront(); } You can also use a built in 'for each' helper macro that wraps this behavior: NadaForEach(Property* property, boundType->AllProperties.all()) { // Do something with 'property' } Handle Manager ToStringFunction BaseType"
  },
  "docs/nada_documentation/handles.html": {
    "href": "docs/nada_documentation/handles.html",
    "title": "Handle Managers | ZilchEngine",
    "keywords": "A handle is the internal primitive Nada uses to represent all allocated classes within the language. A handle's usage is similar to that of a pointer or smart_ptr in C++. Handles have a 'Data' section which can store any data that the user wants (a HandleManager should know how to interpret this data). Handles may: Reference count upon copy constructing, assignment, and destruction Safely delete an object and null out all other references Directly point at objects in an unsafe manner (like classic C++ pointers) Change any of these behaviours based upon the HandleManager they store Store the type of the object they're pointing at (used for virtual behavior) NOTE: The technique we currently use for HeapManager this is by giving each allocated object a UniqueId (the handle also stores the UniqueId of the object it points at). Handle Managers The HandleManager is an interface that can be implemented to provide custom behavior for handles (such as for custom reference counting) There are a few built-in handle managers: //HeapManager//: One exists per ExecutableState Reference counted Allows deleting Safely nulls out all other handles to the same object Used any time we use the new keyword in Nada (unless the type is a C++ type that overrides the HandleManager) Or state->AllocateHeapObject Or state->AllocateDefaultConstructedHeapObject //StackManager//: One exists per ExecutableState (because each state has its own stack) Does not allow deleting (can't delete stack memory) Safely nulls out all other handles to the same object when the stack returns Used any time a struct is created on the stack (local keyword) //PointerManager//: Global manager (does not require an ExecutableState) Does not allow deleting (may be allowed in the future) Does not null out other handles to the same object (unsafe) Typically used when a C++ object is passed into Nada by pointer //StringManager//: Global manager (does not require an ExecutableState) Strings are internally reference counted and are C++ objects Strings are immutable and not deletable, therefore there is no need to null out instances Constructing a Handle It's not often that a handle needs to be constructed manually, however the situation may arise Handle handle; handle.Type = YourBoundType; handle.Manager = state->GetHandleManager<ManagerType>(); handle.Manager->ObjectToHandle(valueMemory, someHandle);"
  },
  "docs/nada_documentation/librarybuilder.html": {
    "href": "docs/nada_documentation/librarybuilder.html",
    "title": "Creating A Value Type (Struct) | ZilchEngine",
    "keywords": "NORE: All code written here assumes using namespace Nada The LibraryBuilder allows us to create Nada types from C++ and add native functions, properties, or fields to those types. Creating A Value Type (Struct) Say we want to create a Ray type from C++ that takes a position and normalized direction in 3D. Our type will contain a Real3 for translation and a Real3 for direction. We'll want this type to be considered a struct type (ValueType) in Nada which means that it gets fully copied on every assignment. The first thing we're going to want to do is define the offset of the members. const size_t PositionOffset = 0; const size_t DirectionOffset = PositionOffset + sizeof(Real3); It would obviously be more beneficial to actually create a Ray struct in C++ and use the automatically generated member offsets (via the standard offsetof macro). This would be actually safer too due to alignment issues on some platforms. // Use whatever name you would like for your library LibraryBuilder builder(\"Wallaby\"); // This doesn't take into account possible alignment requirements of data types, but we'll keep it simple size_t raySize = sizeof(Real3) + sizeof(Real3); // Create the Ray struct type (ValueType means struct) BoundType* rayType = builder.AddBoundType(\"Ray\", TypeCopyMode::ValueType, raySize); // We can bind the members either as Fields or Properties // Fields are faster to access because there is no call overhead for the get/set // Sometimes you might want to bind a Property if its a primitive type Nada doesn't support, // such as a 'short' and the property can automatically convert it into an Integer for Nada builder.AddBoundField(rayType, \"Position\", NadaTypeId(Real3), PositionOffset, MemberOptions::None); builder.AddBoundField(rayType, \"Direction\", NadaTypeId(Real3), DirectionOffset, MemberOptions::None); This type is now usable in Nada. We can access the Position and Direction and copy it around, but it has no other functionality. WARNING: A struct or ValueType is considered memory copyable, and it is always valid to zero out its memory. Do NOT add a field on a Nada struct that requires proper construction, assignment or destruction. Creating a Function When writing C++ code that can be called from Nada there is only one type of signature that Nada understands: void Function(Call& call, ExceptionReport& report) Even though Nada provides a higher level API that allows it to call many C++ functions of different signatures, they all boil down to this. Nada's binding API uses templates to generate a function of this signature. In the early days of Nada, when a user function was called they were basically given an unsigned char* that pointed to the current Nada stack frame. Parameters on the stack were sequentially ordered (with padding) and the users had to manually offset pointers to pull out the values. The Call makes this much easier by providing functions to automatically pull values off the stack and perform conversions if needed (e.g. our String to std::string). Even with the Call helper, it is still important to understand exactly what is on the Nada stack. Remember that Call is also what we use when we're making a call to a Nada function (this is just the other side of it when we're receiving a call). Lets add a function to our Ray called GetPointOnRay which takes in a Real 'distance' value and outputs a position along the ray (starting from Position going along the Direction). First we start by writing a function in C++ with the above signature: void GetPointOnRay(Call& call, ExceptionReport& report) When we bind this function to Nada via the LibraryBuilder, this function will look like: function GetPointOnRay(distance : Real) Since this function is going to be an instance function, then we know that 'this' is implicitly passed in. Call allows us to easily grab 'this' as a Handle. Nada automatically protects against calling a member function on a null object, so we can assume our this will always be non-null here (other handles such as parameters may need to be checked!). Be sure to store handles by reference because copying them incurs a reference count cost. Once we have the Handle we can call Dereference to get a direct pointer to the object. void GetPointOnRay(Call& call, ExceptionReport& report) { // Note: Call's Get and Set take parameter indices, however there are two special indices // Call::This and Call::Return which specify the return location and this handle location on the stack Handle& rayHandle = call.Get<Handle>(Call::This); byte* rayData = rayHandle.Dereference(); // Get the distance from the parameter list using the Call object (distance is parameter 0) Real distance = call.Get<Real>(0); // Nada's calling convention is to pass parameters first and then the implicit 'this' handle after // We could have used the old method to grab the stack from the call and then we know // 'distance' would be at position 0 and any other parameters we could pass would be after the distance sizeof(Real) // We know the byte offsets here, though as mentioned above you may // want to create a struct for Ray to make this much easier (or store these offsets as constants) Real3& position = *(Real3*)(rayData + PositionOffset); Real3& direction = *(Real3*)(rayData + DirectionOffset); // Compute the position along the ray given the distance and return the result via the Call Real3 result = position + direction * distance; call.Set<Real3>(Call::Return, result); } We can use Nada's exception handling to guard against bad parameter values, such as a negative distance: if (distance < 0) { // We should always make sure to return after throwing a Nada exception // This does NOT invoke C++ exception handling and will not automatically // unwind the C++ stack (but it will unwind Nada's stack up to the last Call unless caught) call.GetState()->ThrowException(\"The distance cannot be negative\"); return; } In our experience (especially for game engines) it is best to keep the number of exceptions thrown low, and always have a way to prevent the exception via logic.. For example in this case the user could check for a negative distance themselves before calling to prevent the exception. To actually bind this function to our Ray type: builder.AddBoundFunction(rayType, \"GetPointOnRay\", GetPointOnRay, OneParameter(core.Real, \"distance\"), core.VoidType, FunctionOptions::None); The 'OneParameter' function is a helper that creates an Array of DelegateParameters to describe all the parameter types and names to Nada. You could otherwise just create the array yourself or use other helpers such as 'TwoParameters', etc. FunctionOptions allows us to specify whether this is a static function or not. NOTE: We encourage you to write your own macros and templates to wrap up function binding, or use our higher level binding API. Creating a Property A Property in Nada looks similar to a Field but when you attempt to read its value it will call a 'get' function, and when writing to its value it will call a 'set' function. The get takes no parameters and returns the value, and the set takes one parameter (the value to set) and returns nothing. Properties can also be made read only or write only just by passing in null for the set or the get (both cannot be null). Lets make Direction a property that automatically normalizes itself upon being set. Start by making two Nada style functions in C++. void GetDirection(Call& call, ExceptionReport& report) { // Get takes no parameters (except an implicit 'this' if this is an instance property) Handle& rayHandle = call.Get<Handle>(Call::This); byte* rayData = rayHandle.Dereference(); // Our getter does nothing special (just return the value directly) Real3& direction = *(Real3*)(rayData + DirectionOffset); call.Set<Real3>(Call::Return, direction); } void SetDirection(Call& call, ExceptionReport& report) { // Set takes one parameter as well as the an implicit 'this' if this is an instance property Handle& rayHandle = call.Get<Handle>(Call::This); byte* rayData = rayHandle.Dereference(); // Get the value that the user wants to set Real3& newDirection = call.Get<Real3>(0); // Get a reference to the value on our type Real3& direction = *(Real3*)(rayData + DirectionOffset); // We're going to perform safe normalization on the direction (this will either normalize it or zero it out) direction = Math::AttemptNormalize(newDirection); } The last thing we have to do is replace the call to AddBoundField for Direction with: builder.AddBoundProperty(rayType, \"Direction\", NadaTypeId(Real3), SetDirection, GetDirection, MemberOptions::None); You can use AddExtensionProperty or AddExtensionFunction to add a pretend instance or static member to another type that is not your own. This works especially well for adding component properties to a composition (e.g. composition.RigidBody, composition.Model, etc). For extensions, the call.Get<Handle>(Call::This) will return the handle to the other type. Creating A Reference Type (Class) The main difference between a class and a struct in Nada is that classes are always allocated on the heap. Class types are zeroed out when they are allocated (all members become 0 or null, including composed structs on that class). This is guaranteed to be safe for all classes written entirely within Nada and is the main reason why constructors are optional for Nada types, however, for a type bound from C++ we often need to invoke constructors or destructors on members. Moreover, if the C++ class has a virtual table, we always have to be sure to invoke the constructor to initialize it. If we're allowing Nada to allocate our C++ object (via the HeapManager) then we need to be sure to provide a constructor and destructor for it. Using placement new and explicitly invoking the C++ destructor is the best way to achieve proper behavior. void ClassDefaultConstructor(Call& call, ExceptionReport& report) { // Get takes no parameters (except an implicit 'this' if this is an instance property) Handle& classHandle = call.Get<Handle>(Call::This); byte* classData = rayHandle.Dereference(); // The class data at this point should be all zeroed out, we need to use *placement new* to construct our type new (classData) Class(); } void ClassDestructor(Call& call, ExceptionReport& report) { // Get takes no parameters (except an implicit 'this' if this is an instance property) Handle& classHandle = call.Get<Handle>(Call::This); Class* classData = (Class*)rayHandle.Dereference(); // Explicitly invoke the destructor on our type classData->~Class(); } And finally to binding the default constructor and destructor to our type using the LibraryBuilder: builder.AddBoundDefaultConstructor(classType, ClassDefaultConstructor); builder.AddBoundDestructor(classType, ClassDestructor); Take note that you can use other functions like AddBoundConstructor to bind constructors with parameters. It is often a good idea to have a default constructor (if it makes sense) because it simplifies inheritance and makes other features possibly like automatic serialization."
  },
  "docs/nada_documentation/serialization.html": {
    "href": "docs/nada_documentation/serialization.html",
    "title": "| ZilchEngine",
    "keywords": "When binding Nada it is common to use reflection to serialize members or properties of a class written in Nada. This guide shows common approaches that we use to serialize data types. Because C++ classes can be bound using Nada's binding library, you can also technically use this to serialize C++ classes (though most game engines provide this functionality themselves). At the end of the day, serialization always comes down to writing out primitives such as integers, floats, strings, and characters, as well as representing larger data structures such as arrays, maps and objects. Every Nada class or struct creates a BoundType which defines all the members (fields, properties, and methods) on that type (binding a C++ type also creates this). A Property is a member that has a get or set function, and a Field is a typical member variable. In Nada, a Field is implicitly a Property and automatically implements a get and set function. This means we can always just generically use Property instead of having to distinguish from Field and Property, because Field is-a Property. If your serialization format reads in names of members, then you can find a data-field or property via: void SerializeMember(const String& name, BoundType* type) { // This will find an instance member that we can call 'get' or 'set' on Property* member = boundType->FindPropertyOrField(name, FindMemberOptions::None); // If we didn't find the member, early out if (member == nullptr) { printf(\"Unable to find member of name %s on type %s\", return; } // Because the user can choose to define only 'get' or only 'set', then we must check for null if (member->Get == nullptr || member->Set == nullptr) return; // Check if we're deserializing / reading, or if we're writing (this is your variable) if (reading) { // Getters take no parameters, and return a value ExceptionReport report; Call call(member->Get, state); call.Invoke(report); if (report.HasThrownExceptions()) return; } }"
  },
  "docs/zilch_editor_documentation.html": {
    "href": "docs/zilch_editor_documentation.html",
    "title": "zilchmanual | ZilchEngine",
    "keywords": "zilchmanual The Zilch Manual is a comprehensive overview of the Zilch Engine Editor , covering topics such as architecture, graphics, physics, audio, and Nada . tutorials Tutorials for the Zilch Engine Editor are available in tutorial_sequences or they can be perused based off topics such as architecture, graphics, physics, and audio."
  },
  "docs/zilch_editor_documentation/tutorials.html": {
    "href": "docs/zilch_editor_documentation/tutorials.html",
    "title": "Tutorial Sequences | ZilchEngine",
    "keywords": "IMPORTANT: #zilch_tutorials are currently under active development! Keep an eye out for new tutorials being released. Sometimes the best way to learn something is to just do it. Tutorial Sequences If you need some overall direction on which tutorials to start with check out our tutorial sequences. Topics Check out the tutorials below to find out what topics they cover and how each one can help you. Editor How to use the tabs, windows, and commands of the Zilch Editor. Scripting Scripting using Nada in the Zilch Engine. Architecture Explore the Zilch Engine's architecture and learn how to build your games better. Gameplay & Input Discover parts of the engine used primarily for gameplay scripting. Graphics Learn how to use cameras, lights, renderers, and other graphical features in the Zilch Engine. Physics Learn how to work with RigidBodies, Joints, Forces, and other properties of the physics engine. Audio Placing sound emitters, microphones, and importing sound assets. UI Creating GUIs, such as menus and HUDs external_zilch_engine_tools.md Zilch Launcher, Zilch Market"
  },
  "docs/zilch_editor_documentation/tutorials/architecture.html": {
    "href": "docs/zilch_editor_documentation/tutorials/architecture.html",
    "title": "Spaces | ZilchEngine",
    "keywords": "Explore the Zilch Engine's architecture and learn how to build your games better. Game Objects #Beginner_I Creating Game Objects, Changing Properties Basic Components #Beginner_I Box / Sphere Collider, RigidBody, Sprite, SpriteText Hierarchies I #Beginner_I Parenting, Local vs World, Move / Rotate / Scale Hierarchies, Non-Uniform Scale Hierarchies II #beginner_iv Parent & Child, Attach & Detach, Hierarchy Events Archetypes I #Beginner_I Creating, Uploading, Instantiating, Reverting Cog Path #beginner_ii CogPath Property, Accessing components on other objects randomcontext #beginner_ii RNGs, Dice Rolls, Seeding, Random Distribution, % operator Archetypes II #beginner_ii Spawning Archetypes, Accessing new object properties Level #beginner_iii Creating New Levels, Reload Level, Load Level, Set as Starting Level Spaces The Space Object #beginner_iii Creating New Space, Basic HUD, Clear Color Time Space #beginner_iii Pause, TimeScale"
  },
  "docs/zilch_editor_documentation/tutorials/architecture/archetypes.html": {
    "href": "docs/zilch_editor_documentation/tutorials/architecture/archetypes.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson focuses on covering the basics of how Archetypes work in Zilch Engine. Learning Objectives Creating Archetypes Instantiating objects from Archetypes Uploading and modifying Archetypes Reverting objects and properties to match an Archetype Turning hierarchies into archetypes Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSprite Select : Sprite object In the Properties Window Rename Sprite object to RedCircle Under Sprite Set VertexColor to Red: [R:255, G:0, B:0, A:1.00] Set SpriteSource texture to Circle Creating Archetypes An Archetype in Zilch Engine (similar to blueprints, prefabs or templates in other engines) is a collection of objects in a hierarchy. Archetypes are used to quickly instantiate (create a copy of) and modify copies of objects. Let's take a closer look: Select : RedCircle object In the Properties Window In the Archetype field Type RedCircleArchetype then press or Enter Now we have made an archetype out of our RedCircle object object, which we can verify by looking at the Object Window and the Library Window. Instantiating from Archetypes As previously mentioned, one of the major benefits of Archetypes resource is being able to quickly make copies of it. In the Library Window Under Archetype Click + Drag the RedCircleArchetype into the Level Window In the Library Window Under Archetype Click + Drag the RedCircleArchetype to the Level Window In the Properties Window Under Transform Set Translation to: [-2, 0, 0] In the Library Window Under Archetype Click + Drag the RedCircleArchetype to the Level Window In the Properties Window Under Transform Set Translation to: [2, 0, 0] Modifying Archetypes The other useful property of Archetypes is being able to edit their definition and have the changes propagate to all instances. Select : RedCircle object In the Properties Window Under Sprite Set VertexColor to Blue: [R:0, G:0, B:255, A:1.00] Notice that the modified property turns orange; this means that this property has been modified from the archetype this object is associated with. We can then upload our changes to the Archetype to have them propagate to other objects that were instantiated from it. In the Properties Window Press the button Once we upload our changes, the Archetype's definition changes and all properties of instances that were not modified will update to match the new definition. Reverting to Archetypes Another benefit of Archetypes is being able to revert an instance with modified properties back to match the archetype. This can be done for all modified properties or for individual properties. Select : RedCircle object (the left most) In the Properties Window Under Sprite Set VertexColor to Green: [R:0, G:255, B:0, A:1.00] As we have seen before, the VertexColor property turns orange to indicate that it has been modified from its Archetype. Let's say you didn't like this change and want to revert it. In the Properties Window Press the button You can also revert that property individually (in case you want to retain other changes) by right-clicking the individual property and selecting the revert option. Archeytpes and Hierarchies In addition to single objects you can also turn object hierarchies into archetypes. Let's see how: In the Level Window Press Ctrl + A Press Delete Command : CreateSprite Select : Sprite object In the Properties Window Rename Sprite object to ParentSquare Add Component : BoxCollider Add Component : RigidBody Under Transform Set Translation to [0, 0, 0] Command : CreateSprite Select : Sprite object In the Properties Window Rename Sprite object to ChildSquare Add Component : BoxCollider Under Transform Set Translation to: [1, -1, 0] In the Object Window Parent the ChildSquare object object to the ParentSquare object Select : ParentSquare object In the Properties Window Set Archetype to Squares You can now create multiple copies of that new hierarchy by instantiating it. Once parented, both objects behave physically as if they were a single one. Let's test that by adding the following: Command : CreateCube In the Properties Window Remove Component : RigidBody Under Transform Set Translation to: [-2, -4, 0] Set Scale to: [4, 1, 1] Command : PlayGame Command : StopGame Related Materials Manual Create a New 2D Project COGs Archetypes Reference Classes Transform Sprite Cog RigidBody BoxCollider Commands PlayGame StopGame CreateSprite CreateCube"
  },
  "docs/zilch_editor_documentation/tutorials/architecture/archetypes2.html": {
    "href": "docs/zilch_editor_documentation/tutorials/architecture/archetypes2.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers how to create archetypes from a script at game runtime. Learning Objectives Creating archetypes from a script Modifing dynamically created objects Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSprite Command : Add Resource Create a NadaScript resource using the Component template template and name it MovementLogic In the MovementLogic script Replace the script's contents with the following: class MovementLogic : NadaComponent { var Speed : Real = 5.0; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var dir : Real3 = Real3(0,0,0); if(Zilch.Keyboard.KeyIsDown(Keys.A)) { dir -= Real3.XAxis; } if(Zilch.Keyboard.KeyIsDown(Keys.D)) { dir += Real3.XAxis; } this.Owner.RigidBody.Velocity = dir * this.Speed; } } Select : LevelSettings object In the Properties Window Remove Component : GravityEffect Remove Component : DragEffect Select : Sprite object In the Properties Window Rename Sprite object to Player Add Component : MovementLogic Command : Play the Game Press key A and D Command : Stop Game Archetype Creation Before we can spawn objects from script, we need to create the archetype from which the instances (objects) will be created. Command : CreateSprite In the Properties Window Rename it to Bullet Under Sprite Set the SpriteSource texture to Cricle Set the VertexColor to Red [R:255, G:0, B:0, A:1.00] Under Transform Set Scale to [0.5, 0.5, 0.5] Add Component : RigidBody Set name=Archetype, icon=pencil-square-o to BulletArchetype and click the UploadToArchetype button button. Delete the Bullet object Spawning Archetypes Command : Add Resource Create a NadaScript resource using the Component template template and name it ShootingLogic In the ShootingLogic Replace the script's contents with the following: class ShootingLogic : NadaComponent { var BulletSpeed : Real = 10.0; var ShotCooldown : Real = 0.4; var Timer : Real = 0.0; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { this.Timer += event.Dt; if(Zilch.Keyboard.KeyIsDown(Keys.Space) && this.Timer > this.ShotCooldown) { var bullet = this.Space.CreateAtPosition(Archetype.BulletArchetype, this.Owner.Transform.Translation); bullet.RigidBody.Velocity = Real3(0, this.BulletSpeed, 0); this.Timer = 0.0; } } } Select : Player object In the Properties Window Add Component : ShootingLogic component Command : Play the Game Press key A and D keys to move Press key Space key to shoot Command : Stop the Game Let's take a closer look inside the ShootingLogic's LogicUpdate function: this.Timer += event.Dt; Increases our Timer variable by time elapsed since last frame. if(Zilch.Keyboard.KeyIsDown(Keys.Space) && this.Timer > this.ShotCooldown) Checks whether Space is pressed and if Timer is greater than ShotCooldown var bullet = this.Space.CreateAtPosition(Archetype.BulletArchetype, this.Owner.Transform.Translation); Creates an Instance of the BulletArchetype at the owner's position and stores it in a local variable bullet.RigidBody.Velocity = Real3(0, this.BulletSpeed, 0); Uses the local variable to access the newly created object and sets its velecity this.Timer = 0.0; Resets the Timer Related Materials Manual COGs Archetypes Play the Game Stop the Game Add Resource Reference Classes Transform Sprite Cog Sprite RigidBody GravityEffect DragEffect Commands CreateSprite Task T888"
  },
  "docs/zilch_editor_documentation/tutorials/architecture/basiccomponents.html": {
    "href": "docs/zilch_editor_documentation/tutorials/architecture/basiccomponents.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers the basics of Components and demonstrates basic usage of the Collider , RigidBody , Sprite , and SpriteText components. Learning Objectives Component basics Common built-in components Component Overview Each component will typically have its own set of properties that can be modified to customize that component's behavior. In this tutorial we're going to show you some of the most commonly used components. Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Create a Transform Object Command : CreateTransform Creating a Transform object via the Create Menu Notice that the Trasnform object object can be found in the Objects Window: The Transform object listed in the Objects Window This provides a very basic object that has a defined position, scale and rotation. Let's go ahead and make our object more interesting by adding a Sprite component. Adding a Component In the Properties Window Click the Add Component button Type key : Sprite Click on Sprite button to add a Sprite component. Adding the Sprite component to the Transform object You can also add components to a selected object by using the hotkey Ctrl + M. NOTE: Some components may require another component to be present on an object before they can be added: this is called a dependency. Many of the components in Zilch (Including Sprite, for example) depend on the Transform component. If one or more dependencies aren't satisfied, Zilch will notify you when you attempt to add that component. Sprite Component The Sprite component provides a 2D visual representation of an object. Let's take a look at some of its most commonly used properties: The Properties Window showing the Sprite component Common Sprite Properties Visible checkBox Whether the object can be seen VertexColor The base color of the Sprite SpriteSource enum The image file that this Sprite displays Making a Copy of an Object Select : Transform object Press key Ctrl + C to copy it Press key Ctrl + V to paste a new copy Notice how there are two objects in the Objects Window, but we only see one in the Level Window. That's because they are overlapping; we can fix this by moving one of the objects. Altering Component Properties In the Properties Window Rename Transform object to RedBall Under Transform Set Translation to [0, 5, 0] Under Sprite Set SpriteSource enum to CircleBordered Set VertexColor to [R:255, G:0, B:0, A:1.00] NOTE: Color is defined by four values; Red, Green, Blue, and Alpha, in that order: RGBA. The first three refer to the amount of each respective color, while Alpha denotes the opacity of the color. Color values in the property grid range from 0 to 255, while alpha ranges from 0.00 (fully transparent) to 1.00 (fully opaque). Color References Red [R:255, G:0 , B:0 , A:1.00] Green [R:0 , G:255, B:0 , A:1.00] Blue [R:0 , G:0 , B:255, A:1.00] Yellow [R:255, G:255, B:0 , A:1.00] Magenta [R:255, G:0 , B:255, A:1.00] Cyan [R:0 , G:255, B:255, A:1.00] Orange [R:255, G:128, B:0 , A:1.00] Pink [R:255, G:0 , B:128, A:1.00] Purple [R:128, G:0 , B:255, A:1.00] Teal [R:0 , G:255, B:128, A:1.00] White [R:255, G:255, B:255, A:1.00] Black [R:0 , G:0 , B:0 , A:1.00] Select : the other Transform object object Rename it to Ground In the Properties Window Under Transform Set Scale to [5, 0, 0] Under Sprite Set VertexColor to [R:0, G:255, B:0, A:1.00] Your level should look like this: RigidBody Component The RigidBody component gives an object physics properties, like mass and velocity. Let's take a look at it: The Properties Window showing the RigidBody component Common RigidBody Properties Velocity The current velocity being applied to the object. Changing this property in the editor sets the object's initial velocity AngularVelocity Angular velocity is an object's current spin. Changing this property in the editor sets the object's initial spin (only around the Z axis for 2D objects) RotationLocked checkBox Prevents the physics system from rotating the object. (The object can still be rotated by modifying its Transform's Rotation property.) Commonly used for player characters Select : RedBall object In the Properties Window Add Component : RigidBody Command : Save Project Command : PlayGame The RedBall object is now affected by gravity. The RedBall object object falling due to gravity Notice that it didn't collide with the Ground object object, though. To have the RedBall object hit the ground, we'll need to add colliders to our objects. Command : StopGame Collider Components Colliders are used to detect when two objects occupy the same physical space, and, if so desired, prevent that. Zilch Engine offers several different types of colliders, including BoxCollider, SphereCollider, CylinderCollider, and CapsuleCollider; in this section, we'll demonstrate a couple of these. The Properties Window showing the BoxCollider component Common Collider Properties Offset How far the collider should be offset from the object's position Ghost checkBox Allows for collision detection without resolution Size How big the collider should be, relative to the object's scale (only available on BoxCollider) Radius How big the radius of the collider should be, relative to the object's scale (only available on SphereCollider) Select : RedBall object In the Properties Window Add Component : SphereCollider Let's also add a collider to our Ground object object. Select : Ground object In the Properties Window Add Component : BoxCollider Command : Save Project Command : PlayGame The RedBall object object landing on the Ground object object Now our RedBall object is colliding with the Ground object as intended. Command : StopGame SpriteText Component Similar to Sprite, the SpriteText component allows us to draw 2D text onto the screen. Let's take a look at its properties: The Properties Window showing the SpriteText component Common SpriteText Properties Visible checkBox Whether the text can be seen VertexColor The color of the text Font enum Which Font resource resource to use FontSize How big the text should be Text The actual text to be displayed To finish up, the project let's add a Title object. Command : CreateSpriteText Rename SpriteText object to Title In the Properties Window Under Transform Set Translation to [0, 7, 0] Add Component : SpriteText Under SpriteText Set FontSize to 100 Set Text to Hello World!, or your preferred title Let's take a look at our final result: Command : PlayGame The RedBall object falls and lands on the Ground object while the Title object says hello Command : StopGame Related Materials Manual components colliders rigidbody sprites spritetext editorcommands selectobject addremovecomponent gameobjectsconcept Code Reference Commands NewProject CreateTransform SaveProject PlayGame StopGame CreateSpriteText Classes Sprite transform rigidbody collider boxcollider spherecollider cylindercollider capsulecollider SpriteText"
  },
  "docs/zilch_editor_documentation/tutorials/architecture/cogpath.html": {
    "href": "docs/zilch_editor_documentation/tutorials/architecture/cogpath.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "CogPaths provide the best way to get a reference to any Cog before running the game. Often you will find situations where a component needs to be aware of a paticular object when the game starts. While CogPaths are not limited to only working at load time this is where they are most useful. Learning Objectives CogPath properties Accessing components on other objects Level Setup First we will make the ground and player objects. Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Select : LevelSettings object Remove component : gravityeffect Command : Add resource Create a NadaScript resource using the Component template template and name it PlayerController Update PlayerController script to the following code block: class PlayerController : NadaComponent { [Property] var Speed : Real = 5.0; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var direction = Real3(); if(Zilch.Keyboard.KeyIsDown(Keys.Right)) direction.X += 1.0; if(Zilch.Keyboard.KeyIsDown(Keys.Left)) direction.X += -1.0; if(Zilch.Keyboard.KeyIsDown(Keys.Up)) direction.Y += 1.0; if(Zilch.Keyboard.KeyIsDown(Keys.Down)) direction.Y += -1.0; this.Owner.RigidBody.Velocity = direction * this.Speed; } } Command : CreateSprite In the name=Properties Window, icon=window-restore Rename Sprite object to Player Add component : rigidbody Add component : boxcollider Add component : PlayerController Command : PlayGame Press Left, Right, Up and Down Command : StopGame The Follower Command : Add resource Create a NadaScript resource using the Component template template and name it FollowerController Update FollowerController script to the following code block: class FollowerController : NadaComponent { [Property] var PlayerCogPath : CogPath = CogPath(); var Speed : Real = 5.0; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var targetPos = this.PlayerCogPath.Cog.Transform.Translation; var myPos = this.Owner.Transform.Translation; var direction = Math.Normalize(targetPos - myPos); this.Owner.RigidBody.Velocity = direction * this.Speed; } } In the script above the position of the player and the position of the follower are used to calculate a unit vector which defines the 3D direction from the follower to the player. By multiplying it with this.Speed a velocity is defined which can be applyed to move the follower object. (NOTE)Initializing a CogPath Property: Notice that a CogPath constructor was acutally called in the definition of the PlayerCogPath property. CogPath's are one of the few types that require a manual construction where as Nada value types can have their initial value infered: i.e. var MemberVariable : Real; in this case MemberVariable will have the default type value of 0. Command : CreateSprite In the name=Properties Window, icon=window-restore Set name=Name, icon=pencil-square-o to: Follower Add component : boxcollider Add component : FollowerController Under sprite Set name=VertexColor, icon=eyedropped to: [0,0,1,1] Under transform Set name=Translation, icon=pencil-square-o to: [-5,0,0] Setting a CogPath Under FollowController This is the CogPath Property GUI. To select which object the CogPath points add you simple click on the Crosshairs and drag them to the target object. Set name=PlayerCogPath, icon=pencil-square-o to reference the Player object Command : PlayGame Press Left, Right, Up and Down Command : StopGame CogPaths and Hierarchies Command : CreateSprite In the name=Properties Window, icon=window-restore Set name=Name, icon=pencil-square-o to: Child Under transform Set name=Translation, icon=pencil-square-o to: [2,0,0] Set name=Scale, icon=pencil-square-o to: [0.5,0.5,0.5] Select : Child object Drag and drop it on the Player object object Command : CreateSprite In the name=Properties Window, icon=window-restore Set name=Name, icon=pencil-square-o to: Parent Under transform Set name=Translation, icon=pencil-square-o to: [0,2,0] Set name=Scale, icon=pencil-square-o to: [0.5,0.5,0.5] Select : Player object Drag and drop it on the Parent object object Command : PlayGame Press Left, Right, Up and Down Command : StopGame It can be seen that the Player object moves independently of its parent object do to it having its own RigidBody. However, you may be wondering why the follower no longer goes to the same position as the Player object. If you remember from Hierarchies I, Player object is now a child object meaning its name=Translation, icon=pencil-square-o is measured relative to it's paren object. Since the FollowerController was not changed to use the explicit name=WorldTranslation, icon=pencil-square-o of the Player object, the Follower object moves to the same offset of the Player object as it starts with its Parent object. Select the Follower object object Under FollowerController Examine the text of the name=PlayerCogPath, icon=pencil-square-o property Notice that the CogPath text has not changed despite the fact that the player hierarchy order has changed. Set name=PlayerCogPath, icon=pencil-square-o to reference the Player object Notice that the text of name=PlayerCogPath, icon=pencil-square-o changes from :/Player to the correct path of :/Parent/Player. You may be wondering why it worked when the project was run last. When CogPath properties are set they capture a reference at that moment as opposed to waiting for the level to be loaded into the game. When the path to an object targeted by a CogPath changes it does not lose that direct reference to the object, but instead the Path becomes inaccurate. You should not depend on this behavior and you should always reset your CogPath properties to have the correct path when possible. If you wish to learn more about the complex behaviors of the direct cog reference visit the CogPaths Manual Page. In the FollowerController script update OnLogicUpdate to this code block function OnLogicUpdate(event : UpdateEvent) { var targetPos = this.PlayerCogPath.Cog.Transform.WorldTranslation; var myPos = this.Owner.Transform.Translation; var direction = Math.Normalize(targetPos - myPos); this.Owner.RigidBody.Velocity = direction * this.Speed; } Command : PlayGame Press Left, Right, Up and Down Command : StopGame Now the Follower object follows the Player object name=WorldTranslation, icon=pencil-square-o correctly. Related Materials Manual CogPaths Add Resource Tutorials hierarchies Reference Classes CogPaths gravityeffect rigidbody boxcollider transform Commands PlayGame StopGame CreateSprite Tasks T864"
  },
  "docs/zilch_editor_documentation/tutorials/architecture/gameobjects.html": {
    "href": "docs/zilch_editor_documentation/tutorials/architecture/gameobjects.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson focuses on teaching the very basics of the engine: creating objects, running the game, basic commands, searching, and manipulating objects by scaling, rotating, translating. Learning Objectives Game object creation Game object names Editor commands Object manipulation with editor tools Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Here is a new empty level: An \"empty\" 2D level Notice that the level isn't actually empty. A quick look into the Objects Window shows us that the level has a few game objects already in it. The Objects Window showing the objects present in the otherwise-empty level We'll cover these in more detail in future tutorials. Create a Game Object Command : CreateSprite Creating a Sprite object via the Create Menu The Sprite object object can now be found in the Objects Window: The Sprite object listed in the Objects Window Select : Sprite object NOTE: If the Properties Window is not visible, then enter the Command : Properties in the Search Window. (Remember you can open the Search Window from any where in the engine using Ctrl + Shift + Space.) The properties of the Transform component attached to the object can be found in the Properties Window: The properties of the Sprite object in the Properties Window In the Properties Window Click on the Transform component Expanding the Transform component in the Properties Window (NOTE)Under: When accessing properties of a paticular component we use the term Under, as the properties are found under the component title in the Properties Window. For instance, Under the Transform component {icon long-arrow-right} //Set Scale to [2, 2, 1]//. Renaming an Object Select : Sprite object In the Properties Window Rename Sprite object to Square Renaming the Sprite object Command : PlayGame Here is how the game should look: The Game Window Command : StopGame Tools To help you create and manipulate objects, Zilch Engine provides tools that can be found at the top of the editor window within the Tool Bar. Let's take a look at some of the more common tools: Select Tool The Select Tool allows you to select objects in the Level Window by clicking on them. In the Tool Bar Click the button In the Level Window Click on the Sprite object object This is an equivalent operation of selecting the object in the Objects Window Translate Tool The Translate Tool is used to move objects around the level. In the Tool Bar Click the button You should see colored arrows along the X (red), Y (green), and Z (blue) axes of the object. Click and drag the colored arrows to move the object along the corresponding axes. Notice that in the Properties Window, the Translation values are changing while you move the object. Rotate Tool The Rotate Tool is used to rotate objects. In the Tool Bar Click the button Click and drag one of the circles (red, blue, or green). This rotates the object around its X (red), Y (green), or Z (blue) axes. In 2D, we usually just rotate around the Z-axis. Notice that in the Properties Window, the Rotation values are changing while you rotate the object. Scale Tool The Scale Tool is used to scale objects. In the Tool Bar Click the button Click and drag along the colored axes This scales the object along its X (red), Y (green), or Z (blue) axis. Notice that in the Properties Window, the Scale values are changing while you scale the object. NOTE: Zilch Engine does not support negative scale for objects. Related Materials Manual COGs Editor Commands Code Reference Transform"
  },
  "docs/zilch_editor_documentation/tutorials/architecture/hierarchies.html": {
    "href": "docs/zilch_editor_documentation/tutorials/architecture/hierarchies.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson focuses on covering the basics of how object hierarchies work in Zilch Engine. Learning Objectives Object hierarchy creation Transforming hierarchies World-space values and local-space values Recognizing non-uniform scale problems Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSprite In the Properties Window Rename Sprite object to ParentSquare Under Sprite Set VertexColor to [R:255, G:0, B:0, A:1.00] Command : CreateSprite In the Properties Window Rename Sprite object to ChildSquare Under Transform Set Translation to [1, -1, 0] Under Sprite Set VertexColor to [R:0, G:0, B:255, A:1.00] In the Objects Window Drag and drop ChildSquare object on top of ParentSquare object Parenting As you have probably noticed, by dragging and dropping an object onto another, we've attached the former to the latter in a process called parenting. We then refer to this group of objects as a hierarchy, and it adopts new behaviors, most notably with respect to transformations. Let's take a look: Select : ParentSquare object Experiment with Translation , Rotation and Scale Transforming the ParentSquare object Notice that, when we apply a transformation to the parent object, it is propagated to the child object. However, if we apply transformations to the child, it won't affect the parent. Transforming the ChildSquare object If we look at the Transform component (in the Properties Window) of both objects while applying transformations to the ParentSquare object, we notice that while its transform values are modified, the ChildSquare object's values remain the same. In Zilch Engine, the Transform values displayed on a root object (top parent of a hierarchy) correspond to their world values; that is, the transform values relative to the space's origin at [0, 0, 0]. Meanwhile, transform values for child objects are displayed as local values; that is, the offset modifications relative to the parent object's values. The Properties Window showing the ParentSquare object and ChildSquare object objects, respectively Notice the parent's world value is being modified, while the child's local value remains the same. Non-Uniform Scale When dealing with object Hierarchies, one can accidentally stumble on the problem of non-uniform scale. This can be seen when, for example, a parent object is scaled non-uniformly (that is, its X, Y, and Z scale values aren't all the same) and its child object of it is rotated. This produces an often undesired shear effect, and is usually best avoided by making sure the parent object is always uniformly scaled. It should be noted that shearing does not affect the shape of colliders. Related Materials Manual gameobjectsconcept commands selectobject colliders Code Reference Commands NewProject CreateSprite Classes cog sprite transform"
  },
  "docs/zilch_editor_documentation/tutorials/architecture/hierarchies_ii.html": {
    "href": "docs/zilch_editor_documentation/tutorials/architecture/hierarchies_ii.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers how to manipulate object hierarchies in Nada. Learning Objectives Parenting / unparenting objects at runtime Accessing objects through the hierarchy in code Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSprite Command : Add Resource Create a NadaScript resource using the Component template template and name it SquareLogic Select : Sprite object In the Properties Window Rename Sprite object to Square Add Component : SquareLogic Update the SquareLogic script to the following: class SquareLogic : NadaComponent { [Dependency] var Transform : Transform; [Property] var RotateSpeed : Real = 5.0; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var vel = this.RotateSpeed * event.Dt; this.Transform.RotateAnglesWorld(Real3(0.0, 0.0, vel)); } } Command : PlayGame The Square object rotates Command : StopGame Parenting at Runtime Let's create an archetype that can be used later to spawn child cogs at runtime. Command : CreateSprite In the Properties Window Rename Sprite object to Circle Under Sprite Set SpriteSource enum to Circle Set Archetype to CircleArchetype Command : Delete Now let's modify the SquareLogic component to spawn circles and parent them to the Square object Update the SquareLogic script to the following: class SquareLogic : NadaComponent { [Dependency] var Transform : Transform; [Property] var RotateSpeed : Real = 5.0; [Property] var ArchetypeToSpawn : Archetype = Archetype.CircleArchetype; [Property] var SpawnLocation : Real3 = Real3(0.0, 2.0, 0.0); function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var vel = this.RotateSpeed * event.Dt; this.Transform.RotateAnglesWorld(Real3(0.0, 0.0, vel)); if(Zilch.Keyboard.KeyIsPressed(Keys.Space)) { var obj = this.Space.CreateAtPosition(this.ArchetypeToSpawn, this.SpawnLocation); obj.AttachTo(this.Owner); } } } Command : PlayGame Press key the Space key The Space bar spawns child Circle object objects Command : StopGame Notice that the Circle object is attached to the Square object object as soon as it is created. That is done through invoking the AttachTo function on Cog, which takes a designated parent cog as its only parameter. Similarly, you can call the Detach function to unparent any object from its hierarchy: Add the following to the end of OnLogicUpdate function in the SquareLogic component: if(Zilch.Keyboard.KeyIsPressed(Keys.D)) { this.Owner.Children.Current.Detach(); } Command : PlayGame Press key the Space key a few times Press key the D key a few times The D key detaches the child Circle object objects Command : StopGame NOTE: Zilch also sends the Attached and Detached events to cogs when the respective operation is performed on them. Additionally, you can connect to the ChildAttached and ChildDetached events on a parent objecct if you want to perform some logic upon acquiring or losing a child. Traversing Hierarchies at Runtime Within a script, you can easily access a cog's parent: Add the following to the SquareLogic class: [Property] var Growth : Real = 1.1; In the SquareLogic class In the OnLogicUpdate function Below the line, obj.AttachTo(this.Owner); Add the following code: obj.Parent.Transform.Scale *= this.Growth; Command : PlayGame Press key the Space key The Space bar now also grows the parent Square object object Command : StopGame You can also get a range containing all immediate children. Let's implement an addition to our previous script. Add the following to OnLogicUpdate function in the SquareLogic component: if(Zilch.Keyboard.KeyIsPressed(Keys.Enter)) { foreach(var child in this.Owner.Children) { child.Sprite.VertexColor = Colors.Red; } } Command : PlayGame Press key the Space key a few times Press key the Enter key The Enter key now turns the child Circle object objects red Command : StopGame Related Materials Tutorials hierarchies Manual gameobjectsconcept archetype_basics Reference Classes cog transform sprite Events Attached Detached ChildAttached ChildDetached Commands CreateSprite PlayGame StopGame Delete Development Task T1189"
  },
  "docs/zilch_editor_documentation/tutorials/architecture/levels.html": {
    "href": "docs/zilch_editor_documentation/tutorials/architecture/levels.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers levels in the Zilch Engine. Learning Objectives Creating new levels Loading and reloading levels Setting the StartingLevel Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template What is a Level? A Level resource is a resource that stores a list of objects. These objects are created when the level is loaded. Creating a New Level Levels are added to the project in basically the same way as any other resource: by adding a resource using one of the pre-defined resource templates. Command : Add Resource Zilch's Level templates Zilch's built-in Level templates are like shortcuts for creating levels of different kinds: they've already got the important cogs, like renderers and cameras, and they're pre-configured to be suitable for the chosen type of level. The {nav icon=clone, name=\"2D Level\"} template provides a forward renderer and an orthographic camera, perfect for a simple 2D game. Create a Level resource using the {nav icon=clone, name=\"2D Level\"} template and name it Level1 Select : Renderer object In the Properties Window Under ForwardRenderer Set ClearColor to [R:16, G:78, B:32, A:1.00] Command : CreateSpriteText In the Properties Window Rename SpriteText object to LevelNameText Under Transform Set Translation to [0, 5, 0] Under SpriteText Set Text to - Level 1 - Set PixelsPerUnit to 32 Level 1 (NOTE) A Closer Look: Take a look at the Objects Window: This is the list of objects in this level. In a sense, this list is this level, since a level is basically a list of objects. These objects are stored in the Level resource resource, listed as they are here, each with its properties as set in the Properties Window. When the level is loaded, each of these objects is created and initialized. Creating a Player There's no sense in having a level if there's no player, eh? Command : Add Resource Create a NadaScript resource using the Component template template and name it KeyboardMovement Update the KeyboardMovement script to the following: class KeyboardMovement : NadaComponent { [Dependency] var Transform : Transform; [Property] var UpKey : Keys = Keys.Up; [Property] var DownKey : Keys = Keys.Down; [Property] var RightKey : Keys = Keys.Right; [Property] var LeftKey : Keys = Keys.Left; [Property] var Speed : Real = 8; [Property] var MinBounds : Real3 = Real3(-12, -8, 0.5); [Property] var MaxBounds : Real3 = Real3( 12, 8, 0.5); function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var movement = Real3.Zero; if (Zilch.Keyboard.KeyIsDown(this.UpKey)) movement += Real3.YAxis; if (Zilch.Keyboard.KeyIsDown(this.DownKey)) movement -= Real3.YAxis; if (Zilch.Keyboard.KeyIsDown(this.RightKey)) movement += Real3.XAxis; if (Zilch.Keyboard.KeyIsDown(this.LeftKey)) movement -= Real3.XAxis; var newPosition = this.Transform.LocalTranslation + movement * this.Speed * event.Dt; this.Transform.LocalTranslation = Math.Clamp(newPosition, this.MinBounds, this.MaxBounds); } } Command : CreateSprite In the Properties Window Rename Sprite object to Player Under Transform Set Translation to [0, 0, 0.5] Under Sprite Set VertexColor to [R:64, G:255, B:160, A:1.00] Set SpriteSource to CircleBordered Add Component : SphereCollider Under SphereCollider Set Ghost checkBox to true Add Component : RigidBody Under RigidBody Set DynamicState enum to Kinematic Add Component : KeyboardMovement Command : PlayGame Player moving around in Level 1 You can move the player with the arrow keys. Command : StopGame Now let's make a Level 2 to go to from Level 1. Creating Another Level In the Library Window Under the Level tag {nav icon=mouse-pointer, name=\"Right click\"} the Level1 Level resource Select Duplicate to create a copy of Level1 Rename the Level1Copy1 Level resource to Level2 Open the Level2 Level resource Level 2 should be visually distinct from Level 1. Select : LevelNameText object In the Properties Window Under SpriteText Set Text to - Level 2 - Select : Renderer object In the Properties Window Under ForwardRenderer Set ClearColor to [R:48, G:59, B:84, A:1.00] Level 2 Now let's make some way of going between Level 1 and Level 2. Loading a Level in the Game Going from one level to another is as simple as calling the space's LoadLevel function. Let's make a door: an object that calls that function when the player touches it. Command : Add Resource Create a NadaScript resource using the Component template template and name it LoadLevelOnCollisionStarted Update the LoadLevelOnCollisionStarted script to the following: class LoadLevelOnCollisionStarted : NadaComponent { [Property] var LevelToLoad : Level; function Initialize(init : CogInitializer) { Zilch.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted); } function OnCollisionStarted(event : CollisionEvent) { // If the other object in this collision has a KeyboardMovement component, // then it must be the player if (event.OtherObject.KeyboardMovement != null) this.Space.LoadLevel(this.LevelToLoad); } } Command : CreateSprite In the Properties Window Rename Sprite object to Door Under Transform Set Translation to [-5, 3, 0] Set Scale to [2, 3, 1] Under Sprite Set VertexColor to [R:230, G:23, B:57, A:1.00] Add Component : BoxCollider Under BoxCollider Set Ghost checkBox to true Add Component : LoadLevelOnCollisionStarted Under LoadLevelOnCollisionStarted Set LevelToLoad resource to Level1 Level 2 now has a door Command : Copy the Door object Open the Level resource named Level1 Command : Paste the Door object In the Properties Window Under Transform Set Translation to [5, -4, 0] Under LoadLevelOnCollisionStarted Set LevelToLoad resource to Level2 Level 1 now has a door Command : PlayGame If you move the player to the door, the other level is loaded. Command : StopGame (NOTE) A Closer Look: When the player touches the door in Level 1, Level 2 is loaded. So what happens to Level 1? When a space's LoadLevel function is called, first, all the objects in that space are destroyed: the player, the door, the camera, the renderer, all of them. Then, all the objects in Level 2 are created. This happens every time a space changes levels. Reloading a Level Just as the space has a function to load a level, it also has a function to reload the current level. Command : Add Resource Create a NadaScript resource using the Component template template and name it ReloadLevelOnKeyDown Update the ReloadLevelOnKeyDown script to the following: class ReloadLevelOnKeyDown : NadaComponent { function Initialize(init : CogInitializer) { Zilch.Connect(Zilch.Keyboard, Events.KeyDown, this.OnKeyDown); } function OnKeyDown(event : KeyboardEvent) { if (event.Key == Keys.R && event.CtrlPressed) this.Space.ReloadLevel(); } } Calling the ReloadLevel function does the same thing as calling the LoadLevel function and passing in the current level. Command : Select the Space In the Properties Window Add Component : ReloadLevelOnKeyDown Command : PlayGame You can now reload the level by pressing key Ctrl + R. Command : StopGame (NOTE)A Closer Look: Reloading a level is just the same as loading it again, so it goes through the same process. First, everything present is destroyed. Then, everything in the level is created anew. This means that all of its objects, and all of their components, are reinitialized. However, this does not destroy the space that contains the level, which is only initialized when it is created, and destroyed when the user explicitly destroys it in script (or when the game ends). Setting a Game's Starting Level When a Zilch game is played in the editor, the default game setup loads the level that is currently being edited. When the game is exported, however, this isn't necessarily the first level to be loaded. As a matter of fact, there is a component on the GameSession aptly named DefaultGameSetup, which manages this. Command : Select the Game In the Properties Window Expand DefaultGameSetup Here, we can see some useful properties: StartingSpace enum specifies the archetype to use for creating the game's default space. StartingLevel enum determines which level is loaded into that space after it's created. LoadEditingLevel checkBox tells the engine whether it should override the starting level when the game is being run in the editor, and instead load the level that's being edited. Let's make a new level, a title screen, and set it as the starting level. Creating a Title Screen Command : Add Resource Create a Level resource using the {nav icon=clone, name=\"2D Level\"} template and name it TitleScreen Command : CreateSpriteText In the Properties Window Under Transform Set Translation to [0, 3, 0] Under SpriteText Set Text to Azomarith's Revenge 2: Shadows of the Fallen Set PixelsPerUnit to 32 Command : CreateSpriteText In the Properties Window Under Transform Set Translation to [0, 2, 0] Under SpriteText Set Text to Game of the Year Edition Set FontSize to 24 Set PixelsPerUnit to 32 Command : CreateSpriteText In the Properties Window Under Transform Set Translation to [0, -3, 0] Under SpriteText Set Text to Press Enter Set FontSize to 18 Set PixelsPerUnit to 32 Command : Select the Game In the Properties Window Under DefaultGameSetup Set StartingLevel enum to TitleScreen Set LoadEditingLevel checkBox to false Open the Level resource named Level1 Command : PlayGame Even though we're editing Level 1, the editor loads the title screen, thanks to how the DefaultGameSetup has been configured. Command : StopGame Next, we need a component to load Level 1 from the title screen. Open the Level resource named TitleScreen Command : Add Resource Create a NadaScript resource using the Component template template and name it LoadLevelOnKeyDown Update the LoadLevelOnKeyDown script to the following: class LoadLevelOnKeyDown : NadaComponent { [Property] var LevelToLoad : Level = Level.Level1; [Property] var Key : Keys = Keys.Enter; function Initialize(init : CogInitializer) { Zilch.Connect(Zilch.Keyboard, Events.KeyDown, this.OnKeyDown); } function OnKeyDown(event : KeyboardEvent) { if (event.Key == this.Key) this.Space.LoadLevel(this.LevelToLoad); } } Select : LevelSettings object In the Properties Window Add Component : LoadLevelOnKeyDown Open the Level resource named Level1 Command : PlayGame The game starts with the title screen, then goes to Level 1 Now the game always starts with the title screen, and from there goes into Level 1 via the Enter key. Related Materials Manual launchernewproject commands resourceadding selectobject addremovecomponent Reference Classes transform spritetext sprite spherecollider boxcollider rigidbody space defaultgamesetup Commands CreateSpriteText CreateSprite PlayGame StopGame Paste SelectSpace SelectGame Development Task {T1172}"
  },
  "docs/zilch_editor_documentation/tutorials/architecture/randomcontext.html": {
    "href": "docs/zilch_editor_documentation/tutorials/architecture/randomcontext.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "RandomContext is a component that contains methods for pseudo-random number generation. Learning Objectives Understanding random number generators Die roll simulation Using random seeds Random distribution Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateTransform Command : Add Resource Create a NadaScript resource using the Component template template and name it NumberGenerator Select : Transform object In the Properties Window Add Component : RandomContext Add Component : NumberGenerator RandomContext RandomContext is a component for creating unique scenarios, such as when a random number of enemies are created, or a random amount of gold is given to a player. Using Int Int is a function that returns a pseudo-random number between 0 and MaxInt. In the NumberGenerator script Update the NumberGenerator class to the following: class RandomGenerator : NadaComponent { [Dependency] var RandomContext : RandomContext; function Initialize(init : CogInitializer) { var number = this.RandomContext.Int(); Console.WriteLine(\"Random Number: `number`\"); } } Command : Console Command : PlayGame ---------------- Begin Game ---------------- Random Number: 26581 Level 'Level' was loaded. Loaded level 0.00s Notice how a random positive integer is returned. Command : StopGame Using the Modulo Operator Modulo is represented by the % operator. Using modulo returns the remainder when a number is divided by another number. In the NumberGenerator script Update the NumberGenerator class to the following: class RandomGenerator : NadaComponent { [Dependency] var RandomContext : RandomContext; function Initialize(init : CogInitializer) { var number = this.RandomContext.Int(); Console.WriteLine(\"Number: `number`\"); Console.WriteLine(\"Mod 10: \\t`number % 10`\"); Console.WriteLine(\"Mod 100: \\t`number % 100`\"); Console.WriteLine(\"Mod 1000: \\t`number % 1000`\"); Console.WriteLine(\"Mod 10000: \\t`number % 10000`\"); } } Command : PlayGame ---------------- Begin Game ---------------- Number: 30796 Mod 10: 6 Mod 100: 96 Mod 1000: 796 Mod 10000: 796 Level 'Level' was loaded. Loaded level 0.00s Notice how the random integer given is then divided by various powers of 10 and the remainder is printed out. This is how a pseudo-random value can be constrained to a range starting at 0 and ending one before the applied value. Command : StopGame Using Range Range is a function that returns a Real number between the lower number given (inclusive) and the higher number (exclusive). In the NumberGenerator script Update the NumberGenerator class to the following: class NumberGenerator : NadaComponent { [Dependency] var RandomContext : RandomContext; var EnemyCount : Integer; function Initialize(init : CogInitializer) { // This will pick a random number between 1 and 10 var randomEnemyCount = this.RandomContext.Range(1, 11) as Integer; // Loop to create enemies based on the random counter for(var i= 0; i < randomEnemyCount; ++i) { Console.WriteLine(\"Spawned An Enemy\"); this.EnemyCount += 1; } // Display how many enemies were spawned Console.WriteLine(\"Spawned `this.EnemyCount` enemies\"); } } Command : PlayGame ---------------- Begin Game ---------------- Spawned An Enemy Spawned An Enemy Spawned 2 enemies Level 'Level' was loaded. Loaded level 0.00s Notice how the output displays a random number of enemies created each time you start the game. In this example, a pseudo-random number is found between 1 and 10, but another scenario could include finding between 1 and 5 enemies, and then adding 5 to it. That way, the end result will be between 6 and 10. However, this could just be accomplished by finding a Range value between 6 and 10. Command : StopGame Seeding Rolling a six-sided die should generally result in a random value in the range [1, 6]. However, if that die is thrown under the same conditions every time, then theoretically the die should always result in the same value, removing randomness. This is accomplished in code by setting a Seed. All projects already have a seed pseudo-randomly assigned at run-time, but applying a custom seeded value ensures all further randomness can instead be predicted. In the NumberGenerator script Update the NumberGenerator class to the following: class NumberGenerator : NadaComponent { [Dependency] var RandomContext : RandomContext; var EnemyCount : Integer; function Initialize(init : CogInitializer) { this.RandomContext.Seed = 54321; // Find four pseudo-random numbers and print to console. for(var i = 0; i < 4; ++i) { // This will pick a random number between 1 and 5 var randomNumber = this.RandomContext.Range(1, 6) as Integer; // Display how many enemies were spawned Console.WriteLine(\"Number: `randomNumber`\"); } } } Command : PlayGame ---------------- Begin Game ---------------- Number: 3 Number: 2 Number: 5 Number: 5 Level 'Level' was loaded. Loaded level 0.00s Notice the number sequence that is printed. Command : StopGame Command : PlayGame ---------------- Begin Game ---------------- Number: 3 Number: 2 Number: 5 Number: 5 Level 'Level' was loaded. Loaded level 0.00s Notice how the number sequence was exactly the same as the first time. Command : StopGame Command : PlayGame ---------------- Begin Game ---------------- Number: 3 Number: 2 Number: 5 Number: 5 Level 'Level' was loaded. Loaded level 0.00s Notice that once again the number sequence was exactly the same. Continue this process to your heart's content. Command : StopGame Due to how the seed was set to 54321, the pattern was the same throughout. However, it was not the same number repeated each time. This is due to how RandomContent is still referred to for a unique value. Seeding is important in many different video games to recreate previous experiences. Games that rely upon seeding for Procedural Generation to create a level or determine gameplay sometimes also inform the player the seed used, allowing them to input that seed later and replay the exact same scenario. Convenience Functions Die Roll DieRoll is a simple function that returns an integer between 1 and a specified number of sides. It is intended for novice users, as it functions the same as the Range function, except that: The value returned is inclusive of the maximum value The lowest value possible is 1 instead of 0 The value returned is an Integer rather than a Real that must be cast into an Integer Coin Flip CoinFlip is a simple function that returns true or false. Related Materials Manual commands resourceadding selectobject addremovecomponent nada_in_zilch operators_precedence_chart variables_and_data_types casting Reference Commands NewProject CreateTransform Console PlayGame StopGame Classes randomcontext"
  },
  "docs/zilch_editor_documentation/tutorials/architecture/spaces.html": {
    "href": "docs/zilch_editor_documentation/tutorials/architecture/spaces.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This tutorial covers the basics of what spaces are, how to create them, and how to use them with levels. Learning Objectives Creating new spaces Basic HUD ClearColor Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSpriteText In the Property Window Under SpriteText Set Text to Game Level SpriteText Select : GameCamera object In the Properties Window Under Camera Set Size to 5 Command : Add Resource Create a NadaScript resource using the Component template template and name it HUDManager What is a Space? There have probably been a few times while learning Zilch that you typed this.Space but didn't really know what exactly a Space was. A Space is a special type of object which represents the space occupied by objects in a Level resource. Another way to think about it is as an object that represents the dimensions of whichever level is loaded into it, or as 3D area with infinite bounds that contains a level. Space Basics Each game can have multiple spaces Objects in different spaces cannot interact graphically or physically Each Space (usually) has its own renderer(s) that draws the loaded level to the viewport Each Component and each Cog contains a member variable that is a reference to the Space it exists in Creating a Space A very common reason for creating a second space is to implement a HUD that overlays the game. This approach takes advantage of the fact that objects in one space will not directly interact with objects in another. Let's make the level for our first HUD. Command : Add Resource Create a Level resource using the {nav icon=clone, name=2D Level} template and name it HUDLevel Command : CreateSpriteText In the Property Window Under SpriteText Set Text to HUD Level SpriteText Select : GameCamera object In the Properties Window Under Camera Set Size to 5 Open the Level resource named Level Select : LevelSettings object In the Properties Window Add Component : HUDManager In HUDManager Update the HUDManager script to the following: class HUDManager : NadaComponent { [Property] var HUDLevel : Level; [Property] var HUDSpaceArchetype : Archetype = Archetype.Space; var HUDSpace : Space; function Initialize(init : CogInitializer) { this.HUDSpace = this.GameSession.CreateSpace(this.HUDSpaceArchetype); this.HUDSpace.LoadLevel(this.HUDLevel); } } Command : SaveProject In the Properties Window Under HUDManager Set HUDLevel window to HUDLevel resource Command : PlayGame Command : StopGame Notice how the text from the HUDLevel Level resource is visible, but not the text from the game Level resource. This is because by default spaces are rendered as opaque. Overlaying the HUD Open the Level resource named HUDLevel Select : Renderer object In the Properties Window Under ForwardRenderer Set ClearColor to [R:0, G:0, B:0, A:0.00] Select : GameCamera object In the Properties Window Under CameraViewport Set RenderOrder to 1 Select : SpriteText object In the Properties Window Under Transform Set Translation to [0,1,0] Open the Level resource named Level Command : PlayGame Command : StopGame Notice that both text objects are now visible. This is because we reduced the alpha value of the HUD level clear color to 0. The clear color is what is rendered behind everything in a level. We've also set the RenderOrder of the HUD GameCamera object's CameraViewport to 1, while the main space's RenderOrder remains at its default value of 0. This is important for layering purposes: no two overlaid CameraViewports should have the same RenderOrder . Now that we know how to make a space transparent, it is fairly simple to extrapolate constructing a HUD within a dedicated level and rendering it on top of a game. Communicating Between Spaces Having multiple spaces can increase a project's complexity. It is important to know how to allow components which exists in seperate spaces to communicate with each other. Information is often sent between spaces via events. Let's make a basic meter in our HUD. Command : Add Resource Create a NadaScript resource using the Component template template and name it Meter Update the Meter script to the following: class Meter : NadaComponent { [Dependency] var Transform : Transform; [Dependency] var Area : Area; [Property] var MaxValue : Real = 10; var CurrentValue : Real; var MeterScaleAction : Action; var OriginalSize : Real2; var ScaleRate : Real = 1.0; function Initialize(init : CogInitializer) { this.CurrentValue = this.MaxValue; this.OriginalSize = this.Area.Size; Zilch.Connect(this.Space, Events.MeterUpdate, this.OnMeterUpdate); } function OnMeterUpdate(event : MeterUpdate) { var val = this.CurrentValue + event.Value; this.CurrentValue = Math.Clamp(val, 0.0, this.MaxValue); this.ScaleMeter(); } function ScaleMeter() { if(this.MeterScaleAction != null) this.MeterScaleAction.Cancel(); //calculate and constrain the new meter size var perc = this.CurrentValue / this.MaxValue; var targetSize = perc * this.OriginalSize; targetSize.Y = this.OriginalSize.Y; //calculate the duration of the scale action var sizeDifference = Math.Abs(this.Area.Size.X - targetSize.X); var duration = sizeDifference / this.ScaleRate; this.MeterScaleAction = Action.Property(this.Owner.Actions, @this.Area.Size, targetSize, duration, Ease.Linear); } } class MeterUpdate : NadaEvent { sends MeterUpdate : MeterUpdate; var Value : Real; } This Meter component will be be communicated// with via events sent from the //GameSpace// to the //HUDSpace by the following Input component. Command : Add Resource Create a NadaScript resource using the Component template template and name it Input Update the Input script to the following: class Input : NadaComponent { [Dependency] var HUDManager : HUDManager; [Property] var IncreaseKey : Keys = Keys.Up; [Property] var DecreaseKey : Keys = Keys.Down; [Property] var InputValue : Real = 1.0; function Initialize(init : CogInitializer) { Zilch.Connect(Zilch.Keyboard, Events.KeyDown, this.OnKeyDown); } function OnKeyDown(event : KeyboardEvent) { if(event.Key == this.IncreaseKey) { Console.WriteLine(\"Increase\"); this.UpdateMeter(this.InputValue); } else if(event.Key == this.DecreaseKey) { Console.WriteLine(\"Decrease\"); this.UpdateMeter(-this.InputValue); } } function UpdateMeter(val : Real) { var meterUpdateEvent = MeterUpdate(); meterUpdateEvent.Value = val; this.HUDManager.HUDSpace.DispatchEvent(Events.MeterUpdate, meterUpdateEvent); } } This simple input component will allow us to use the meter to simulate the game behavior of losing and gaining health without having to actually implement a game for this tutorial. Open the Level resource named Level Select : LevelSettings object In the Properties Window Add Component : Input Open the Level resource named HUDLevel Command : CreateSprite In the Properties Window Under Transform Set Translation to [-2.5, 0.0, 0.0] Add Component : Area Under Area Set Origin enum to BottomLeft Set Size to [5, 0.5] Add Component : Meter Open the Level resource named Level Command : Console Command : PlayGame Press key the Up and Down keys to send events between spaces. Each time Up or Down is pressed, the MeterUpdate event is dispatched on the HUDSpace. The Meter component is listening to its space (this HUDSpace) for that event. So when it receives the event, the ScaleMeter function is invoked. (NOTE)Notice how the meter renders over the SpriteText object in the GameLevel. As mentioned earlier, spaces can not interact graphically or physically (forces, collision, clipping, etc.), and this is a prime example of that behavior. Command : StopGame Related Materials Manual Command Add Resource Select {icon university}[[zilch_engine_documentation/zilch_editor_documentation/zilchmanual/editor/addremovecomponent/|Add/Remove Component]] Tutorial Reference Classes SpriteText Transform Area Camera Space Enums Location.BottomLeft Commands New Project PlayGame Add StopGame CreateSpriteText CreateSprite Tasks T1175"
  },
  "docs/zilch_editor_documentation/tutorials/architecture/spaces/timespace.html": {
    "href": "docs/zilch_editor_documentation/tutorials/architecture/spaces/timespace.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "Having already seen spaces in a previous tutorial, we will now talk about a component that only appears on space objects: the TimeSpace. Learning Objectives TimeScale Pausing Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSprite In the Properties Window Add Component : RigidBody Add Component : BoxCollider Under RigidBody Set name=DynamicState,icon=list to Static Under Transform Set Scale to [25,1,1] Command : CreateSphere In the Properties Window Under Transform Set Translation to [-10,5,0] Under RigidBody Set Velocity to [10,0,0] What is the TimeSpace? The TimeSpace component allows for developer control over time in the space it is attached to. Time in that space can be slowed or even stopped. Let's see what the demo looks like right now to get a frame of reference. Command : PlayGame Command : StopGame The ball falls, bounces, and rolls at a normal pace for the values it was initialized with. TimeScale A common dramatic effect is to slow down time during some in-game event. Slow motion effects are typically implemented via the TimeScale property, which is a scalar for the rate at which time passes. There are also some times where running your project at a slower speed will allow you to debug issues more easily. Let's take a look at how to change TimeScale using the UI. (NOTE)Space Selection: The Space can be selected via the Select menu, by clicking in the viewport and then pressing Shift + S, by pressing Ctrl + Shift + S with any window in focus, or by using the SelectSpace command. Command : SelectSpace In the Properties Window Under TimeSpace Set TimeScale to 0.5 Command : PlayGame Demo running half speed with 0.5 TimeScale Command : StopGame Now we can see that the time scale directly affects the rate of time without affecting the framerate. Command : SelectSpace In the Properties Window Under TimeSpace Set TimeScale to 1.0 Adjusting TimeScale In Script Command : Add Resource Create a NadaScript resource using the Component template template and name it TimeControl Update the TimeControl script to the following: class TimeControl : NadaComponent { [Property] var IncreaseRateKey : Keys = Keys.Up; [Property] var DecreaseRateKey : Keys = Keys.Down; [Property] var TimeScaleRateOfChange : Real = 0.1; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { if(Zilch.Keyboard.KeyIsPressed(this.IncreaseRateKey)) this.ScaleTime(this.TimeScaleRateOfChange); if(Zilch.Keyboard.KeyIsPressed(this.DecreaseRateKey)) this.ScaleTime(-this.TimeScaleRateOfChange); } function ScaleTime(rateChange : Real) { var newTimeScale = this.Space.TimeSpace.TimeScale + rateChange; this.Space.TimeSpace.TimeScale = Math.Clamp(newTimeScale, 0.0, 2.0); Console.WriteLine(\"TimeScale: `this.Space.TimeSpace.TimeScale`\"); } } Select : LevelSettings object In the Properties Window Add Component : TimeControl Command : Console Command : PlayGame Adjust the time scale using the up and down keys TimeScale being adjusted up and down Command : StopGame Above we can see the demo progressing slower and then faster as the TimeScale is adjusted using the keyboard. Pausing Add the following property to the TimeControl script: [Property] var PauseKey : Keys = Keys.Space; Add the following function to the TimeControl script: function TogglePause() { if(this.Space.TimeSpace.Paused) { Console.WriteLine(\"Game was paused, unpausing now\"); this.Space.TimeSpace.Paused = false; } else { Console.WriteLine(\"Game was not paused, pausing now\"); this.Space.TimeSpace.Paused = true; } } Add the following block to the end of the OnLogicUpdate function in the TimeControl script: if(Zilch.Keyboard.KeyIsPressed(this.PauseKey)) this.TogglePause(); Command : PlayGame Press Space to pause the game and then press Space again to attempt to unpause the game Command : StopGame You probably noticed that the game will not unpause. This is because when the TimeSpace is paused, Keyboard, listening for the KeyDown event, or to poll the keyboard input on FrameUpdate. Update the Initialize function in TimeControl to the following: function Initialize(init : CogInitializer) { Zilch.Connect(Zilch.Keyboard, Events.KeyDown, this.OnKeyDown); } Replace the OnLogicUpdate function in TimeControl with the following: function OnKeyDown(event : KeyboardEvent) { if(event.Key == this.IncreaseRateKey) this.ScaleTime(this.TimeScaleRateOfChange); if(event.Key == this.DecreaseRateKey) this.ScaleTime(-this.TimeScaleRateOfChange); if(event.Key == this.PauseKey) this.TogglePause(); } Command : PlayGame Press Space to pause the game and then press Space again to attempt to unpause the game Pausing with and unpausing in reaction to the KeyDown event Now we can see the game being paused and unpaused successfully. Command : StopGame Related Materials Manual LauncherNewProject commands selectobject addremovecomponent resourceadding Reference Commands CreateSprite CreateSphere SelectSpace Console PlayGame StopGame Classes transform timespace rigidbody boxcollider keyboard Events LogicUpdate FrameUpdate KeyDown Development Tasks {T1178}"
  },
  "docs/zilch_editor_documentation/tutorials/audio.html": {
    "href": "docs/zilch_editor_documentation/tutorials/audio.html",
    "title": "| ZilchEngine",
    "keywords": "Placing sound emitters, microphones, and importing sound assets. Audio I #Beginner_I Importing Sound, Sound Cues, Sound Emitter, Simple Sound, Sound Listener Audio II #beginner_iii Sound Emitter Methods, Sound Space, Sound Instances, Sound Tags"
  },
  "docs/zilch_editor_documentation/tutorials/audio/audio1.html": {
    "href": "docs/zilch_editor_documentation/tutorials/audio/audio1.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson focuses on covering the basics of audio in Zilch Engine. Learning Objectives Importing audio files Creating and playing sound cues Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSprite In the Properties Window Rename Sprite object to Square Add Component : [RigidBody]D:/Dev/CPP/ZilchEngine/ZilchEngineWebsite/docs/code_reference/class_reference/rigidbody.md) Add Component : SoundEmitter Add Component : SimpleSound Command : PlayGame Command : StopGame Importing Audio In Zilch Engine, you can play sound files by importing them as resources. There are two important resources to play audio; Sound and SoundCue. By default, Zilch Engine includes both a DefaultSound resource and a DefaultSoundCue resource resources, which is what we hear when running the game. Let's experiment by adding a new sound file. Download the following file: Import it into the project by dragging and dropping the file into the Level Window In the Import Window Set GenerateCue to PerSound Set GroupName to Buzz Press the Import All button Now we have added both a Sound resource and SoundCue resource resource to our project. We can verify this by looking at the Library Window under the respective tags. NOTE: Zilch Engine only supports WAV and OGG audio formats, if the file you are looking to import is of a different extension, you'll need it to convert it first. Sound Cue SoundCues are resources that allow you to modify properties of a sound without altering the sound files themselves and are necessary to play any kind of audio in Zilch Engine. Let's take a look at a few of the SoundCue resource settings. Common Sound Cue Properties PlayMode enum Whether the sound should a Single time or loop on completion Volume & Decibels How quiet or loud the sound should be played Pitch & Semitones How high or low pitched the sound should be played VolumeVariation Added random volume variation within the given range when sound is played PitchVariation Added random pitch variation within the given range when sound is played Attenuator enum The resource that defines how the sound behaves based on distance from the origin In the Library Window Under the SoundCue tag Double-Click Buzz In the Properties Window Set PlayMode to Looping Select : Square object In the Properties Window Under SimpleSound Set SoundCue enum to Buzz Command : PlayGame You should now be hearing the Buzz sound effect looping. Command : StopGame Attenuation Previously, we have played sounds that remain just as loud irrespective of the emitter's position (non-positional sounds). Zilch Engine also allows us to setup sounds to be played positionally; growing louder or quieter based on the Sound Listener's position, which is added by default to the Game Camera object. Let's take a look on how to play positional sounds. Command : Add Resource Create a SoundAttenuator resource named CustomAttenuation In the Library Window Under SoundAttenuator Double-Click CustomAttenuation resource In the Properties Window Set StartDistance to 10 Set StopDistance to 50 Set MinAttenuatedVolume to 0 Select : Square object In the Properties Window Under SoundEmitter Set Attenuator to CustomAttenuation Under SimpleSound Set Positional checkBox to true Command : PlayGame If done correctly, you should notice the sound getting quieter as the Square object object falls and gets farther from the Game Camera which has a SoundListener. Command : StopGame Related Materials Manual {icon university}[sound {icon university}[soundcue {icon university}[simplesound {icon university}[soundattenuator {icon university}[soundemitter {icon university}[soundlistener Code Reference Classes Sound SoundCue Transform SoundEmitter SimpleSound SoundListener RigidBody Commands Create a New 2D Project Add Resource PlayGame StopGame CreateSprite"
  },
  "docs/zilch_editor_documentation/tutorials/audio/audio_ii.html": {
    "href": "docs/zilch_editor_documentation/tutorials/audio/audio_ii.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson discusses audio in the Zilch Engine. (NOTE) You will need speakers, headphones, or some other audio output device for this lesson. Learning Objectives The soundemitter interface The soundspace interface soundinstance Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Download the following files: Import them into the project by dragging and dropping the files into the Level Window In the Group Import Options Window Set GenerateCue enum to PerSound Press the Import All button In the Library Window Under the SoundCue tag Double-click the BG_Arpeggios SoundCue In the Properties Window Set PlayMode enum to Looping Select : GameCamera object In the Properties Window Under Transform Set Translation to [0, 0, 3] Under Camera Set Size to 40 SoundEmitter There are a few different ways to play sounds in the Zilch Engine. One is by using a SoundEmitter. The SoundEmitter component is used to play SoundCues //positionally//: that is, as if they were to occur in the world with the rest of the game. Using positional audio, it is possible to create, for example, an explosion effect that is louder or softer, and will sound like it occurs to the left or right of the player, depending on where it goes off. Let's do that now. The PlayCue Function Command : Add Resource Create a NadaScript resource using the Component template template and name it KeyboardMovement Update KeyboardMovement to the following: class KeyboardMovement : NadaComponent { [Dependency] var Transform : Transform; [Property] var Speed : Real = 20.0; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var movement = Real3.Zero; if (Zilch.Keyboard.KeyIsDown(Keys.Right)) movement += Real3.XAxis; if (Zilch.Keyboard.KeyIsDown(Keys.Left)) movement -= Real3.XAxis; if (Zilch.Keyboard.KeyIsDown(Keys.Up)) movement += Real3.YAxis; if (Zilch.Keyboard.KeyIsDown(Keys.Down)) movement -= Real3.YAxis; movement = Math.Normalize(movement) * this.Speed * event.Dt; this.Transform.WorldTranslation += movement; } } Command : CreateSprite In the Properties Window Set Name to Player Under Sprite Set SpriteSource enum to Circle Set VertexColor to [R:30, G:150, B:230, A:1.00] Add Component : KeyboardMovement In order for a sound played by a SoundEmitter to be heard, it needs to be picked up by a SoundListener. The GameCamera object object has a SoundListener component. To make the sound effects sound like they're coming from different sides of the player, we can parent the camera to the player so that it automatically follows the player around. Attach GameCamera object to Player object Command : Add Resource Create a NadaScript resource using the Component template template and name it SoundController Update SoundController to the following: class SoundController : NadaComponent { [Dependency] var SoundEmitter : SoundEmitter; [Property] var ExplosionCue : SoundCue = SoundCue.SFX_Explosion; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { if (Zilch.Keyboard.KeyIsPressed(Keys.Space)) this.SoundEmitter.PlayCue(this.ExplosionCue); } } Command : CreateSprite In the Properties Window Set Name to Speaker Under Transform Set Translation to [0, 3, 0] Under Sprite Set VertexColor to [R:230, G:60, B:60, A:1.00] Add Component : SoundEmitter Under SoundEmitter Set Attentuator enum to DefaultAttenuation Add Component : SoundController Command : PlayGame Hold key the Arrow keys to move the player around, and press key the Space bar to play the explosion sound If you press Space, the speaker plays an explosion sound. If you're on the right side of the speaker, the sound comes from your left, and if you're on the left side, it comes from your right. If you're near the speaker, the explosion sound is louder than if you're far from it. Command : StopGame The Volume Property Every sound played by a SoundEmitter is played at the volume level specified by its Volume property. Let's play around a bit with that. Add the following to the OnLogicUpdate function of the SoundController class: if (Zilch.Keyboard.KeyIsDown(Keys.LeftBracket)) { this.SoundEmitter.Volume -= event.Dt; Console.WriteLine(\"Current Volume: `this.SoundEmitter.Volume`\"); } if (Zilch.Keyboard.KeyIsDown(Keys.RightBracket)) { this.SoundEmitter.Volume += event.Dt; Console.WriteLine(\"Current Volume: `this.SoundEmitter.Volume`\"); } Command : Console Command : PlayGame Press key the Space bar to play the explosion sound, and hold key the [ and ] keys to decrease and increase the SoundEmitter's volume The console shows the changes to the emitter's volume level The volume level of the SoundEmitter can now be controlled, in addition to any attenuation that may occur when moving closer to or further from the speaker. Command : StopGame What if we want to modify the volume of a SoundEmitter gradually over time, but we want it to happen automatically, without having to hold keys on the keyboard? We've already covered Actions: we could use an Action to interpolate the SoundEmitter's Volume property, but as it happens, SoundEmitter has a handy function for just such an occasion. The InterpolateVolume Function Replace the OnLogicUpdate function of the SoundController class with the following: function OnLogicUpdate(event : UpdateEvent) { if (Zilch.Keyboard.KeyIsPressed(Keys.Space)) this.SoundEmitter.PlayCue(this.ExplosionCue); if (Zilch.Keyboard.KeyIsPressed(Keys.LeftBracket)) this.SoundEmitter.InterpolateVolume(0, 3); if (Zilch.Keyboard.KeyIsPressed(Keys.RightBracket)) this.SoundEmitter.InterpolateVolume(1, 3); } Command : PlayGame Repeatedly press the Space bar to play the explosion sound, and press key the [ and ] keys to interpolate the SoundEmitter's volume Now it just takes one press of the [ and ] keys to gradually fade the SoundEmitter's volume level down and up, respectively. Command : StopGame For positional sounds, a SoundEmitter is the way to go, but sometimes audio shouldn't be played positionally. Music, for example, is usually played at a consistent volume level that is independent of the game world, and many sound effects are as well. To make a sound play non-positionally, we'll have to take a look at the SoundSpace. SoundSpace A previous tutorial mentioned the concept of the Space. A space has a few unique components that subdivide its responsibility into different areas. To that end, the soundspace is \"in charge\" of any sound that occurs in a space. That is, a SoundListener in one space won't \"hear\" anything played by a SoundEmitter in another space, because the listener and the emitter are controlled by different SoundSpaces. The SoundSpace manages all sounds played in a space, but it can also be used to play sounds directly. Let's use the SoundSpace to play some music. Command : Add Resource Create a NadaScript resource using the Component template template and name it MusicPlayer Update MusicPlayer to the following: class MusicPlayer : NadaComponent { [Property] var MusicCue : SoundCue = SoundCue.BG_Arpeggios; function Initialize(init : CogInitializer) { this.Space.SoundSpace.PlayCue(this.MusicCue); } } Select : LevelSettings object In the Properties Window Add Component : MusicPlayer Command : PlayGame Notice how moving the player around has no effect on the volume level of the music, because it's playing directly through the SoundSpace, not a SoundEmitter. It might be a little bit too loud, though. That's easy to fix because the volume level of the SoundSpace can be controlled just like the volume of a SoundEmitter. Command : StopGame Update MusicPlayer to the following: class MusicPlayer : NadaComponent { [Property] var MusicCue : SoundCue = SoundCue.BG_Arpeggios; function Initialize(init : CogInitializer) { this.Space.SoundSpace.PlayCue(this.MusicCue); Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { if (Zilch.Keyboard.KeyIsDown(Keys.Minus)) { this.Space.SoundSpace.Volume -= event.Dt; Console.WriteLine(\"Music Volume: `this.Space.SoundSpace.Volume`\"); } if (Zilch.Keyboard.KeyIsDown(Keys.Equal)) { this.Space.SoundSpace.Volume += event.Dt; Console.WriteLine(\"Music Volume: `this.Space.SoundSpace.Volume`\"); } } } Command : PlayGame Press key the Space bar to play the explosion sound, and hold key the - and = keys to decrease and increase the SoundSpace's volume Now you can control the volume level of the output of the SoundSpace, but the volume of the explosion sound is affected too. This is because the SoundSpace applies its volume to every sound that plays in its space, whether positionally or not. There are a few different ways to control just the volume of an individual music cue (or any other SoundCue played non-positionally). Let's look at one of them. Command : StopGame SoundInstances A SoundInstance is a class object that represents a specific occurrence of a SoundCue being played. It can be manipulated in Nada, where its interface is very similar to those of both the SoundEmitter and SoundSpace components. Update MusicPlayer to the following: class MusicPlayer : NadaComponent { [Property] var MusicCue : SoundCue = SoundCue.BG_Arpeggios; var MusicInstance : SoundInstance; function Initialize(init : CogInitializer) { this.MusicInstance = this.Space.SoundSpace.PlayCue(this.MusicCue); Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { if (Zilch.Keyboard.KeyIsDown(Keys.Minus)) { this.MusicInstance.Volume -= event.Dt; Console.WriteLine(\"Music Volume: `this.MusicInstance.Volume`\"); } if (Zilch.Keyboard.KeyIsDown(Keys.Equal)) { this.MusicInstance.Volume += event.Dt; Console.WriteLine(\"Music Volume: `this.MusicInstance.Volume`\"); } } } Note how the MusicInstance member variable is used: the SoundSpace's PlayCue function actually returns a SoundInstance, but we didn't hang onto it before because we didn't need it. Now that we do want to use it, we can store it as a member and work with it later. Command : PlayGame Press key the Space bar to play the explosion sound, and hold key the - and = keys to decrease and increase the music's volume These changes allow us to alter the music's volume independently from the volume of the sound effects. Command : StopGame Related Materials Tutorials actions spaces Manual Create a New 2D Project Select Command Add Resource Add Component Reference Classes transform sprite camera action space soundspace soundemitter soundcue soundlistener soundinstance Events #logicupdate Commands CreateSprite PlayGame StopGame Console Development Task {T1211}"
  },
  "docs/zilch_editor_documentation/tutorials/editor.html": {
    "href": "docs/zilch_editor_documentation/tutorials/editor.html",
    "title": "| ZilchEngine",
    "keywords": "How to use the tabs, windows, and commands of the Zilch Editor. Editor UI #Basic_Tutorials Windows Overview, Menu Bar, Commands, Save Project Tile Editor I Tile sheet importing, the draw tool, the select tool Tile Editor II Tile palettes, tile collision, tile archetypes"
  },
  "docs/zilch_editor_documentation/tutorials/editor/editorui.html": {
    "href": "docs/zilch_editor_documentation/tutorials/editor/editorui.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson introduces the Zilch Engine editor and user interface. It covers editor windows such as the Objects Window, Properties Window, Library Window, Level Window, and Search Window. Learning Objectives Elements and features of the #zilch_editor Basic #zilch_tutorials style Tutorial Structure In Tutorials, instructions are laid out in a specific way to make them easier to understand. For example: In the Object Window Select the Player object object In the Properties Window Add Component: RigidBody Under RigidBody Set AllowSleep button to false Each level of indentation represents a subsection of the window you are already in, where the base is the Editor itself. This makes it easier for you to know where to look in the editor for the information you seek. As the lessons progress some common steps will be cut for brevity, for instance: In the Level Window Press Space In the Search Window Type CreateSprite Press Enter will be shortened to: - Command: CreateSprite This significantly reduces the amount of reading, and while still providing a reference to the full process should you need a refresher. Create a New Project It is recommended that you create a new project. If this is the first time you have run the Zilch Engine you will already be in the Projects screen and can simply type in a name for your project. If you are not on the new Projects screen, you can access it using the Project menu. Open the Zilch Launcher In the Project Window Select EMPTY 2D Project template Enter a name for the project in the Name field Enter a Project Folder directory (if the default is not sufficient) by either typing or left clicking the browse button on the right of the field. Left Click the Create Project button Alternatively, you can create a new project from within the editor by using Command : New Project NOTE: Commands represent all actions you can perform as a user in the Zilch Editor. Page numbers are listed throughout the lesson for refreshing your knowledge on how to do common essential tasks. View how to enter Commands in Zilch by going to the page number provided in the tutorial! Windows Overview After creating a new project, the editor should look something like this: Level Window The Level Window (located in the center of the editor as seen in the Window Overview section above) is where you will manipulate objects to build levels. The visible grid is a customizable visual to help place objects, but doesn't show in actual gameplay. Buttons To Alter Level View Toggles between 2D & 3D camera controls Toggles editor camera's render mode between Orthographic and Perspective With the camera options you can either reset the editor camera to its default settings, or align a selected camera with the editor's camera Toggles the grid line visuals in the editor Objects Window Every level contains objects. An object can represent the floor, a wall, enemies, the player, and many other things. There are a few different buttons in the Objects Window that you should know about: Eyeball: Toggles visibility of an object only while in the editor. Objects with the eye button disabled will be invisible in the editor, but still visible when the level is played. Selection Lock: The small lock button can be turned on and off to toggle the ability to select an object from within the editor. The objects in the Objects Window can be searched by name using the search bar. Each level has four objects by default: Click on the LevelSettings object object to select it Properties Window When an object is selected, the properties of that object are accessible from the Properties Window. The Properties Window is the primary means for editing or building objects. An object being comprised of multiple components. NOTE: Component is a chunk of functionality or small bucket of data. An object's behavior and purpose depends upon what components it contains. Game objects are made up of different components. More details about components will be covered in future lessons. Properties Navigation Buttons These arrows allow you to navigate back and forth between recently selected items that have show in the Properties Window The Show Selection button, on first click, pans the camera to the object and on second click, zooms the camera in to frame the object in the Level Window The Recent button pulls up a drop down list of the recently accessed items for selection Library Window Anything you add to the game using Command : Add or through drag-and-drop importing is stored as a resource. All resources added to your project can be found in the Library Window. You'll learn more details about resources in future lessons. Search Window This powerful tool allows you to search nearly anything within the editor. Perhaps its most important use is executing Commands. (NOTE) \"Do This + That\": The + symbol can be read as \"and\" when used to describe button combinations. It means you should do all the actions \"added\" together simultaneously. Press Ctrl + C to copy, would mean hold down Ctrl on your keyboard then press C to perform the copy action. There are three ways to bring up the Zilch Search Window: Click anywhere in the Level Window and press Space From any window press Ctrl + Shift + Space Click the Zilch Search Button in the upper left-hand corner Reopening Windows & Docking With its numerous commands the Search Window provides many crucial functions such as those that reopen closed windows and tabs. Click the x on the Library tab to close the Library Window: Press Ctrl + Shift + Space to open the Search Window Search for the Library command by typing Library, then hit enter (or click on the Library command directly) to open the Library Window This same process can be used to reopen many of these key windows. Once reopened, you can use the drag and drop technique on the tab at the top of the window to \"dock\" it back into the same starting configuration. Docking locations are indicated by the editor with light blue regions as you hover over them. When you find the one you want to dock to, release the left mouse button: Console Window Press the Tilde ~ key to open the Console Window NOTE: To be \"in\" a window requires that the window has \"focus\". To gain focus you need to click on the window itself. This ensures that all your keyboard input works as intended. In the Console Window Press Ctrl + Delete to clear the console In the Level Window Press Space Type the Command : SaveProject Press Enter A message telling you the project was saved is displayed in the Console Window. When console output is referenced in future lessons it will be shown like this: Saved level file 'Level'. Uploaded to archetype MyProject.Game. Saved : Project and all scripts saved. Game Window The Game Window is where your game actually runs inside the Zilch Engine editor. You can test or play your game (or specific levels) here without having to create an executable. Command: PlayGame There are multiple ways to run the game in the editor. Press key F5 on the keyboard Press the Play button button in the Tool Bar Command : PlayGame Project Menu > Play Game The Game Window tab should appear in a tab next to the Level Window tab: The Game Window should not show anything but a blank screen right now because we haven't added any visible objects to our level yet: Close the Game Window by pressing the X button on the Game tab You can also press Esc or use Command: StopGame It is a good practice to close your game window promptly. Editing levels while the Game Window is open can cause erratic behavior, undefined behavior, or errors. Click on the Level tab to return to the Level Window Tools Window This window contains several useful tools for using the Zilch Editor. These tools are for managing various objects within the level. Settings for the current tool being used are also available here. You can switch tools from the drop-down selection or by using hotkeys. Click anywhere in the Level Window then press 1 on your keyboard. This is a hotkey for switching to the SelectTool. Click on the drop-down selection in the Tools Window to display a list of tools you can use: Tool Bar | The Tool Bar| ||Saves the project and all the resources in your Library| ||These buttons line up with hotkeys 1-5 and they represent some of the most commonly used tools for editing objects in the Level Window| ||These correspond to other, less common tools that are available| ||These open windows in the Editor, such as the Library Window and the Add Window| ||These buttons allow you to run your game from the current level F5, pause F6, step through frame by frame F7, or stop executing the game F8| ||These link to outside resources to get content, give bug reports, and request support.| In order to find out more about the function of each button, you can hover over them to get a pop-up tool tip. You can reach all the same functionality by searching in the Search Window. You may have noticed that you can play, pause, step through, and stop your game with the F5 - F8 function keys. F9, F10, and F11 are also engine specific hotkeys. F9 will open the edit in game window for the first space, allowing you to edit objects in the scene while the game is running. F10 will toggle whether the cursor is trapped, meaning it is made invisible and locked to the center of the screen. F11 toggles fullscreen mode for the currently focused window. Menu Bar The menu bar includes commands for project manipulation and exporting your game under File, quick create options for getting things on the screen fast under Create, and the ability to reopen closed windows via Windows. See Executing Commands for information. Related Materials Manual Components Nada User Documentation Tutorials BasicComponents CustomComponents Reference Classes Transform Sprite NadaScript Console Commands PlayGame StopGame New Project SaveProject"
  },
  "docs/zilch_editor_documentation/tutorials/editor/launcher.html": {
    "href": "docs/zilch_editor_documentation/tutorials/editor/launcher.html",
    "title": "Download the Engine | ZilchEngine",
    "keywords": "This lesson introduces the Zilch Launcher and explains how to use it. Download the Engine (IMPORTANT)Restricted Launcher Download: Currently only registered DigiPen students with a valid DigiPen login can download the Zilch Launcher. Learning Objectives Understand the various tabs and sections of the launcher. Be able to create new projects. Installing new builds of the Zilch Engine. The Discover Tab The Discover tab is the Launcher's information hub. It features a number of useful links to informative websites: The ZilchHub link opens the Zilch Engine open source development site. The Documentation link opens the Zilch Engine documentation website The Nada link takes you to the manual on Nada, the programming language used by the Zilch Engine The Roadmap link shows you the Zilch Engine's long term roadmap workboard The Market opens the Zilch Market where you can find free and commercial assets for you projects. The Q&A link connects you to the Zilch Engine's Q&A page, where you can ask questions about the engine, the editor, Nada, etc. The Projects Tab The New Project Sub-Tab Choose a template to start with: Empty 2D Project and Empty 3D Project will both result in an empty Zilch project, but with a few differences in in editor settings and initial project configuration. Networked Project is an empty 3D project with some pre-configured elements to facilitate proper architecture for a networked project. New Project Default Settings by Template Setting Description EMPTY 2D PROJECT EMPTY 3D PROJECT PhysicsSpace Default behavior for collision resolution true true EditorCamera Settings of editor camera 2D (orthographic, etc..) 3D (perspective, etc.. Default Camera Settings of the camera that is placed by default in each new level 2D (ortographic, etc...) 3D (perspective, etc...) GridDraw Axis Perpendicular axis to the grid plane ZAxis YAxis (NOTE) Remember, even if you start with the 2D template, you can still use 3D elements and concepts in your game, and vice versa. The template you choose simply specifies the default settings for certain properties. Keep in mind that you will only be asked to create 2D projects in this book. Type a name for the project in the Name field. (You will be notified if a project by the same name already exists in the folder specified in the Location field.) Specify where the project should be created in the Location field. The default path for new projects can be changed in The Settings Tab . You can use the Open Path button next to the field to browse to a desired folder in your operating system's Folder Selection dialog. Optionally, you may give the project tags by typing them, separated by commas, in the Tags field. Tags are just bits of text that can be used as keywords when searching for projects in the Recent Projects subtab. Specify which Zilch Engine build version that you want to use to create the project in the Build popup menu (build 13480). When you are ready, click the Create Project button. This will create a folder with the project name in the specified location containing the project file and Content folder. Clicking the Recent button will bring up the Recent Projects subtab. Recent Projects Here, you will see a list of the latest Zilch projects that you have worked on. Each recently-used project appears here, with its name and modified date shown next to a thumbnail screenshot. You may use the Search field to search through your recent projects, either by name or by tags. When you mouse over a recent project, its Remove button will appear, which you may use to remove the project from the Recent Projects subtab. Removing a project in this way does not delete it from your computer it is only removed from this list. When you click on a recent project, you will see this: To open the project, click the Launch Project button. You may choose which installed Zilch Engine build version you wish to open the project in by selecting the desired build from the Build popup menu. Clicking the Open Path button will open the project folder in your operating system. To return to the list of recent projects, click the Back button. Finally, in the Projects tab, there's the Browse button. Browse Projects Click Browse to find a Zilch project through your operating system's Open dialog. The Builds Tab The Builds tab features a list of Zilch Engine build versions that are installed n your computer or available for download. Each build is listed in the Build List section of the builds tab, with its build number, release date, and tags. Further information on the selected build can be found in the Details pane. You may use the Search field to search through the Build List, either by build number or by tags. Click the Install Build button to download and install the selected build. Click the Uninstall button to remove the selected build from your computer. NOTE: You may have any number of different builds installed simultaneously. The Settings Tab Finally, there's the Settings tab, found by clicking the little orange horizontal lines. Here, you can configure a number of different properties about how the Launcher itself behaves. The Project Settings drop down menu controls what happens when you open a project from your operating system (i.e., by double-clicking on its icon): Always open launcher: Opening a project will open the Launcher and bring you directly to it in the Recent Projects subtab Auto run project if build installed: If the Zilch Engine build version that was used to save the project is installed on your computer, then the project will directly open in that version, bypassing the Launcher. The Default Project Location field defines the default path where new projects will be created. You can use the Open Path button next to the field to browse to a desired folder in your operating system's Folder Selection dialog. New projects can still be created elsewhere, by specifying a different path in the New Project subtab. The Default Download Location field defines the path to which new build versions are downloaded and installed. You can use the Open Path button next to the field to browse to a desired folder in your operating system's Folder Selection dialog. The Max Recent Projects field sets how many recent projects will appear in the Recent Projects subtab. The Auto Check for Major Updates field allows the launcher to periodically check the ZilchHub server to see if a new major version of the Zilch Engine has been released. The Show Development Builds causes all public builds built off the develop branch in rZCORE to be seen in the Builds Tab. Many of these builds will be simple bug fixes and minor functionality changes. HOwever, these builds are usually not guarenteed to be stabled and as such most users should stick to builds tagged stable. The Show Experimental Builds causes all public builds built off an experimental branch in rZCORE to be seen in the Builds Tab. These builds are often unstable and may contain large refactors or experimental functionality. The Revert to default button restores the Launcher to its default settings."
  },
  "docs/zilch_editor_documentation/tutorials/editor/tile_editor.html": {
    "href": "docs/zilch_editor_documentation/tutorials/editor/tile_editor.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers the basics of Zilch Engine's Tile Editor tool. The next lesson covers some of its more advanced features. Learning Objectives Tile sheet importing The Tile Editor's features Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template The Tile Editor tool allows a designer to quickly make a 2D level by painting a tilemap with tiles that consist of graphics, colliders, custom logic, and more. Importing Tile Sprites The Tile Editor tool is typically (though not exclusively) used with sprites prepared with the Sprite Importer. Download the following tile sheet: Drag and drop the file into the Level Window In the Group Import Options Window Set ImportImages enum to Sprites Press the Import All button Like in the tutorial on sprite animations, we will use the Sprite Importer to take this large tile sheet and extract smaller SpriteSource resource resources from it. In the Library Window Under the SpriteSource tag Double-click PlatformerTiles In the Sprite Source Editor Window Press the Convert To Animation button The tile sheet consists of 32-pixel square tiles. Each tile is 32 pixels wide and high To divide the tiles properly, we should set the FrameWidth and FrameHeight each to 32. This will split the sheet into equally sized tiles, each of which is 32 pixels wide and high. In the Sprite Importer Window Set Name to Tiles Set FrameWidth to 32 Set FrameHeight to 32 Set PixelsPerUnit to 32 Our goal here is to select every square region of the sheet that we want to use as a tile for the Tile Editor. By default, the ImportFrames enum property is set to AllFrames, so if we just clicked the Add Frames as Sprites button, it would add every 32-pixel tile in the sheet as a separate SpriteSource, and we'd be done. However, the sheet has some \"holes\" in it and a lot of empty space at the bottom, which would result in many tiles that are totally blank. These virtually useless SpriteSources would clutter up our library and act as a general nuisance. Instead, we can use the mouse to manually select all and only the tiles we want. In the Sprite Importer Window Set ImportFrames enum to SelectedFrames Left-click every tile that you want to add If you accidentally select a tile you don't want, right-click it to deselect it The left mouse button selects tiles, and the right mouse button deselects them When you've got all the tiles you want, it's time to import them. Since we want each of these tiles to be a separate individual SpriteSource in the project, the Add Frames as Sprites button is the way to go. In the Sprite Importer Window Press the Add Frames as Sprites button The four lava surface tiles are designed as an animation strip, so we can import them together as a single animated SpriteSource. In the Sprite Importer Window Press the Clear Frames button Feel free to set FrameRate to any desired value Select the four lava surface tiles in order from left to right Press the Add and Close button (NOTE) FrameRate: The FrameRate property defines the number of animation frames per second for an animated sprite source. (In other words, 1 divided by FrameRate equals the delay in seconds for each frame.) The lava animation with a FrameRate of 12 looks like this: ; the same animation with a FrameRate of 4 looks like this: . Now that we have all the sprites we want, we're ready to start using the Tile Editor. The TileEditor2D Tool The TileEditor2D tool is used to create and modify a tile map object, which consists of sprites, collision information, and archetype definitions. This can be used to create 2D levels in a game. In the Tool Bar Press the {nav icon=square-o, name=TileEditor2D} button (NOTE) Tool Control Info: For quick reminders about the controls of the TileEditor2D tool, just hover over the icon in the upper-left corner of the Tools Window. Selecting the TileEditor2D tool for the first time will show this: The TileEditor2D tool requires a tilemap object to work In the Level Window Click the No TileMap Object message (NOTE) TileMap Objects: The TileEditor2D tool needs a tilemap object to work with. If there isn't one in the level, then you'll need to make one before you use it. Of course, you can have multiple tilemaps in the same level (say, for backgrounds and foregrounds). When you select the TileEditor2D tool, if no tilemap object is already selected, it will automatically select the one that was most recently edited. Placing Tiles Tiles can be added to the tilemap by using the TileEditor2D tool's Draw sub-tool and Selection sub-tool. The Draw Sub-Tool The Draw sub-tool allows you to paint tiles into a tilemap. All of your project's SpriteSources can be found in the list under the Sprite enum property. In the Tools Window Set Sprite enum to the SpriteSource of your choice In the Level Window Left-click and drag to place tiles Right-click and drag to erase tiles The Selection Sub-Tool The Selection sub-tool allows you to select one or more tiles to use as a \"brush\", which can then be used to paint using the Draw sub-tool. In the Tools Window Set ToolType enum to SelectionTool (NOTE) TileEditor2D Tool Hotkeys: You can quickly select the TileEditor2D tool by pressing key the 6 key. With the TileEditor2D tool active, you can select the Draw sub-tool and the Selection sub-tool by pressing key Shift + 1 and Shift + 2, respectively. In the Level Window Left-click and drag to select tiles After making a selection, right-click the selected tiles to commit the selection to be used as a brush If you don't want to use the selected tiles as a brush, right-click somewhere else in the Level Window to clear the selection After committing a selection with the Selection sub-tool, the Draw sub-tool is automatically selected, and you can draw and erase with the new brush. In the Tools Window Confirm that the ToolType enum property is set to SelectionTool In the Level Window Left-click and drag to make a selection and right-click it to commit it as a brush Left-click and drag to place tiles with the new brush Right-click and drag to erase tiles with the new brush Press key the Esc (Escape) key to revert the brush to the tile specified in the Tools Window A Quick Test Run Let's use what we've covered so far to throw together a very basic level (but really not much more than a couple of platforms) that we can play in using the swept character archetype that can be downloaded from the Zilch Market, as covered in tutorial on the Zilch Market. Use the TileEditor2D tool to create a set of simple platforms: Press the Market button button in the top-right corner of the editor Click the Sample Character Controller package Click the download link for the SAMPLECHARACTERCONTROLLERS[1.0].ZEROPACK package In the Import Content Package Window Press the Import button button Close the Market Browser In the Library Window Under Archetype Left-click and drag SweptPlayer2D into the Level Window Command : PlayGame By default, the tiles placed with the TileEditor2D tool have collision Command : StopGame (NOTE) Can't Jump High Enough? Depending on how you constructed your level, you may want to adjust your player character's properties, such as the SweptController's Gravity and JumpSpeed . The test run was a success: the swept character collides with the tiles as expected. In the next tutorial, we'll begin by learning about tile archetypes. Related Materials Tutorials sprite_animations the_market swept_character tile_editor_ii Manual commands spriteimporter spritesourceeditor Reference Commands NewProject PlayGame StopGame Enums ImportFrames TileEditor2DSubToolType Development Task T2174"
  },
  "docs/zilch_editor_documentation/tutorials/editor/tile_editor_ii.html": {
    "href": "docs/zilch_editor_documentation/tutorials/editor/tile_editor_ii.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers some of the more advanced features of Zilch Engine's Tile Editor tool. The previous lesson covers the basics. Learning Objectives Tile colliders Tile palettes Level Setup Reopen the TileEditor zero project project from the previous tutorial Tile Archetypes When you place tiles with the TileEditor2D tool, they are not created as individual game objects. Instead, they are placed into a tilemap, which allows multiple tiles to be merged into a single cog, saving memory and processing time. As a result, tile archetypes are used a bit differently than conventional archetypes. When the engine creates a merged tilemap object, it is always given a MultiSprite component, so you don't necessarily need to put one on your tile archetype. If you do, though, the resultant merged tilemap will use the settings specified by your archetype's MultiSprite. Similarly, a merged tilemap object optionally has a MeshCollider component, so you only need to give a tile archetype that component if you want the merged tilemap to use the settings from the MeshCollider for your archetype. Let's create a tile archetype with some custom game logic and add it to our level. Command : Add Resource Create a NadaScript resource using the Component template template and name it ReloadLevelOnCollisionStarted Update the ReloadLevelOnCollisionStarted script to the following: class ReloadLevelOnCollisionStarted : NadaComponent { function Initialize(init : CogInitializer) { Zilch.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted); } function OnCollisionStarted(event : CollisionEvent) { this.Space.ReloadLevel(); } } This component will cause the level to be reloaded if the player character (or, really, anything at all) comes in contact with it. We can use it to create \"deadly\" tiles. Command : CreateTransform In the Properties Window Rename Transform object to DeadlyTile Add Component : MeshCollider Under MeshCollider Set Ghost checkBox to true Add Component : ReloadLevelOnCollisionStarted Set Archetype to DeadlyTile Command : Delete the DeadlyTile object This new archetype can now be used with the TileEditor2D tool with any sprite source in the project. Select the {nav icon=pencil, name=TileEditor2D} tool In the Tools Window Set Archetype enum to DeadlyTile In the Level Window Using the {nav icon=pencil, name=TileEditor2D} tool, create a lava pit in the level with both the plain lava sprite source and the animated LavaSurface texture sprite source While you're painting tiles into a level, it can sometimes be easy to lose track of which tiles have what archetypes. Fortunately, the TileEditor2D tool has a feature to help with that. In the Tools Window Set ShowArchetype checkBox to true With ShowArchetype checkBox enabled, the editor will show the name of the archetype that was used for each tile in the level. Command : PlayGame The lava seems to be working as intended. Now let's get a closer look at some of what's going on here. Pressing F9 while the game is running begins Edit In Game mode, which makes the editor open the game session and all of its spaces for editing while it's still running. This is a very powerful and useful feature in any situation, but it is great for showing off some of the details of how the TileEditor2D tool merges groups of tiles. While the game is running, press key the F9 key In the Objects Window Under TileMap object Observe the objects that are there When the game starts, before the first frame, the engine prepares level by merging the tilemaps into their logical pieces. Note how each separate platform is its own object, and the lava is separate from the ground. Observe how the colliders on each object use meshes that are dynamically generated to perfectly fit the pieces they're placed on. Command : StopGame Let's move on. Tile Collision So far, every tile we've placed has used a simple box-shaped collider. The TileEditor2D tool isn't limited to just boxes, though. It can use any PhysicsMesh as its collision shape. Zilch Engine comes with a set of common ramps and boxes to be used with tilemaps. Download the following tile sheet: Drag and drop the file into the Level Window In the Group Import Options Window Set ImportImages enum to Sprites Press the Import All button In the Library Window Under the SpriteSource tag Double-click SimpleTriangleTiles In the Sprite Source Editor Window Press the Convert To Animation button This sheet's tiles are 64-pixel squares. In the Sprite Importer Window Set FrameWidth to 64 Press the Add Frames as Sprites button Press the Close button button Now let's add some sloped surfaces to the level. Each of the new triangular tile sprites will pair perfectly with one of the sloped collider options: (NOTE) No Collision: To remove the collider from a tile, click the little {icon times} button on the Collision enum property: Similarly, you can remove the sprite from a tile by clicking the corresponding button on the Sprite enum property. Select the {nav icon=pencil, name=TileEditor2D} tool In the Tools Window Set Archetype enum to DefaultTile Set Sprite enum to SimpleTriangleTiles000 Set Collision enum to SlopeLeft In the Level Window Use the Draw sub-tool to paint a slope It's wise to fill in the underside of the slope to alleviate potential collider-catching problems. In the Tools Window Set Sprite enum to SquareBordered Set Collision enum to Box In the Level Window Use the Draw sub-tool to fill in the underside of the slope Using the new sloped sprite sources and the sloped colliders, paint additional slopes as desired By this point, you might be getting tired of having to set the Archetype enum, Sprite enum, and Collision enum properties every time you want to change tiles. That's where tile palettes come in! Tile Palettes A tile palette is like a shelf that stores tile definitions, making it easy to switch between tiles with a single click. It occupies the bottom portion of the TileEditor2D tool's property grid, and expands as necessary. Creating a tile palette is simple. Select the {nav icon=pencil, name=TileEditor2D} tool In the Tools Window Press the Add button button to the right of the TilePalette enum property In the Add TilePaletteSource Resource Window Set Name to Grass Press the Create button button Select the {nav icon=pencil, name=TileEditor2D} tool In the Tools Window Set TilePalette enum to Grass The new palette is mostly empty, but it's easy to add to it. Just set up a tile the way you want it, and then click in any empty space in the palette view to place it there. In the Tools Window Set Archetype enum to DeadlyTile Set Sprite enum to LavaSurface Set Collision enum to HalfBoxBottom Notice how the palette already reflects the changes you have made to its selected tile, which is outlined in blue: To add a new tile to the palette, first click in an empty spot in the palette view and then set its properties. To modify an existing tile in the palette, select the tile you want to modify, and then set its properties. To remove a tile from the palette, right-click the tile you want to remove. In this manner, you can make things very convenient for yourself while you're editing a level. The left mouse button adds tiles, and the right mouse button removes them In the Tools Window Create a full tile palette with archetypes, sprites, and colliders (NOTE) Zooming the Palette View: To make more room for yourself, you can hold key the Ctrl key and scroll the mouse wheel to zoom the palette view in and out. You can make multiple tile palettes to make it easy to facilitate making levels that are set in different locations, or use different art styles, and so on. In the Tools Window Press the Add button button to the right of the TilePalette enum property In the Add TilePaletteSource Resource Window Set Name to Slopes Press the Create button button Select the {nav icon=pencil, name=TileEditor2D} tool In the Tools Window Set TilePalette enum to Slopes Fill in the tile palette with the triangular sprite sources and the SquareBordered texture sprite source, with appropriate collisions set for each tile Let's use both palettes to create a new level. (NOTE) TiledDrawing: Watch what happens when you left-click and drag in the tile palette view to select multiple tiles, and then paint with them. Then, set the TileEditor2D tool's TiledDrawing checkBox property to true and then paint again. See the difference? TiledDrawing checkBox is great for preserving a specific configuration of tiles that you have laid out in the palette, but it also works with a brush committed with the Selection sub-tool! Command : Add Resource Create a Level resource using the {nav icon=clone, name=2D Level} template and name it OtherLevel Select the {nav icon=pencil, name=TileEditor2D} tool In the Level Window Click the No TileMap Object message In the Tools Window Set TilePalette enum to Grass Using the Grass palette, create the main pieces of a level In the Tools Window Set TilePalette enum to Slopes Using the Slopes palette, add slopes to the level In the Library Window Under Archetype Left-click and drag SweptPlayer2D into the Level Window In the Properties Window Configure the SweptController component's properties as desired Command : PlayGame Command : StopGame On Your Own Background tilemaps can really make a level feel alive. To create one, just press the CreateTileMap button button in the {nav icon=pencil, name=TileEditor2D} tool's property grid. It is often useful to organize your tilemaps by giving them descriptive names: To make a tilemap into a proper background tilemap, just push it back a bit along the Z axis. You may also wish to alter some of the properties of the MultiSprite component to give it a moodier look: Experiment with placing multiple layered tilemaps to help add visual flair to your levels. Related Materials Tutorials sprite_animations the_market swept_character tile_editor_ii Manual commands spriteimporter spritesourceeditor resourceadding archetype_basics Reference Commands PlayGame StopGame CreateTransform Delete Classes multisprite physicsmesh Events CollisionStarted Development Task T2174"
  },
  "docs/zilch_editor_documentation/tutorials/external_zilch_engine_tools.html": {
    "href": "docs/zilch_editor_documentation/tutorials/external_zilch_engine_tools.html",
    "title": "Zilch Launcher #Basic_Tutorials | ZilchEngine",
    "keywords": "Zilch Launcher #Basic_Tutorials Downloading the Engine, Launcher Interface, Builds, Creating New Project Zilch Market"
  },
  "docs/zilch_editor_documentation/tutorials/external_zilch_engine_tools/launcher.html": {
    "href": "docs/zilch_editor_documentation/tutorials/external_zilch_engine_tools/launcher.html",
    "title": "Download the Engine | ZilchEngine",
    "keywords": "This lesson introduces the Zilch Launcher and explains how to use it. Download the Engine Learning Objectives Launcher tabs and sections Creating new projects Build installation The Discover Tab The Discover tab is the Launcher's information hub. It features a number of useful links to informative websites: The ZilchHub link opens the Zilch Engine open-source development site. The Documentation link opens the Zilch Engine documentation website. The Nada link takes you to the manual on Nada, the programming language used by Zilch Engine. The Roadmap link shows you Zilch Engine's long term roadmap workboard. The Market opens the Zilch Market where you can find free and commercial assets for you projects. The Q&A link connects you to Zilch Engine's Q&A page, where you can ask questions about the engine, the editor, Nada, etc. The Projects Tab The New Project Sub-Tab Choose a template to start with: Empty 2D Project and Empty 3D Project will both result in an empty Zilch project, but with a few differences in in editor settings and initial project configuration. Networked Project is an empty 3D project with some pre-configured elements to facilitate proper architecture for a networked project. New Project Default Settings by Template Setting Description EMPTY 2D PROJECT EMPTY 3D PROJECT PhysicsSpace {nav icon=check-square-o, name=Mode2D} Default behavior for collision resolution true false EditorCamera Settings of editor camera 2D (orthographic, etc...) 3D (perspective, etc...) Default Camera Settings of the camera that is placed by default in each new level 2D (orthographic, etc...) 3D (perspective, etc...) GridDraw Axis Perpendicular axis to the grid plane ZAxis YAxis (NOTE) Remember, even if you start with the 2D template, you can still use 3D elements and concepts in your game, and vice versa. The template you choose simply specifies the default settings for certain properties. Type a name for the project in the Name field. (You will be notified if a project by the same name already exists in the folder specified in the Location field.) Specify where the project should be created in the Location field. The default path for new projects can be changed in The Settings Tab . You can use the Open Path button next to the field to browse to a desired folder in your operating system's Folder Selection dialog. Optionally, you may give the project tags by typing them, separated by commas, in the Tags field. Tags are just bits of text that can be used as keywords when searching for projects in the Recent Projects subtab. Specify which Zilch Engine build version that you want to use to create the project in the Build popup menu. When you are ready, click the Create Project button. This will create a folder with the project name in the specified location containing the project file and Content folder. Clicking the Recent button will bring up the Recent Projects subtab. The Recent Projects Sub-Tab Here, you will see a list of the latest Zilch projects that you have worked on. Each recently-used project appears here, with its name and modified date shown next to a thumbnail screenshot. You may use the Search field to search through your recent projects, either by name or by tags. When you mouse over a recent project, its Remove button will appear, which you may use to remove the project from the Recent Projects subtab. Removing a project in this way only removes it from this list. It does not delete the project from your computer. When you click on a recent project, you will see this: The Recent Projects sub-tab, with a project selected To open the project, click the Launch Project button. You may choose which installed Zilch Engine build version you wish to open the project in by selecting the desired build from the Build popup menu. Clicking the Open Path button will open the project folder in your operating system. To return to the list of recent projects, click the Back button. Finally, in the Projects tab, there's the Browse button. Browse Projects Click Browse button to find a Zilch project through your operating system's Open dialog. The Builds Tab The Builds tab features a list of Zilch Engine build versions that are installed on your computer or available for download. Each build is listed in the Build List section of the builds tab, with its build number, release date, and tags. Further information on the selected build can be found in the Details pane. You may use the Search field to search through the Build List, either by build number or by tags. Click the Install Build button to download and install the selected build. Click the Uninstall button to remove the selected build from your computer. NOTE: You may have any number of different builds installed simultaneously. The Settings Tab Finally, there's the Settings tab, found by clicking the little orange horizontal lines. Here, you can configure a number of different properties about how the Launcher itself behaves. The Project Settings drop down menu controls what happens when you open a project from your operating system (i.e., by double-clicking on its icon): Always open launcher: Opening a project will open the Launcher and bring you directly to it in the Recent Projects subtab Auto run project if build installed: If the Zilch Engine build version that was used to save the project is installed on your computer, then the project will directly open in that version, bypassing the Launcher. The Default Project Location field defines the default path where new projects will be created. You can use the Open Path button next to the field to browse to a desired folder in your operating system's Folder Selection dialog. New projects can still be created elsewhere, by specifying a different path in the New Project subtab. The Default Download Location field defines the path to which new build versions are downloaded and installed. You can use the Open Path button next to the field to browse to a desired folder in your operating system's Folder Selection dialog. The Max Recent Projects field sets how many recent projects will appear in the Recent Projects subtab. The Auto Check for Major Updates field allows the launcher to periodically check the ZilchHub server to see if a new major version of Zilch Engine has been released. The Show Development Builds causes all public builds built off the develop branch in rZCORE to be seen in the Builds Tab. Many of these builds will be simple bug fixes and minor functionality changes. However, these builds are usually not guaranteed to be stable, and as such, most users should stick to builds tagged stable. The Show Experimental Builds causes all public builds built off an experimental branch in rZCORE to be seen in the Builds Tab. These builds are often unstable and may contain large refactors or experimental functionality. The Revert to default button restores the Launcher to its default settings. Related Materials Manual launcher"
  },
  "docs/zilch_editor_documentation/tutorials/external_zilch_engine_tools/the_market.html": {
    "href": "docs/zilch_editor_documentation/tutorials/external_zilch_engine_tools/the_market.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers the Market, and how to use it to download content for your projects. Learning Objectives Becoming acquainted with the Market's interface Learning how to download content and use it in a project Level Setup Command : New Project Create a new project using the {nav icon=clone, name=2D Project} template Command : CreateSprite In the Properties Window Under Transform Set Translation to [0, -3, 0] Set Scale to [10, 1, 1] Under Sprite Set SpriteSource enum to Square Add Component : BoxCollider The level so far The Market is an online content collection. Users (including the #zilch_engine_developers) can upload and download assets to and from the Market for use in their projects. The Market can be accessed from within the Zilch Editor or from a web browser, but this tutorial will just use the Market's in-editor interface. Accessing the Market To open the Market, just click its button in the upper right corner of the editor. Left-click the Market button The Market button opens the Market There's a lot to see in the Market, but this tutorial will just cover downloading a specific package. Among the assets on the Market is a professional-quality character controller written by the Zilch Engine developers, and that's what we want to download. It's included in the Sample Character Controller content pack. In the Search field Search for sample character controller The search results show the content pack we're looking for. In the Market Left-click the Sample Character Controller product banner image When you click the product's banner image, you're taken to its page. The product page for the Sample Character Controller content pack This product supplies two separate downloads: a content pack and a demo project showing it off. The demo's file extension is .zeroprojpack, while the content pack's is .zeropack. Let's download the content pack. In the Market In the Sample Character Controller product page In the Download section Left-click the content pack download link After you click the download link, a few things will happen (usually very quickly). First, Zilch adds the task of downloading the content pack to its list of Background Tasks, which can be viewed in the upper-right corner of the editor: The Background Tasks panel When that task is completed, a notification to that effect will pop up in the lower-right corner of the editor: The notification pop-up Finally, and most importantly, the Import Content Package Window will appear, listing the assets from the content pack: The Import Content Package Window In the Import Content Package Window Left-click the Import button button This content pack includes the SweptController character controller component, plus a set of archetypes demonstrating it. Let's try out the 2D archetype. In the Library Window Under Archetype Drag and drop an instance of SweptPlayer2D into the Level Window The level with a player Command : PlayGame Use the A and D keys and the Space bar to move the player and jump The SweptController in action You can use the Market to add content like the SweptController to any of your future projects. Command : StopGame Related Materials Manual using_the_market commands addremovecomponent Reference Commands NewProject CreateSprite PlayGame StopGame Classes transform sprite boxcollider rigidbody Development Task {T1450}"
  },
  "docs/zilch_editor_documentation/tutorials/gameplay.html": {
    "href": "docs/zilch_editor_documentation/tutorials/gameplay.html",
    "title": "Input | ZilchEngine",
    "keywords": "Discover parts of the engine used primarily for gameplay scripting. Input input1 #beginner_ii Zilch.Keyboard.KeyIsDown, KeyIsPressed, etc all used within Logic Update Gamepad Input #beginner_iv Detecting Gamepad, Gamepad Input, Deadzone, Rumble mouseinput.md #beginner_iv Mouse events. Screen space and World space Gameplay swept_character #beginner_iv The SampleCharacterController #zilch_market package and the SweptCharacter component within it. 2D Rotation #beginner_iii Rotation Basics, Transform.EulerAngle, Math.ToRadians, Simple 2D Vector Math"
  },
  "docs/zilch_editor_documentation/tutorials/gameplay/2d_rotation.html": {
    "href": "docs/zilch_editor_documentation/tutorials/gameplay/2d_rotation.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers the basic ways to rotate an object in 2D at runtime. Learning Objectives Rotation basics EulerAngles The ToRadians function Simple 2D vector math Level Setup Create a New 2D Project Select : GameCamera object In the Properties Window Under Camera Set Size to 5 Command : Add Resource Create a NadaScript resource using the Component template template and name it Rotate2D Command : CreateSprite In the Properties Window Rename Sprite object to Parent Under Transform Set Translation to [0, 0, 0] Add Component : Rotate2D Under Transform Hover the cursor over the name of the Transform.Rotation property. Hovering over Transform.Rotation As you can see, rotational data is saved as a Quaternion. As a high-level developer, you do not need to know how Quaternions work, but you will need to know how to use them. In the Properties Window, Quaternions are represented by three angles that are the rotation of the object around the corresponding three axes; these are called Euler (pronounced �oil-er�) angles. In this lesson, we will be working with a 2D game, so we only need to worry about the Z-axis rotation. Rotation can be changed either through the Properties Window or via accessing the Transform component in script. Simple Rotating on Update In Rotate2D Replace the script's content with the following code block class Rotate2D : NadaComponent { [Dependency] var Transform : Transform; //45 degrees per second [Property] var Speed : Real = 45.0; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { } } This first type of rotation to look at is //continuous rotation//, which is common in 2D games. It's often very simple, since, depending on the perspective of the game (top down or side view), an object may only ever need to rotate around a single axis. The first thing we need in order to rotate an object is a speed, which we have defined as a member variable of Rotate2D. The next item needed for this example is our update loop. Just as with translating an object, we want the rotation to appear smoothly interpolated over time, so we will need to rotate just a little bit each frame. In Rotate2D Update the OnLogicUpdate function to the following function OnLogicUpdate(event : UpdateEvent) { //convert rotation speed to radians var speedRadians = Math.ToRadians(this.Speed); //define which axis to apply the rotation on var eulerAngles = Real3(0,0,speedRadians); //scale the rate of rotation to the framerate var frameEulerAngles = eulerAngles * event.Dt; //convert the rotation to quaternion so we can pass it to the Transform's rotation functions var frameRotation = Math.ToQuaternion(frameEulerAngles); //rotate the object this.Transform.RotateWorld(frameRotation); } Command : PlayGame Command : StopGame Local vs World Rotation You may have noticed the name of the function RotateAnglesWorld, and wondered why there is also a RotateAnglesLocal function. Let's take a closer look at these functions. Parent RotateWorld Command : CreateSprite Select : Sprite object In the Properties Window Rename Sprite object to Child Under Transform Set Translation to [0, 1, 0] Under Sprite Set VertexColor to [R:255, G:0, B:0, A:1.0] Attach Child object to Parent object Command : PlayGame Now we can see that a child object rotates with its parent. You may have seen similar behavior when using the rotation tool with hierarchies in the past. It is important to note that the Child object maintains it's translation relative to the parent object as the parent object rotates. Command : StopGame Child RotateWorld Select : Child object In the Properties Window Add Component : Rotate2D Select : Parent object In the Properties Window Remove Component : Rotate2D Command : PlayGame Here we can see that rotating the Child object has no affect on the Parent object. (NOTE)Transform.RotateWorld vs Transform.RotateLocal: You may have noticed the RotateLocal function on Transform. Local and World refer to to the axes that the rotation will be applied to. RotateWorld rotates an object around its world axes, while RotateLocal rotates it around the axes of its parent object (if any). This is done by applying the rotation of the parent object to the child after the child applies its own rotation. Command : StopGame Rotating with Actions Rotating on update is useful when trying to rotate in a specific direction, continuously, or more than 360 degrees. However, we often want an object to make quick small rotations to a specific target rotation. This is where rotating with Actions is very convenient. In Rotate2D Update the Rotate2D class to look like the following code block class Rotate2D : NadaComponent { [Dependency] var Transform : Transform; [Property] var TargetRotation : Real3 = Real3(0,0,45); [Property] var Duration : Real = 1.0; function Initialize(init : CogInitializer) { var targRot = Math.ToQuaternion(Math.ToRadians(this.TargetRotation)); var rotAction = Action.Property(this.Owner.Actions, @this.Transform.Rotation, targRot, this.Duration, Ease.Linear); } } Command : PlayGame Rotating the child object to 45 degrees on the Z-axis using an Action Command : StopGame Select : Child object In the Properties Window Under Rotate2D Set TargetRotation to [0,0,405] Command : PlayGame Rotating the child object to 405 degrees on the Z-axis using an Action Command : StopGame Notice how both rotations appear the same. Now one may expect the object to make a full 405 degree rotation. However, in the constructor of Quaternion the angle is normalized to the range of [0, 360] degrees. Since 405 degrees is equivalent to 45 degrees, that is the rotation of the Quaternion that is passed to the action constructor. Related Materials Manual Create a New 2D Project Add Resource {icon university}[[zilch_engine_documentation/zilch_editor_documentation/zilchmanual/editor/addremovecomponent/|Add/Remove Component]] Tutorials Actions Attach Reference Classes Transform Sprite Quaternion Camera Commands PlayGame StopGame CreateSprite Tasks T1174"
  },
  "docs/zilch_editor_documentation/tutorials/gameplay/gamepad.html": {
    "href": "docs/zilch_editor_documentation/tutorials/gameplay/gamepad.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "IMPORTANT: This lesson requires a gamepad such as an Xbox controller. Learning Objectives Gamepad input detection Detection of gamepad device connection and removal Gamepads such as Xbox controllers are common input devices for games on both consoles and PC. While not all gamepads are the same, many gamepads follow a common input scheme that matches the interface of the Zilch Engine Gamepad class. Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Plug in a gamepad In the Market Download the SweptCharacter ZilchPack Command : CreateSprite In the Properties Window Rename the Sprite object to Player Add Component : RigidBody Add Component : BoxCollider Under RigidBody Set DynamicState enum to Kinematic Add Component : SweptController Under SweptController Set Gravity to 0 Set WorldUp to [0,0,1] Command : Add Resource Create a NadaScript resource using the Component template template and name it GamepadHandle In the Properties Window Add Component : GamepadHandle NOTE: An interactive controller diagram with input feedback is included in many of the images on this page. The purpose of the diagram is to communicate input to the reader in sync with the behavior. The scripts and resources for the diagram will not be covered in this lesson. Aquiring a Reference to a Gamepad The first step in detecting input on a gamepad device is to detect the gamepad itself. Update GamepadHandle to the following: class GamepadHandle : NadaComponent { [Property] var GamepadId : Integer = 0; var Gamepad : Gamepad; function Initialize(init : CogInitializer) { this.Gamepad = Zilch.Gamepads.GetGamePad(this.GamepadId); Console.WriteLine(\"Gamepad: `this.Gamepad` Is Active: `this.Gamepad.IsActive`\"); } } Command : Console Command : PlayGame ---------------- Begin Game ---------------- Gamepad: Gamepad (060A7748) Is Active: true Level 'Level' was loaded. Loaded level 0.00s ---------------- End Game ---------------- You should see this same console output but with a different ID for the Gamepad object. Detecting may seem simple, but there's more to it than this. We'll take another look at it near the end of the lesson. Buttons Now that we know how to grab a reference to a gamepad, we can start detecting input. The first type of input we will examine is button input. Button Events Button events are very similar to keyboard events. ButtonDown and ButtonUp are both dispatched on the Gamepad object in reaction to the input state of a button changing. Command : Add Resource Create a NadaScript resource using the Component template template and name it PauseManager Update PauseManager to the following: class PauseManager : NadaComponent { [Dependency] var TimeSpace : TimeSpace; [Property] var PauseButton : Buttons = Buttons.Start; function Initialize(init : CogInitializer) { for(var i = 0; i < Zilch.Gamepads.MaxGamepadCount; ++i) { var gamepad = Zilch.Gamepads.GetGamePad(i); Zilch.Connect(gamepad, Events.ButtonDown, this.OnButtonDown); } } function OnButtonDown(event : GamepadEvent) { if(event.Button == this.PauseButton) { Console.WriteLine(\"Pause Button Pressed\"); this.Space.TimeSpace.Paused = !this.Space.TimeSpace.Paused; } } } Similar to how we retrieved the gamepad object in GamepadHandle, the for loop in the code block above retrieves all the gamepads. It then connects to the ButtonDown event on each gamepad. Just as we connect to the Keyboard for KeyboardEvents, we connect to the gamepad for GamepadEvents. This makes use of the fact that a gamepad object will always exist whether the gamepad is actually connected or not. This behavior allows us to never lose the connection, no matter what happens to the gamepad. In the response function we simply invert the value of this.Space.TimeSpace.Paused to toggle pausing the Space. Command : SelectSpace Add Component : PauseManager Since the player doesn't move yet, let's create an object that will allow us to test the functionality of our PauseManager. Command : CreateSphere Select : LevelSettings object Under GridDraw Set DrawInGame checkBox to True Command : PlayGame Quickly press Start a few times to pause and unpause the game Game pausing and unpausing in reaction to Start being pressed In a real game, our pause manager might also create a pause menu, but for the purposes of our gamepad lesson, the example as is proves the point. Command : StopGame Sticks Buttons are fine for most input, but some input needs to be directional. While the directional pad buttons on a gamepad can be used to determine one of eight cardinal directions, a joystick allows for full range directional input. Let's use the left stick to get our Player object moving. Command : Add Resource Create a NadaScript resource using the Component template template and name it SweptGamepadInput2D Update SweptGamepadInput2D to the following: class SweptGamepadInput2D : NadaComponent { [Dependency] var SweptController : SweptController; [Property] var GamepadId : Integer = 0; var Gamepad : Gamepad; [Property] var DeadZoneRadius : Real = 0.1; function Initialize(init : CogInitializer) { this.Gamepad = Zilch.Gamepads.GetGamePad(this.GamepadId); Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var movement = Real2(); var leftstick = this.Gamepad.LeftStick; if(Math.Length(leftstick) > this.DeadZoneRadius) movement = leftstick; this.SweptController.Update(Real3(movement, 0), event.Dt); } } In the above code block we get the Real2 value of Gamepad.LeftStick and pass it to the Update function of the SweptController component. We also check the length of the stick's input vector and make sure it is longer than the DeadZoneRadius. This is to ensure that there is a neutral state for stick input, even if the stick is slightly loose. Select : Player object Add Component : SweptGamepadInput2D Command : PlayGame Use the left stick to move the player Command : StopGame Triggers & Rumble The final type of input on a gamepad are the triggers. Left Trigger and RightTrigger each contain a value between 0.0 and 1.0 which represents the amount the trigger is depressed. We are going to use triggers as input for gamepad vibration, which is a common form of game feedback. Add the following to the OnLogicUpdate function in the SweptGamepadInput2D class: this.Gamepad.Vibrate(event.Dt, this.Gamepad.LeftTrigger, this.Gamepad.RightTrigger); Command : PlayGame Press the gamepad triggers to test the vibration code We can feel the gamepad vibrating in response to the triggers being depressed. You may have noticed that the Vibrate function takes two parameters called leftSpeed and rightSpeed. What you may not have realized is that most gamepads have two vibration motors inside. The left motor typically has a heavier weight than the right motor. This difference in the rotating weights creates what is commonly known as the \"rumble\" effect. You can test this by pulling the triggers one at a time. Command : StopGame Managing the Gamepad Now that we have covered detecting various kinds of input, let's talk more about managing the gamepad itself, specifically considering what to do when gamepads are connected or disconnected while the game is running. Regardless of whether a gamepad is or was physically (or wirelessly) connected to the computer, the corresponding Gamepad object will always exist (as we mentioned earlier. This allows Gamepad.IsActive to be checked while the game is running regardless of the actual controller state. Let's check if the gamepad is connected while the game is running. Update GamepadHandle to the following: class GamepadHandle : NadaComponent { [Property] var GamepadId : Integer = 0; var Gamepad : Gamepad; var Connected : Boolean = false; function Initialize(init : CogInitializer) { this.Gamepad = Zilch.Gamepads.GetGamePad(this.GamepadId); this.EvaluateGamepad(); Zilch.Connect(this.Space, Events.FrameUpdate, this.OnFrameUpdate); } function OnFrameUpdate(event : UpdateEvent) { this.EvaluateGamepad(); } function EvaluateGamepad() { Console.WriteLine(\"Connected: `this.Connected`, Active: `this.Gamepad.IsActive`\"); if(!this.Connected && this.Gamepad.IsActive) { this.Connected = true; Console.WriteLine(\"Gamepad connected\"); } else if(this.Connected && !this.Gamepad.IsActive) { this.Connected = false; Console.WriteLine(\"Gamepad disconnected\"); } } } Command : PlayGame Disconnect the gamepad from the computer Give the computer a moment to detect the gamepad is unplugged Reconnect the gamepad to the computer Give the computer a moment to detect the gamepad is plugged in Command : StopGame Scroll up in the ConsoleOutput ---------------- Begin Game ---------------- Connected: true, Active: true Connected: true, Active: true Connected: true, Active: false Gamepad disconnected Connected: false, Active: false ... Connected: false, Active: false Connected: false, Active: true Gamepad connected Connected: true, Active: true Connected: true, Active: true ... ---------------- End Game ---------------- Your console output should roughly take the above form with more prints in place of the ... depending on how quickly you ran the test. We can see that the Gamepad.IsActive becomes false allowing us to detect that the gamepad was disconnected, set Connected to false, and dispatch the corresponding events. What use is this to us? So far, we simply have another Boolean, this.Connected, that tracks the state of Gamepad.IsActive from the previous frame. Before we update the value of this.Connected to match Gamepad.IsActive, if they are not already equal, then we know that the gamepad was connected or disconnected on that frame. In this way, we can detect the exact frame the gamepad disconnected or reconnected and let other parts of the game know. Update GamepadHandle to the following: class GamepadHandle : NadaComponent { [Property] var GamepadId : Integer = 0; var Gamepad : Gamepad; var Connected : Boolean = false; function Initialize(init : CogInitializer) { this.Gamepad = Zilch.Gamepads.GetGamePad(this.GamepadId); this.EvaluateGamepad(); Zilch.Connect(this.Space, Events.FrameUpdate, this.OnFrameUpdate); } function OnFrameUpdate(event : UpdateEvent) { this.EvaluateGamepad(); } function EvaluateGamepad() { Console.WriteLine(\"Connected: `this.Connected`, Active: `this.Gamepad.IsActive`\"); if(!this.Connected && this.Gamepad.IsActive) { this.Connected = true; Console.WriteLine(\"Gamepad connected\"); var gamepadConnectionEvent = this.CreateGamepadConnectionEvent(); this.Space.DispatchEvent(Events.GamepadConnected, gamepadConnectionEvent); } else if(this.Connected && !this.Gamepad.IsActive) { this.Connected = false; Console.WriteLine(\"Gamepad disconnected\"); var gamepadConnectionEvent = this.CreateGamepadConnectionEvent(); this.Space.DispatchEvent(Events.GamepadDisconnected, gamepadConnectionEvent); } } function CreateGamepadConnectionEvent() : GamepadConnectionEvent { var gamepadEvent = GamepadConnectionEvent(); gamepadEvent.Gamepad = this.Gamepad; gamepadEvent.Id = this.GamepadId; return gamepadEvent; } sends GamepadConnected : GamepadConnectionEvent; sends GamepadDisconnected : GamepadConnectionEvent; } class GamepadConnectionEvent : NadaEvent { var Id : Integer; var Gamepad : Gamepad; } Now when a gamepad is disconnected or reconnected, GamepadHandle dispatches a GamepadConnectionEvent to the Space to let all objects who care know that the state of a gamepad has changed. Add the following to the Initialize function of the PauseManager class: Zilch.Connect(this.Space, Events.GamepadConnected, this.OnGamepadConnected); Zilch.Connect(this.Space, Events.GamepadDisconnected, this.OnGamepadDisconnected); Add the following to the PauseManager class: function OnGamepadConnected(event : GamepadConnectionEvent) { this.TimeSpace.Paused = false; } function OnGamepadDisconnected(event : GamepadConnectionEvent) { this.TimeSpace.Paused = true; } Command : PlayGame Quickly disconnect and reconnect the gamepad Command : StopGame Now we can see the game pausing and unpausing in reaction to the controller being disconnected and reconnected. Related Materials Manual Create a New 2D Project Add Resource Command Add Component Select Reference Commands PlayGame StopGame CreateSprite CreateSphere Classes BoxCollider CameraViewport Gamepad GridDraw RigidBody Transform"
  },
  "docs/zilch_editor_documentation/tutorials/gameplay/input1.html": {
    "href": "docs/zilch_editor_documentation/tutorials/gameplay/input1.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers how to handle basic keyboard input in Zilch Engine. Learning Objectives Checking for keyboard input Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSprite Command : Add Resource Create a NadaScript resource using the Component template template and name it CharacterLogic Select : Sprite object In the Properties Window Rename Sprite object to Character Add Component : CharacterLogic Keyboard Input A critical part of making a game is to allow the user to interact with it. The simplest way to achieve that is to query the available hardware for input and have the simulation respond to it. Update the CharacterLogic script to the following code block: class CharacterLogic : NadaComponent { function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { if(Zilch.Keyboard.KeyIsPressed(Keys.Space)) { this.Owner.Sprite.VertexColor = Colors.Red; } } } Command : PlayGame Press key Space Command : StopGame Let's take a closer look inside our if statement: Zilch.Keyboard.KeyIsPressed(Keys.Space); Zilch Accessing the Zilch engine class Keyboard Accessing Keyboard class KeyIsPressed(...); Function that determines whether a given key has been pressed this frame Keys Enumeration containing all keyboard keys .Space The enumeration index corresponding to the Space key Here are all Keyboard functions: Keyboard Functions KeyIsDown Checks whether a given key is currently down this frame KeyIsUp Checks whether a given key is currently down this frame KeyIsPressed Checks whether a given key was pressed this frame KeyIsReleased Checks whether a given key was released this frame (NOTE) Enumerations - An enumeration (or enum) is a data type that groups items assigning each a unique name under the enumerated list. Items can be referenced by accessing the type followed by a . and the name of the desired item (i.e. Keys.Space or Colors.Red). You can read more on enumerations here . Dynamic Character Controller Let's use what we just learned to create a character controller for a simple platformer. Character Setup Select : Character object In the Properties Window Add Component : RigidBody Add Component : BoxCollider Under RigidBody Set RotationLocked checkBox to true Ground Setup Command : CreateSprite Select : Sprite object In the Properties Window Rename Sprite object to Ground Add Component : BoxCollider Under Transform Set Translation to 0.0, -3.0, 0.0 Set Scale to 8.0, 0.0, 0.0 Under Sprite Set SpriteSource texture to Square Set VertexColor to Green [R:0, G:255, B:0, A:1.00] Movement Code In the CharacterLogic script Replace the previous LogicUpdate function with the following: function OnLogicUpdate(event : UpdateEvent) { var speed : Real = 5.0; var xDir : Real = 0.0; if(Zilch.Keyboard.KeyIsDown(Keys.Right)) { xDir += 1.0; } if(Zilch.Keyboard.KeyIsDown(Keys.Left)) { xDir += -1.0; } this.Owner.RigidBody.Velocity = Real3(xDir * speed, this.Owner.RigidBody.Velocity.Y, 0.0); } Command : PlayGame Press key Left and Right Command : StopGame Related Materials Manual Sprites RigidBody Colliders KeyboardInput Enumerations Create a New 2D Project CreateSprite Add Resource Reference Classes Transform Sprite RigidBody Collider BoxCollider keyboard Zilch Enums Keys Commands PlayGame StopGame"
  },
  "docs/zilch_editor_documentation/tutorials/gameplay/mouseinput.html": {
    "href": "docs/zilch_editor_documentation/tutorials/gameplay/mouseinput.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers using the mouse in the Zilch Engine. Learning Objectives Learning how to respond to mouse events Understanding how to convert from screen space// to //world space Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Mouse Events The easiest way to get mouse input in the Zilch Engine is via mouse events. Mouse events can be used to detect when the mouse is moved, when the cursor enters or exits an object, when the buttons are pressed or released, and so on. We'll begin by making an object that responds to mouse events by inflating like a balloon. Command : CreateSphere In the Properties Window Rename Sphere object to Balloon Remove Component : RigidBody Remove Component : SphereCollider In order for the balloon to respond to mouse input, it needs the Reactive component, which makes an object receive mouse events. In the Properties Window Add Component : Reactive Now we can add the code that will make the balloon inflate. Update-Based Mouse Input Command : Add Resource Create a NadaScript resource using the Component template template and name it ScaleWithMouseEvents Update the ScaleWithMouseEvents script to the following: class ScaleWithMouseEvents : NadaComponent { [Dependency] var Transform : Transform; [Dependency] var Reactive : Reactive; [Property] var ScaleRate : Real = 1.5; [Property] var MaxScale : Real3 = Real3(8); function Initialize(init : CogInitializer) { // The MouseUpdate event is dispatched to a Reactive // object every frame that the mouse cursor is over it Zilch.Connect(this.Owner, Events.MouseUpdate, this.OnMouseUpdate); } function OnMouseUpdate(event : ViewportMouseEvent) { // The ViewportMouseEvent lets us check whether the left mouse button is // currently held. If it is, we call a function that makes this object grow if (event.IsButtonDown(MouseButtons.Left)) this.Grow(); } function Grow() { // By starting from whatever the current scale is at the moment and taking // a small step toward the target max scale, the object will asymptotically // approach that maximum var dt = this.Space.TimeSpace.Dt; var currentScale = this.Transform.LocalScale; var newScale = Math.Lerp(currentScale, this.MaxScale, this.ScaleRate * dt); this.Transform.LocalScale = newScale; } } This component will let the user set a maximum scale to grow to, and then it will cause the balloon to inflate as long as the left mouse button is held while the cursor is over it, up to that max scale. Select : Balloon object In the Properties Window Add Component : ScaleWithMouseEvents Command : PlayGame Click and hold the left mouse button over the sphere to cause it to grow Command : StopGame This method of implementing mouse controls by checking what the mouse is doing in an update function is known as update-based input. Now let's add a bit more functionality to this component. Reaction-Based Mouse Input Update the ScaleWithMouseEvents script to the following: class ScaleWithMouseEvents : NadaComponent { [Dependency] var Transform : Transform; [Dependency] var Reactive : Reactive; [Property] var ScaleRate : Real = 1.5; [Property] var MaxScale : Real3 = Real3(8); [Property] var ShrinkDuration : Real = 1; var InitialScale : Real3; var ShrinkSequence : ActionSet; function Initialize(init : CogInitializer) { this.InitialScale = this.Transform.LocalScale; this.ShrinkSequence = Action.Sequence(this.Owner.Actions); // The MouseUpdate event is dispatched to a Reactive // object every frame that the mouse cursor is over it Zilch.Connect(this.Owner, Events.MouseUpdate, this.OnMouseUpdate); Zilch.Connect(this.Owner, Events.RightMouseDown, this.OnRightMouseDown); } function OnRightMouseDown(event : ViewportMouseEvent) { if (!this.ShrinkSequence.Active) this.Shrink(); } function OnMouseUpdate(event : ViewportMouseEvent) { // The ViewportMouseEvent lets us check whether the left mouse button is // currently held. If it is, we call a function that makes this object grow if (event.IsButtonDown(MouseButtons.Left) && !this.ShrinkSequence.Active) this.Grow(); } function Grow() { // By starting from whatever the current scale is at the moment and taking // a small step toward the target max scale, the object will asymptotically // approach that maximum var dt = this.Space.TimeSpace.Dt; var currentScale = this.Transform.LocalScale; var newScale = Math.Lerp(currentScale, this.MaxScale, this.ScaleRate * dt); this.Transform.LocalScale = newScale; } function Shrink() { // We can reduce the scale of this object back to its initial value with a // single click by using an Action this.ShrinkSequence = Action.Sequence(this.Owner.Actions); Action.Property(this.ShrinkSequence, @this.Transform.LocalScale, this.InitialScale, this.ShrinkDuration, Ease.BounceOut); } } Now the right mouse button can be used to deflate the balloon. Command : PlayGame Click and hold the left mouse button over the sphere to cause it to grow, and right click the sphere to cause it to shrink Command : StopGame Now this component also connects to the RightMouseDown event, which is dispatched to a Reactive object when the right mouse button is pressed while the cursor is over it. In its OnRightMouseDown callback function, it checks to make sure the balloon isn't already shrinking, and if it isn't, it calls a function that makes it shrink. This method of implementing mouse controls by connecting to relevant mouse events and only running code when those events are dispatched is called reaction-based input. Screen Space and World Space As we've seen already, mouse events are dispatched with the ViewportMouseEvent class. Among other information, this includes the position of the mouse event, which we can see by printing it out. Command : Add Resource Create a NadaScript resource using the Component template template and name it PrintPositionOnMouseDown Update the PrintPositionOnMouseDown script to the following: class PrintPositionOnMouseDown : NadaComponent { function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.MouseDown, this.OnMouseDown); } function OnMouseDown(event : ViewportMouseEvent) { var mousePosition = event.Position; Console.WriteLine(mousePosition); } } Select : LevelSettings object In the Properties Window Add Component : PrintPositionOnMouseDown Command : Console Command : PlayGame Click around the screen a few times When you click the mouse, positions are printed to the console. Notice that these numbers are pretty big, they're all whole numbers, and no matter where you click, they're never negative. Furthermore, they're all 2D vectors. These are what are called screen-space coordinates: they refer to the pixel on your screen where the click occurred. In this form, they're a bit hard to use in a game. What we need is a way to convert them from screen space into world space, where the objects in our game exist. Fortunately, that's easy. Command : StopGame The ViewportMouseEvent contains a set of functions that can be used to convert the event's screen space position into world space: ToWorldPlane, ToWorldViewPlane, and ToWorldZPlane. Each of them has its purpose, but it's common in 2D games to make extensive use of that last one, ToWorldZPlane. This function projects a screen-space position onto a Z-aligned world plane at a given Z value. If you give it a value of, say, 0, then it will return the world-space coordinates of the mouse event at a Z-depth of zero. In a typical 2D game, this is generally the most basic way to get the world position of the mouse. Replace the OnMouseDown function in the PrintPositionOnMouseDown class with the following: function OnMouseDown(event : ViewportMouseEvent) { var mousePosition = event.ToWorldZPlane(0); Console.WriteLine(mousePosition); } Command : PlayGame Click around the screen a few times The positions that are now being printed to the console are now in world units, rather than screen pixel coordinates. This is generally much more useful for programming game logic. Command : StopGame Now that we know how to find the world-space position of a mouse event, we can move things to the mouse's position, like, say, our balloon. First, though � Select : LevelSettings object In the Properties Window Remove Component : PrintPositionOnMouseDown It's good practice to remove or comment out console print statements when you're done with them. Command : Add Resource Create a NadaScript resource using the Component template template and name it MoveOnMiddleMouseDown Update the MoveOnMiddleMouseDown script to the following: class MoveOnMiddleMouseDown : NadaComponent { [Dependency] var Transform : Transform; [Property] var MoveDuration : Real = 0.25; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.MiddleMouseDown, this.OnMiddleMouseDown); } function OnMiddleMouseDown(event : ViewportMouseEvent) { var destination = event.ToWorldZPlane(0); Action.Property(this.Owner.Actions, @this.Transform.WorldTranslation, destination, this.MoveDuration, Ease.QuadInOut); } } This component will make whatever we attach it to animate its position to the world-space coordinates of the mouse whenever the middle mouse button is pressed. Select : Balloon object In the Properties Window Add Component : MoveOnMiddleMouseDown Command : PlayGame Use the middle mouse button to move the balloon, and the left and right mouse buttons to inflate and deflate it Command : StopGame Related Materials Manual commands addremovecomponent selectobject resourceadding Reference Commands NewProject CreateSphere PlayGame StopGame Console Classes rigidbody spherecollider reactive viewportmouseevent Events MouseUpdate RightMouseDown MiddleMouseDown Development Task {T1185}"
  },
  "docs/zilch_editor_documentation/tutorials/gameplay/swept_character.html": {
    "href": "docs/zilch_editor_documentation/tutorials/gameplay/swept_character.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "The SAMPLECHARACTERCONTROLLERS[1.0] package on the Zilch Market contains 2D and 3D input scripts that work with the SweptController component also included in the package. The SweptController is a generic kinematic character controller that is useful when prototyping many 2D and 3D game concepts. Learning Objectives Character controller explanation Kinematic vs Dynamic SweptController usage Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Click the market button in the top right of the editor window Click the Sample Character Controller package Click the download link for the SAMPLECHARACTERCONTROLLERS[1.0].ZEROPACK Click the Import button button Close the Market Browser Command : CreateCube In the Properties Window Under Transform Set Scale to [50,1,1] Under RigidBody Set DynamicState enum to Static In the Library Window Under Archetype Click and drag {nav icon=wrench, name=SweptPlayer2_5D} into the Level Window Command : PlayGame Move left with A and right with D Jump with Space The Player object moving and jumping Command : StopGame SweptInput Let's take a look at the SweptInput2D component. class SweptInput2D : NadaComponent { [Dependency] var SweptController : SweptController; [Property] var LeftKey : Keys = Keys.A; [Property] var RightKey : Keys = Keys.D; [Property] var JumpKey : Keys = Keys.Space; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var movement = Real3(0, 0, 0); // Check for left/right movment if(Zilch.Keyboard.KeyIsDown(this.LeftKey)) movement.X = -1; if(Zilch.Keyboard.KeyIsDown(this.RightKey)) movement.X = 1; if(Zilch.Keyboard.KeyIsPressed(this.JumpKey)) { this.SweptController.Jump(); } this.SweptController.Update(movement, event.Dt); } } Very similar to our dynamic character controller from the first input tutorial, we need to calculate a direction in which to move and whether the character should jump. Using the input properties, we can configure which inputs drive the SweptController. The important line to note in SweptInput2D is this.SweptController.Update(movement, event.Dt);. SweptController.Update must be called every frame on which the character should be moving. This function handles much of the behavior of the SweptController and should always be called at the end of the input detection update function in order to apply any changes that were made to SweptController properties that frame. Swept Controller Properties Because the SweptCharacter uses a Kinematic object, it must handle its own gravity behavior. The strength of this gravitational acceleration can be adjusted per object. In the Properties Window for Player object Under SweptController Set Gravity to 50 Command : PlayGame Jump with Space *The Player object jumping with increased Gravity * Notice that the acceleration of gravity is now more powerful. Command : StopGame The jump velocity is also adjustable. In the Properties Window Under SweptController Set JumpSpeed to 25 Command : PlayGame *The Player object jumping with increased Gravity and increased JumpSpeed * Command : StopGame Using these values alongside MaxFallSpeed allows you determine how fast your character rises and falls with each jump. In-Air Control When the swept character is in the air, it has slight control by default. The SweptController allows you to modify the strength of that control. Command : PlayGame Jump and then move side to side while in the air *The Player object jumping and moving with default AirAcceleration * Command : StopGame Now let's try increasing the air control. In the Properties Window Under SweptController Set AirAcceleration to 25 Command : PlayGame Jump and then move side to side while in the air *The Player object jumping and moving with increased AirAcceleration * Command : StopGame In addition to changing the rate of acceleration in the air, you can also modify the GroundAcceleration to similarly affect the SweptCharacter's acceleration when not in the air. Max Ground Slope Something you may not have thought about yet is how the SweptController detects whether it is on ground// or not. There are certain behaviors, such as jumping, that should only occur when the object is //on ground//. This //ground detection is done through a technique called //swept collision//, which is too advanced to cover in this tutorial. The final step of ground detection, though, is to check the angle of the slope that the character is on. If the slope is too steep, the SweptController will cause the character to slide down it instead of being able to move up it. Select : Cube object Command : Duplicate In the Properties Window Under Transform Set Translation to [5,0,0] Set Rotation to [0,0,25] Command : Duplicate In the Properties Window Under Transform Set Translation to [-5,0,0] Set Rotation to [0,0,-50] Command : PlayGame Attempt to move onto all 3 platforms *Platforms both above and below the MaxGroundSlope * Notice how the Player object object can move freely on the platform with a rotation of [0,0,25], but when it attempts to move onto the platform with a rotation of [0,0,-50], it slides off. This is due to the Z-Axis rotation of the lefthand platform having a greater magnitude than the MaxGroundSlope of the Player object's SweptController. Command : StopGame Swept Collision Collision events were covered in the events tutorial. Now let's take a look at how they interact with the SweptController. Command : Add Resource Create a NadaScript resource using the Component template template and name it CollisionDetector Update the CollisionDetector script to the following: class CollisionDetector : NadaComponent { function Initialize(init : CogInitializer) { Zilch.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted); } function OnCollisionStarted(event : CollisionEvent) { Console.WriteLine(\"`this.Owner` collided with `event.OtherObject`\"); } } Select : Player object Add Component : CollisionDetector Command : Console Command : PlayGame ---------------- Begin Game ---------------- Loaded level 0.00s Level 'Level' was loaded. Loaded level 0.00s ---------------- End Game ---------------- Notice how our print statement from the CollisionDetector component is not executed. This is due to the fact that no standard collision is actually occurring here. The SweptController moves the player by predicting collision based on input and then translating to the correct point to simulate collision resolution. The result is that the kinematic collider of the Player object never actually touches the static colliders of the platforms. Command : StopGame In the Properties Window Under SweptController Set ForwardEvents checkBox to true Select : Player object Add Component : customcollisioneventtracker The customcollisioneventtracker detects circumstances where standard CollisionEvents would be sent out and dispatches them when a collider component would be involved in a standard collision. Command : PlayGame ---------------- Begin Game ---------------- Loaded level 0.00s Level 'Level' was loaded. Loaded level 0.00s <Cog 'Player' (SweptPlayer2D) [2035]> collided with <Cog 'Cube' [2034]> ---------------- End Game ---------------- Now we can detect and react to the CollisionEvents sent by the customcollisioneventtracker. Command : StopGame Related Materials Tutorials input1 #collision-events Manual commands selectobject Reference Commands NewProject PlayGame StopGame CreateCube Duplicate Classes transform customcollisioneventtracker Events CollisionStarted Enums RigidBodyDynamicState.Static Tasks T1181"
  },
  "docs/zilch_editor_documentation/tutorials/graphics.html": {
    "href": "docs/zilch_editor_documentation/tutorials/graphics.html",
    "title": "particles.md | ZilchEngine",
    "keywords": "Learn how to use cameras, lights, renderers, and other graphical features in the Zilch Engine. particles.md Basic particle components and usage sprite_animations.md Importing sprite sheets and generating animations"
  },
  "docs/zilch_editor_documentation/tutorials/graphics/particles.html": {
    "href": "docs/zilch_editor_documentation/tutorials/graphics/particles.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "Particles are a great way to polish your game and are used for a variety of effects. The concept of a particle system is essentially a set of non-cog sprites which have a set of initial conditions and possible animation. Particle systems allow us to create thousands of small sprites and simulate physics for them with only one Cog. Particles are a deep topic and this lesson will only cover the basics. Learning Objectives ParticleEmitters ParticleAnimators Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSpriteParticles The first thing to realize is that particle systems require more than just one component to actually create, animate, and render particles. Let's look at the first component on the cog we just created, SpriteParticleSystem. SpriteParticleSystem SpriteParticleSystem handles the graphical resources for a particle system. It also allows for configuration of common properties that exist in all particle systems; this means that every particle system much have this component. Download and import this fire particle sprite: In the Group Import Options Window Under ImageOptions Set ImportImages enum to Sprites Click the Import All button In the Properties Window Under SpriteParticleSystem Set SpriteSource enum to Fire At this point, the particle system does not really look like fire. Particle Emitters Particle emitters create particles and give them initial conditions such as a starting velocity, particle size, emitter size, or spin. The emitter in a particle system also contains properties for adjusting how long particles live, the rate of particle emission, and the size of the actual emitter. In the Properties Window Under SpriteParticleSystem Set VertexColor to [R: 251, G: 91, B: 13] Under SphericalParticleEmitter Set StartVelocity to [0, 1, 0] Set RandomVelocity to [1, 0, 0] Set EmitterSize to [2, 0, 0] Set Lifetime to 5 By changing StartVelocity we ensured that each particle has an upward velocity when created. By itself, this would cause every particle to move in a straight line upward, but in combination with RandomVelocity only having an X-axis value we have made it so the particle fan up and out. This fan of fire still does not look very realistic. Let's try to make it look like a campfire. In the Properties Window Under SphericalParticleEmitter Set EmitRate to 700 Set EmitRateVariance to 200 Set Size to 0.3 Set SizeVariance to 0.15 Set Lifetime to 4 Set LifetimeVariance to 2 You may have noticed we changed some properties that ended in the word Variance. Variance properties act as a modifier for other properties on a component. It is very rare that all particles in a given system should be the same size, or that a continuous particle system would emit at a static rate forever. Usually, we desire a range of possible values for parameters such as these and variance properties gives us that option by varying from the base value. In our current example, the particle system would be emitting 700 particles per second, but it has a variance value of 200. Therefore, the emitter will randomly change its rate of emission to a value between 500 and 900, as it subtracts and adds the variance to the base value to calculate the minimum and maximum range of the value. Particle Attractor The ParticleAttractor component allows you to define a position relative to the center of the particle system to which particles are attracted. It also allows you to define the minimum and maximum distances from the point that the attraction force will apply. Campfires generally have a wider base and have flames get higher the closer to the middle of the fire. Let's use the ParticleAttractor to make this more of a pyramid than a fan. In the Properties Window Add Component : ParticleAttractor Under ParticleAttractor Set AttractPosition to [0, 6, 0] Set MinDistance to 0.5 Under SphericalParticleEmitter Set StartVelocity to [0, 0, 0] Set RandomVelocity to [0, 0, 0] Our campfire is starting to look better. The ParticleAttractor is now pulling it up as well as towards the center of the fire. However, campfires are usually not hard-edged pyramids. Particle Animator Particle animators such as the LinearParticleAnimator allow the user to animate particles throughout their lifetime, instead of just at the moment the particles are created like the emitter components. Campfires tend to wander randomly in the wind. The flames also get smaller before reaching their peak and going out at the tip of the fire. These are examples of behaviors that happen throughout the lifetime of a flame as opposed to just happening once when the flame is created. In the Properties Window Under LinearParticleAnimator Set RandomForce to [2, 0, 0] Set Growth to -0.05 Under SphericalParticleEmitter Set EmitRate to 700 Set EmitRateVariance to 200 Set Size to 0.5 Adding the X-axis random force simulates air blowing our fire around a little bit. The negative growth shrinks the particles over their lifetime to simulate the flames shrinking as they get higher, we need to increase the initial particle size and emit rate to account for how much the campfire will be thinned out by the applied animations. Particle Color Animator The last thing we need in this particle system is to change the color throughout each particle's lifetime. The ParticleColorAnimator allows you to choose a gradient which will change the color of the particles throughout their lifetime. Command : Add Resource Create a Gradient resource using the Default template template and name it Fire In the Gradient Editor Double-Left-Click to create a new point in the middle of the gradient Left-Click the new point to edit it Use the color picker to set the gradient point color to: to [R: 252, G: 140, B: 9] Left-Click the left point to edit it Use the color picker to set the gradient point color to: to [R: 217, G: 183, B: 3] Left-Click the right point to edit it Use the color picker to set the gradient point color to: to [R: 181, G: 29, B: 9] Use the Gradient Editor to make the gradient look like the sample below (it does not need to be exact) In the Properties Window Under SpriteParticleSystem Set VertexColor to [R: 255, G: 255, B: 255] Under ParticleColorAnimator Set TimeGradient resource to Fire Layering Particle Systems While the particle system looks much more like fire than what we started with, it is still missing some crucial details. Smoke and sparks would make this look much more realistic, but we can't really make this one particle system look like a fire, sparks, and smoke. The most common technique to conquer this issue is to create multiple particle systems that overlap. In this way, we can create distinct particle effects that layer on top of each other to create a single, complex system. Select : SpriteParticle object In the Properties Window Set Name to Fire Under SpriteParticleSystem Set PreviewInEditor checkBox to True By setting this to true, the particle system will always run and render in-editor without the game playing. So far in this lesson, the campfire particle system has always been selected so it has always been running. Now that we are creating a second system that we want to run and preview at the same time, we need to use PreviewInEditor checkBox. Command : CreateSpriteParticles In the Properties Window Rename the SpriteParticles object to Sparks Under SpriteParticleSystem Set PreviewInEditor checkBox to True Under Transform Set Translation to [0,0,0] Under SphericalParticleEmitter Set EmitVariance to 25 Set Size to 0.03 Set SizeVariance to 0.01 Set Lifetime to 4 Set LifetimeVariance to 2 Set RandomVelocity to [0, 0, 0] Set EmitterSize to [1.5, 0, 0] Under LinearParticleAnimator Set Force to [0, 2, 0] Set RandomForce to [0, 1, 0] Under ParticleColorAnimator Set TimeGradient resource to Fire We have the particles layers, but sparks tend to be affected more by wind than flames are. Sparks also tend to leave small light trails behind. So, let's make both of things happen. In the Properties Window Add Component : ParticleWander Under ParticleWander Set WanderStrength to 0.5 Under SpriteParticleSystem Set GeomteryMode enum to Beam Set BeamVelocityScale to 2 By adding wander each particle now picks a slightly different random direction from the frame previous and is propelled in that direction in addition to the constant upward force being applied. This allows us to make the sparks vary side-to-side and up and down while still consistently moving up. By changing the geometry mode to beam we scale the sparks based on their individual velocity vector. This allows for the simulation of the sparks streaking through the air. Related Materials Manual Create a New 2D Project Command Add Component Add Resource Select Reference Classes Transform SpriteParticleSystem SphericalParticleEmitter LinearParticleAnimator ParticleColorAnimator ParticleAttractor ParticleWander Commands CreateSpriteParticles Enums SpriteParticleGeometryMode Development Task T1179"
  },
  "docs/zilch_editor_documentation/tutorials/graphics/sprite_animations.html": {
    "href": "docs/zilch_editor_documentation/tutorials/graphics/sprite_animations.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers how to import and use sprite sheets to create sprite animations Learning Objectives Importing sprite sheets Defining each animation frame Sprite animation parameters Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSprite In the Properties Window Rename Sprite object to Player Under Transform Set Scale to [2, 2, 2] Select : Renderer object Under ForwardRenderer Set ClearColor to [R:125, G:255, B:125, A:1.00] Importing a Sprite Sheet Sprite animations are created out of a sequence of images displayed in quick succession. To accomplish this we use a Sprite Sheet; a image file that contains the sequence of frames corresponding to one or more animations. Download the following Sprite Sheet: Import them into the project by dragging and dropping the files into the Level Window In the Group Import Options Window Set ImportImages enum to Sprites Press the Import All button Creating Sprite Animations Now that we have imported a sprite sheet, we need to separate the frames into their respective animations. The sheet we just imported has two animations; a walk animation that corresponds to the top 5 frames and a roll animation that corresponds to the remaining 7 frames. In the Library Window Under the SpriteSource tag Double-Click the RedPandaSpriteSheet texture resource In the Sprite Source Editor Window Press the Convert To Animation button In the Sprite Importer Window Set FramesPerRow to 5 Set NumberOfRows to 3 Left-click frames 0 through 4 to select them If you accidentally select a tile you don't want, right-click it to deselect it Set Name to Walk Press the Add and Continue button Left-click frames 5 through 11 to select them Set Name to Roll Press the Add and Close button (NOTE) Frame Size vs. Frame Count: When you set FramesPerRow , the Sprite Importer automatically calculates the FrameWidth property, and vice versa. Likewise, when you set NumberOfRows , FrameHeight is computed automatically, and vice versa. As a result, if you would rather specify the pixel dimensions of each frame in a sprite sheet than the number of frames, that's a perfectly valid option too. Using Sprite Animations Now that we've generated the animation resources, we can start using them with sprites. Select : Player object In the Properties Window Under Sprite Set SpriteSource enum to Walk Command : PlayGame Command : StopGame Looking at the Sprite component on the property grid we find that the last 4 properties are dedicated to sprite animations. They are: Sprite Animation Properties AnimationActive checkBox Whether the animation is playing currently (Both in editor and in game) AnimationSpeed Scalar applied to the Frame Rate of the animation resource StartFrame What frame the animation should start from CurrentFrame The current active frame of the animation (cycles as the animation is playing) Let's add a component that lets us control the animation. Command : Add Resource Create a NadaScript resource using the Component template template and name it PlayerAnimationController In the PlayerAnimationController script Update the PlayerAnimationController class to the following: class PlayerAnimationController : NadaComponent { [Dependency] var Sprite : Sprite; [Property] var WalkAnimation : SpriteSource = SpriteSource.Walk; [Property] var RollAnimation : SpriteSource = SpriteSource.Roll; [Property] var RollKey : Keys = Keys.Space; function Initialize(init : CogInitializer) { Zilch.Connect(Zilch.Keyboard, Events.KeyDown, this.OnKeyDown); Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnKeyDown(event : KeyboardEvent) { if(event.Key == this.RollKey) this.Sprite.SpriteSource = this.RollAnimation; } function OnLogicUpdate(event : UpdateEvent) { //If we are playing the roll animation if(this.Sprite.SpriteSource == this.RollAnimation) { //And it reaches its last frame (counted from 0 to 6) if(this.Sprite.CurrentFrame == 6) { //Play the walk animation this.Sprite.SpriteSource = this.WalkAnimation; } } } } Select : Player object In the Properties Window Add Component : PlayerAnimationController Command : PlayGame Press Space Command : StopGame Related Materials Manual Sprite Sprite Source Editor Sprite Importer Code Reference Classes Transform Sprite Cog spritesource Commands CreateSprite PlayGame StopGame Development Task T1183"
  },
  "docs/zilch_editor_documentation/tutorials/physics.html": {
    "href": "docs/zilch_editor_documentation/tutorials/physics.html",
    "title": "| ZilchEngine",
    "keywords": "Learn how to work with RigidBodies, Joints, Forces, and other properties of the physics engine. Physics Effects #beginner_1 Gravity, Drag, IgnoreSpaceEffects, LevelSettings, Region, Force, Buoyancy, Wind Physics Materials #beginner_1 Physics Materials, MassOverride, Friction, Restitution Collision Tutorials for collision topics raycasting.md #beginner_iii Ray Basics, CastRayFirst, CastResult, CastFilter"
  },
  "docs/zilch_editor_documentation/tutorials/physics/collision.html": {
    "href": "docs/zilch_editor_documentation/tutorials/physics/collision.html",
    "title": "Collision Events | ZilchEngine",
    "keywords": "Tutorials on collision topics Collision Events Collision Groups and Table #beginner_iii Collsion Table, Collision Groups, Collision Group Relationships"
  },
  "docs/zilch_editor_documentation/tutorials/physics/collision/collisiongroups.html": {
    "href": "docs/zilch_editor_documentation/tutorials/physics/collision/collisiongroups.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "CollisionGroups allow users to categorize colliders into different groups. CollisionTables define the relationships between those groups and the behavior of those colliders when they collide with one another. Learning Objectives CollisionGroups CollisionTables CollisionGroup relationships Level Setup Before jumping into how CollisionGroups are used, we need to set up a simulation to use them in. Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSprite In the Properties Window Rename Sprite object to Platform Under Transform Set Scale to [10,1,1] Add Component : BoxCollider Command : CreateSphere In the Properties Window Rename Sphere object to DefaultSphere Under Transform Set Translation to [-3,5,0] Command : Duplicate In the Properties Window Rename the duplicate DefaultSphere object to SkipResolutionSphere Under Transform Set Translation to [0,5,0] Command : Duplicate In the Properties Window Rename the duplicate SkipResolutionSphere object to SkipDetectionSphere Under Transform Set Translation to [3,5,0] Collision Groups A CollisionGroup is a resource assigned to one or more colliders, usually before the game is run. CollisionGroup enum property on the SphereCollider component Command : Add Resource Create a CollisionGroup resource using the Default template template and name it SkipResolution Command : Add Resource Create a CollisionGroup resource using the Default template template and name it SkipDetection Select : SkipResolutionSphere object In the Properties Window Under SphereCollider Set CollisionGroup enum to SkipResolution Select : SkipDetectionSphere object In the Properties Window Under SphereCollider Set CollisionGroup enum to SkipDetection Command : PlayGame Command : StopGame You will notice that the behavior of the balls has not changed as of yet. This is because in order for CollisionGroups to be used, they must be included in the space's CollisionTable. CollisionTables A CollisionTable defines the relationship between CollisionGroup pairs. Command : Add Resource Create a CollisionTable resource using the Default template template and name it GameTable When a CollisionTable is created, the CollisionTableEditor Window opens. The CollisionTableEditor Window This is the default configuration for a CollisionTable. It takes all the existing CollisionGroups and generates a permutation table of all the pairs. In the CollisionTableEditor Window Set DefaultGroup / SkipResolution to SkipResolution Set DefaultGroup / SkipDetection to SkipDetection Close the CollisionTableEditor Window Command : PlayGame Command : StopGame You are probably wondering why the groups still aren't working. There is still one more step to perform for the groups to take effect: we have to tell the Space to use the CollisionTable we have created instead of the default CollisionTable. Command : SelectSpace In the Properties Window Under PhysicsSpace Set CollisionTable enum to GameTable Setting the CollisionTable enum property for the Space Command : PlayGame Command : StopGame Now we can see the two spheres, which are set up to skip resolution and detection respectively, fall through the platform as expected. We still need to prove to ourselves, however, that the SkipResolutionSphere object is still at least detecting the collision. Command : Add Resource Create a NadaScript resource using the Component template template and name it PrintCollision Update the PrintCollision script to the following: class PrintCollision : NadaComponent { function Initialize(init : CogInitializer) { Zilch.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted); } function OnCollisionStarted(event : CollisionEvent) { Console.WriteLine(\"CollisionStarted: `this.Owner`, Other: `event.OtherObject`\"); } } Select : SkipResolutionSphere object In the Properties Window Add Component : PrintCollision Select : SkipDetectionSphere object In the Properties Window Add Component : PrintCollision Command : Console Command : PlayGame CollisionGroups properly configured, and printing collision detection Command : StopGame As can be seen by the printed message in the above image, the SkipResolutionSphere object is indeed detecting collision, whereas the SkipDetectionSphere object is not. Collision groups and tables allow for a lot of flexibility in the usage of collision for game logic. They can also allow for significant performance improvement in games that heavily use physics. Related Materials Manual LauncherNewProject commands resourceadding addremovecomponent selectobject Reference Commands CreateSprite CreateSphere Duplicate SelectSpace Classes spherecollider transform physicsspace collisiongroup collisiontable Events CollisionStarted Enums CollisionFilterCollisionFlags Development Task {T1176}"
  },
  "docs/zilch_editor_documentation/tutorials/physics/physicseffects.html": {
    "href": "docs/zilch_editor_documentation/tutorials/physics/physicseffects.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson focuses on teaching the basics of physics effects and components. Learning Objectives GravityEffect and DragEffect components Apply / Ignore physics effects on objects Basic uses of name=LevelSettings, icon=cog Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSprite Add Component : RigidBody Command : PlayGame Command : StopGame GravityEffect When running the game, we can see the square object falling. As we mentioned in previous tutorials, the RigidBody component allows an object to be subjected by physics forces. However, it is not the one responsible for the object falling. Let's take a look at the LevelSettings object in our level: In the Objects window Select : LevelSettings object In the Properties window Under GravityEffect Common GravityEffect Properties Active checkBox Whether this component applies force or not Strength The magnitude of the force applied Direction The direction which force is applied (normalized) LocalSpaceDirection checkBox Whether the specified direction is local (true) or global (false) In the Properties window Under GravityEffect Set Active checkBox to false Command : PlayGame Notice that the Sprite object isn't being affected by gravity anymore. That's because components that produce physics effects, when attached to the LevelSettings object object, will apply that effect to all objects within the Space. Command : StopGame Let's try and move the Sprite object in other ways: Select : Sprite object object In the Properties Window Under RigidBody Set Velocity to [3.0, 0.0, 0.0] Command : PlayGame The Sprite object appears to be moving in the desired direction and still isn't affected by gravity but it slowed down and stopped. But according to Newton's first law of motion; an object retains its movement at a constant velocity unless acted upon by an external force. So what external force caused our object to stop? Command : StopGame DragEffect Let's take a look again at the LevelSettings object: Select : LevelSettings object In the Properties Window Under DragEffect Set Active checkBox to false Common DragEffect Properties Active checkBox Whether this component applies force or not LinearDamping The amount of damping applied to the object's velocity AngularDamping The amount of damping applied to the object's angular velocity Command : PlayGame The DragEffect exists to simulate air resistance and other forces that would prevent your object from moving indefinitely. Command : StopGame Adding Physics Effects to Objects These effects can also be applied to individual objects, let's take a look: Select : Sprite object Add Component : GravityEffect Add Component : DragEffect Command : PlayGame Now we get the same result we had initially, but we could tweak individual gravity and drag effects per object. Command : StopGame WARNING: GravityEffect (and some other PhysicsEffects) have the LocalSpaceDirection checkBox property set to true by default. This means that, as the object rotates, the \"down direction\" will be constantly changing. Set LocalSpaceDirection checkBox to false to avoid this behavior. IgnoreSpaceEffects Lastly, let's say you wanted all objects in your level to be affected by gravity except for a few. You could turn off the GravityEffect on LevelSettings object and add a GravityEffect component to every object that needs it but that would be a lot of work. Alternatively, you could leave the GravityEffect on LevelSettings object on and just add the IgnoreSpaceEffects component to the objects that you don't want gravity on: NOTE: The IgnoreSpaceEffects component will only stop physics effects attached to LevelSettings object or Space to affect the object; if the object has a GravityEffect component or any other physics effects components on itself, they will not be ignored! Region The region component can be used to apply any physics effects (Gravity, Drag, etc) to a specific zone. It works by using a Collider (which it has a dependency on) as a trigger volume to determine whether objects are inside it and then applies the specified force effects. Command : CreateSprite In the Property Window Rename Sprite object to RegionEffect Under Transform Set Scale to [5, 5, 5] Add Component : BoxCollider Under BoxCollider Set Ghost checkBox to true Add Component : Region NOTE: Experiment by adding the ForceEffect , BuoyancyEffect and WindEffect Related Materials Manual Physics Effects & Regions Colliders RigidBody Code Reference Classes Transform RigidBody BoxCollider Region GravityEffect DragEffect ForceEffect BuoyancyEffect WindEffect Commands Create a New 2D Project Add Resource PlayGame StopGame CreateSprite"
  },
  "docs/zilch_editor_documentation/tutorials/physics/physicsmaterials.html": {
    "href": "docs/zilch_editor_documentation/tutorials/physics/physicsmaterials.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lecture covers the basic usage of PhysicsMaterials and the MassOverride component. Learning Objectives Creating and applying PhysicsMaterials Basic physics concepts (Mass, Volume, Density, Restitution and Friction) Using the MassOverride component Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSprite Select : Sprite object In the Properties Window Rename Sprite object to RedSquare Under Transform Set Translation to [-3, 0, 0] Under Sprite Set VertexColor to Red: [R:255, G:0, B:0, A:1.00] Add Component : RigidBody Under RigidBody Set Velocity to [4, 0, 0] Add Component : BoxCollider Duplicate the RedSquare object object In the Properties Window Rename it to BlueSquare Under Transform Set Translation to [3, 0, 0] Under Sprite Set VertexColor to Blue: [R:0, G:0, B:255, A:1.00] Under RigidBody Set Velocity to [-4, 0, 0] Select : LevelSettings object In the Properties Window Under GravityEffect Set Active checkBox to false Under DragEffect Set Active checkBox to false Command : PlayGame Command : StopGame Mass In Zilch Engine, any object with a RigidBody is automatically assigned mass. An object's mass represents its weight and is determined by its Volume and Density (M = D * V). Volume is calculated from a combination of the Collider type along with its size defining properties and the object's scale, while its Density is defined by the object's PhysicsMaterial. By altering these properties we can manipulate how objects interact physically with each other. NOTE: An object with RigidBody but with no Collider will be assigned a mass of 1 while an object with a Collider but no RigidBody can be thought of as having infinite mass. In our constructed scenario so far we see two objects colliding with each other in a space with no gravity or drag. A quick look on each object's RigidBody component shows the current Mass . Since both objects have the same physics properties (mass, restitution, velocity magnitude, etc) we conclude that the collision is symmetric and both objects apply an equal force to each other when they collide. Volume Let's explore what happens when we give them different Volumes: Select : RedSquare object In the Properties Window Under Transform Set Scale to [2, 2, 2] Command : PlayGame Since we've made the object bigger, its mass has also increased which we can verify by checking the RigidBody on RedSquare object. We can observe that the more massive object imparts a larger force onto the smaller object than the smaller does to it. Command : StopGame In the next section, we'll explore tweaking an object mass by altering its density. Density Command : Add Resource Create a PhysicsMaterial named Dense In the Library Window Under PhysicsMaterial Double-Click Dense resource In the Properties Window Set Density to 8 Select : RedSquare object In the Properties Window Under Transform Set Scale back to [1, 1, 1] Under BoxCollider Set Material resource to Dense Similar to the previous case, the more massive object imparts a greater force despite both objects having the same volume. Lastly, let's look into another way of setting an object's mass. MassOverride The MassOverride component allows you to set an object's mass regardless of its Volume or Density. It has a dependency on RigidBody. MassOverride Properties Active checkBox Whether this component is currently overriding the RigidBody's mass Mass The value RigidBody's mass is being overrided by) RecomputeMass Recalculates and sets MassOverride's mass property to the default value Select : RedSquare object In the Properties Window Add Component : MassOverride Command : PlayGame In adding the MassOverride component, we just reset the RedSquare object's mass to 1 despite it still having the Dense resource PhysicsMaterial Command : StopGame Restitution Another useful feature of PhysicsMaterial is Restitution: a value that represents the object's bounciness. It is represented by a value from 0 to 1 and denotes how much of its energy is preserved after the collision (0 being no energy preserved and 1 being 100% of energy preserved). You may also set Restitution to a value greater than 1 (by right-clicking the field) to cause the object to bounce away with greater energy. Command : Add Resource Create a PhysicsMaterial named Bouncy In the Library Window Under PhysicsMaterial resource Double-Click Bouncy resource In the Property Window Set Restitution to 1 Set RestitutionImportance to 1 Add Resource Create a PhysicsMaterial named NotBouncy In the Library Window Under PhysicsMaterial resource Double-Click the NotBouncy resource resource In the Property Window Set Restitution to 0 Set RestitutionImportance to 1 Select : BlueSquare resource In the Properties Window Remove Component : RigidBody Under BoxCollider Experiment by setting PhysicsMaterial enum to Bouncy and NotBouncy Command : PlayGame Command : StopGame Friction Friction is a coefficient that represents how much energy is lost when objects slide against one another. Each PhysicsMaterial provides a friction value and their combination will determine the friction force used for the collision between the two objects. The higher the friction value, the more energy will be lost per frame except when either object has a friction value of 0, in which case no energy will be lost. NOTE: Similar to the case with restitution, PhysicsMaterials have a FrictionImportance property, which determines which object's Friction value to use in a collision. Select : LevelSettings object In the Properties Window Under GravityEffect Set Active to true Add Resource Create a PhysicsMaterial named HighFriction In the Library Window Under PhysicsMaterial resource Double-Click HighFriction resource In the Property Window Set Friction to 2 Set FrictionImportance to 1 Command : CreateSprite In the Properties Window Rename Sprite object to GreenSquare Under Sprite Set Sprite to Green: [R:0, G:255, B:0, A:1.00] Under Transform Set Translation to [0, -1, 0] Set Scale to [10, 0, 0] Add Component : BoxCollider component Under BoxCollider Set Material resource to HighFriction Command : PlayGame Command : StopGame Related Materials Manual PhysicsMaterials Reference Classes Transform MassOverride Sprite RigidBody Collider BoxCollider GravityEffect DragEffect Commands Create a New 2D Project PlayGame StopGame Add Component CreateSprite Development Tasks T2562 T141"
  },
  "docs/zilch_editor_documentation/tutorials/physics/raycasting.html": {
    "href": "docs/zilch_editor_documentation/tutorials/physics/raycasting.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers how to cast rays using Physics and interpret the results. Learning Objectives Understanding rays, lines, and line segments Learning how to cast various geometric primitives Learning how to interpret and use the results of a cast Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSprite In the Properties Window Rename Sprite object to Square Under Transform Set Translation to [-4, 0, 0] Create three sprite objects with the following properties: Name Transform>Translation Sprite>VertexColor Sprite>SpriteSource RedCircle object [-1.5, 0, 0] [R:255, G:0, B:0, A:1.00] Circle GreenCircle object [0, 0, 0] [R:0, G:255, B:0, A:1.00] Circle BlueCircle object [1.5, 0, 0] [R:0, G:0, B:255, A:1.00] Circle The property values should look like this Command : Add Resource Create a NadaScript resource using the Component template template and name it MoveUpAndDown In the MoveUpAndDown script Update the MoveUpAndDown class to the following: class MoveUpAndDown : NadaComponent { [Dependency] var Transform : Transform; [Property] var StartPosition : Real3 = Real3(0,1,0); [Property] var EndPosition : Real3 = Real3(0,-1,0); [Property] var MoveDuration : Real = 1.0; function Initialize(init : CogInitializer) { this.Transform.Translation = this.StartPosition; this.MoveToEnd(); } function MoveToEnd() { var seq = Actions.Sequence(this.Owner.Actions); Actions.Property(seq, @this.Transform.Translation, this.EndPosition, this.MoveDuration, Ease.Linear); Actions.Call(seq, this.MoveToStart); } function MoveToStart() { var seq = Actions.Sequence(this.Owner.Actions); Actions.Property(seq, @this.Transform.Translation, this.StartPosition, this.MoveDuration, Ease.Linear); Actions.Call(seq, this.MoveToEnd); } } For each Circle object Add Component : spherecollider Add Component : rigidbody Under rigidbody Set DynamicState enum to Kinematic Add Component : MoveUpAndDown Under MoveUpAndDown Set the properties to the following: Name StartPosition EndPosition MoveDuration RedCircle object [-1.5, 1, 0] [-1.5, -1, 0] 1 GreenCricle object [0, 1, 0] [0, -1, 0] 2 BlueCircle object [1.5, 1, 0] [1.5, -1, 0] 3 Command : PlayGame The circles should move like this Command : StopGame Rays A ray is a portion of a line that starts at a given location and extends infinitely far in a given direction. In Zilch Engine, you can create rays and cast them in order to find what it intersects with. This can be used for a variety of applications, including: Simulating laser beams Simulating high velocity projectiles Checking for line of sight Detecting walls Detecting distance to an object NOTE: It's worth noting the difference between rays, segments and lines. Rays are infinitely long, defined by a start point and a direction. Segments are defined by a start and end point. Lines are defined by two points and extend infinitely. Creating and Casting The first step to raycasting is to build the ray with the desired parameters. Let's take a look. Command : Add Resource Create a NadaScript resource using the Component template template and name it RayCasterLogic In the RayCasterLogic script Update the RayCasterLogic class to the following: class RayCasterLogic : NadaComponent { [Dependency] var Transform : Transform; [Property] var Direction : Real3 = Real3(1.0, 0.0, 0.0); [Property] var DebugDrawOn : Boolean = true; [Property] var MaxDebugLineLength : Real = 8.0; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { this.FindFirstObject(); } function FindFirstObject() { //Create ray var ray = Ray(); ray.Start = this.Transform.Translation; ray.Direction = this.Direction; //Cast ray var result = this.Space.PhysicsSpace.CastRayFirst(ray); //Interpret results if(result.ObjectHit != null) { //Set our owner's color to match the color of the object we hit this.Owner.Sprite.VertexColor = result.ObjectHit.Sprite.VertexColor; Console.WriteLine(\"Ray found: `result.ObjectHit.Name`\"); } else { //If no objects were hit, set our owner's color to white this.Owner.Sprite.VertexColor = Colors.White; Console.WriteLine(\"No object found!\"); } //Visual Debug if(this.DebugDrawOn) { var debugRay = DebugLine(); debugRay.Start = ray.Start; debugRay.End = ray.Start + Real3.XAxis * Math.Min(result.Distance, this.MaxDebugLineLength); debugRay.HeadSize = 0.2; DebugDraw.Add(debugRay); } } } Select : Square object In the Properties Window Add Component : RaycasterLogic Command : PlayGame We can see the ray starting at the Square object and extending to the right. Upon intersecting with one of the circles, the color of the square is changed to match it. Command : StopGame Raycasting always consists of 3 steps: Create the Ray Request the PhysicsSpace to cast it (storing the results) Interpret the CastResult If the ray intersects an object, you can retrieve the following information from the CastResult: CastResult Collider The collider intersected by the ray Distance Distance from the ray start to the point of intersection ObjectHit The cog hit by the cast Normal The normal of the surface at the intersection point WorldPosition World-space position where the object was hit Multiple Results It is also possible to cast a Ray and retrieve the resulting intersections with multiple objects by using the PhysicsSpace.CastRay() function instead. Add the following function to the RayCasterLogic class: function FindSeveralObjects() { //Create Ray var ray = Ray(); ray.Start = this.Transform.Translation; ray.Direction = this.Direction; //Cast Ray var results = this.Space.PhysicsSpace.CastRay(ray, 3); this.Owner.Sprite.VertexColor = Real4(0,0,0,1); //Interpret Results foreach(var result in results) { //If the object has a sprite component if(result.ObjectHit.Sprite != null) { //Add that object's color to our owner's color this.Owner.Sprite.VertexColor += result.ObjectHit.Sprite.VertexColor; } } //Visual Debug if(this.DebugDrawOn) { var debugRay = DebugLine(); debugRay.Start = ray.Start; debugRay.End = ray.Start + Real3.XAxis * this.MaxDebugLineLength; debugRay.HeadSize = 0.2; DebugDraw.Add(debugRay); } } Replace the OnLogicUpdate function in the RayCasterLogic class with the following: function OnLogicUpdate(event : UpdateEvent) { //this.FindFirstObject(); this.FindSeveralObjects(); } Command : PlayGame Command : StopGame The CastRay function allows you to specify the ray and a maximum number of objects to detect. It returns a range of CastResults that contains all of the objects intersected (up to the specified number) in order of distance (closest to farthest). Cast Filters CastFilters allow you to customize which objects the raycast process should hit and which should be ignored. The filter can then be passed as an optional third parameter to the CastRay function. Replace the FindSeveralObjects function in the RayCasterLogic class with the following : function FindSeveralObjects() { //Create Filter var filter = CastFilter(); filter.IgnoreGhost = true; //Create Ray var ray = Ray(); ray.Start = this.Transform.Translation; ray.Direction = this.Direction; //Cast Ray var results = this.Space.PhysicsSpace.CastRay(ray, 3, filter); this.Owner.Sprite.VertexColor = Real4(0,0,0,1); //Interpret Results foreach(var result in results) { //If the object has a sprite component if(result.ObjectHit.Sprite != null) { //Add that object's color to our owner's color this.Owner.Sprite.VertexColor += result.ObjectHit.Sprite.VertexColor; } } //Visual Debug if(this.DebugDrawOn) { var debugRay = DebugLine(); debugRay.Start = ray.Start; debugRay.End = ray.Start + Real3.XAxis * this.MaxDebugLineLength; debugRay.HeadSize = 0.2; DebugDraw.Add(debugRay); } } Select : GreenCircle object In the Properties Window Under SphereCollider Set Ghost checkBox to true Command : PlayGame Command : StopGame Here are some useful properties you can set on the CastFilter that allow you to further customize which objects to ignore. Cast Filter IgnoreCog Cog A given specific Cog to ignore IgnoreDynamic boolean Ignores all objects marked as Dynamic IgnoreGhost boolean Ignores all objects marked as Ghost IgnoreKinematic boolean Ignores all objects marked as Kinematic IgnoreStatic boolean Ignores all objects marked as Static CollisionGroup collisiongroup Makes the Ray behave as part of a collision group, using the current collisiontable Other Types of Casting In addition to Rays, Zilch Engine allows you to cast other types of shapes, including: Segment Sphere Aabb Frustum Collider They all follow the same basic steps described in this tutorial: define the shape, request PhysicsSpace to cast it (with the optional inclusion of a CastFilter) and then interpret the results. You can read more about them in the PhysicsCasting Manual Page. Related Materials Manual PhysicsCasting Colliders Collision Groups and Tables Tutorial collisiongroups Code Reference Classes Transform Sprite Cog spherecollider Ray Segment CastFilter CastResult PhysicsSpace Collider collisiongroup collisiontable sphere aabb frustum Enums RigidBodyDynamicState Commands CreateSprite PlayGame StopGame Development Task T1188"
  },
  "docs/zilch_editor_documentation/tutorials/scripting.html": {
    "href": "docs/zilch_editor_documentation/tutorials/scripting.html",
    "title": "| ZilchEngine",
    "keywords": "Scripting using Nada in the Zilch Engine. customcomponents #beginner_ii NadaScript, Component Class, Initialize, Update variables #beginner_ii Variable Types, Assignment, Acessing Owner Component Variables, Class Variables, Local Variables, Scope, Property Attribute conditionals #beginner_ii if, else if, else, ==, <, >, <=, >=, ||, &&, !, != functions #beginner_ii Parameters, Return Types, Calling functions on other components loops #beginner_ii while, for, foreach consoleprinting #beginner_ii Console Window, Console.WriteLine, Printing Strings, Printing Variables, Basic Debugging Events #beginner_iv LogicUpdate, CollisionEvents, DestructionEvents Events II #beginner_iv Custom Events, Dispatching, Sends, Custom Event Data Actions #beginner_iii Property, Delay, Call, Sequence, Group, and Looped Actions Arrays #beginner_iv Arrays, Array Methods, Element Iteration DebugDraw #beginner_iv DebugLine, DebugCircle"
  },
  "docs/zilch_editor_documentation/tutorials/scripting/actions.html": {
    "href": "docs/zilch_editor_documentation/tutorials/scripting/actions.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "Actions are a handy way to animate properties with just a few lines of code. They can also be a way to call a function or dispatch an event after a delay. You can make actions happen in a paticular order, all at the same time, or some combination of the two. Let's take a look. Learning Objectives Property Actions Delay Actions Call Actions ActionSequences ActionGroups Looped Actions Level Setup Create a New 2D Project Command : Add Resource Create a NadaScript resource using the Component template template and name it SpriteFader Select : GameCamera object In the Properties Window Under Camera Set Size to 5 Command : CreateSprite Select : Sprite object In the Properties Window Add Component : Area Add Component : SpriteFader What Are Actions Often in games we find that we wish to smoothly transition a property from its existing value to another target value. This is often done by calculating interpolated values on logic update between an the existing value and the target value using a function such as Math.Lerp. While there are times when it is advantageous to perform these operations in an update function it is more common to want to begin an interpolation operation and have it finish on its own. Actions can do this and more and act as a generic structure to organize in game actions that need to occur in sequence or parrallel. Property Actions The first and most common action type is a Property Action which allows us to interpolate a property from its current value to a target value, over a specific duration, at a rate defined by an easing function. We can break down the construction of a property action parameter by parameter. Actions.Property(this.Owner.Actions, @this.Area.Size, this.TargetSize, this.Duration, Ease.Linear); Action Property Parameters this.Owner.Actions ActionSet The ActionSet which will update this action @this.Area.Size PropertyDelegate Delegate of the property to be modified by the action this.TargetValue Property type of the PropertyDelegate passed into the previous parameter (i.e. Real3 in this example) Value to which the action will interpolate the given property this.Duration Real The duration over which the action will be completed Ease.Linear Ease The Ease function used to calculate the rate of interpolation Using a Property Action Now that we've covered the basics of what a property action is let's try using one: Update the SpriteFader script: class SpriteFader : NadaComponent { [Dependency] var Sprite : Sprite; [Dependency] var Area : Area; //Target scale to interpolate towards [Property] var TargetSize : Real2 = Real2(2, 2); //Duration of the interpolation [Property] var Duration : Real = 1.0; function Initialize(init : CogInitializer) { //Call the animate function this.Animate(); } //Interpolate the object's scale to a target value over a duration function Animate() { Actions.Property(this.Owner.Actions, @this.Area.Size, this.TargetSize, this.Duration, Ease.Linear); } } Command : PlayGame Command : StopGame Here you can see the property action interpolating the title scale over the given period of one second. Action Sequences You may already be wondering how to chain actions together, well this is the purpose of an ActionSequence. Add the following property to SpriteFader: [Property] var TargetColor : Real4 = Real4(1,0,0,1); Update the Animate function in SpriteFader script: function Animate() { //create a sequence driven by the object var actionSequence = Actions.Sequence(this.Owner.Actions); //put the scaling property action first in the sequence Actions.Property(actionSequence, @this.Area.Size, this.TargetSize, this.Duration, Ease.Linear); //put the color interpolation property action second in the sequence Actions.Property(actionSequence, @this.Sprite.VertexColor, this.TargetColor, this.Duration, Ease.Linear); } Command : PlayGame Command : StopGame Here we can see sequences allow up to play actions in a linear order. This is very helpful, but what if we want to make these actions happen at the same time? Action Groups Similiar to how an ActionSequence will let us perform actions in sequence an ActionGroup will let us perform actions in parallel (at the same time). Update the Animate function in SpriteFader script: function Animate() { //Create a group driven by the object var actionGroup = Actions.Group(this.Owner.Actions); //Put the scaling property in the group Actions.Property(actionGroup, @this.Area.Size, this.TargetSize, this.Duration, Ease.Linear); //Put the color interpolation property action the group Actions.Property(actionGroup, @this.Sprite.VertexColor, this.TargetColor, this.Duration, Ease.Linear); } Command : PlayGame Command : StopGame Now that the property actions are in a group instead of in a sequence they happen at the same time. Combining Sequences and Groups So far we have seen sequences and groups working seperately but what if we wanted to combine them. That would mean we could make sequences of grouped actions, or groups of sequenced actions. We can use the SpriteFader component to test this. Add the following variables to SpriteFader: var OriginalSize : Real2; var OriginalColor : Real4; Update the Initialize function in SpriteFader: function Initialize(init : CogInitializer) { //Capture original values this.OriginalSize = this.Area.Size; this.OriginalColor = this.Sprite.VertexColor; //Call the animate function this.Animate(); } Update the Animate function in SpriteFader: function Animate() { //Create a group driven by the object var actionGroup = Actions.Group(this.Owner.Actions); //Create the sequence to the text up and down var scaleSequence = Actions.Sequence(actionGroup); //Put the scale up property action in the sequence Actions.Property(scaleSequence, @this.Area.Size, this.TargetSize, this.Duration, Ease.Linear); //Put the scale down property action in the sequence Actions.Property(scaleSequence, @this.Area.Size, this.OriginalSize, this.Duration, Ease.Linear); //Create the sequence to interpolate var colorSequence = Actions.Sequence(actionGroup); //Put the interpolate to black property action in the color sequence Actions.Property(colorSequence, @this.Sprite.VertexColor, this.TargetColor, this.Duration, Ease.Linear); //Put the interpolate to white property action in the color sequence Actions.Property(colorSequence, @this.Sprite.VertexColor, this.OriginalColor, this.Duration, Ease.Linear); } Command : PlayGame Command : StopGame It should be noted that this.Owner.Actions is an ActionGroup so in this simple case we could have just passed it to the constructor for the action sequences. We could also invert the group and sequence nesting to achieve the same affect from a different approach. Update the Animate function in SpriteFader: function Animate() { //Create a group driven by the object var actionSequence = Actions.Sequence(this.Owner.Actions); //Create the group to scale up and black out the text var scaleUpGroup = Actions.Group(actionSequence); //Put the scaling property in the group Actions.Property(scaleUpGroup, @this.Area.Size, this.TargetSize, this.Duration, Ease.Linear); //Put the color interpolation property action the group Actions.Property(scaleUpGroup, @this.Sprite.VertexColor, this.TargetColor, this.Duration, Ease.Linear); //Create the group to scale down and white out the text var scaleDownGroup = Actions.Group(actionSequence); Actions.Property(scaleDownGroup, @this.Area.Size, this.OriginalSize, this.Duration, Ease.Linear); //Put the color interpolation property action the group Actions.Property(scaleDownGroup, @this.Sprite.VertexColor, this.OriginalColor, this.Duration, Ease.Linear); } Command : PlayGame Command : StopGame Now we can see both property actions in the scaleUpGroup complete and then the two actions in the scaleDownGroup run. Call Actions Another type of action is the call option. This allows you to put calls to functions in your sequences or groups. Test this out by printing at the beginning and end of the title animation sequences. Add the following Print function to SpriteFader: function Print(str : String) { Console.WriteLine(str); } Update the Animate function in SpriteFader: function Animate() { //Create a group driven by the object var actionSequence = Actions.Sequence(this.Owner.Actions); Actions.Call(actionSequence, this.Print, \"Animation sequence started\"); //Create the group to scale up and black out the text var scaleUpGroup = Actions.Group(actionSequence); //Put the scaling property in the group Actions.Property(scaleUpGroup, @this.Area.Size, this.TargetSize, this.Duration, Ease.Linear); //Put the color interpolation property action the group Actions.Property(scaleUpGroup, @this.Sprite.VertexColor, this.TargetColor, this.Duration, Ease.Linear); //Create the group to scale down and white out the text var scaleDownGroup = Actions.Group(actionSequence); Actions.Property(scaleDownGroup, @this.Area.Size, this.OriginalSize, this.Duration, Ease.Linear); //Put the color interpolation property action the group Actions.Property(scaleDownGroup, @this.Sprite.VertexColor, this.OriginalColor, this.Duration, Ease.Linear); Actions.Call(actionSequence, this.Print, \"Animation sequence complete\"); } Command : PlayGame SpriteFader scaling up and changing the color of the menu title at the same time using a group in a sequence then reversing the actions with another group. The animation is followed by the following console output Animation sequence started Animation sequence complete Command : StopGame Now you can see the print function executed at the beginning and end of the sequence. This can be very helpful with debugging the behaviors of actions but it also has a slightly more complex application. (NOTE)Call Action Function Parameters: Action.Call is overloaded to take multiple parameters for the function passed to it. As seen above you pass the values that should be passed to the given function as parameters to the call action constructor itself. Action Loops Add the following property to SpriteFader: var LoopedSequence : ActionSet; Update the Animate function in SpriteFader: function Animate() { if(this.LoopedSequence != null) this.LoopedSequence.Cancel(); //Create a seqeunce driven by the object this.LoopedSequence = Actions.Sequence(this.Owner.Actions); Actions.Call(this.LoopedSequence, this.Print, \"Animation sequence started\"); //Create the group to scale up and black out the text var scaleUpGroup = Actions.Group(this.LoopedSequence); //Put the scaling property in the group Actions.Property(scaleUpGroup, @this.Area.Size, this.TargetSize, this.Duration, Ease.Linear); //Put the color interpolation property action the group Actions.Property(scaleUpGroup, @this.Sprite.VertexColor, this.TargetColor, this.Duration, Ease.Linear); //Create the group to scale down and white out the text var scaleDownGroup = Actions.Group(this.LoopedSequence); Actions.Property(scaleDownGroup, @this.Area.Size, this.OriginalSize, this.Duration, Ease.Linear); //Put the color interpolation property action the group Actions.Property(scaleDownGroup, @this.Sprite.VertexColor, this.OriginalColor, this.Duration, Ease.Linear); //Call animate at the end of the sequence to loop Actions.Call(this.LoopedSequence, this.Print, \"Animation sequence complete\"); Actions.Call(this.LoopedSequence, this.Animate); } Command : PlayGame SpriteFader scaling up and changing the color of the menu title at the same time using a group in a sequence then reversing the actions with another group, then looping the sequence Command : StopGame Now we can see the action sequence call the function that originally set it up. This create a loop in the sequence of actions which will repeat. You should also notice that we started storing the action sequence in a member variable of SpriteFader instead of a local variable. This does not change the behavior of the action sequence, but it does allow us to examine, pause, and cancel the sequence while it is running. This usually good practice for all action sets. We actually already introduced a small example of how one may use an ActionSet member variable when we introduced these two lines at the top of animate. if(this.LoopedSequence != null) this.LoopedSequence.Cancel(); By checking if this.LoopedSequence is not null we can determine if there is already a sequence in existence intended to animate the sprite. If the Animate function were to be called elsewhere without this check it could result in multiple sequence performing the same scaling and color interpolation operations on the same object independently and simultainiously. This can result in so very undesirable bugs where actions overlap each other in unintended ways. By cancelling any existing LoopedSequence before we start another we can avoid this issue almost entirely. Delay Actions Delay actions allow the insertion of a time based delay in an action sequence. When put in a group they can prevent the group completing but will not keep other actions in the group from running. Update the Animate function in SpriteFader: function Animate() { if(this.LoopedSequence != null) this.LoopedSequence.Cancel(); //Create a group driven by the object this.LoopedSequence = Actions.Sequence(this.Owner.Actions); Actions.Call(this.LoopedSequence, this.Print, \"Animation sequence started\"); //Create the group to scale up and black out the text var scaleUpGroup = Actions.Group(this.LoopedSequence); //Put the scaling property in the group Actions.Property(scaleUpGroup, @this.Area.Size, this.TargetSize, this.Duration, Ease.Linear); //Put the color interpolation property action the group Actions.Property(scaleUpGroup, @this.Sprite.VertexColor, this.TargetColor, this.Duration, Ease.Linear); //Create the group to scale down and white out the text var scaleDownGroup = Actions.Group(this.LoopedSequence); Actions.Property(scaleDownGroup, @this.Area.Size, this.OriginalSize, this.Duration, Ease.Linear); //Put the color interpolation property action the group Actions.Property(scaleDownGroup, @this.Sprite.VertexColor, this.OriginalColor, this.Duration, Ease.Linear); Actions.Call(this.LoopedSequence, this.Print, \"Animation sequence complete\"); //Delay the animation loop Actions.Delay(this.LoopedSequence, this.Duration); Actions.Call(this.LoopedSequence, this.Print, \"Animation loop delay complete\"); Actions.Call(this.LoopedSequence, this.Animate); } Command : PlayGame SpriteFader scaling up and changing the color of the menu title at the same time using a group in a sequence then reversing the actions with another group, then looping the sequence after a short delay Command : StopGame Now we have the title animating in a loop with a short delay in the sequence before the next itteration of the loop. Event Actions The final action type is the event action. This allows you to instantiate an even object as if you were about to dispatch it, but instead it pass it to the action to be dispatched later. Add the following in the SpriteFader class within SpriteFader: sends SpriteFaded : NadaEvent; Update the Initialize function in SpriteFader: function Initialize(init : CogInitializer) { //Capture original values this.OriginalSize = this.Area.Size; this.OriginalColor = this.Sprite.VertexColor; Zilch.Connect(this.Space, Events.SpriteFaded, this.OnSpriteFaded); //Call the animate function this.Animate(); } Add the following function to SpriteFader: function OnSpriteFaded(event : NadaEvent) { Console.WriteLine(\"Sprite Faded\"); } Update the Initialize function in SpriteFader: function Animate() { if(this.LoopedSequence != null) this.LoopedSequence.Cancel(); //Create a group driven by the object this.LoopedSequence = Actions.Sequence(this.Owner.Actions); Actions.Call(this.LoopedSequence, this.Print, \"Animation sequence started\"); //Create the group to scale up and black out the text var scaleUpGroup = Actions.Group(this.LoopedSequence); //Put the scaling property in the group Actions.Property(scaleUpGroup, @this.Area.Size, this.TargetSize, this.Duration, Ease.Linear); //Put the color interpolation property action the group Actions.Property(scaleUpGroup, @this.Sprite.VertexColor, this.TargetColor, this.Duration, Ease.Linear); //Create the group to scale down and white out the text var scaleDownGroup = Actions.Group(this.LoopedSequence); Actions.Property(scaleDownGroup, @this.Area.Size, this.OriginalSize, this.Duration, Ease.Linear); //Put the color interpolation property action the group Actions.Property(scaleDownGroup, @this.Sprite.VertexColor, this.OriginalColor, this.Duration, Ease.Linear); //Delay the animation loop Actions.Delay(this.LoopedSequence, this.Duration); Actions.Event(this.LoopedSequence, this.Space, Events.SpriteFaded, NadaEvent()); Actions.Call(this.LoopedSequence, this.Animate); } Command : PlayGame SpriteFader scaling up and changing the color of the menu title at the same time using a group in a sequence then reversing the actions with another group, then looping the sequence after a short delay Command : StopGame Related Materials Manual Command PropertyDelegate Reference Classes action actions actiondelay actiongroup actionsequence actionset Ease Nada Base Types Real Real3 Math.Lerp Commands PlayGame StopGame Tasks T782"
  },
  "docs/zilch_editor_documentation/tutorials/scripting/arrays.html": {
    "href": "docs/zilch_editor_documentation/tutorials/scripting/arrays.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "Developers often find themselves needing to make lists of data within their application. The most common way to keep a list of elements is via an Array. Learning Objectives Arrays Array methods Element iteration Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : Add Resource Create a NadaScript resource using the Component template template and name it ArrayExample Declaration Array is a Nada Base Type that acts a container for other variables. Update the ArrayExample class to the following: class ArrayExample : NadaComponent { var DefaultConstructorExample : Array[Integer] = Array[Integer](); function Initialize(init : CogInitializer) { Console.WriteLine(this.DefaultConstructorExample); } } Notice how we pass the type Integer to both the array type declaration and the array constructor. When declaring or constructing an array, you put the type that the array will hold in square brackets ([]). Select : LevelSettings object In the Properties Window Add Component : ArrayExample Command : Console Command : PlayGame ---------------- Begin Game ---------------- {} Level 'Level' was loaded. Loaded level 0.00s Here we can see the empty array print out as {}. Command : StopGame Let's look at how to initialize an array on construction so it is not immediately empty. Initialization Array initialization is most often done using constructors. Constructors We have already used the default constructor in the example above. It creates an empty array that can be filled with instances of the defined type. It is important to remember that an array variable must be declared and initialized before it can be used. Unlike a Real or Integer, arrays will not be implicitly initialized by their default constructor. Initializer List Another way to initialize an array is to use an initializer list that allows the user to manually determine the value of each element in the array individually. Add the following to the ArrayExample class: var InitializarListExample : Array[Integer] = Array[Integer]() {6, 7, 8, 9}; Add the following to the Initialize function in the ArrayExample class: Console.WriteLine(this.InitializarListExample); Command : PlayGame ---------------- Begin Game ---------------- {} {6, 7, 8, 9} Level 'Level' was loaded. Loaded level 0.00s Command : StopGame We can see the array we constructed using an initializer list printed out with the exact values we passed to the initializer list. [] (Subscript) Operator Reading The [] (subscript) operator can be used as a method of accessing individual elements in an array. Add the following to the Initialize function in the ArrayExample class: Console.WriteLine(this.InitializarListExample[2]); Command : PlayGame ---------------- Begin Game ---------------- {} {6, 7, 8, 9} 8 Level 'Level' was loaded. Loaded level 0.00s We can see that 8 is printed out to the Console Window which is the value of indexed by 2 in our example usage of the [] operator. We will see more usage of the [] operator further on. (NOTE)Counting from 0: You may have figured this out already but in most programming languagwe always start counting at 0. This means that the first index in any array is 0. So by using the index 2 above we are accessing the third element in the array. Command : StopGame Writing The [] operator can also be used to overwrite the value of an element which already exists in the Array. Add the following to the Initialize function in the ArrayExample class: this.InitializarListExample[2] = 0; Console.WriteLine(this.InitializarListExample); Command : PlayGame ---------------- Begin Game ---------------- {} {6, 7, 8, 9} 8 {6, 7, 0, 9} Level 'Level' was loaded. Loaded level 0.00s We can see the element with an index of 2 is set to a value of 0. Command : StopGame Adding Elements We have looked at how to declare and initialize arrays using a rather basic example so far. Let's learn about adding to arrays using an example that is more applicable. Command : Add Resource Create a NadaScript resource using the Component template template and name it SpawnOnInput In the SpawnOnInput script Update the SpawnOnInput script to the following: class SpawnOnInput : NadaComponent { [Property] var SpawnLocation : Real3; [Property] var ObjectToSpawn : Archetype = Archetype.Sphere; [Property] var SpawnInput : Keys = Keys.Space; function Initialize(init : CogInitializer) { Zilch.Connect(Zilch.Keyboard, Events.KeyDown, this.OnKeyDown); } function OnKeyDown(event : KeyboardEvent) { if(event.Key == this.SpawnInput) this.Spawn(); } function Spawn() { //Spawn the object var obj = this.Space.CreateAtPosition(this.ObjectToSpawn, this.SpawnLocation); //Tell the owner that an object has been spawned var objEvent = ObjectSpawnedEvent(); objEvent.Obj = obj; this.Owner.DispatchEvent(Events.ObjectSpawnedEvent, objEvent); } } class ObjectSpawnedEvent : NadaEvent { sends ObjectSpawnedEvent : ObjectSpawnedEvent; var Obj : Cog; } This is just a utility component similar to some we have seen in previous tutorials. We will be using this component to spawn object that we will track using an array in another component. Command : CreateCube Remove Component : RigidBody In the Properties Window Under Transform Set Translation to [0, -5, 0] Set Scale to [15, 1, 1] Add Array.Add is a function that lets the user add elements to the end of the array. Let's look at how we can use this to add the enemy spheres we are going to spawn. Command : Add Resource Create a NadaScript resource using the Component template template and name it EnemyManager In the EnemyManager script Update the EnemyManager class to the following: class EnemyManager : NadaComponent { var Enemies : Array[Cog] = Array[Cog](); function Initialize(init : CogInitializer) { Zilch.Connect(this.Owner, Events.ObjectSpawnedEvent, this.OnObjectSpawnedEvent); } function OnObjectSpawnedEvent(event : ObjectSpawnedEvent) { this.Enemies.Add(event.Obj); this.PrintEnemies(); } function PrintEnemies() { Console.WriteLine(\"Current Enemy Objects:\"); Console.WriteLine(this.Enemies); } } Select : LevelSettings object In the Properties Window Remove Component : ArrayExample Add Component : SpawnOnInput Add Component : EnemyManager Command : PlayGame Press Space a few times We can see a new enemy spawned each time we pressed space. We can also see that each spawned object was added to the Enemies array in EnemyManager as we print it to the console following spawning the object. Command : StopGame Accessing Elements So far we have looked at how to create and add to arrays. What use is building a list of items if we can't use it to access those items though? The Out of Bounds Exception The [] (subscript) operator can be used as a method of accessing individual elements in an array, but often developers make a mistake and pass the [] operator an index that does not exist in the array. In the EnemyManager script Add the following to the Initialize function in the EnemyManager class: Zilch.Connect(Zilch.Keyboard, Events.KeyDown, this.OnKeyDown); Add the following to the EnemyManager class: function OnKeyDown(event : KeyboardEvent) { if(event.Key == Keys.D) { var enemy = this.Enemies[0]; Console.WriteLine(\"Enemy (`0`): `enemy`\"); Console.WriteLine(\"Enemies remaining: `this.Enemies`\"); enemy.Destroy(); } } Command : PlayGame Press D Command : StopGame In this case, we had not created an enemy so there was nothing in the array to access and the index was \"out of bounds\". We need to always ensure that whatever index we use to access an array element is always less than the number of elements and greater than or equal 0. We should also make sure the array is not empty before trying to access its elements. Removing Elements Select : LevelSettings object In the Properties Window Add Component : RandomContext In the EnemyManager script Add the following to the EnemyManager class: [Dependency] var RandomContext : RandomContext; Replace the OnKeyDown function in the EnemyManager class with the following: function OnKeyDown(event : KeyboardEvent) { //check the array is not empty before trying to access if(event.Key == Keys.D && this.Enemies.Count > 0) { //DieRoll returns a value in range [1,n], we subtract 1 to shift randIndex to the range [0,n-1] var randIndex = this.RandomContext.DieRoll(this.Enemies.Count) - 1; var enemy = this.Enemies[randIndex]; Console.WriteLine(\"Enemy (`randIndex`): `enemy`\"); Console.WriteLine(\"Enemies remaining: `this.Enemies`\"); enemy.Destroy(); } } Command : PlayGame Press Space multiple times Press D multiple times Repeat the last two steps until you receive the following error Notice how each time D is pressed and an enemy is destroyed, the length of EnemyManager.Enemies does not change. Just because we destroyed the enemy objects does not mean that the references to them we put in the array are removed. The exception is thrown when we attempt to access a member of one of the null references to one of the destroyed cogs. We need to remove these references when we destroy the cogs in order to prevent null references from existing in the array. Command : StopGame RemoveAt Replace the OnKeyDown function in the EnemyManager class with the following: function OnKeyDown(event : KeyboardEvent) { if(event.Key == Keys.D && this.Enemies.Count > 0) { //DieRoll returns a value in range [1,n], we subtract 1 to shift randIndex to the range [0,n] var randIndex = this.RandomContext.DieRoll(this.Enemies.Count) - 1; var enemy = this.Enemies[randIndex]; this.Enemies.RemoveAt(randIndex); Console.WriteLine(\"Enemy (`randIndex`): `enemy`\"); Console.WriteLine(\"Enemies remaining: `this.Enemies`\"); enemy.Destroy(); } } Command : PlayGame Press Space multiple times Press D multiple times By calling RemoveAt we removing an element at a paticular index. By removing the element before deleting the object we prevent there from ever being a null reference in the array to mistakenly access later. Command : StopGame Iterating Now, what if we wanted to perform a group operation on all the enemies in the array on the same frame. With our current implementation, we can only destroy one cog at a time. We need a way to walk the array and perform the same operation on each element. Indexing Performing the same operation multiple times should remind you of loops. As it turns out for loops are great for iterating over the elements of an array. Replace the OnKeyDown function in the EnemyManager class with the following: function OnKeyDown(event : KeyboardEvent) { if(event.Key == Keys.D) { for(var i = 0; i < this.Enemies.Count; ++i) { var enemy = this.Enemies[i]; enemy.Destroy(); } this.Enemies.Clear(); Console.WriteLine(this.Enemies); } } Here we are using the for loop to increment the index variable i each iteration of the loop. We are also using Array.Count to determine the number of iterations. An array has indexes corresponding to each of its element. The indexes range from 0 to Array.Count - 1. This means that by initializing i to 0 and stopping the loop when i is no longer less than this.Enemies.Count, the index i will iterate over the entire array. Command : PlayGame Press Space multiple times Press D ---------------- Begin Game ---------------- Level 'Level' was loaded. Loaded level 0.00s Current Enemy Objects: {<Cog (Sphere) [726]>} Current Enemy Objects: {<Cog (Sphere) [726]>, <Cog (Sphere) [727]>} Current Enemy Objects: {<Cog (Sphere) [726]>, <Cog (Sphere) [727]>, <Cog (Sphere) [728]>} {} Now that we are accessing and destroying each cog in the array all at once we needed a way to do the same for removing the references from the array. Array.Clear removes all elements from the array, which is perfect considering we just destroyed all the cogs referenced in the array elements. Command : StopGame Using foreach There is a slightly simpler way of iterating over an array. Replace the OnKeyDown function in the EnemyManager class with the following: function OnKeyDown(event : KeyboardEvent) { if(event.Key == Keys.D) { foreach(var enemy in this.Enemies) enemy.Destroy(); this.Enemies.Clear(); Console.WriteLine(this.Enemies); } } Command : PlayGame Press Space multiple times Press D ---------------- Begin Game ---------------- Level 'Level' was loaded. Loaded level 0.00s Current Enemy Objects: {<Cog (Sphere) [745]>} Current Enemy Objects: {<Cog (Sphere) [745]>, <Cog (Sphere) [746]>} Current Enemy Objects: {<Cog (Sphere) [745]>, <Cog (Sphere) [746]>, <Cog (Sphere) [747]>} {} The foreach loop handles the accessing for you. Essentially, each iteration of the loop enemy will be a reference to the next element in the array. This means you do not have to do any indexing. This means that you also have little control over the indexing. While foreach is more commonly used for full iterations over an array, for loops may be more desirable for operations which require a non-linear indexing order. Related Materials Manual Command Add Component Remove Component foreach Tutorial loops Reference Classes Transform Integer Real Array RandomContext Commands New Project Add Resource PlayGame StopGame Console CreateCube Development Task T1187"
  },
  "docs/zilch_editor_documentation/tutorials/scripting/conditionals.html": {
    "href": "docs/zilch_editor_documentation/tutorials/scripting/conditionals.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "Conditionals allow a developer to make decisions in code based off of true & false values. Learning Objectives Evaluating Expressions Console Printing Expressions and their results if, else, and else if Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateTransform Command : Add Resource Create a NadaScript resource using the Component template template and name it ConditionalsLogic Select : Transform object In the Properties Window Add Component : icon=square-o, name = ConditionalsLogic if Statements An if statement evaluates an expression to a Boolean value of true or false. If the expression is true, code within the scope of the if statement will be executed, otherwise the application focus will skip over its scope. Update the icon=square-o, name =ConditionalsLogic script: class ConditionalsLogic : NadaComponent { function Initialize(init : CogInitializer) { if(true) { Console.WriteLine(\"This will print to console.\"); } if(false) { Console.WriteLine(\"This will not print to console.\"); } } } Command : PlayGame ---------------- Begin Game ---------------- This will print to console. Level 'Level' was loaded. Loaded level 0.00s Notice how the output displays only text within the if(true) conditional. Command : StopGame Boolean Operators if statements are primarily used to determine whether an entire sequence results in true or false. By using Boolean Operators an entire sequence can be evaluated rather than a single variable. The Equality Operator == is used to determine if two values are the same. This is different than the Assignment Operator = that is used to assign a new value to a variable. NOTE: The Equality Operator is a type of comparison operator that returns a boolean operator. The Inequality Operator != is used to determine if two values are not the same. As long as the two values are not exactly the same, the if statement will be evaluated as true. The Negation Operator ! is used to reverse some values when possible. In the example below, the ! operator is used to reverse the value of a boolean. Update the icon=square-o, name =ConditionalsLogic script: class ConditionalsLogic : NadaComponent { function Initialize(init : CogInitializer) { var booleanTest = true; var comparison = false; // Check to see if the two have the same value. if(booleanTest == comparison) { Console.WriteLine(\"`true` and `false` are not the same thing.\"); } // If `false` is not the same as `true` if(booleanTest != comparison) { // Flips the `booleanTest` variable. booleanTest = !booleanTest; } // Check to see if the two have the same value. if(booleanTest == comparison) { Console.WriteLine(\"`false` and `false` are the same thing.\"); } } } Command : PlayGame ---------------- Begin Game ---------------- false and false are the same thing. Level 'Level' was loaded. Loaded level 0.00s Notice how false and false are the same, resulting in a true conditional. Command : StopGame else if Statements Where if statements determine if a situation is true, else if statements can determine if alternative situations are true as long as previous conditionals are false. else statements catch all remaining conditions. Update the icon=square-o, name =ConditionalsLogic script: class ConditionalsLogic : NadaComponent { function Initialize(init : CogInitializer) { var grade = 85; if(grade < 70) Console.WriteLine(\"Failing Grade\"); else if(grade < 80) Console.WriteLine(\"Grade: C\"); else if(grade < 90) Console.WriteLine(\"Grade: B\"); else Console.WriteLine(\"Grade: A\"); } } Command : PlayGame ---------------- Begin Game ---------------- Grade: B Level 'Level' was loaded. Loaded level 0.00s Notice how the lines checking if grade < 70 and grade < 80 each ran first. They were skipped over since they evaluated to a false condition, but the grade < 90 conditional was true. The remaining line containing an else conditional was not considered. Command : StopGame if statements also can be used to evaluate the current state of a variable, such as time passed. This can be useful when evaluating variables. Update the icon=square-o, name = ConditionalsLogic script: class ConditionalsLogic : NadaComponent { function Initialize(init : CogInitializer) { var timePassed = 0.01; // Has any time passed if(timePassed != 0 && timePassed < 10) { Console.WriteLine(\"Time Passed: `timePassed` seconds\"); } } } Command : PlayGame ---------------- Begin Game ---------------- Time Passed: 0.01 seconds Level 'Level' was loaded. Loaded level 0.00s Notice that the if statement is run and the timePassed variable was used. Command : StopGame Non-Bracketed Scopes Once an if statement is found to be true, any code nested within is run. There are different ways to write these lines of code, based on what is easy to read and understand. The most common way to follow an if statement is to use the brackets discussed above. This is best used when more than one line of code is needed to be run. Update the icon=square-o, name = ConditionalsLogic script: class NumberGenerator : NadaComponent { function Initialize(init : CogInitializer) { if(true) { Console.WriteLine(1); Console.WriteLine(2); Console.WriteLine(3); } } } Command : PlayGame ---------------- Begin Game ---------------- 1 2 3 Level 'Level' was loaded. Loaded level 0.00s Notice that all three lines of code were run. All actions within brackets immediately following a true if statement will be performed. Command : StopGame Alternatively, if only one line of code needs to be performed, it can be common practice to not use braces, as long as code it positioned properly. Update the icon=square-o, name = ConditionalsLogic script: class NumberGenerator : NadaComponent { function Initialize(init : CogInitializer) { if(true) Console.WriteLine(1); } } Command : PlayGame ---------------- Begin Game ---------------- 1 Level 'Level' was loaded. Loaded level 0.00s Command : StopGame The line of code was run due being indented and following a true if statement. Indention matters as some code can be skipped over or even unintentionally run if not written correctly. Update the icon=square-o, name = ConditionalsLogic script: class NumberGenerator : NadaComponent { function Initialize(init : CogInitializer) { if(false) Console.WriteLine(1); Console.WriteLine(2); Console.WriteLine(3); } } Command : PlayGame ---------------- Begin Game ---------------- 2 3 Level 'Level' was loaded. Loaded level 0.00s Notice how 1 was never printed due to the false if statement, but 2 and 3 were. Command : StopGame Only the first indented line following a true if statement is performed. This is why it is important to use brackets for more than one line, for readability purposes. The following code is exactly the same as the previous example except that the second and third lines printed to Console are indented as well. Update the icon=square-o, name = ConditionalsLogic script: class NumberGenerator : NadaComponent { function Initialize(init : CogInitializer) { if(false) Console.WriteLine(1); Console.WriteLine(2); Console.WriteLine(3); } } Command : PlayGame ---------------- Begin Game ---------------- 2 3 Level 'Level' was loaded. Loaded level 0.00s Notice how 2 and 3 were still printed to console, even though they match the indention of the line above it. Command : StopGame Nested If Else Statements It is important to realize that if statements can be nested within one another. Further, else statements take advantage of scenarios where a statement returns false. Update the icon=square-o, name =ConditionalsLogic script: class ConditionalsLogic: NadaComponent { // Ingredients Boolean var TwoSlicesOfBread : Boolean = true; var PeanutButter : Boolean = true; var Jelly : Boolean = false; var Bacon : Boolean = true; var Banana : Boolean = true; var Turkey : Boolean = false; function Initialize(init : CogInitializer) { // Can't have a sandwich without bread if(this.TwoSlicesOfBread) { // Continue if we have a source of protein if(this.PeanutButter || this.Turkey) { // If there is Peanut Butter... if(this.PeanutButter) { // Determine which Peanut Butter sandwich this is if(this.Jelly) Console.WriteLine(\"Peanut Butter and Jelly Sandwich\"); else { // Preface the sandwich type Console.Write(\"Elvis Sandwich\"); // If bacon exists, it's a true Elvis Sandwich if(this.Bacon) Console.Write(\" with Bacon\"); Console.WriteLine(); } } // Otherwise, we have Turkey else Console.WriteLine(\"Turkey Sandwich\"); } else // No protein // Blues Brothers Special Console.WriteLine(\"Wish Sandwich - Two slices of bread and you wish you had some meat\"); } // No Bread else Console.WriteLine(\"Not a sandwich\"); } } Command : PlayGame ---------------- Begin Game ---------------- Elvis Sandwich with Bacon Level 'Level' was loaded. Loaded level 0.00s Notice how the output tells the user what kind of sandwich they have based on the ingredients selected. The nested If Statements make it possible to follow through based on the Boolean variables Command : StopGame Related Materials Manual Boolean Operators Conditionals Variables and Data Types Nada Keywords Operators Precedence Chart Boolean Operators Operator Precedence Add Resource Reference Classes NadaScript Nada Base Types Nada Base Types Commands PlayGame StopGame CreateTransform"
  },
  "docs/zilch_editor_documentation/tutorials/scripting/consoleprinting.html": {
    "href": "docs/zilch_editor_documentation/tutorials/scripting/consoleprinting.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers the basics of using the Console Window and Debugging in Nada. Learning Objectives Reading and Writing to the Console Window Basics of print debugging Learn the basics of String manipulation Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSprite Command : Add Resource Create a NadaScript resource using the Component template template and name it MyBehavior Select : Sprite object In the Properties Window Rename it to Square Add Component : MyBehavior Console Window The Console Window is where the engine and your game may print messages to help you keep track of the logic being performed. It serves as a very helpful tool in identifying when and where the game performs differently than intended. Let's examine it: With the Zilch Editor in focus Press : ``` NOTE: ``` is right under Esc By default, you'll notice the Console Window sliding up from the bottom; it will display information provided by the engine regarding loading of the project, running the game and more. Printing to Console Displaying messages on the Console Window is not exclusive to the editor; users are also able to print messages to aid in keeping track of the logic performed by the game and verify that it is following intended behavior. Add the following code to the Initialize scope of the MyBehavior resource NadaScript: Console.WriteLine(\"Hello World!\"); Console. - Accessing a globally visible Console class. WriteLine() - Invoking a function that lets us print to the console on a new line. \"Hello World!\" - Literal string of characters that will be printed to the console. ; - Indicates that we're done with instructions on this line of code. By adding this line of code we can see our message printed to the console when we play the game. Command : PlayGame NOTE: Within Console, you'll also find the function Write() which behaves similarly but does not display the following message on a new line. In addition to literals, we can also print variable values or even convert those values into string form to create more complex messages. Command : StopGame Printing Literals Add the following lines to the Initialize function in the MyBehavior resource NadaScript. Console.WriteLine(\"This is a String\"); Console.WriteLine(3); Command : PlayGame Command : StopGame Printing Variables Replace the previous lines of code with the following: Console.WriteLine(this.Owner.Transform.Translation); var lives : Integer = 3; Console.WriteLine(lives); Command : PlayGame Command : StopGame In this case, Zilch will convert the variable into a string and then print it to the console. Printing Compound Statements We can also get more informative messages by using compound console print statements: Replace the previous lines of code with the following: var lives : Integer = 3; Console.Write(\"Current value of lives: \"); Console.WriteLine(lives); Command : PlayGame Command : StopGame String Interpolation We can simplify the code from the previous example by using String Interpolation: Replace the previous lines of code with the following: var lives : Integer = 3; Console.WriteLine(\"Current value of lives: `lives`\"); Command : PlayGame Command : StopGame By putting a variable within grates ``` we indicate that we want to convert the variable's value to a string and print it at the specified location. Debugging One of the most common uses of console printing is to aid in finding problems with your code (commonly referred to debugging). While the use cases are countless, these are the most common ones: Identifying whether a variable has the intended value Notifying you when the code reaches an unintended state Assessing whether a function is getting invoked Verifying return values from functions Verifying that your code behaves as intended is a critical part of programming and its importance can hardly be understated. Make sure to familiarize yourself and get plenty of practice applying these techniques. Related Materials Manual Components Nada User Documentation Functions Strings running the game Reference Classes Transform Sprite NadaScript Console Add Resource Commands PlayGame StopGame Tutorials CustomComponents Variables Functions"
  },
  "docs/zilch_editor_documentation/tutorials/scripting/customcomponents.html": {
    "href": "docs/zilch_editor_documentation/tutorials/scripting/customcomponents.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This tutorial covers how to create custom components and the basics of scripting in Nada. Learning Objectives Creating custom components Nada scripting basics Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSprite Creating Custom Components Until now, we have explored components built into Zilch Engine. These components are essential building blocks for your games, but you'll also need to write your own components to achieve the custom behavior your game needs. Command : Add Resource Create a NadaScript resource using the Component template template and name it MyComponent Once a component is created, we can add it to objects. Select : Sprite object In the Properties Window Add Component : MyComponent Adding the MyComponent component in the Properties Window WARNING: It is common, especially among beginners, to forget to add a component to an object. Make sure to verify that you have accomplished this step if an object isn't behaving as expected. NOTE: You can click the icon next to a custom component's name in the Properties Window to access that component's NadaScript resource. Basic Scripting with Nada Upon the creation of a NadaScript, Zilch Engine will open that resource in a new tab: a text editor where you can include all the necessary logic for your component. Let's take a look at what the Component template template gives us: NOTE: If you are new to scripting, this series of tutorials marked with #beginner_ii will cover the basics of scripting in Nada within the Zilch Engine. That said, a lot of the concepts we'll cover are common to many other programming languages, and you may benefit from reading up on other programming resources targeted at beginners. Classes A class is an abstract entity that is responsible for a specific set of tasks. Notably, a class has two primary purposes: storing data and manipulating data. Let's look closely at the very first line of our script: The MyComponent script, line 1 The first keyword class indicates that we are providing the definition of a class. Notice that this keyword is highlighted in blue. Zilch Engine will highlight specific keywords that it recognizes as having significance in the Nada language, which can be very useful for understanding how the engine is interpreting the script. Next, we have MyComponent, which is the name we gave this script, confirming that it is the identifier we wish to assign to this class. It is worth mentioning that all classes must have a unique name, and you cannot use names already used by Zilch Engine. Next, we have : Nada Component. The colon : token is an important one within Nada, and can be interpreted to mean \"of type\". In this case, we have a class named MyComponent that is of type NadaComponent. NadaComponent is a very commonly used class type, and examples of it will be featured extensively here and in later tutorials. Lastly, on lines 2 and 11 we have the curly brace symbols { and }. These symbols denote that our class definition is confined to the space between them, which is called the class's scope, and all details pertaining to a class have to be described within it. NOTE: For stylistic and organizational purposes, it is common to indent (put spaces or tabs in front of) lines within a scope. This is done to improve the readability and allow the reader to more easily see what's contained within the scope. Initialize Next is the Initialize function. While functions will be covered in more detail in a later tutorial, what you need to know now is that Initialize is a special function on components that is invoked (executed) immediately after the object is created. When Initialize is invoked, all code within its scope will be executed in sequence. In the MyComponent script Add the following to the Initialize function in the MyComponent class: this.Owner.Sprite.VertexColor = Real4(1,0,0,1); Your code should look like this: The MyComponent class, updated Command : PlayGame The Sprite object has turned red These instructions are telling the owner of this component (the Sprite object object) to set its Sprite component's VertexColor property to red. This topic will be covered in more detail in the Variables tutorial. Command : StopGame Code Comments You may have noticed an interesting line within the scope of the Initialize function: MyComponent, line 5 This line is actually a piece of functionality that has been \"commented out\". In Nada, you can write comments in code by using the // token. This causes that token and everything on the line after it to be considered a comment that has no effect on the program's behavior. While comments are very useful to write descriptions and explanations of the functionality of your code, another useful utility is to apply them to temporarily toggle functionality off by commenting lines of code out. NOTE: You can use Ctrl + K to quickly comment blocks of code in or out. Here we have an event connection that has been commented out. The details of events and connections are covered in a later tutorial; just know for now that line 5 is what makes the OnLogicUpdate function get called every frame. In the MyComponent script Uncomment the LogicUpdate event connection by removing the // from it: NOTE: Another way of defining comments is to use the /* and */ tokens. This will cause everything between the two tokens to be considered a comment, which can be used to create multi-line comments. LogicUpdate Once the event connection is established (typically done in Initialize), the component is ready to receive LogicUpdate events from the Engine. This allows the component to execute instructions every frame for as long as the connection exists. LogicUpdate can be a good place to listen for input and respond accordingly, or to manage persistent behaviors, such as a character's artificial intelligence. In the MyComponent script Add the following to the OnLogicUpdate function in the MyComponent class: this.Owner.Transform.Translation += Real3(0.1, 0.0, 0.0); This is what your code should look like: Command : PlayGame The Sprite object now moves to the right The instruction we just added causes the object to move to the right just slightly, but since our code is running every frame, it causes our Sprite object object to move all the way to the right. Command : StopGame Related Materials Tutorials variables Manual nada_in_zilch commands resourceadding selectobject addremovecomponent Reference Commands NewProject CreateSprite PlayGame StopGame Classes sprite transform Events LogicUpdate"
  },
  "docs/zilch_editor_documentation/tutorials/scripting/debugdrawing.html": {
    "href": "docs/zilch_editor_documentation/tutorials/scripting/debugdrawing.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "Learning Objectives Drawing debug primitives Often when developing a game we may we run into data that is hard to interpret from just printing to the console. Values such as Velocity or the direction a Cog is facing are better represented visually than by numerical values. DebugDraw objects are a useful debuging technique that allows us to draw simple primitives to visually represent data in the game itself. Level Setup Command : New Project Command : CreateCube In the Properties Window Under Transform Set Translation to [0, -2, 0] Set Scale to [20, 1, 1] Remove Component : RigidBody Command : Add Resource Create a NadaScript resource using the Component template template and name it DebugLauncher Update the DebugLauncher class to the following: class DebugLauncher : NadaComponent { [Dependency] var RigidBody : RigidBody; [Dependency] var Transform : Transform; [Property] var Camera : CogPath = CogPath(); var Drawing : Boolean = false; var Target : Real3; var TargetLine : DebugLine = DebugLine(); function Initialize(init : CogInitializer) { this.TargetLine.Color = Colors.Red; Zilch.Connect(this.Space, Events.MouseDown, this.OnMouseDown); Zilch.Connect(this.Space, Events.MouseUp, this.OnMouseUp); Zilch.Connect(this.Space, Events.FrameUpdate, this.OnFrameUpdate); } function OnMouseDown(event : ViewportMouseEvent) { Console.WriteLine(\"Drawing\"); this.Drawing = true; } function OnMouseUp(event : ViewportMouseEvent) { Console.WriteLine(\"Not Drawing\"); this.Drawing = false; this.RigidBody.Velocity = this.Target - this.Transform.Translation; } function OnFrameUpdate(event : UpdateEvent) { if(!this.Drawing) return; var mouseScreenPos = Zilch.Mouse.ClientPosition; var mouseWorldPos = this.Camera.CameraViewport.ScreenToWorldZPlane(mouseScreenPos, 0.0); this.Target = mouseWorldPos; } } Notice we use FrameUpdate as opposed to LogicUpdate. Generally, debug drawing should still occur when a TimeSpace is paused, and FrameUpdate is sent every frame, whether a space is paused or not. Command : CreateSphere Add Component : DebugLauncher In the Properties Window Under DebugLauncher Set Camera to GameCamera object Command : PlayGame Click + Hold and Release around on the screen above the platform NOTE: The yellow circle overlaying the cursor is added to the image by the screen-capture program after it is captured to indicate when the mouse button is down. We can see when the mouse button is released that the velocity of the ball is set and the ball launches towards the cursor position. This is a prime example of a physics-based behavior that can be hard to debug or tune without further visual assistance. Command : StopGame DebugLine One of the most common debug draw type is DebugLine, which is actually a line segment as it has start and end points. Add the following to the DebugLauncher class: function DrawDebug() { this.TargetLine.Start = this.Transform.Translation; this.TargetLine.End = this.Target; DebugDraw.Add(this.TargetLine); } Here we configure the debug line for the current frame by setting a start and end point for the segment. The final line of code DebugDraw.Add(this.TargetLine); adds this.TargetLine to a list of debug objects which should be drawn that frame. This means that debug object must be passed to DebugDraw.Add each frame they should be drawn. Add the following to the OnFrameUpdate function in the DebugLauncher class: this.DrawDebug(); Calling our DrawDebug function every frame that the mouse is down allows our drawing of the line segment to be reactive to when we want to communicate the information about the launch velocity. Integrating debug drawing into functionality you are implementing is a fairly common task. Command : PlayGame Click + Hold and Release around on the screen above the platform Command : StopGame DebugCircle There are many types that can be debug drawn, as can be seen in the Related MaterialsDebugCircle, which will be used to make a clock. Command : Add Resource Create a NadaScript resource using the Component template template and name it DebugClock Update the DebugClock class to the following: class DebugClock : NadaComponent { [Dependency] var Transform : Transform; [Property] var ClockRadius : Real = 5.0; var Circle : DebugCircle = DebugCircle(); function Initialize(init : CogInitializer) { this.Circle.Position = this.Transform.Translation; this.Circle.Radius = this.ClockRadius; this.Circle.Color = Colors.Blue; Zilch.Connect(this.Space, Events.FrameUpdate, this.OnFrameUpdate); } function OnFrameUpdate(event : UpdateEvent) { this.DrawClockFrame(); } function DrawClockFrame() { DebugDraw.Add(this.Circle); } } Command : CreateTransform Add Component : DebugClock Command : PlayGame We can see the DebugCircle being drawn in the background now. Just like we set the color of the line we can set the color of the circle. Command : StopGame Add the following to the DebugClock class: [Property] var SecondHandRadius : Real = 3.0; [Property] var MinuteHandRadius : Real = 4.0; [Property] var StartAngleOffset : Real = 90.0; [Property] var CounterClockWise : Boolean = false; var MinuteHand : DebugLine = DebugLine(); var SecondHand : DebugLine = DebugLine(); var Timer : Real = 0.0; var Minutes : Real = 0; var Seconds : Real = 0; Here we define the data necessary to draw the hands of the clock. Replace the Initialize function in the DebugClock class with the following: function Initialize(init : CogInitializer) { this.SecondHand.Start = this.Transform.Translation; this.SecondHand.Color = Colors.Red; this.MinuteHand.Start = this.Transform.Translation; this.MinuteHand.Color = Colors.Green; this.Circle.Position = this.Transform.Translation; this.Circle.Radius = this.ClockRadius; this.Circle.Color = Colors.Blue; Zilch.Connect(this.Space, Events.FrameUpdate, this.OnFrameUpdate); } Unlike the DebugLauncher the start position of the lines are not changing so we can set up the start position of all the debug elements in Initialize. Now that the initial data has been defined let's implement the calculations for the rest or the line data. Add the following to the functions in the DebugClock class: function DrawSecondHand() { //Calculate what percentage of the current minute has passed this.Seconds = this.Timer % 60.0; var percCurrentMin = this.Seconds / 60.0; //Calculate the angle of the seconds hand var angle = (2*Math.Pi) * percCurrentMin; if(!this.CounterClockWise) angle *= -1.0; //Offset the starting angle so the hand starts at the top of the clock angle += Math.ToRadians(this.StartAngleOffset); var dir = Real3(Math.Cos(angle), Math.Sin(angle), 0.0); //Calculate the endpoint of the seconds hand line segment based off the calculated angle this.SecondHand.End = this.Transform.Translation + (dir * this.SecondHandRadius); DebugDraw.Add(this.SecondHand); } function DrawMinuteHand() { //Calculate what percentage of the current hour has passed this.Minutes = this.Timer / 60.0; var perc = this.Minutes / 60.0; //Calculate the angle of the minutes hand var angle = (2*Math.Pi) * perc; if(!this.CounterClockWise) angle *= -1.0; //Offset the starting angle so the hand starts at the top of the clock angle += Math.ToRadians(this.StartAngleOffset); var dir = Real3(Math.Cos(angle), Math.Sin(angle), 0.0); //Calculate the endpoint of the minute hand line segment based off the calculated angle this.MinuteHand.End = this.Transform.Translation + (dir * this.MinuteHandRadius); DebugDraw.Add(this.MinuteHand); } Every frame we need to call the function we just wrote to draw each part of the clock as well as increment the timer. Replace the OnFrameUpdate function in the DebugClock class with the following: function OnFrameUpdate(event : UpdateEvent) { this.DrawSecondHand(); this.DrawMinuteHand(); this.DrawClockFrame(); this.Timer += event.Dt; } Command : PlayGame Watch the clock Here we see the clock in motion at different point in it's cycle Command : StopGame Now we know how to debug draw simple objects. Let's look at a more complicated built-in example. VortexEffect Command : CreateTransform In the Properties Window Add Component : VortexEffect Under Transform Set Translation to [0,5,0] Under VortexEffect Set VortexAxis to [0,0,1] Here is an example of a built-in debug draw effect in action. You actually see debug drawing everytime you use and editor tool; PhysicsEffect components just offer a more complex example. In the case of the VortexEffect multiple DebugArc objects are drawn indicating the direction and speed of the vortex, while DebugLine objects are used to show that the component is pulling objects into the vortex as opposed to throwing them out. Related Materials Manual Command Add Resource Add Component Remove Component Tutorial PhysicsEffects Reference Classes Cog Console RigidBody DebugArc DebugBox DebugCapsule DebugCircle DebugCone DebugCylinder DebugFrustum DebugLine DebugLineCross DebugObb DebugSphere DebugText DebugTriangle VortexEffect Commands New Project CreateTransform CreateCube PlayGame StopGame Development Task T1343"
  },
  "docs/zilch_editor_documentation/tutorials/scripting/events.html": {
    "href": "docs/zilch_editor_documentation/tutorials/scripting/events.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "Events are the main way that Cogs and components communicate to each other in the Zilch Engine. Often a component has information it needs to communicate to other components, one of the most flexible ways to do so is to package the information into an Event and then dispatch the event on an object. Then, any components that need the information can �listen� for the event to be dispatched, accessing that information in a special callback function. There are two types of events in the Zilch Engine: built-in events and custom events. This lesson will cover built-in events while the next lesson will go over custom events. Learning Objectives The LogicUpdate Event CollisionEvents Destruction events Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Select : LevelSettings object In the Properties Window Remove Component : gravityeffect Remove Component : drageffect Command : CreateSprite In the Properties Window Rename Sprite object to Player Under Sprite Set VertexColor to [R:0, G:170, B:255, A:1.00] Add Component : RigidBody Add Component : BoxCollider Command : Add Resource Create a NadaScript resource using the Component template template and name it PlayerMovement To get our player moving around we'll be using LogicUpdate, an updateevent that is dispatched on the space object every frame. Movement can be easily added by polling which Keys are currently being pressed, if any, and updating the velocity of the object based on the keypress. Update the PlayerMovement script to the following: class PlayerMovement : NadaComponent { [Dependency] var RigidBody : RigidBody; [Property] var MoveRight : Keys = Keys.D; [Property] var MoveLeft : Keys = Keys.A; [Property] var MoveUp : Keys = Keys.W; [Property] var MoveDown : Keys = Keys.S; [Property] var MoveSpeed : Real = 5; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var movement : Real3 = Real3(); if(Zilch.Keyboard.KeyIsDown(this.MoveRight)) movement += Real3.XAxis; if(Zilch.Keyboard.KeyIsDown(this.MoveLeft)) movement -= Real3.XAxis; if(Zilch.Keyboard.KeyIsDown(this.MoveDown)) movement -= Real3.YAxis; if(Zilch.Keyboard.KeyIsDown(this.MoveUp)) movement += Real3.YAxis; this.RigidBody.Velocity = movement * this.MoveSpeed; } } Add Component : PlayerMovement Command : PlayGame Command : StopGame LogicUpdate is the event and this.OnLogicUpdate is the event callback function. A callback function is a function passed as an argument into another function, with the expectation that it will be called in response to something. An event callback function (in this case, this.OnLogicUpdate) is the function that is called every time a component (in this case, PlayerMovement) that is connected to some event (in this case, LogicUpdate) hears that the event has occurred (which is every frame in this instance). As OnLogicUpdate is called every frame, seamless movement can be achieved by updating the movement vector of the Cog within that function. Event Connections Connecting to an event involves both calling the Zilch.Connect function and creating the appropriate callback function. Let's look at the call to the Connect function first, parameter by parameter: Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); Example Value Parameter Type Description this.Space Object The object onto which the event will be dispatched. Events.LogicUpdate string The name of the event. this.OnLogicUpdate Delegate The callback function for the event. The callback function must take a parameter whose type matches the type of the event that you are connecting to. Now let's take a look at the callback function: function OnLogicUpdate(event : UpdateEvent) Example Value Parameter Type Description event updateevent An event whose type matches the type included with the declaration of the event name. Note that LogicUpdate is already declared to use an UpdateEvent; however, we can also declare our own events in Nada. When we do declare our own, we then specify the the types of events they will use (whether it's a pre-existing event or a custom event we make ourselves, as will be seen in the next lesson). As we will see, there are many types of events that may be connected to, starting with built-in events that are engine-constructed. Built-In Events Built-in events are provided for you ready to connect. They are always dispatched by the engine under a consistent and specific context. Examples of built-in events include mouseevent, keyboardevent, and soundevent. We've already seen the LogicUpdate event; now let's check out how some other built-in events can be used. Collision Events There are three main Collision events: CollisionStarted, CollisionPersisted, and CollisionEnded. When an object with a collider comes into contact with another collider, a CollisionStarted event is created by the physics engine and is dispatched that frame on both objects involved in the collision. In the following frames, if the object's colliders are still in contact, the CollisionPersisted event is dispatched on the objects. The first frame the colliders are no longer in contact the CollisionEnded event is dispatched on both objects. To demonstrate a Collision event, let's make a simple enemy sprite: Command : CreateSprite In the Properties Window Rename Sprite object to Enemy Under transform Set Translation to [4, 0, 0] Under Sprite Set VertexColor to [R: 255, G: 0, B: 0, A;1.00] Set SpriteSource enum to Circle Add Component : BoxCollider Now we need to create another component that will destroy the player cog in response to the collision event. Command : Add Resource Create a NadaScript resource using the Component template template and name it DestroyOnCollide Update the DestroyOnCollide script to the following: class DestroyOnCollide : NadaComponent { function Initialize(init : CogInitializer) { Zilch.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted); } function OnCollisionStarted(event : CollisionEvent) { this.Owner.Destroy(); } } Select : Player object Add Component : DestroyOnCollide Command : PlayGame Player cog being destroyed upon collision with an enemy cog. Command : StopGame Destruction Events Another useful built-in event is the CogDestroy event which is dispatched on a cog the frame its Destroy function is called. These can be used to add effects or to update the UI when the player or enemies have been destroyed. Let's create a component that will create a particle effect on the destruction of our player. Command : Add Resource Create a NadaScript resource using the Component template template and name it SpawnObjectOnDestroy Update the SpawnObjectOnDestroy script to the following: class SpawnObjectOnDestroy : NadaComponent { [Dependency] var Transform : Transform; [Property] var ArchetypeToSpawn : Archetype = Archetype.SpriteParticles; function Initialize(init : CogInitializer) { Zilch.Connect(this.Owner, Events.CogDestroy, this.OnCogDestroy); } function OnCogDestroy(event : ObjectEvent) { var object = this.Space.CreateAtPosition(this.ArchetypeToSpawn, this.Transform.Translation); var selectionIcon = object.SelectionIcon; if (selectionIcon != null) selectionIcon.Visible = false; } } Add Component : SpawnObjectOnDestroy Command : PlayGame Command : StopGame Now we can see the particle system object being created in our event response function. In the next tutorial, we will cover custom events, which are events you define and dispatch. Related Materials Tutorial gameobjects basiccomponents events_ii Manual commands selectobject resourceadding addremovecomponent Reference Class collisionevent gravityeffect drageffect sprite rigidbody BoxCollider updateevent zero mouseevent keyboardevent soundevent objectevent Command NewProject CreateSprite PlayGame StopGame Event LogicUpdate CollisionStarted CollisionPersisted CollisionEnded CogDestroy Enums Keys Nada Base Types string Development Task T781"
  },
  "docs/zilch_editor_documentation/tutorials/scripting/events_ii.html": {
    "href": "docs/zilch_editor_documentation/tutorials/scripting/events_ii.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This tutorial covers custom events in Zilch Engine. Learning Objectives Custom events The sends keyword Event dispatching Custom event data While the most common events are built in, there are times when you will need to create your own events based on things that happen within your own game logic. They are especially useful if multiple components connect to the same event, causing multiple unique responses. This tutorial continues with the project started in the previous Events tutorial. Level Setup Reopen the Events zero project project from the previous tutorial Declaring Custom Events Just as instances of the class CollisionEvent are dispatched with multiple event IDs (CollisionStarted, CollisionPersisted, CollisionEnded), you may register an event class as multiple custom events. Data may be sent along with a custom event (using a custom event class, discussed below), but this isn't always necessary; if no data is needed, the event can just use the type NadaEvent. The sends Keyword Command : Add Resource Create a NadaScript resource using the Component template template and name it CreateObjectOnInput Update the CreateObjectOnInput script to the following: class CreateObjectOnInput : NadaComponent { sends CreateObject : NadaEvent; [Property] var CreateObjectKey : Keys = Keys.Space; var CooldownTimer : Real = 0; var CooldownDuration : Real = 0.25; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { this.CooldownTimer -= event.Dt; if (this.CooldownTimer <= 0) { this.CooldownTimer = 0; if (Zilch.Keyboard.KeyIsDown(this.CreateObjectKey)) { this.Owner.DispatchEvent(Events.CreateObject, NadaEvent()); this.CooldownTimer = this.CooldownDuration; } } } } Select : Player object In the Properties Window Add Component : CreateObjectOnInput The first part of this script that should be new is the line with the sends keyword. If you recall from the previous events tutorial, the second parameter in the Zilch.Connect function is a String ID that identifies the event. The sends keyword defines this ID, and also declares the event type the custom event will use: sends EventId : EventType; ...where EventId is a string value that is added to the Events namespace, where it can be found under the same name, and EventType is the event class type that is registered with the new event ID. In our case, Events.CreateObject equals the string \"CreateObject\", which is registered with the event type NadaEvent. (NOTE) Why Use sends? It's not strictly necessary to register custom events with sends. So why bother? There are two main benefits. The first is that they will show up in code completion, saving you from time-consuming typos. The second is that it allows you to use event connection auto-complete functionality just like any other event. That is, if you type Zilch.Connect(this.Owner, Events.MyEvent, in a function and press the Tab key following the comma after the second argument, the event connection code will complete itself, and a callback function will automatically be generated directly beneath the function scope the connection is made in. Dispatching Custom Events The next relevant line is where the CreateObject event is dispatched: this.Owner.DispatchEvent(Events.CreateObject, NadaEvent()); Let's look at the DispatchEvent function's parameters. Sample Value Parameter Type Description Events.CreateObject string The event identifier NadaEvent() NadaEvent The event to be dispatched This function dispatches an event to this.Owner. Dispatching events to this.Owner is a common way for one component to communicate with other components on the same object. In this case, we're dispatching a NadaEvent with the ID Events.CreateObject. Before creating the component that will connect to this event, we need to create a projectile archetype that can be spawned as long as the key to create an object is down. Command : CreateSprite In the Properties Window Rename Sprite object to Projectile Set Archetype to Projectile Under transform Set Scale to [0.35, 0.35, 0.35] Under Sprite Set VertexColor to [R:0, G:255, B:0, A:1.00] Set SpriteSource enum to Circle Add Component : SphereCollider Add Component : RigidBody Upload to Archetype The completed Projectile object Command : Delete Now we can create the component that will spawn and set the velocity of the object from the player when it \"hears\" the SpawnObject event. Responding to Custom Events Command : Add Resource Create a NadaScript resource using the Component template template and name it SpawnObjectWithVelocity Update the SpawnObjectWithVelocity script to the following: class SpawnObjectWithVelocity : NadaComponent { [Dependency] var Transform : Transform; [Property] var ArchetypeToSpawn : Archetype = Archetype.Projectile; [Property] var Direction : Real3 = Real3.XAxis; [Property] var Speed : Real = 25; function Initialize(init : CogInitializer) { Zilch.Connect(this.Owner, Events.CreateObject, this.OnCreateObject); } function OnCreateObject(event : NadaEvent) { var obj = this.Space.CreateAtPosition(this.ArchetypeToSpawn, this.Transform.Translation); obj.RigidBody.Velocity = this.Direction * this.Speed; } } Select : Player object In the Properties Window Add Component : SpawnObjectWithVelocity In the Initialize function, we connect to the CreateObject event just like any of the built-in events we've connected to previously. We also need to add our DestroyOnCollide component to the enemy so that the projectiles will destroy it. Select : Enemy object In the Properties Window Add Component : DestroyOnCollide Command : PlayGame Hold key the Space bar to fire Command : StopGame Well, that didn't behave how we wanted it to. Here's what happened: first, the projectile was spawned at the player's position. Then, since both player and projectile have colliders, they collided. In response to the CollisionStarted event, the player's DestroyOnCollide component caused the player to destroy itself. To fix this, we can make a simple change to our DestroyOnCollide component that will make use of Archetype checking within the OnCollisionStarted callback function. (We'll also make it so that the projectile is destroyed in the process.) Update the DestroyOnCollide script to the following: class DestroyOnCollide : NadaComponent { [Property] var CollisionArchetype : Archetype = Archetype.Projectile; function Initialize(init : CogInitializer) { Zilch.Connect(this.Owner, Events.CollisionStarted, this.OnCollisionStarted); } function OnCollisionStarted(event : CollisionEvent) { if(event.OtherObject.Archetype == this.CollisionArchetype) { this.Owner.Destroy(); event.OtherObject.Destroy(); } } } Now we can check to see what we're colliding with, and whether it's the correct object. If it is, we destroy not only the object with this component, but also the one it collided with. Select : Enemy object In the Properties Window Set Archetype to Enemy Select : Player object In the Properties Window Under DestroyOnCollide Set CollisionArchetype enum to Enemy Command : PlayGame Hold key the Space bar to fire Command : StopGame Now we can move on to defining your own custom event class, which will allow you to specify and set the data to be sent with the event. Custom Event Classes Sometimes it's necessary to create your own custom event class that contains data relevant to the situation in which it's dispatched. To demonstrate this, we'll create an event class that contains a data member that determines whether the created object should move fast or slow. To start, we need to define our own event class that inherits from NadaEvent. Add the following to the top of the CreateObjectOnInput script: class ObjectCreationEvent : NadaEvent { sends CreateObject : ObjectCreationEvent; var ObjectShouldBeFast : Boolean; } Note that this custom event class uses the sends keyword, registering CreateObject as the event name for a custom event. Previously, this appeared in the CreateObjectOnInput class, where it registered that same event ID with the NadaEvent class. (Now that we're changing CreateObject to use this new ObjectCreationEvent class, we should remove the sends declaration from CreateObjectOnInput.) Now let's update the CreateObjectOnInput component to use the new event type. In the CreateObjectOnInput script Update the CreateObjectOnInput class to the following: class CreateObjectOnInput : NadaComponent { [Property] var CreateObjectKey : Keys = Keys.Space; [Property] var FastObjectKey : Keys = Keys.Shift; var CooldownTimer : Real = 0; var CooldownDuration : Real = 0.25; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { this.CooldownTimer -= event.Dt; if (this.CooldownTimer <= 0) { this.CooldownTimer = 0; if (Zilch.Keyboard.KeyIsDown(this.CreateObjectKey)) { var objectCreationEvent = ObjectCreationEvent(); objectCreationEvent.ObjectShouldBeFast = Zilch.Keyboard.KeyIsDown(this.FastObjectKey); this.Owner.DispatchEvent(Events.CreateObject, objectCreationEvent); this.CooldownTimer = this.CooldownDuration; } } } } We've removed the sends declaration, since we've moved it to the ObjectCreationEvent class. Also, instead of calling DispatchEvent with an unnamed instance of NadaEvent created right on the spot inside the function call, we create objectCreationEvent, an instance of our new event class. We set ObjectShouldBeFast to equal Zilch.Keyboard.KeyIsDown(this.FastObjectKey). The result is that if the FastObjectKey is down, the object will be fast. Now that we have our new event and have dispatched it, we'll need to update the component that is listening for the event. Update the SpawnObjectWithVelocity script to the following: class SpawnObjectWithVelocity : NadaComponent { [Dependency] var Transform : Transform; [Property] var ArchetypeToSpawn : Archetype = Archetype.Projectile; [Property] var Direction : Real3 = Real3.XAxis; [Property] var SlowSpeed : Real = 10; [Property] var FastSpeed : Real = 25; function Initialize(init : CogInitializer) { Zilch.Connect(this.Owner, Events.CreateObject, this.OnCreateObject); } function OnCreateObject(event : ObjectCreationEvent) { var obj = this.Space.CreateAtPosition(this.ArchetypeToSpawn, this.Transform.Translation); if (event.ObjectShouldBeFast) obj.RigidBody.Velocity = this.Direction * this.FastSpeed; else obj.RigidBody.Velocity = this.Direction * this.SlowSpeed; } } Notice that the parameter for OnCreateObject is now of type ObjectCreationEvent instead of NadaEvent. The parameter for an event callback function must always match the type of event it is responding to. The event argument is then used to access the Boolean data member, which determines the speed of the object that is spawned. Command : PlayGame Hold key the Space bar to fire Command : StopGame Related Materials Tutorial gameobjects basiccomponents events Manual commands launchernewproject resourceadding selectobject keywords Upload to Archetype addremovecomponent Reference Classes collisionevent NadaEvent cog transform sprite spherecollider rigidbody Commands CreateSprite Delete PlayGame StopGame Events CollisionStarted CollisionPersisted CollisionEnded Nada Base Types string boolean Development Task T1281"
  },
  "docs/zilch_editor_documentation/tutorials/scripting/functions.html": {
    "href": "docs/zilch_editor_documentation/tutorials/scripting/functions.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers the basics of using Functions in Nada. Learning Objectives Defining & calling functions Function parameters and return types Calling functions from different components Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSprite Command : Add Resource Create a NadaScript resource using the Component template template and name it MyBehavior In the Object Window Select : Sprite object In the Properties Window Rename Sprite object to Square Add Component : MyBehavior Custom Functions Functions are a sequence of logic statements that take a set of input variables with the goal of performing some operation. Functions are one of two main constructs within a class�the other being variables. Declaration Start declaring by typing function followed by a name and a pair parentheses: function Square() Parameters An important feature of functions is their ability to take literals and variables as input, referred to as parameters. These parameters are passed into the function to supply the data needed to complete the intended operation. They are declared within the function's parentheses by giving each a parameter name, followed by a type (ParamName : ParamType). function Square( number : Real ) NOTE: Functions can have any number of parameters (including none), each separated by a comma. These scenarios will be covered later. Scope Just like classes, functions have a defined scope within which all of its functionality is outlined. We denote the scope by adding a pair of curly braces. function Square( number : Real ) { } Return Value Some functions may provide a final result that can be returned back to the scope where it was invoked. These are called Return Types and are declared after the function's parentheses by typing colon : followed by the type to be returned. function Square( number : Real ) : Real { } NOTE: It is not necessary for a function to return anything, in such cases no return type needs to be specified. Body The body contains all the logic to be performed when the function is invoked. If the function has a Return Type, it is required to include a return statement within our function. function Square( number : Real ) : Real { return number * number; } Add the previous code block inside the MyBehavior class. Your code should look like this: Invoking Functions Now that we have created a function, it can be invoked elsewhere in code whenever the computations it provides are required. When invoking a function that exists within the same class you can simply type: this.Square(2.0); Similar to accessing variables, when invoking an external function we must first reference the class to whom it belongs: //Syntax used by an external code trying to invoke our function this.Owner.MyBehavior.Square(2.0); Inside the parentheses, we must then pass either a literal, a variable or an expression which evaluates to the required type of the parameter (as outlined by the function definition). If a function takes multiple parameters, they must each be passed to the function in order, separated by a comma. Return Values Once a function is invoked, all of the instructions outlined within its scope are invoked in sequence. Once a function reaches the end of its scope or a return statement, it will return control to the scope that invoked it along with the Return Value (if one was specified). Example: var pi : Real = 3.1415926; var piSquare : Real = this.Square(pi); //Print values to the console Console.WriteLine(\"Pi: `pi`\"); Console.WriteLine(\"Pi Square: `piSquare`\"); WARNING: Functions may use conditionals; however, when a Return Type is declared, all code paths within the function must lead to a return statement. It is common to have multiple return statements that return different values depending on the branching logic within the function. Here, Nada gives us an error since we haven't specified a return value should the variable DoMath be false. A solution to this problem might be: Related Materials Manual Components Nada User Documentation Functions Create a New 2D Project Tutorials CustomComponents Reference Classes Transform Sprite NadaScript Commands CreateSprite Add Resource"
  },
  "docs/zilch_editor_documentation/tutorials/scripting/loops.html": {
    "href": "docs/zilch_editor_documentation/tutorials/scripting/loops.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers loops in Nada scripting. Learning Objectives When and how to write loops while and for loops Looping keywords: continue and break Infinite loops Nested loops Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : Add Resource Create a NadaScript resource using the Component template template and name it LoopExamples In the LoopExamples NadaScript Replace the script's contents with the following: class LoopExamples : NadaComponent { function Initialize(init : CogInitializer) { } } In the Objects Window Select : LevelSettings object In the Properties Window Add Component : LoopExamples button Getting Started Recall the Square function from the Functions Tutorial. It takes a Real parameter, multiplies it by itself, and returns the result: function Square(number : Real) : Real { return number * number; } Thus, the returned result of Square(x) is equal to x squared. But what about x cubed? Here's another function: function Cube(number : Real) : Real { return number * number * number; } The result of Cube(x) equals x cubed. What about x to the fourth power, or the fifth, or the fifteenth? It would be impossible to write a function for every power to which a number could be raised. It is more practical to write a function that raises x to the y power, where y is another function parameter. This function multiplies a given number parameter by itself some variable number of times equal to a given exponent parameter. Let's begin writing an incomplete version of this function. In the LoopExamples NadaScript resource Add the following function to the LoopExamples class: function IncompletePower(number : Real, exponent : Integer) : Real { var result = 1.0; var multiplications = 0; // math goes here return result; } This function has a result variable that will be returned at the end, but not before repeatedly multiplying it by number. It uses the multiplications variable to keep track of how many times it has performed that multiplication. Now to fill in the math. Before each multiplication is done, if the number of multiplications is still less than the exponent passed into the function, then result gets multiplied by number again and again, checking each time. Add the following code to the IncompletePower function: function IncompletePower(number : Real, exponent : Integer) : Real { var result = 1.0; var multiplications = 0; if (multiplications < exponent) { result *= number; ++multiplications; } if (multiplications < exponent) { result *= number; ++multiplications; } if (multiplications < exponent) { result *= number; ++multiplications; } if (multiplications < exponent) { result *= number; ++multiplications; } // // etc...... // return result; } As its name implies, this function is incomplete, but it should work in some cases. Let's try it out, and compare it to Nada's built-in exponentiation operator. Add the following code to the Initialize function: function Initialize(init : CogInitializer) { Console.WriteLine(\"IncompletePower: `this.IncompletePower(2.0, 2)`, x ^ y: `2.0 ^ 2`\"); Console.WriteLine(\"IncompletePower: `this.IncompletePower(2.0, 3)`, x ^ y: `2.0 ^ 3`\"); Console.WriteLine(\"IncompletePower: `this.IncompletePower(2.0, 4)`, x ^ y: `2.0 ^ 4`\"); Console.WriteLine(\"IncompletePower: `this.IncompletePower(2.0, 5)`, x ^ y: `2.0 ^ 5`\"); Console.WriteLine(\"IncompletePower: `this.IncompletePower(2.0, 6)`, x ^ y: `2.0 ^ 6`\"); } Command : PlayGame IncompletePower: 4, x ^ y: 4 IncompletePower: 8, x ^ y: 8 IncompletePower: 16, x ^ y: 16 IncompletePower: 16, x ^ y: 32 IncompletePower: 16, x ^ y: 64 Command : StopGame The function works as intended if the desired power is small enough, but it will always return the same result for exponent values of 4 and above. To accommodate for larger powers, the if block could be copied and pasted in additional times. That's a bad idea, though: the function would have to grow to a preposterous length for it to work with large powers. What this problem really needs is a loop. What is a Loop? A loop is a block of code that runs multiple times. Normally, when a program runs, the computer executes each line of code in the program exactly once, in order. Code written in a loop, however, runs repeatedly, in some cases with slight variations from one iteration to the next. There are several reasons to use loops. First of all, they serve the central tenet in programming that one should avoid writing the same code multiple times whenever possible. Second, changing a single loop is easier than making the same change to several repeated blocks of code. Third, loops are more visually compact and usually result in smaller file sizes. Finally, there are some problems that are nearly impossible to solve without loops. Nada recognizes several different kinds of loops; this lesson will cover two of the most common kinds. While Loops Figure 1: the anatomy of a while loop A while loop includes a loop condition and a //loop body//. The loop condition is a Boolean expression (that is, an expression that evaluates to a Boolean, regardless of the types it contains), and the loop body is zero or more statements. When a while loop is executed... The loop condition is evaluated. If it equals true... The loop body is run. Then the loop condition is checked again. If it still equals true, the loop body runs again, and so on. As long as the condition remains true, the body is repeatedly run. Take another look at the IncompletePower function. Note that the if block is perfectly duplicated again and again, each time incrementing a variable and then checking that variable to determine whether it should run its contents. This is exactly what a while loop does, so rewriting this function to use a while loop should be very easy. Add the following function to the LoopExamples class: function WhileLoopPower(number : Real, exponent : Integer) : Real { var result = 1.0; var multiplications = 0; while (multiplications < exponent) { result *= number; ++multiplications; } return result; } Let's test this new version of the function. Replace the contents of the Initialize function with the following code: function Initialize(init : CogInitializer) { Console.WriteLine(\"WhileLoopPower: `this.WhileLoopPower(5.0, 6)`, x ^ y: `5.0 ^ 6`\"); Console.WriteLine(\"WhileLoopPower: `this.WhileLoopPower(Math.Pi, 7)`, x ^ y: `Math.Pi ^ 7`\"); Console.WriteLine(\"WhileLoopPower: `this.WhileLoopPower(0.1, 16)`, x ^ y: `0.1 ^ 16`\"); } Command : PlayGame WhileLoopPower: 15625, x ^ y: 15625 WhileLoopPower: 3020.29, x ^ y: 3020.29 WhileLoopPower: 1e-16, x ^ y: 1e-16 Command : StopGame The results match. Of course, WhileLoopPower still has some severe limitations when compared to Nada's exponentiation operator, perhaps the largest of which being that its exponent values must be nonnegative Integers. Infinite Loops Let's look again at the loop inside the WhileLoopPower function: while (multiplications < exponent) { result *= number; ++multiplications; } This runs over and over again, as long as multiplications is less than exponent. multiplications does eventually reach exponent, because it gets incremented with the ++ operator every loop iteration. What would happen if that didn't occur? Update the WhileLoopPower function with the following change: function WhileLoopPower(number : Real, exponent : Integer) : Real { var result = 1.0; var multiplications = 0; while (multiplications < exponent) { result *= number; //++multiplications; } return result; } Command : PlayGame The editor hangs for a few moments, and then an exception is thrown: //Figure 2: infinite loop timeout. The error message reads: //Exceeded the allowed execution time of 5 second(s). Use the timeout statement to increase allowed time Since the ++multiplications statement has been commented out, the while loop's loop condition will always be true. Such a loop is called an infinite loop, or an unconditional loop. This is generally undesireable behavior. Command : StopGame Infinite loops are dangerous if handled improperly. Zilch has timeout functionality to catch infinite loops, but at best, they will still throw an error and halt the game. (Other software might not be so forgiving.) Be aware that a simple mistake could lead to an infinite loop! Let's move on to another kind of loop. For Loops A while loop is simple: if the loop condition is true, the loop body continues to run; when it becomes false, it stops. The loop condition is usually dependent on some variable that was introduced earlier, and the loop body typically contains code that will eventually cause the loop condition to become false, thus breaking the loop so that the flow of the program can continue. There is another kind of more specialized loop that builds some of these common elements into its syntax: the for loop. Figure 3: the anatomy of a for loop A for loop contains a loop condition// and a //loop body// just like a while loop, but it also has an //initialization statement and an //update statement//. When a for loop is run... The initialization statement is executed once at the beginning. The initialization statement is usually used to declare a variable, known as an //iteration index//, or just an //index//, that typically appears in the loop condition. Then the loop condition is checked. As in a while loop, if the loop condition equals true... The loop body runs next. After the loop body runs, the update statement is executed. The update statement is usually used to increment the index � typically taking it one step closer to making the loop condition become false. Then the loop condition is checked again. If it still equals true, the loop body executes again, and so on. As long as the condition remains true, the body is repeatedly run, and the update statement is executed at the end of each iteration. Let's write a new version of WhileLoopPower that uses a for loop instead of a while loop. Add the following function to the LoopExamples class: function ForLoopPower(number : Real, exponent : Integer) : Real { var result = 1.0; for (var multiplications = 0; multiplications < exponent; ++multiplications) { result *= number; } return result; } Compared to the while loop from before: the loop condition remains unchanged the loop body remains unchanged, except... the ++multiplications expression has moved to the update statement the declaration of the multiplications variable has moved to the initialization statement Let's test the new function with the same arguments that were supplied to the old one. Update the Initialize function with the following changes: function Initialize(init : CogInitializer) { Console.WriteLine(\"ForLoopPower: `this.ForLoopPower(5.0, 6)`, x ^ y: `5.0 ^ 6`\"); Console.WriteLine(\"ForLoopPower: `this.ForLoopPower(Math.Pi, 7)`, x ^ y: `Math.Pi ^ 7`\"); Console.WriteLine(\"ForLoopPower: `this.ForLoopPower(0.1, 16)`, x ^ y: `0.1 ^ 16`\"); } Command : PlayGame ForLoopPower: 15625, x ^ y: 15625 ForLoopPower: 3020.29, x ^ y: 3020.29 ForLoopPower: 1e-16, x ^ y: 1e-16 Command : StopGame It's still the same as before. In general, any for loop can be rewritten as a while loop, and vice versa. So, what happens if a loop is written inside another loop? Nested Loops Let's write a function that draws boxes in the console. Add the following function to the LoopExamples class: function DrawBoxes(count : Integer) { for (var i = 0; i < count; ++i) { Console.Write(\"[]\"); } Console.WriteLine(); } DrawBoxes takes an Integer argument and draws that many boxes to the console. A few remarks: the index of a for loop is conventionally named i the body of the loop calls Console.Write instead of Console.WriteLine so that more than one box can be drawn on the same line after the end of the loop, Console.WriteLine is called with no arguments, just to write a newline to the console. This way, the next time something is printed, it will appear on the next line down instead of on the same line as the boxes Let's try it out. Replace the contents of the Initialize function with the following code: function Initialize(init : CogInitializer) { this.DrawBoxes(10); } Command : PlayGame [][][][][][][][][][] Everything seems to be in order, but regardless of what number is passed into the function, all the boxes will always be drawn on the same line. In order to create multiple rows of boxes, the DrawBoxes function should employ another looping concept, called a nested loop. Command : StopGame The DrawBoxes function, as it exists right now, already does a perfectly good job of drawing a single row of boxes. The only modification it needs is to make its contents run several times. And what is a good way to make code run several times? Of course, it's a loop. A nested loop is a loop written inside the body of another loop. Nested loops are often used in multi-dimensional tasks, such as drawing a 2D grid of boxes. Add the following function to the LoopExamples class: function DrawBoxesInGrid(columns : Integer, rows : Integer) { var totalBoxesDrawn = 0; for (var i = 0; i < rows; ++i) { for (var j = 0; j < columns; ++j) { Console.Write(\"[]\"); ++totalBoxesDrawn; } Console.WriteLine(); } Console.WriteLine(\"Total boxes drawn: `totalBoxesDrawn`\"); } A few remarks: in a nested loop, it is customary to use i for the index of the outer loop and j for the index of the inner loop the entire contents of the function as written before have been placed inside the outer loop also, for reference purposes, the function now keeps track of how many boxes have been drawn, and prints the number at the end The key thing to understand here is that in each iteration of the outer loop, the inner loop runs anew in its entirety. When a nested for loop runs... The outer initialization statement is executed once at the beginning of the outer loop. Then the outer loop condition is checked. If it equals true... The outer loop body runs. The outer loop body contains the inner loop. The inner initialization statement is executed once at the beginning of the inner loop. Then the inner loop condition is checked. If it equals true... The inner loop body runs. Then the inner update statement is executed. Then the inner loop condition is checked again, and if it equals true, the inner loop continues to run until it is complete. When the inner loop completes, every variable declared within its scope is cleaned up, //including anything declared in its initialization statement//. Then the outer update statement is executed. Then the outer loop condition is checked again, and if it equals true... The outer loop body runs. The outer loop body contains the inner loop. The inner initialization statement is executed again, because it is now the beginning of the inner loop again. Anything that was initialized here before fell out of scope and was cleaned up at the end of the inner loop, so it can be declared anew with the same identifier name. Then the inner loop condition is checked again, and the inner loop continues to run until it is complete. Then the outer update statement is executed again. Then the outer loop condition is checked again, and if it equals true, the nested loop continues to run in this manner until the outer loop is complete. Let's try out the function. Update the Initialize function with the following changes: function Initialize(init : CogInitializer) { this.DrawBoxesInGrid(8, 4); } Command : PlayGame [][][][][][][][] [][][][][][][][] [][][][][][][][] [][][][][][][][] Total boxes drawn: 32 Four perfect rows of eight boxes each! Command : StopGame Loops can be nested arbitrarily deep: a 3D array of boxes, for example, would call for a loop within a loop within a loop, and if each box is also a container that can hold objects, still another loop could be used to populate each one. Loop Keywords There are two keywords that can be used to further control the execution flow through a loop: continue and break. Each of these statements is used to move the program flow to a different point, but it is important to remember that each of them functions only on the most nested loop scope in which it appears. Continue Figure 4: program flow controlled by continue The continue statement jumps the program flow forward to the very end of the body of the current loop iteration (in a for loop, just before the update statement is executed). Nothing between the continue statement and the end of the loop body is executed. Effectively, it skips ahead to the next iteration. Let's return to the DrawBoxes function. What if we want it to skip a given spot in the grid, not draw a box there, but leave it blank, and keep going afterward? This is a good task for the continue keyword. First off, the function needs to take two new Integer parameters, specifying the column-row coordinates of the box to skip, designated as skipX and skipY. Then, when the i value (counting the rows) matches the given skipY value and j (counting the columns) matches skipX, instead of drawing a box, the function should print a blank space and then continue. Add the following function to the LoopExamples class: function DrawBoxesWithGap(columns : Integer, rows : Integer, skipX : Integer, skipY : Integer) { var totalBoxesDrawn = 0; for (var i = 0; i < rows; ++i) { for (var j = 0; j < columns; ++j) { if (i == skipY && j == skipX) { Console.Write(\" \"); continue; } Console.Write(\"[]\"); ++totalBoxesDrawn; } Console.WriteLine(); } Console.WriteLine(\"Total boxes drawn: `totalBoxesDrawn`\"); } Now to test it out. Update the Initialize function with the following changes: function Initialize(init : CogInitializer) { this.DrawBoxesWithGap(8, 4, 6, 2); } Command : PlayGame [][][][][][][][] [][][][][][][][] [][][][][][] [] [][][][][][][][] Total boxes drawn: 31 The specified box is skipped, and the printed total reflects this. Command : StopGame Break Figure 5: program flow controlled by break The break statement breaks the looping flow of the program, skipping any remaining loop iterations, as well as any code remaining in the current iteration. Effectively, it leaves the loop altogether. In DrawBoxes, what if we want to specify a maximum number of boxes that should be drawn, regardless of the other given values? If, say, ten rows and ten columns are specified, but with a max of 40, then only forty boxes should be drawn, even though ten times ten is a hundred. A break statement is just right for this. First of all, yet another new Integer parameter is needed for the DrawBoxes function, max, which specifies the maximum number of boxes to draw. Since the function already keeps track of the number that have been drawn so far, it only needs to check before drawing to see if it's hit the max. If it has, then a break statement should be executed. Add the following function to the LoopExamples class: function DrawBoxesWithMax(columns : Integer, rows : Integer, max : Integer) { var totalBoxesDrawn = 0; for (var i = 0; i < rows; ++i) { for (var j = 0; j < columns; ++j) { if (totalBoxesDrawn >= max) break; Console.Write(\"[]\"); ++totalBoxesDrawn; } Console.WriteLine(); } Console.WriteLine(\"Total boxes drawn: `totalBoxesDrawn`\"); } Now to test the changes. Update the Initialize function with the following changes: function Initialize(init : CogInitializer) { this.DrawBoxesWithMax(10, 10, 40); } Command : PlayGame [][][][][][][][][][] [][][][][][][][][][] [][][][][][][][][][] [][][][][][][][][][] Total boxes drawn: 40 Only forty boxes are drawn (and the specified box is still skipped). There's an awful lot of blank space, though, after the last box. This is because the break statement only causes the inner loop to end. The outer loop keeps running, writing another newline to the console with each iteration. Command : StopGame To modify the function to make it break out of both loops, just add a Boolean variable that keeps track of whether the max has been reached. In the inner loop, if the function has drawn enough boxes, before breaking, set that variable to be true. In the outer loop, just after the inner loop is complete, check it. If it's true, break again. Update the DrawBoxesWithMax function with the following changes: function DrawBoxesWithMax(columns : Integer, rows : Integer, max : Integer) { var totalBoxesDrawn = 0; var maxReached = false; for (var i = 0; i < rows; ++i) { for (var j = 0; j < columns; ++j) { if (totalBoxesDrawn >= max) { maxReached = true; break; } Console.Write(\"[]\"); ++totalBoxesDrawn; } if (maxReached) break; Console.WriteLine(); } Console.WriteLine(\"Total boxes drawn: `totalBoxesDrawn`\"); } Let's test out this final modification. Command : PlayGame [][][][][][][][][][] [][][][][][][][][][] [][][][][][][][][][] [][][][][][][][][][] Total boxes drawn: 40 Forty boxes were drawn, and the loop stops after they're all done. Command : StopGame Breaking an Infinite Loop Rarely, it's actually desirable to create a loop that is intentionally unconditional, as long as it contains at least one code path to a break statement. This technique is used sparingly; it generally only occurs when the loop's exit conditions are too complex or numerous to fit comfortably in its definition. Related Materials Manual Looping Create a New 2D Project Add Resource while keywords Tutorials Functions Tutorial Reference Nada Base Types Math Commands PlayGame StopGame"
  },
  "docs/zilch_editor_documentation/tutorials/scripting/variables.html": {
    "href": "docs/zilch_editor_documentation/tutorials/scripting/variables.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers the basics of using Variables in Nada. Learning Objectives Learn how to declare variables Understand the common variable types Learn how to access external variables Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSprite Command : Add Resource Create a NadaScript resource using the Component template template and name it MyBehavior In the Level Window Select : Sprite object In the Properties Window Rename Sprite object to Square Add Component : MyBehavior Class Variables A variable is a stored value of a given type. In order to manipulate a variable you must know its type and what values it can hold. Below is a table of the most common variable types in Nada. Type Acceptable Values Common Operators boolean true false = integer 1 -2 100 etc = + - * / += -= *= /= ++ -- real 0.1 -1.2 3.1415926, etc = + - * / += -= *= /= ++ -- real2 Real2(0.1, -2.5) etc = + - * / += -= *= /= real3 Real3(0.1, -2.5, 19.0) etc = + - * / += -= *= /= real4 Real4(0.1, -2.5, 19.0, 0.0) etc = + - * / += -= *= /= string Hello World! etc = Variables are used to represent values your game needs to perform its logic such as, Lives, Ammo, Run Speed and more. Let's create a new variable for our MyBehavior component class. We can declare (create) a variable by typing the following code within the class scope: var Speed : Real = 0.1; var - Indicates that we want to create a new variable Speed - The name of our variable. A class variable's name must be capitalized. : Real - Denotes that the variable we are creating is of type Real. = 0.1 - The assigned starting value for our variable (0.01 in this case). ; - Indicates that we're done with instructions on this line of code. Here is what your code should look like: Operators Operators are special symbols used to manipulate or compare variables. Let's look at the different ways of modifying our Speed variable. Assignment = The assignment operator sets the value of the variable on its left (known as the left-hand operand) to the value on its right (the right-hand operand). The left-hand operand must be a variable, while the right-hand operand may be a literal value, another variable of the same type, or an expression that combines both. Examples: this.Speed = 5.0; var Pi : Real = 3.1415926; this.Speed = this.Pi; var Pi : Real = 3.1415926; this.Speed = this.Pi + 5.0; NOTE: Class variables are accessed by using the this keyword; which refers to the class object we're currently in, that is the MyBehavior component. We then use the dot . operator to indicate that we want a member of the object on the left of it. Thus by typing this.Speed we're indicating \"The variable named Speed that is a member of the class we're currently in\". Arithmetic Operators + - * / Applicable to arithmetic types (Integer, Real, Real2, Real3, etc) these allow you to create expressions the perform the corresponding math operations: + - Add - - Subtract * - Multiply / - Divide this.Speed = this.Speed + 1.0; this.Speed = this.Speed * 2.0; NOTE: If the value of the arithmetic operation isn't stored in a variable, then the operation has no repercussion and will be ignored. Arithmetic Assignment Operators += -= *= /= These operators let you add, subtract, multiply and subtract the values on the right of the operator to the current value of the variable on the left of it. They are only available for arithmetic types. Example: var Speed : Real = 1.0; this.Speed += 2.3; //The value of this.Speed is now 3.3 NOTE: Using these operators is logically equivalent to preforming the corresponding operation using the variable itself on the right of the assignment operator. For example, this.Speed += 5.0; is the same as this.Speed = this.Speed + 5.0;. Increment and Decrement Operators ++ -- These are used in combination with Integer and Real types to either add or subtract 1 to the current value of the variable. In Nada, these are always used before the variable you want to increment. Example: ++this.Speed; NOTE: Using ++this.Speed; is logically equivalent to this.Speed += 1.0; and only exists for convenience. Accessing Properties Up until now we have modified properties on various components through the Properties Window, but internally, those properties are just variables we can manipulate in code at runtime (while the game is running). Let's try and modify our Square object to move to the right based on our speed. So the value we're looking to modify is the Translation property in the Transform component and we want to do that on Logic Update so that it happens every frame. Add the following line of code inside LogicUpdate: this.Owner.Transform.Translation += Real3(this.Speed, 0, 0); |this. | Refers to the class we're currently in (In this case the MyBehavior component) | |Owner. | The object that owns this component. | |Transform. | The component we're trying to access. | |Translation | The property (or variable) we want to modify. | NOTE: this.Owner.Transform.Translation can be interpreted as \"The Translation property of the Transform of the object that owns this component\" |+= | Add and assign operator to add a value to the current translation. | |Real3(X, Y, Z) | Here we create a Real3 since that's the type of the Translation property we're looking to modify. Real3s are composed of three Real values which are referred to X, Y and Z in order. | |this.Speed, 0, 0 | Here we're accessing the Speed variable created earlier and using it as the X value. We'll just use 0 for Y and Z. | |; | Indicates that we're done with instructions on this line of code.| Here's what your code should look like: Command : PlayGame Command : StopGame Dependencies Previously, we demonstrated how to access a property of another component. However, we have made the assumption that our owner object had that component; if it didn't Zilch would give us an error: To prevent this, we can declare a dependency on the Transform component. Add the following line at the beginning of the class scope: [Dependency] var Transform : Transform; By adding this we prevent the addition of the MyBehavior component to objects without a Transform component. The [Dependency] part is an attribute that modifies the following variable; you can find more information about them in the Attribute Manual Page. NOTE: This also allows us to shorten part our previous line of code this.Owner.Transform.Translation to just this.Transform.Translation since we're already referencing the dependency. Once the dependency is declared, dependent components can't be removed unless no dependent components are removed first. Attempt to remove the Transform component from Square object. Properties It is also possible to turn your class variables into properties that can be accessed and modified via the Properties Window. To accomplish that we add the [Property] attribute before the variable declaration. Add the [Property] attribute to the Speed variable: Here's what it should look like: We can then find the Speed property and edit it in the Properties Window. Select : Sprite object In the Properties Window Under MyBehavior Set Speed to 0.02 Command : PlayGame Notice that the object moves a lot slower now, in accordance with the 0.02 value we set on the Properties Window and NOT the initial value of 0.1 given when the function was declared. Once a variable is given a Property attribute; its values are serialized and will match the one listed in the Properties Window. Command : StopGame Local Variables Local Variables are defined within the scope of a function or nested scope are called local variables; they must begin with lower case letter and will cease to exist at the end of the scope in which they were created in. Local variables are useful when calculating value that do not need to persist outside a scope. Example: var lives : Integer = 3; Putting it all Together Now that we've seen the basics of using variables, let's move create a variable to determine the direction the Square object object should move. In the MyBehavior script Add the following property: [Property] var Direction : Real2 = Real2(1.0, 1.0); In the MyBehavior script Replace the previous content of the LogicUpdate function with the following: function OnLogicUpdate(event : UpdateEvent) { var normalized_direction : Real2 = Math.Normalize(this.Direction); this.Owner.Transform.Translation += Real3(normalized_direction * this.Speed, 0.0); } Here we create a local variable that is the normalized value given by the Direction property; that is, a vector that points in the same direction but of length 1.0. We then used that normalized direction to construct a Real3 (out of a Real2 and a Real), multiplying the direction by our Speed property and assign it to the Square object's translation. Command : PlayGame Command : StopGame Related Materials Manual Components Nada User Documentation Variables Attributes Add Resource Reference Classes Transform Sprite NadaScript Nada Base Types boolean integer real real2 real3 real4 string Commands CreateSprite Tutorials CustomComponents"
  },
  "docs/zilch_editor_documentation/tutorials/tutorial_sequences.html": {
    "href": "docs/zilch_editor_documentation/tutorials/tutorial_sequences.html",
    "title": "Basics | ZilchEngine",
    "keywords": "If you are new to game engines and programming you've come to the right place! We have prepared a series of tutorials to introduce you to everything you'll need to start making your own games. These lectures are designed to be followed in order and they'll provide step-by-step instructions to build simple projects for you to get familiar with the tools and concepts you'll need later. So, without further ado, let's get started! Basics Every information a user needs to know before starting any tutorial. This section covers how to get a project started, basic UI overview and vocabulary Zilch Launcher Downloading the Engine, Launcher Interface, Builds, Creating New Project Editor UI Windows Overview, Menu Bar, Commands, Save Project Beginner I All tutorial pages covered here are aimed to users with no prior Game Engine or Programming experience and they do not include any scripting Game Objects Creating Game Objects, Changing Properties Basic Components Box / Sphere Collider, RigidBody, Sprite, SpriteText Physics Effects Gravity, Drag, IgnoreSpaceEffects, LevelSettings, Region, Force, Buoyancy, Wind Physics Materials Physics Materials, MassOverride, Friction, Restitution Audio I Importing Sound, Sound Cues, Sound Emitter, Simple Sound, Sound Listener, Attenuators Hierarchies I Parenting, Local vs World, Move / Rotate / Scale Hierarchies, Non-Uniform Scale Archetypes I Creating, Uploading, Instantiating, Reverting Beginner II *These tutorials target users with no prior programming experience. Tutorials in this section focus on covering scripting basics and are of very low complexity. * Custom Components NadaScript, Component Class, Initialize, Update, Scope Variables Variable Types, Assignment, Acessing Owner Component Variables, Class Variables, Local Variables, Property Attribute Console Printing Console Window, Console.WriteLine, Printing Strings, Printing Variables, Basic Debugging Conditionals if, else if, else, ==, <, >, <=, >=, ||, &&, !, != Functions Parameters, Return Types, Calling functions on other components Keyboard Input Querying Keyboard State, Dynamic Character Controller Loops while, for, Infinite Loops, Nested Loops, Loop Control Statements CogPath CogPath Property, Accessing components on other objects Random Context RNGs, Dice Rolls, Seeding, Random Distribution, % operator Archetypes II Spawning Archetypes, Accessing new object properties Beginner III Tutorials in this section are aimed at users with limited scripting experience and focus on covering on how to build simple 2D games in Zilch Events I LogicUpdate, CollisionEvents, Destruction Events Events II Custom Events, Dispatching, Sends, Custom Event Data Actions Property, Delay, Call, Sequence, Group, and Looped Actions 2D Rotations Rotation Basics, Transform.EulerAngles, Math.ToRadians, Simple 2D Vector Math Levels Creating New Levels, Reload Level, Load Level, Set as Starting Level Spaces Creating New Space, Basic HUD, Clear Color Collision Groups CollisionGroups, CollisionTables, CollisionGroup Relationships Audio II Sound Emitter Methods, Sound Space, Sound Instances, Sound Tags TimeSpace TimeScale, Pause Sprite Particles Particle Emitter, Particle Animator, Particle Color Animator, Particle Attractor Beginner IV Tutorials in this section are aimed at users with some scripting experience and focus on covering remaining core topics for building a 2D game in Zilch Zilch Market Store Interface, Download Packages, Importing Into Project Swept Character Character Controller Explanation, Kinematic vs Dynamic, Swept Controller Usage Gamepad Detecting Gamepad, Gamepad Input, Deadzone, Rumble sprite_animations Importing sprite sheets and generating animations Tile Editor I Tile sheet importing, the draw tool, the select tool Tile Editor II Tile palettes, tile collision, tile archetypes Mouse Input Mouse Events, Screen to World Custom Cursor Creating a custom cursor for your game DebugDraw DebugLine, DebugCircle Menus Zilch's UI system, Title Screen, Main Menu, Credits, Quit handling Arrays Arrays, Array Methods, Element Iteration Raycasting Ray Basics, CastRayFirst, CastResult, CastFilter Hierarchies II Parent & Child, Attach & Detach, Hierarchy Events"
  },
  "docs/zilch_editor_documentation/tutorials/ui.html": {
    "href": "docs/zilch_editor_documentation/tutorials/ui.html",
    "title": "| ZilchEngine",
    "keywords": "Menus #beginner_iv Zilch's UI system, Title Screen, Main Menu, Credits, Quit handling Custom Cursor #beginner_iv Creating an overlayed custom cursor HUDs (coming soon)"
  },
  "docs/zilch_editor_documentation/tutorials/ui/custom_cursor.html": {
    "href": "docs/zilch_editor_documentation/tutorials/ui/custom_cursor.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers creating a custom mouse cursor in the Zilch Engine. Learning Objectives Applying knowledge of mouse input to make a cursor follow the mouse Applying knowledge of spaces to put the custom cursor in its own viewport layer Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Command : CreateSphere In the Properties Window Remove Component : RigidBody Remove Component : SphereCollider Creating a Custom Mouse Cursor Making a custom mouse cursor in the Zilch Engine is as simple as making a sprite (or a model, or a particle system, etc.) follow the mouse around, and also setting the normal cursor to be invisible. Let's take a custom image and use it as our new cursor. Download the following image file: Import it into the project by dragging and dropping it into the Level Window In the Group Import Options Window Under ImageOptions Set ImportImages enum to Sprites Press the Import All button The apparent \"point\" of this particular SpriteSource is not at its center or one of its corners, so we should adjust its Origin properties a bit, so that its transform is in just the right spot. In the Library Window Under the SpriteSource tag Double click PyramidCursor In the Sprite Source Editor Window Set Origin enum to Custom Set OriginX to 7 Set OriginY to 6 Press the Save to Sprite Source button Now that we have a SpriteSource to use, it's time to make the cursor. Command : CreateSprite In the Properties Window Rename Sprite object to Cursor Under Sprite Set SpriteSource enum to PyramidCursor There's a problem here: the main game level's objects are drawn overtop of the cursor. We'll cover how to solve that soon, but let's keep going for now. What we need next is a component that will make this sprite follow the mouse around wherever it moves. Moving the Cursor Command : Add Resource Create a NadaScript resource using the Component template template and name it MouseFollower Update the MouseFollower script to the following: class MouseFollower : NadaComponent { [Dependency] var Transform : Transform; function Initialize(init : CogInitializer) { Zilch.Mouse.Cursor = Cursor.Invisible; Zilch.Connect(this.Space, Events.MouseMove, this.OnMouseMove); } function OnMouseMove(event : ViewportMouseEvent) { this.Transform.WorldTranslation = event.ToWorldZPlane(0); } } This component will make whatever we attach it to set its position to the world-space coordinates of the mouse whenever the mouse moves. It also sets the mouse cursor to be invisible when it is initialized. Select : Cursor object In the Properties Window Add Component : MouseFollower Command : PlayGame Command : StopGame Moving the mouse now brings the cursor sprite with it. (NOTE) When the Cursor Comes Back: You may notice that if you move the mouse so that the cursor leaves the Game Window, the default mouse cursor will reappear when you move it back inside. This is a side effect of intended behavior on the part of the Zilch Editor; you'll only see it when a project is running in the editor, so it won't happen with exported executables. In the Properties Window Set Archetype to CustomCursor Command : Delete Now let's fix the fact that the cursor is not drawn on top. The problem is that the cursor is an object in the same space as the other objects in the level, which means it won't necessarily always appear on top of everything, as a proper mouse cursor should. We could move it along the Z axis to put it in front of the sphere, and that would work in this particular case, but it's not a good approach in general. What we really should do is put the cursor in its own space. Let's begin by creating a level for that space, which will contain the cursor (and not much else). Cursor Space Command : Add Resource Create a Level resource using the {nav icon=clone, name=2D Level} template and name it CursorLevel Just as we learned in the tutorial on spaces, we need to tweak a few settings a bit in this level to ensure that it will layer on top of the main space properly. Select : Renderer object In the Properties Window Under ForwardRenderer Set ClearColor to [R:0, G:0, B:0, A:0.00] The renderer's ClearColor needs to be transparent, or it will be impossible to see the main game level through the overlaid cursor space. Select : GameCamera object In the Properties Window Under CameraViewport Set RenderOrder to 1 Set ForwardViewportEvents checkBox to true The CameraViewport's RenderOrder in the cursor space needs to be greater than that of the main space so that it will correctly be layered on top. Also, since a mouse-driven game depends on mouse events, we need to make sure we check the ForwardViewportEvents checkBox box. Otherwise, the cursor space would block all of our attempts at mouse interaction from reaching the main space beneath it. Next, we need a component that, when initialized, will create the cursor space, load the cursor level, and create the custom cursor. Command : Add Resource Create a NadaScript resource using the Component template template and name it CustomCursor Update the CustomCursor script to the following: class CustomCursor : NadaComponent { [Property] var CursorLevel : Level = Level.CursorLevel; [Property] var CursorArchetype : Archetype = Archetype.CustomCursor; var CursorSpace : Space; var Cursor : Cog; function Initialize(init : CogInitializer) { this.CursorSpace = this.GameSession.CreateNamedSpace(\"CursorSpace\", Archetype.DefaultSpace); this.CursorSpace.LoadLevel(this.CursorLevel); this.Cursor = this.CursorSpace.Create(this.CursorArchetype); Zilch.Connect(this.Owner, Events.CogDestroy, this.OnCogDestroy); } function OnCogDestroy(event : ObjectEvent) { if (this.CursorSpace != null) this.CursorSpace.Destroy(); } } When this component is initialized, it creates the cursor space and loads the cursor level into it, then creates the custom cursor in that level. (It also has a handy reference to the cursor, which you can access in case you want to manipulate it at runtime in another script.) When the cog it is attached to is destroyed, it destroys the cursor space. We'll attach it to the LevelSettings object object in the main space, so that the cursor will be created as soon as the game begins. (NOTE) Why Destroy? In this tutorial's game, we're attaching the CustomCursor to the LevelSettings object object in the main space, which is created when the level is loaded and destroyed when it ends. Thus, the cursor space will exist for as long as the main space does. So why should we bother to destroy it explicitly when the LevelSettings object is destroyed? The answer is that if were to make a game with some levels that use the mouse with a custom cursor and some that don't, we would be switching back and forth as we load levels. This is a convenient way to make the component that creates the space clean up after itself in a manner that ensures that the custom cursor is present only when it's needed, and that we don't unwittingly create duplicates of it. In the Library Window Under the Level tag Open the Level Level resource Select : LevelSettings object In the Properties Window Add Component : CustomCursor We're finally done! Let's see it all together. Command : PlayGame Move the mouse to make the custom cursor move. Command : StopGame Related Materials Tutorials spaces Manual commands addremovecomponent selectobject resourceadding Reference Commands CreateSphere PlayGame StopGame CreateSprite Delete Classes viewportmouseevent sprite cameraviewport Events MouseMove Enums ImageImport SpriteOrigin Development Task {T2065}"
  },
  "docs/zilch_editor_documentation/tutorials/ui/menus.html": {
    "href": "docs/zilch_editor_documentation/tutorials/ui/menus.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This lesson covers the creation of menus in the Zilch Engine. Learning Objectives Using Zilch's UI system to create graphical menus Learning how to use a button interface to switch between levels Level Setup Command : New Project Create a new project using the {nav icon=clone, name=Empty 2D Project} template Making a menu, HUD, or simple title screen in Zilch is easy when you start with the built-in UI level template. Let's make a simple game with a title screen, a main menu, and a basic gameplay level. (NOTE) What's a Widget? In this tutorial, you'll encounter the word widget. In short, a widget object is a UI element. Zilch widgets object include //points of interaction//, like buttons and sliders, as well as static elements, like text labels and layouts containing other widgets object. What all widgets object have in common is the UiWidget component, which each one has. All graphical user interfaces (or GUIs) created with Zilch's UI system, whether they're title screens, main menus, or anything else, are composed of widgets object. We'll start with the title screen. Creating a Title Screen Command : Add Resource Create a Level resource using the {nav icon=clone, name=\"Ui Level\"} template and name it TitleScreen The UI level template includes a RootWidget object object, complete with all the special components that make it tick, such as UiRootWidget and UiRenderer. It also comes with a few placeholder sprites that we won't be using. In the Objects Window Under RootWidget object Select : the three Sprite object objects Command : Delete Our title screen will consist of white text against a dark background. The background color can be changed through the RootWidget: Select : RootWidget object In the Properties Window Under UiRootWidget Set LocalColor to [R:36, G:36, B:36, A:1.00] Remove Component : UiStackLayout Add Component : UiFillLayout It's time to make our first widget object: a text label. The best way to make widgets object is to instantiate them from archetypes, and Zilch comes with some archetypes that are just for use in UI creation. These can be found in the Library Window, but you'll have to change libraries to find them. In the Library Window Open the Library enum list menu Select the UiWidget library In the Library Window Under Archetype Left drag UiSpriteText into the Objects Window In the Objects Window Drag and drop the UiSpriteText instance on top of RootWidget object In the Properties Window Rename the UiSpriteText object to Title Under UiWidget Under the Layout group Set HorizontalAlignment enum to Center Under SpriteText Set TextAlign enum to Center NOTE: The UiWidget component's VerticalAlignment and HorizontalAlignment properties determine where the text widget object's area is positioned within its parent layout (in this case, the RootWidget object). The SpriteText component's TextAlign property, on the other hand, determines where the text itself is positioned within its own area. In the Properties Window Under UiWidget Set the Y part of Size to 50 Under the Layout group Set SizePolicyX enum to Flex Set MarginTop to 180 Under SpriteText Set Font enum to NotoSans-Bold Set FontSize to 36 Set Text to something pretentious (NOTE) Why Just Y? Normally in our tutorials, when we want you to set just one part of a vector-type property, we direct you to set the whole thing at once (for example, //Set Translation to [0, -5, 0]//). But above, you are explicitly directed to set just the Y part of the Size property. The reason is that, a few lines later, when we set the SizePolicyX enum property to Flex, it causes the parent layout to \"take over\" the X part of the Size property, meaning that any changes that we made to it would overwritten immediately. You'll see this sort of thing throughout Zilch's UI system and our tutorials covering it. Title screen so far, with hierarchy for reference Select : Title object Command : Duplicate Select : the new copy of Title object In the Properties Window Rename the copy of Title object to Subtitle Under UiWidget Set LocalColor to [R:255, G:255, B:255, A:0.50] Under the Layout group Set MarginTop to 215 Under SpriteText Set Font enum to NotoSans-Regular Set FontSize to 24 Set Text to something longer and perhaps more pretentious Under UiWidget Set the Y part of Size to 33 Title screen, continued, with hierarchy for reference Select : Subtitle object Command : Duplicate In the Properties Window Rename the copy of Subtitle object to StartText Under UiWidget Set LocalColor to [R:255, G:255, B:255, A:1.00] Under the Layout group Set VerticalAlignment enum to Bottom Set MarginTop to 0 Set MarginBottom to 180 Under SpriteText Set Font enum to NotoSans-Bold Set FontSize to 16 Set Text to Click to Start Under UiWidget Set the Y part of Size to 22 The StartText object says //Click to Start//, but of course clicking won't do anything yet. We'll add that functionality soon, but for now, there's just one more finishing touch to apply to the appearance of the title screen. In the Library Window Under Archetype Left drag UiSprite into the Objects Window In the Objects Window Drag and drop the UiSprite instance on top of RootWidget object In the Properties Window Rename the UiSprite object to HorizontalLine Under UiWidget Set the Y part of Size to 2 Set LocalColor to [R:255, G:0, B:0, A:1.00] Under the Layout group Set SizePolicyX enum to Flex Set MarginLeft to 20 Set MarginTop to 218 Set MarginRight to 20 (NOTE) Hierarchy Render Order: If your game's title contains a letter that has a descender (such as a lowercase //y//), the red horizontal line will be rendered on top of it. To correct this, just move the HorizontalLine object object to the top of its hierarchy in the Objects Window: This works because, while hierarchy order doesn't affect the way that widgets object are laid out in a UiFillLayout, it does still determine the order in which Sprites and SpriteTexts are rendered by a UiRenderer. The complete layout of the title screen, with hierarchy for reference Now for the main menu. Creating a Main Menu The main menu should contain four buttons: Start Game, which loads the gameplay level Credits, which loads the credits level The credits level should contain a Return to Main Menu button, which loads the main menu level Return to Title, which loads the title screen level Quit Game, which exits the game Let's get started. Command : Add Resource Create a Level resource using the {nav icon=clone, name=\"Ui Level\"} template and name it MainMenu In the Objects Window Under RootWidget object Delete : the three Sprite object objects Select : RootWidget object In the Properties Window Under UiRootWidget Set LocalColor to [R:64, G:25, B:25, A:1.00] Remove Component : UiStackLayout Add Component : UiFillLayout In the Library Window Under Archetype Left drag UiSprite into the Objects Window In the Objects Window Drag and drop the UiSprite instance on top of RootWidget object In the Properties Window Rename the UiSprite object to MenuWindow Under UiWidget Set Size to [200, 250] Set LocalColor to [R:255, G:255, B:255, A:0.10] Under the Layout group Set VerticalAlignment enum to Center Set HorizontalAlignment enum to Center Add Component : UiStackLayout Under UiStackLayout Set PaddingLeft to 4 Set PaddingTop to 4 Set PaddingRight to 4 Set PaddingBottom to 4 Set Spacing to [0, 4] Empty menu window for the main menu, with hierarchy for reference In the Library Window Under Archetype Left drag UiSpriteText into the Objects Window In the Objects Window Drag and drop the UiSpriteText instance on top of MenuWindow object In the Properties Window Rename the UiSpriteText object to MenuTitle Under UiWidget Set the Y part of Size to 41 Under the Layout group Set SizePolicyX enum to Flex Under SpriteText Set Text to Main Menu Set FontSize to 30 Set TextAlign enum to Center Main menu, continued, with hierarchy for reference The menu's window is good to go. Adding Buttons Now to make our first button, the Start Game button. When we're done with it, we'll duplicate it three times and modify the duplicates to match the buttons we want the menu to have. In the Library Window Under Archetype Left drag UiSprite into the Objects Window In the Objects Window Drag and drop the UiSprite instance on top of MenuWindow object In the Properties Window Rename the UiSprite object to StartGameButton Under UiWidget Set LocalColor to [R:255, G:255, B:255, A:0.10] Under the Layout group Set SizePolicyX enum to Flex Set SizePolicyY enum to Flex Add Component : UiFillLayout In the Library Window Under Archetype Left drag UiSpriteText into the Objects Window In the Objects Window Drag and drop the UiSpriteText instance on top of StartGameButton object Rename the UiSpriteText object to ButtonText Under UiWidget Set the Y part of Size to 33 Under the Layout group Set SizePolicyX enum to Flex Set VerticalAlignment enum to Center Under SpriteText Set Text to Start Game Set Font enum to NotoSans-Bold Set FontSize to 24 Set TextAlign enum to Center The main menu with the first button (work in progress), with hierarchy for reference (NOTE) Why's Everything Orange? You may notice that some of the objects in the Objects Window are shown in orange text. Zilch uses this coloring scheme to denote an object that is //an instance of an archetype, but whose property values differ from the archetype it was created from//. Every object we've created so far has been instantiated from archetypes, which we then proceeded to modify. If you want an object's name to be printed in the same manner as the rest of the objects, just select it and clear its Archetype field in the Properties Window. Then it won't be considered an archetype instance anymore. The button's outward appearance is mostly complete, but we need to give it a Nada component that gives it its functionality. Command : Add Resource Create a NadaScript resource using the Component template template and name it LoadLevelOnClick Update the LoadLevelOnClick script to the following: class LoadLevelOnClick : NadaComponent { [Property] var LevelToLoad : Level; function Initialize(init : CogInitializer) { Zilch.Connect(this.Owner, Events.LeftClick, this.OnLeftClick); } function OnLeftClick(event : ViewportMouseEvent) { this.Space.LoadLevel(this.LevelToLoad); } } Zilch's UI system sends the LeftClick event to every interactive widget object (that is, every game object whose UiWidget component's Interactive property is set to true) when it is left-clicked. This component uses that event to load a level of our choice, making it perfect for our menu buttons (and more). But in addition to the functionality offered by this component, we can also add some helpful feedback to the button with a couple more core Nada components: UiHighlight, which changes a button's color when it is hovered over or clicked on, and UiChangeCursor, which makes a button change the mouse cursor when it is hovered over. Select : StartGameButton object In the Properties Window Add Component : UiHighlight Add Component : UiChangeCursor Add Component : LoadLevelOnClick Under UiHighlight Set MouseHoverColor to [R:255, G:255, B:255, A:0.20] Set MouseDownColor to [R:0, G:0, B:0, A:0.10] Set AnimateTime to 0.06 Under UiChangeCursor Set Cursor enum to Hand Now we'll just duplicate this button a few times. Duplicate : StartGameButton object three times The menu with four copies of the Start Game button, with hierarchy for reference Set the Text properties of the SpriteText components of the ButtonText object objects to match the following: Rename the StartGameButton object objects to match the following: The menu is nearly complete; pretty much all that's left to do is to create the levels that the buttons will link to, and then hook them up. Creating a Gameplay Level We'll just throw something together real quick to make a gameplay level. It won't be anything to write home about, but it will be adequate for our needs. Command : Add Resource Create a Level resource using the {nav icon=clone, name=\"2D Level\"} template and name it GameplayLevel Command : Add Resource Create a NadaScript resource using the Component template template and name it KeyboardMovement Update the KeyboardMovement script to the following: class KeyboardMovement : NadaComponent { [Dependency] var Transform : Transform; [Property] var Speed : Real = 8; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var movement = Real3.Zero; if (Zilch.Keyboard.KeyIsDown(Keys.Right)) movement += Real3.XAxis; if (Zilch.Keyboard.KeyIsDown(Keys.Left)) movement -= Real3.XAxis; if (Zilch.Keyboard.KeyIsDown(Keys.Up)) movement += Real3.YAxis; if (Zilch.Keyboard.KeyIsDown(Keys.Down)) movement -= Real3.YAxis; this.Transform.WorldTranslation += movement * this.Speed * event.Dt; } } Select : Renderer object In the Properties Window Under ForwardRenderer Set ClearColor to [R:51, G:89, B:128, A:1.00] Command : CreateSprite In the Properties Window Rename the Sprite object to Player Add Component : KeyboardMovement Under Sprite Set VertexColor to [R:204, G:82, B:82, A:1.00] Set SpriteSource enum to CircleBordered Command : PlayGame Use the Arrow keys to move the Player object Command : StopGame In a moment, we'll make it possible to go to the gameplay level from the main menu, but while we're here, let's make it possible to exit to the menu from gameplay. Going from Gameplay to the Main Menu Let's make it so that the Escape (Escape) key takes us back to the main menu. Of course, by default, this key quits a Zilch game altogether. We'll use a combination of two new components to circumvent this functionality and replace it with our own. Command : Add Resource Create a NadaScript resource using the Component template template and name it QuitHandler Update the QuitHandler script to the following: class QuitHandler : NadaComponent { function Initialize(init : CogInitializer) { Zilch.Connect(this.GameSession, Events.GameRequestQuit, this.OnGameRequestQuit); } function OnGameRequestQuit(event : GameEvent) { event.Handled = true; } } When Escape is pressed, the GameRequestQuit event is dispatched to the GameSession object. If this event is not handled, the game exits. This component allows us to prevent this. Command : Add Resource Create a NadaScript resource using the Component template template and name it LoadLevelOnKeystroke Update the LoadLevelOnKeystroke script to the following: class LoadLevelOnKeystroke : NadaComponent { [Property] var Key : Keys = Keys.Escape; [Property] var LevelToLoad : Level = Level.MainMenu; function Initialize(init : CogInitializer) { Zilch.Connect(Zilch.Keyboard, Events.KeyDown, this.OnKeyDown); } function OnKeyDown(event : KeyboardEvent) { if (event.Key == this.Key) this.Space.LoadLevel(this.LevelToLoad); } } This component loads the specified level when the chosen key is pressed. With these two components, we can go from the gameplay level back to the main menu. Select : LevelSettings object In the Properties Window Add Component : QuitHandler Add Component : LoadLevelOnKeystroke Command : PlayGame Press Escape while playing the GameplayLevel Level resource It's now possible to go from gameplay to the main menu Pressing Escape while in the gameplay level now takes you to the main menu; pressing it again from there will quit the game. NOTE: We've placed the QuitHandler component on the LevelSettings object object in the gameplay level, so that's the only level where the Escape key won't quit the game. To suppress Zilch's default Escape-to-quit behavior in other levels, add a QuitHandler to their LevelSettings object (or another object in the level). To prevent it on a broader scale still, add it to the Space object or even the GameSession object. Command : StopGame Now to hook up the main menu to go into the gameplay level. Going from the Main Menu to Gameplay In the Library Window Open the Library enum list menu Select your project's library Under the Level tag Open the MainMenu Level resource Select : StartGameButton object In the Properties Window Under LoadLevelOnClick Set LevelToLoad enum to GameplayLevel Command : PlayGame Clicking the Start Game button now loads the gameplay level, from where the Escape key can be used to return to the main menu. Command : StopGame We're almost done. Next up: a credits screen. Creating a Credits Screen The credits screen will be a modified copy of the main menu, so we can begin by duplicating the MainMenu level. Then we'll open the copy and make our changes to it. In the Library Window Under the Level tag {nav icon=mouse-pointer, name=\"Right click\"} the MainMenu Level resource Select Duplicate to create a copy of MainMenu Rename the MainMenuCopy1 Level resource to Credits Open the Credits Level resource The credits will be displayed in a window like the main menu's menu window, but with only one button at the bottom that will go back to the main menu. Select : RootWidget object In the Properties Window Under UiRootWidget Set LocalColor to [R:64, G:25, B:51, A:1.00] Delete : CreditsButton object, ReturnToTitleButton object, and QuitGameButton object Select : MenuTitle object In the Properties Window Under SpriteText Set Text to Credits Select : StartGameButton object In the Properties Window Rename the StartGameButton object to MenuButton Under UiWidget Under the Layout group Set SizePolicyY enum to Fixed Set the Y part of Size to 40 Under LoadLevelOnClick Set LevelToLoad enum to MainMenu Select : ButtonText object In the Properties Window Under SpriteText Set Text to Return to Main Menu Set FontSize to 16 Under UiWidget Set the Y part of Size to 22 Now we're going to explore a concept we haven't touched yet: giving a widget object a size policy of Auto. Select : MenuWindow object In the Properties Window Under UiWidget Under the Layout group Set SizePolicyY enum to Auto A widget object with a layout component, like UiStackLayout, can resize itself when laying out its children. The Auto size policy causes such a layout to make itself as small as necessary to accommodate all of its fixed-sized contents, including its padding and spacing, the margins of its child widgets object, and any of those children that use the Fixed size policy. In the case of the credits window, it contains only two direct children, each of which is Fixed on the Y axis. Their Y size plus the padding and spacing of the window's layout determines the Y size of the window: MenuTitle object has a Fixed Y Size of 41 MenuButton object has a Fixed Y Size of 40 MenuWindow object has a PaddingTop of 4 MenuWindow object has a PaddingBottom of 4 MenuWindow object has a Y Spacing of 4 These all add up to 93, which is exactly the height of the window. The credits window, with its SizePolicyY enum set to Auto, with hierarchy for reference The credits will be displayed between the menu title and the button. We'll place them in a UiStackLayout that we can make by starting with the UiSprite archetype. We'll remove its Sprite component, though, so that it's just an invisible layout area. We'll set its SizePolicyY enum to Auto, so that it can grow to fit every credit we add. In the Library Window Open the Library enum list menu Select the UiWidget library Under Archetype Left drag UiSprite into the Objects Window In the Objects Window Drag and drop the UiSprite instance between MenuTitle object and MenuButton object In the Properties Window Rename the UiSprite object to CreditsBlock Remove Component : Sprite Under UiWidget Under the Layout group Set SizePolicyX enum to Flex Set SizePolicyY enum to Auto Add Component : UiStackLayout The credits block should be a vertically stacked list, so we're using a UiStackLayout. Each element of the list is a pair of two things: a role (to be shown on the left) and the people who held that role on your game (to be shown on the right). Thus, each credit is itself a stack layout. (As we'll soon see, the list of people will also be yet another stack layout.) Select : CreditsBlock object Command : Duplicate In the Properties Window Rename the copy of CreditsBlock object to CreditListing Attach CreditListing object to CreditsBlock object Select : CreditListing object The credits should be stacked vertically, but within each listing, the role should be listed to the left of the names of the people, so the stack direction of this new widget object needs to change. In the Properties Window Under UiStackLayout Set StackDirection enum to LeftToRight Each credit listing will contain a role, which will be a simple text widget object, and a list of people, which will be another stack layout, like the listing itself. Before we add the role text widget object, let's duplicate the credit listing widget object and modify it to become the list of people. Afterward, we can add the role text. Select : CreditListing object Command : Duplicate In the Properties Window Rename the copy of CreditListing object to ListOfPeople Attach ListOfPeople object to CreditListing object Select : ListOfPeople object The names of the people should be stacked vertically, and they should be centered vertically as well, just in case the name of the role takes up more vertical space than the list of people. In the Properties Window Under UiStackLayout Set StackDirection enum to TopToBottom Under UiWidget Under the Layout group Set VerticalAlignment enum to Center Now we'll add the role text. It'll be the first element in the credits block with a Fixed height, so we'll finally be able to see something! The role will be displayed on the left side of the credit listing, but it will be aligned to the right. In the Library Window Under Archetype Left drag UiSpriteText into the Objects Window In the Objects Window Drag and drop the UiSpriteText instance on top of CreditListing object Reorder the children of CreditListing object so that UiSpriteText object is before ListOfPeople object In the Properties Window Rename the UiSpriteText object to Role Under UiWidget Set the Y part of Size to 16 Under the Layout group Set SizePolicyX enum to Flex Set VerticalAlignment enum to Center Under SpriteText Set Text to Role Set TextAlign enum to Right We'll fill in the actual name of the role later. First, let's put some placeholder names in the corresponding list of people. Each name will be displayed on the right side of the credit listing, but it will be aligned to the left. Select : Role object Command : Duplicate In the Properties Window Rename the copy of Role object to Person Attach Person object to ListOfPeople object Select : Person object Under SpriteText Set Text to Name Set TextAlign enum to Left A credit listing, with placeholder text, with hierarchy for reference The role and the person's name don't have any room between them. This can be corrected with the Spacing property of the layout they're in. Select : CreditListing object In the Properties Window Under UiStackLayout Set the X part of Spacing to 16 That looks better. Let's also duplicate the placeholder name, to see how it will look when more than one person is credited for the same role. Select : Person object Command : Duplicate Command : Duplicate NOTE: Both of the above Duplicate commands should be executed. A credit listing, with multiple names for the same role, with hierarchy for reference That looks pretty good. Now let's duplicate the credit listing. Select : CreditListing object Command : Duplicate Two credit listings, with bad spacing, with hierarchy for reference The names run on together so that they look like they're one big list. Again, this problem can be solved by the Spacing property. Select : CreditsBlock object In the Properties Window Under UiStackLayout Set the Y part of Spacing to 12 Two credit listings, with good spacing, with hierarchy for reference That looks much better. Now we can replace all the placeholder text. Duplicate the CreditListing object cogs so that there are enough of them for the credits for your game Set the Text properties of the SpriteText components of the Role object objects to the names of the roles for your game Set the Text properties of the SpriteText components of the Person object objects to the names of the people in the corresponding roles If any of the names of the roles or team members in your credits extend onto multiple lines, just increase the Y part of the Size property of the UiWidget component of that name's widget object (say, by doubling it). Alternatively, you could also widen the whole window by increasing the X part of the Size property of the UiWidget component of the MenuWindow object object. A complete credits screen, with hierarchy for reference Final Connections We're almost done! There are just a few more things to hook up, and one more quick component to make. For now, let's return to the main menu. In the Library Window Open the Library enum list menu Select your project's library Under the Level tag Open the MainMenu Level resource Select : CreditsButton object In the Properties Window Under LoadLevelOnClick Set LevelToLoad enum to Credits Select : ReturnToTitleButton object In the Properties Window Under LoadLevelOnClick Set LevelToLoad enum to TitleScreen The quit button still has its old LoadLevelOnClick component from its days as a start button clone. We can remove that, and also add a new component that quits the game on click: Command : Add Resource Create a NadaScript resource using the Component template template and name it RequestQuitOnClick Update the RequestQuitOnClick script to the following: class RequestQuitOnClick : NadaComponent { function Initialize(init : CogInitializer) { Zilch.Connect(this.Owner, Events.LeftClick, this.OnLeftClick); } function OnLeftClick(event : ViewportMouseEvent) { this.GameSession.RequestQuit(); } } Select : QuitGameButton object In the Properties Window Remove Component : LoadLevelOnClick Add Component : RequestQuitOnClick There's just one more thing to do: make the title screen go to the main menu. In the Library Window Under the Level tag Open the TitleScreen Level resource Select : RootWidget object In the Properties Window Add Component : LoadLevelOnClick Under LoadLevelOnClick Set LevelToLoad enum to MainMenu Command : PlayGame All of the game's levels and screens are now connected The game is now complete. Clicking on the title screen leads to the main menu; the main menu's Start Game button leads to the gameplay level; pressing Escape from gameplay leads back to the main menu; clicking the main menu's Credits button leads to the credits screen; clicking the credits screen's Return to Main Menu button leads back to the main menu; clicking the main menu's Return to Title button leads back to the title screen; and finally, clicking the main menu's Quit Game button quits the game. Command : StopGame Related Materials Tutorials hierarchies Manual LauncherNewProject selectobject commands resourceadding addremovecomponent Reference Commands Add Delete PlayGame StopGame CreateSprite Classes uiwidget uirootwidget uifilllayout uistacklayout spritetext sprite Events LeftClick LogicUpdate GameRequestQuit KeyDown Enums Cursor Development Task T1186"
  },
  "docs/zilch_editor_documentation/zilchmanual.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual.html",
    "title": "Getting Started | ZilchEngine",
    "keywords": "The Zilch Engine Manual is designed to be a comprehensive reference guide for all engine functionality. It offers descriptions of engine systems and components for those who are already developing their own projects in the engine. If you feel you need more guidance or practice check out our tutorial section. Getting Started New to the Zilch or the manual? Get started here. Editor How to use the tabs, windows, and commands of the Zilch Editor. Scripting Scripting using Nada in the Zilch Engine. Architecture Explore the Zilch Engine's architecture and learn how to build your games better. Graphics Learn how to use cameras, lights, renderers, and other graphical features in the Zilch Engine. Physics Learn how to work with RigidBodies, Joints, Forces, and other properties of the physics engine. Audio Placing sound emitters, microphones, and importing sound assets. Gameplay The parts of the engine usually used for gameplay scripting Nada_In_Zilch Learn the basic of how to use Nada (our proprietary scripting language) in the Zilch Engine animator.md Learn how to use the animation tool in Zilch. Networking Networking in Zilch Coming Soon!"
  },
  "docs/zilch_editor_documentation/zilchmanual/ai.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/ai.html",
    "title": "| ZilchEngine",
    "keywords": "Artificial Intelligence In game development artificial intelligence (AI) is a very broad field. We use the term AI to refer to everything from navigation and pathfinding, to to basic enemy behavior and procedural content generation. Simple AI Examples The simple AI tutorial has been moved here here"
  },
  "docs/zilch_editor_documentation/zilchmanual/animator.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/animator.html",
    "title": "Why it exists | ZilchEngine",
    "keywords": "The Animator allows one to change the value of properties on components over time. Why it exists Animator allows one to custom build complex animations through the Zilch Editor using a graphical representation. Using the Animator, one can create multiple Keyframes (explained below) of a component's properties on a timeline to achieve complex animation. These are some examples of the type of animation the Animator can do: Moving Platforms Day/Night cycles Flickering lights Opening doors Cinematic Events UI animations and more... Opening the Animator The Animator can be accessed by pressing the following button at the top of the Zilch Editor window: Alternatively, it can also be opened through the Zilch Search window: Once it has been opened, a window will appear at the bottom of the Editor : AnimationGraph Component Before animating an object's properties using the Animator, the AnimationGraph component must first be added to that object. This tells Zilch that this object's properties are now able to be animated as well as how fast it should be played. The AnimationGraph component is added to an object the same as any other component or by clicking on the highlighted text at the bottom of the screen: NOTE: \"No Object Selected.\" If the Animator shows No Object Selected instead of Click to add Animation Graph, click on the object to be animated to proceed. Adding an Animation The last setup step is to create an Animation with the RichAnimation template. This can be done, through Zilch's Add a Resource window: This can also be done by clicking on the highlighted text at the bottom of the screen: The object should now have a new SimpleAnimation component. SimpleAnimation Component This component indicates which animation to associate with the object. From this component, the animation to play as well as the play mode of the animation can be chosen. NOTE: Using Animation Since animation to play can be chosen through the SimpleAnimation Component, one can easily create an animation that works with multiple objects. Just add an AnimationGraph component and a SimpleAnimation component to the other object and select the animation to use. Now everything is ready to start animating. Keyframes To begin animating, keyframes must be created. Keyframes tell the animation that, at a given point in time, a property should be set to a certain value. Between each keyframe, the Animator will create a curve that will interpolate the chosen property values between each keyframe. To choose the property to keyframe, click on the icon next to the property that should be animated. This will create a keyframe of that property, with its current value, at the time indicated by the Play Head (the vertical blue bar in the animation graph): The Animator creates a curve interpolating between the two values. By repeating this, you can create multiple keyframe with the chosen time and value: Next, the animation controls on the lower left corner will be used to play and see the animation in action. Animation List On the left-hand side of the Animator window window, the name of the animation that has been created can be seen. This location shows the current animation that is being edited along with the values being manipulated. It also allows one to switch to different animations, allowing easy editing of more than one animation. Animation Controls By default, the animation plays at 30 frames per second, meaning that if a second keyframe was at frame 30, the animation will take exactly one second to complete. The animation control panel allows one to play, play in reverse, step frames and move to the beginning or end of an animation, providing different methods to preview and fine tune the value changes over time. At the bottom of the animation controls the animation preview playmode may be set: Play Once plays the animation and stops when the animation is over Loop plays the animation again after it's over and repeats it indefinitely Pingpong plays the animation forward and then backward after it's over and repeats it indefinitely Take note that these changes do not take effect in-game. The in-game playmode may be changed through the object's SimpleAnimation component. Preview Time Scale determines how fast the animation is played when previewed. This does not affect the in-game speed. The in-game timescale can be adjusted through the object's AnimationGraph Component. Animator Settings Here is a list of the other settings and functionalities of the Animator: From left to right: X A field that displays the position of a key with respect to time (Horizontal Axis) Y A field that displays the position of a key with respect to its value (Vertical Axis) AutoKey button Allows for dynamically creating keys whenever the property of the object is altered. AutoFocus button Frames the selected curve or collection of keys on the animator screen when the curve changes (also accessible by pressing F) Snapping X When toggled, the playhead will snap to the nearest X value. Onion Skinning When toggled displays ghost versions of the object with property values equivalent to frames close to the Play Head {nav icon=square-o, name=Frames/Timecodes} Swaps between frames and timecode display at the bottom of the Playhead Linear Tangents Toggles whether to use linear tangents to edit the curve Split Tangents Toggle between splitting and joining the tangent between the left and right side of the point Weighted Tangents Toggle between weighted and non-weighted tangents Examples Moving Platform It is very easy to create a moving platform by using the Animator. First, add an AnimationGraph and SimpleAnimation component to the platform. Next create a new animation to edit. Keyframe the initial position of the platform. Next move the playhead to sometime in the future (this will determine how fast the platform will move ) and have a keyframe of the platform at the end location. Finally, the platform will move back and forth by selecting the Pingpong playmode on the platform's SimpleAnimation component. Day-night Cycle It is also very easy to create a day-night cycle by using the animator. Here, a Sun object is centered at the center of the level. Parented to the Sun object, there is a directional light object that lights the level from a distance away. The goal is to simulate a day-night cycle by rotating the light around the level with the light always facing the center of the level. This can be done by adding the AnimationGraph and SimpleAnimation component to the Sun object. Then a new animation must be created. Next, keyframe the starting position of the Sun object rotation property. Move the playhead forward and create another keyframe. Click on the appropriate rotation property in the Animator and change the Y value of the Animator settings to the value 360. Finally, set the playmode to loop. Related Materials Code Reference AnimationGraph SimpleAnimation"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture.html",
    "title": "Cogs | ZilchEngine",
    "keywords": "The Zilch Engine uses a component based architecture that makes it easy to extend both the functionality of your game and the editor. In this section you can find explanations of the concepts that are core to our overall philosophy when constructing the engine and projects within it. If you feel you need more practice with architecture concepts check out the architecture tutorials section here . Cogs Cog is a reverse acronym for Game Object Composition. In component based architecture game objects are simply a collection of components. archetypes.md An Archetype Resource is the serialized definition of a Cog which can be used as a template from which to create new cogs from. Significant Objects The objects found in this section provide access to settings that can have an effect on a game-wide, space-wide, and level-wide scale. Every user should be aware of these objects and their respective properties. Resources Resources are serialized pieces of data that fuel your game. There are many types of resources ranging from imported Textures to SoundCues generated in engine. Components Read more about the concept of component based design here."
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/archetypes.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/archetypes.html",
    "title": "archetype_basics | ZilchEngine",
    "keywords": "An Archetype Resource is the serialized definition of a Cog (Game Object Composition) which can be used as a template from which to create new cogs from. The core benefit of Archetypes is that any changes made to the Archetype affect each object created from the Archetype. These objects are called instances of the Archetype. archetype_basics Nested_Archetypes (Documentation Coming Soon) archetype_inheritance (Documentation Coming Soon)"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/archetypes/archetype_basics.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/archetypes/archetype_basics.html",
    "title": "Advantages of Archetypes | ZilchEngine",
    "keywords": "An Archetype Resource is the serialized definition of a Cog (Game Object Composition) which can be used as a template from which to create new cogs from. The core benefit of Archetypes is that any changes made to the Archetype affect each object created from the Archetype. These objects are called instances of the Archetype. Advantages of Archetypes Often in games we find reasons to have several copies of the same object in the game at once. The game could take place in a forest with thousands of trees and rocks with subtle differences. It could be an arcade shooter with hundreds of identical enemies swarming towards the player. In any case where there is duplicate object creation Archetypes can save us both development time, and performance at runtime. If a level has hundreds of instances of the same character Archetype, all those characters can be modified at the same time by modifying the Archetype. Where as if each chracter was not Archetyped, they would have to be individually modified which is slow. One could also group select and modify which may not be practical depending on the placement of objects in the level. While making full use of the Archetype system takes forethought, it increases development efficiency over the course of a project. Take the example of a game with an army of identical characters which are made out of instances of just 1 or 2 Archetypes the engine can load it much faster than if each character was its own unique Cog with no shared Archetype. This is because after the Archetype is loaded by the engine, it can be used by the engine to create/render the instances of it in the army. As opposed to the engine having to load a copy of the object data for each non-Archetyped tree object. Creating Archetypes Creating an Archetype is fairly simple. Simply provide an name for the new Archetype in the Archetype field and press Enter or the button. This will create the new Archetype resource from the selected object causing to to appear under the Archetype tag in the Resource Window. Creating Objects from Archetypes Creating a new instance of an existing Archetype is simple and can be done through multiple approaches. Instance from the Resource Library By clicking and dragging an Archetype resource from the resource library into the Level Window we can create a new instance of that Archetype. Copying an Instance Objects which are an instance of an Archetype can be duplicated via copy & paste to create a new instance of the same Archetype. ctrl + c ctrl + v Here ctrl + +c and ctrl + v are used then ctrl + click + drag Instances at Runtime Archetypes are essential for creating objects at runtime. Here is a short example of how one might create instances of an Archetype at runtime. class ObjectSpawner : NadaComponent { [Property] var ObjectArchetype : Archetype = Archetype.MyArchetype; [Property] var SpawnRate : Real = 1.0; var Timer : Real = 0.0; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : LogicUpdate) { this.Timer += event.Dt; if(this.Timer > this.SpawnRate) { this.Timer = 0.0; this.Space.Create(this.ObjectArchetype); } } } Here you can see the above ObjectSpawner script running. As you can see the function Space.Create() is how you instantiate Archetypes at runtime from script. There is also Space.CreateAtPosition() which allows you to specify a position for the object to spawn at as opposed to the Space origin. Basic Archetype Modifications When an Archetype instance is modified it turns orange. Below the behaviors various types of modifications are described. Property Modifications When a property field of an an Archetype instance is edited it is turned orange to mark it as modified. This is a common theme as other items will turn orange when modified. Local Modification Override It should be noted that based on the above modifications to Transform the Archetype instance will not be marked as modified. This is because the properties such as Transform.Translation, Transform.Rotation, Transform.Scale, and Area.Size have the LocalModificationOverride attribute which prevents that property from normally interacting with archetype updates and reversion. A property with the LocalModificationOverride attribute will not be uploaded with other modifications when a modified instance is uploaded to the archetype. Overrridden properties will also not be modified when an instance is reverted to archetype. The LocalModificationOverride attribute can be applied to properties in custom Nada components as well. Component Modifications Adding, removing, or reordering a component to an Archetype instance modifies it from Archetype. Unmodified Component added Component removed Components reordered Child Modifications Adding, removing, reordering a child object from an Archetype instance will also mark the Archetype as modified. Unmodified Child added Child removed Children reordered It is important to note that neither component nor child modifications have functionality equivalent to LocalModificationOverride available. Property modifications usually adjust some factor of a piece of functionality. However, component and child object operations have the potential change the fundamental functionality of the Archetype. In the case where a certain component or child object modification becomes common place it should be add to the original archetype (and have the originally unmodified instances use LocalModificationOverride) or create a new archetype with the modifications. Upload To Archetype Above we discussed the various modification types you can make to an Archetype. It is very common for a developer to create many instances of an Archetype then modify some paticular instance. However, sometimes we want to go the opposite direction and apply modifications we have made to an individual instance to the Archetype. Thinking about the army of characters we used as an example earlier. Imagine we had been changing hat colors for awhile and we decide we like a paticular color for the default. By clicking we can turn a[pply this change to all unmodified instances of the Archetype. This is called uploading to Archetype. Whereas if we give it a new Archetype name and click we will create a new Archetype. Here we modify right two of the three Archetype instances. The middle instance, which is modified, is then uploaded to the Archetype causing the modification to be applied to the unmodified instance on the left. Notice that the other modified instance on the right does not turn Red. This is due to the right instance being already modified from the orginal Archetype (meaning it is modified from the newly uploaded version as well). Revert To Archetype Reverting Cogs Often developers make accidental or undesireable changes to an Archetype instance and have legitamate reasons to not want to undo everything to revert the instances back to their original state. This is one of the many reasons Archetype instances can be reverted to the current state of the Archetype resource using the button next the Archetype field in the property window. Here you can see the middle sprite reverted to match the orginal Archetype. Reverting Properties Often it is necessary to revert individual properties on an Archetype instance. This is a simple operation: By using RightClick on the property grid one can open the context menu allowing the property to be reverted without affecting the rest of the instance. This is important and simply setting the modified field to the same value will not make the field appear un-modified to the engine. Reverting Locally Removed Child By using RightClick on the greyed out representation of objects which have been removed from the child hierarchy of an Archetype one can Restore an object back into the heirarchy. Reverting Child Order If children in an Archetype hierarchy are reordered, their order can be reverted to match the current Archetype by using RightClick on the Archetype instance root object and selecting Restore Child Order. Reverting child modifications are important as for reasons of reverting Marking as Modified There are time where an Archetype is about to be upload, but it is realized there is a single unmodified instance of the Archetype which should not be updated to the new Archetype. In this case it is possible to manually mark a property as modified even if its value matches that of the original Archetype. This allows the Archetype to be updated without having the changes affecting the instance which has a locally overridden property. Once again let's think back to the army of characters all created from the same Archetype, specifically the example where we have been experiementing and have just settled in on the hat color we would like to be the default for the whole army. Now imagine we want the leader to keep the original hat color. By marking the leader's hat color as modified, when we upload the new color to the Archetype the leader will not be affected. (NOTE)Nested Archetypes: Nested archetypes are supported and are currently int the #zilch_editor_documentation pipeline: T391 Related Materials Manual Resource"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/archetypes/archetype_inheritance.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/archetypes/archetype_inheritance.html",
    "title": "| ZilchEngine",
    "keywords": "{T2641}"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/archetypes/nested_archetypes.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/archetypes/nested_archetypes.html",
    "title": "| ZilchEngine",
    "keywords": "{T391}"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/cogs.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/cogs.html",
    "title": "GameObjectsConcept | ZilchEngine",
    "keywords": "Cog is a reverse acronym for Game Object Composition as in component based architecture game objects are simply a collection of components. Game objects can be unique or have several instances of a game object archetype. The following sections cover how we approach the Architecture of game objects. GameObjectsConcept Pieces of interactive content used throughout the Zilch Engine ObjectStore Saves an object to a persistent local store"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/cogs/gameobjectsconcept.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/cogs/gameobjectsconcept.html",
    "title": "Creating a Cog | ZilchEngine",
    "keywords": "Game objects in the Zilch Engine (game object compositions, or COGs) are not defined using classes. Instead they are collections of components, each of which provide a certain functionality to the object. A component can be data, behavior, and/or a link to a system. For example, an Cog called \"Ball\" might be a composition that includes the Transform (position, rotation, etc.), Model (geometry, textures, etc.), RigidBody (movement), and Collider (shape, collision, etc.) components, while a \"Main Camera\" object would include Transform, Controller (mouse or keyboard input, etc.), and Camera (field of view, zoom, etc.). Or you could create a \"Ball Camera,\" with Transform, Model, Rigid Body, Collider, Controller, and Camera. One of the keys to working with a component based engine is to think of objects in terms of what they do, not what they are. If you have a hospital, a soldier, and a medic, the hospital and the medic have a healing component, while the soldier and the medic have a mobility component, but you don't need to group one as a building and the other two as infantry. All the game engine cares about is what the object can do. You might see a ball and a car as different types of things, but to the game engine they are both objects composed of Transform, Model, Rigid Body and Collider. They have the same functionality: the only difference is their data. Creating a Cog The easiest way to start creating your own cog is to start with a command that generates one for you, e.g. CreateSprite , CreateCube , CreateTransform , etc. These create cogs that you can then customize by adding or removing components and setting their properties in the Properties Window. Copy & Paste When creating a new object, you can always copy and paste other objects and alter their properties from there. The copy and paste functionality places the same information on the clipboard that it does when saving. Here is what we see when copy our Sprite generated from CreateSprite into a text editor: Selection selection = { Cog = { LinkId = { uint Id = 1, }, Named = { string Name = \"Sprite\", }, Transform = { Vec3 Translation = [1.97043, 6.45429, 0], Vec3 Scale = [1, 1, 1], Quat Rotation = [0, 0, 0, 1], }, Sprite = { string SpriteSource = \"5275aa4d802dd6dc:Square\", bool FlipX = false, bool FlipY = false, Vec4 Color = [1, 1, 1, 1], bool Visible = true, bool OnTop = false, bool AnimationActive = true, float AnimationSpeed = 1, uint StartFrame = 0, BlendMode BlendMode = Alpha, SpriteGeometryMode GeometryMode = ZPlane, }, }, }, This code can be copy and pasted into other projects. This works because, unless you manually remove them, you have all the default Resources necessary to create this object. In many cases this won't work with your cogs because the copied object references resources that differ between your destination project and the source project. Related Materials Code Reference Transform CreateSprite CreateCube CreateTransform Manual Model RigidBody"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/cogs/objectstore.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/cogs/objectstore.html",
    "title": "Related Materials | ZilchEngine",
    "keywords": "objectstore saves an object to a persistent local store. All properties that are normally saved on the object are saved with ObjectStore. The data is stored on the local computer and will be saved between runs of the game. Can be used for progress, game saving, or preferences. When used with Nada, make sure you mark the data to be saved with either [Serialized] or [Property] attributes. class ObjectStoreTest : NadaComponent { [Property] var SomeArchetype : Archetype = null function Initialize(init : CogInitializer) { //just some simple stuff here to cause compilation to work var someObject : Cog = null; //Restore an object called \"Name\" and if it does not exist use SomeArchetype to create it. //Also takes the space to create the object in. var object = Zilch.ObjectStore.RestoreOrArchetype(\"Name\", \"Archetype\", this.Space); //Store the object on local computer Zilch.ObjectStore.Store(\"Name\", someObject); //Restore an object. Null object if not found. Zilch.ObjectStore.Restore(\"Name\", this.Space); } } To clear all stored objects on a computer you can use the ClearStore command. Related Materials Code Reference ClearStore Tutorial Loading and Saving Data"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/components.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/components.html",
    "title": "Component Based Design | ZilchEngine",
    "keywords": "Components are bits of functionality that can be added to a game object. You can see the three components on our Player in the Properties window: Transform, Sprite, and RigidBody. Transform gives our game object a position, rotation, and scale. Sprite, which requires a Transform, allows us to visualize our game object. RigidBody allows our Transform's Translation (position) and Rotation to be altered by the Physics engine. By using components to create our game objects we can easily reuse our code to make new and different items. This set-up can aid you in rapid prototyping when making your own games. Lets imagine we are making Bats, Wolves, and Birds. You could create 3 components: BatLogic WolfLogic BirdLogic While making them you find they have some things in common. Rather than copying and pasting (which becomes messy fast), we can use the component-based engine to our advantage and rearrange our logic. By making smaller components of functionality, we can factor out the code into common components making it easier to share between them, for instance: The ones in gray are built-in to the Zilch Engine Noticing shared functionality allows us to restructure our code By having these things separated you can more easily prototype and create new game objects. For instance, in our example you later decide to create a flying healthpack. By utilizing the components you already ade, Flying and ChangeOtherHealth, most of the work is done. Something we// can't //make with BatLogic, WolfLogic or BirdLogic components Components are meant to be generic (when plausible), in order to allow for reuse. In many ways, components can be ade more generic by adding Properties to components. In our example, we could make our DropLoot component more generic by having a Property represent which loot is dropped. With this new property our component could allow our Bat to drop health, while the Wolf drops a power-up, etc. Component Based Design When building in the Zilch Engine your Workflow can be optimized by building things in a component based manner. What this means is that instead of attaching a single script component to a single archetype and using it to drive all the functionality of that object, your workflow can be sped up by building specific smaller actions to specific components. When choosing how to construct a set of script components for a project it's helpful to play several games in the chosen genre and look at what commonalities they have. Using what you find you can generate a set of components you will need. For instance, the shooter could have used an \"input component\" for mouse and keyboard input, a \"shoot component\" to handle how shooting is done in the world, a \"movement component\" to handle movement through the world, a \"sound component\" to handle the various sounds the player will create and other varied game logic components to handle things such as health (e.g. \"health component\"), power ups, collisions, etc. Enemies in a shooter would probably also need a \"damage on collision component\" and a \"special shooting component\" and a \"behavior component\". As with all design the correct way depends on the project. No single set of script components that will give you all your required functionality for all projects."
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/objects.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/objects.html",
    "title": "The Level Settings Object | ZilchEngine",
    "keywords": "Some objects in Zilch model a concept as opposed to something actually has a physical representation in the scene. Objects like GameSession, Space, and LevelSettings are key to maintaining a flexible and efficient code base. They also provide access to settings that can makes changes on a game-wide, space-wide, and level-wide scale. The Level Settings Object Provides access to level-wide settings like gravity and drag. The Space Object Provides access to the default Space components such as GraphicsSpace and PhysicsSpace. The Game Session Object Provides access to the DefaultGameSetup component where the starting space and level may be set."
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/objects/gamesession.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/objects/gamesession.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "GameSession manages the running of the game, both upon pressing the play button and dealing with the exported version. It is an object that represents one instance of the game. Being an object, it is possible to create more than one game session per executable. Common Uses Setting the starting level Redirecting the use of Esc key in game Using the GameSession The GameSession object may be accessed from the scripts that are running via any Cog: // Within a script, those ``this`` variables referring to a Cog can get the GameSession // Note: Even though they are not Cogs, all Components (to include derived NadaComponents) // are equipped with a getter to GameSession var myGame = this.GameSession; // Here is an example of pulling it from a dynamically created cog. var cube = this.Space.Create(Archetype.Cube); var alsoMyGame = cube.GameSession; In Nada, a GameSession object cannot be created using the a normal constructor. In order to create a GameSession one must use a function bound from C++: // Here, a C++ function bound to Nada is used to create a GameSession var myGame = Zilch.Engine.CreateGameSession(); IMPORTANT: This is primarily intended for having a project to launch a dedicated server; therefore, calling this puts the game in the background while still using resources. It must be managed by the user: this includes destroying the game, ensuring resources do not leak, and checking references of objects belonging to other GameSessions before using them to avoid exceptions or other corruption of data. Being that all Zilch Projects run a game, it can be edited within the editor. The hotkey Shift + g accesses the Game Archetype that is used to spawn the game. By default it comes with the DefaultGameSetup component, which can be used to set the starting level or load a custom space archetype. From here one can also add custom-made components, just like any other object. Events of GameSession The user connects to these events when dispatched on the GameSession], e.g.: Zilch.Connect(this.GameSession, Events.GameLoad, this.OnGameLoad); Event Name Type Description GameSetup gameevent This event fires after the creation of the GameSession. Only GameSession will be to respond to this event due to the timing of the dispatch during normal circumstances. GameLoad gameevent This event fires after the creation of the Space Archetype. Only GameSession and spaces will be able to respond to this event due to the timing of the dispatch in normal circumstances. GameStarted gameevent This event fires after the starting level is fully loaded. All cogs present at the start of level are able respond to this event. Dynamically created objects may or may not respond depending on when they were created. (e.g. those created during initialize of those objects loaded with the level will still receive this event, but those created in response to the LogicUpdate event will not. GameFocusIn gameevent This event fires once the game window has regained focus (having been out of focus.) This event is not sent when testing in the editor. In order to test this logic, run the game using the ExportAndPlayGame command. GameFocusOut gameevent This event fires after the game window has lost focus, for instance when clicking on another application. This event is not sent when testing in the editor. In order to test this logic, run the game using the ExportAndPlayGame command. GameRequestQuit gameevent This event fires after the pressing the Esc key. This allows a script to hook the key in order to override this behavior. See HandlingQuitMessage for more on this. Related Materials Manual HandlingQuitMessage level Cog Reference GameSession gameevent"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/objects/levelsettings.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/objects/levelsettings.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The LevelSettings object is a Cog of which there is one unique instance per Level. It serves as a globally accessible object from a variety of object types such as Components or other Cog. Unlike any other Cog there is no way to instantiate a LevelSettings object. Common Uses Adding level specific physics effects. Adding custom components which need to be globally accessible in a level by any other components that exist in the level. Using the LevelSettings Object Accessing the LevelSettings Object In Editor NOTE: Initialization Order Notice that because the LevelSettings object is always the first object in the Object Window (and cannot be reordered) it will always be the first object to be created and initialized when the level is loaded into the Space. This can be very useful when implementing logic which depends on being initialized before related components on other objects in the level. The LevelSettings object will always be the first object in the Object Window making it easy to find in editor. Since the LevelSettings object lacks any Graphics or Physics based representation in the level, the only way to select and modify its components in the editor is through the Object Window. NOTE: LevelSettings & Hierarchies While parenting can often be useful with objects that do not have transforms, in the case of the LevelSettings object, parenting has been deactivated. Accessing the LevelSettings Object In Script The LevelSettings object may be accessed from scripts via any component or Cog: class ExampleComponent : NadaComponent { function Initialize(init : CogInitializer) { // Accessing the LevelSettings object through the component var thisLevelSettings = this.LevelSettings; // Accessing the LevelSettings object through the component's object var ownerLevelSettings = this.Owner.LevelSettings; // Accessing the LevelSettings object through the Space object var spaceLevelSettings = this.Space.LevelSettings; // If we compare the values of the properties which access the LevelSettings // object through different objects (component, component's object, and // space), we can prove that they are accessing the same LevelSettings object. if(thisLevelSettings == ownerLevelSettings && ownerLevelSettings == spaceLevelSettings) { Console.WriteLine(\"These variables reference the same LevelSettings object.\"); } } } Default Components of LevelSettings GravityEffect & DragEffect Physics Effects are built in components that implement a piece of common physics-based functionality such as the GravityEffect or the DragEffect components that are attached to the LevelSettings by default. Each physics effect component may perform the logic on different spatial scopes depending on which object is attached to. When a physics effect component is attached to the LevelSettings object it is applied to all objects in that level. This allows one to implement level wide effects with any of the built in physics effects as is done by default with GravityEffect and DragEffect. GridDraw The griddraw component is a simple debug drawing component. It uses Zilch's buit in GridDraw component is a simple debug drawing component. It uses Zilch's buit in debugdrawing to create a customizable unit grid in the Level Window. Custom Components The LevelSettings object is often a very convenient object on which to attach certain custom Nada components. Imagine a scenario in which a function is implemented for a friendly AI which needs to return an enemy to attack. If all the enemies exist independent of any other object or component, there may be no immediate path from which to access all enemies from the AI. A common technique is to add an EnemyManager component to the LevelSettings object which has a member of type Array[Cog] called EnemyList. By attaching this component to the LevelSettings object all objects, including the enemies, are given access to the EnemyManager component. If the enemies are implemented so that they add themselves to the EnemyList when they are initialized and remove themselves when they are destroyed, there now exists a reliable way of accessing a complete list of all existing enemies. While the above example may not be applicable to all games, it demonstrates the usefulness and flexibility that the LevelSettings object may grant. Events Dispatched On The LevelSettings Object Event Name Type Description EnterView graphicalevent Dispatched if cameraviewport is attached to the LevelSettings object. ExitView graphicalevent Dispatched if cameraviewport is attached to the Related Materials Manual Pages Cog Editor UI Debug Drawing physics effects Code Reference GravityEffect DragEffect GridDraw"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/objects/spaces.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/objects/spaces.html",
    "title": "Using the Space | ZilchEngine",
    "keywords": "Space is the infinite three-dimensional extent in which objects and events have relative position and direction. It consists of 3 dimensional axes and time. Spaces in the Zilch Engine are containers for game objects. When a level is loaded, all the game objects from that level are put into a space. Also, when you create a game object in code, you must put it into a space, usually the same one that the level was loaded into. In a simple game you only have one space, which is where all your game objects go. Each space has its own instances of the core systems of the engine: graphics, physics, etc. Because of this, game objects in two different spaces will not collide or otherwise physically interact. Game objects in different spaces are rendered separately, but can be layered, such as when using one space for level game objects and another for UI game objects. Creating a separate space for UI game objects is one of the most common uses of multiple spaces in a game. Using the Space Creating a Space You can create a space through the GameSession object. class SpaceCreator : NadaComponent { [Property] var MySpaceArchetype : Archetype; [Property] var MySpaceName : String = \"MyNamedSpace\"; var MyNewSpace : Space; var MyNewNamedSpace : Space; function Initialize(init : CogInitializer) { //Here we create an unnamed Space object this.MyNewSpace = this.GameSession.CreateSpace(this.MySpaceArchetype); //Here we create a Space object named \"MyNamedspace\" this.MyNewNamedSpace = this.GameSession.CreateNamedSpace(this.MySpaceName, this.MySpaceArchetype); } } Naming a space is not absolutely necessary, if you have a good system keeping track of the spaces you are creating. However, naming your space is a good general practice as you'll find when trying to access Spaces you have created. Accessing a the Space You can access the Space object from scripts via any component or Cog: class ExampleComponent : NadaComponent { // Accessing the Space object through the component var CurrentSpace : Cog { get { return this.Space; } } // Accessing the Space object through the component's object var AlsoCurrentSpace : Cog { get { return this.Owner.Space; } } function Initialize(init : CogInitializer) { // If we compare the values of the to properties which access the // Space object through different objects we can prove that they // are accessing the same Space object. if(this.CurrentSpace == this.AlsoCurrentSpace) { Console.WriteLine(\"These properties reference the same Space object.\"); } } } Accessing the Space this way will give you a reference to the Space that the object ExampleComponent is attached to exists in. n some games you may have multiple spaces in order to implement certain features such as an in game HUD. In situations such as this you must store a reference to the HUDSpace on creation in order to access it later. Space Components Spaces have special space components that can not be removed. These are core engine components for containing different aspects of the game objects like physics, graphics, and sound. Spaces are stored as Archetypes and can be modified to change the properties of a space. To access the space of the current level Press: In the name=Level Window, icon=window-restore Press shift + s Or In Select drop down Click Select Space When opened, a space should look something like this: By default a space has four components TimeSpace, GraphicsSpace, PhysicsSpace, and SoundSpace, but if needed you may add more by creating a new space archetype and adding the desired components. In each component of the space properties can be found that will affect the entire space. NOTE: The ReactiveSpace component is deprecated and changes made to it will have no effect on the Space or how using the Reactive component works. Events Dispatched On The Space Object Event Name Type Description PhysicsUpdateFinished objectevent Dispatched immediately after physics has finished updating. LogicUpdate updateevent Dispatched after the major systems's updates (doesn't run in editor) FrameUpdate updateevent Dispatched after the engine update. Runs in editor. Related Materials Manual Archetypes GameSession object Code Reference timespace graphicsspace physicsspace soundspace objectevent updateevent"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/resources.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/resources.html",
    "title": "Independent Resources | ZilchEngine",
    "keywords": "Resources are where most data comes from in a game. While Cogs allow us to model any scene we want, the model will often lack context or depth with out resources such as visual and audio assets. While many resources are imported into a project from outside the engine some such as Levels and Archetypes are created within the engine. Resources ResourceAdding Independent Resources While most resources are directly tied to larger systems within the engine and are therefore included in the documentation for the respective system (e.g., the page for sound can be found in the audio index), there are a few that are independent of any one system. As a matter of convenience, these particular resources are collected here: ColorGradient Level SampleCurve TextBlock ResourceTable archetypes Types of Resources Resources vary greatly in type, ranging from audio and visual assets to physics materials and meshes to different types of Nada files. Code Resources NadaScript NadaFragment (Shaders) Graphics Resources Font Materials Mesh RenderGroup SpriteSource textures Physics Resources CollisionGroup CollisionTable ConvexMesh MultiConvexMesh PhysicsMaterial PhysicsMesh PhysicsSolverConfig Sound Resources sound SoundAttenuator soundcue soundtag"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/resources/colorgradient.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/resources/colorgradient.html",
    "title": "Using ColorGradient | ZilchEngine",
    "keywords": "ColorGradiant is a resources that allows the user to make a custom color gradient. The gradient may then be sampled from and applied as a color to any object that has a component with a color property. Using ColorGradient Creating a ColorGradient A new ColorGradient may be created through the Add a Resource window: Once the new ColorGradient has been named and created, an editor window will pop up: As can be seen, the editor currently shows a gradient from black to white. The user may add keypoints on the gradient, however, to add in new colors by left-clicking anywhere on the gradient bar. These colors are selected via the common color selection window. As the common color selection window is used, any value within it may be changed as well, including the alpha value. Applying the ColorGradient Sampling from ColorGradient is done through a ColorGradient variable within NadaScript. The value passed into Sample() must be between 0 and 1: class GradDemo : NadaComponent { // ColorGradient to use [Property] var ColorGrad : ColorGradient = null; function Initialize(init : CogInitializer) { // Set color to the value sampled halfway through the gradient this.Owner.Sprite.VertexColor = this.ColorGrad.Sample(0.5); } } Attaching this code as a component onto a basic sprite (and selecting the ColorGradient made above for the ColorGrad property), the sprite will appear like so when running the game: One can also use code to interpolate through the ColorGraident, changing the color of the sprite over time. class GradDemo : NadaComponent { // ColorGradient to use [Property] var ColorGrad : ColorGradient = null; // Value to pass into ColorGradient's Sample() function var Value : Real = 0.0; function Initialize(init : CogInitializer) { // Set color to color found at start of the gradient this.Owner.Sprite.VertexColor = this.ColorGrad.Sample(this.Value); // Call function to interpolate this.Value from 0 - 1 this.InterpolateValue(); Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { // Update Sprite's VertexColor property with current sample from ColorGrad this.Owner.Sprite.VertexColor = this.ColorGrad.Sample(this.Value); } function InterpolateValue() { // Action to interpolate this.Value from 0 - 1 over three seconds Action.Property(this.Owner.Actions, @this.Value, 1.0, 3.0, Ease.Linear); } } The above code-block accomplishes the following things: Initially, it sets the color of the Sprite to the value sampled at 0 on the ColorGradient. It then calls a function-- InterpolateValue() --that uses an Action to interpolate the Real variable Value from 0 - 1 over the course of three seconds. Finally, the VertexColor property on the Sprite component is updated every frame by the value sampled from ColorGrad using Value In the following demonstration, another, smaller Sprite has been added behind the first Sprite to show how the change in Alpha value affects the appearance of the Sprite: Related Materials Manual Pages resources resourceadding Reference Pages colorgradient Sprite Material"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/resources/font.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/resources/font.html",
    "title": "Related Materials | ZilchEngine",
    "keywords": "Fonts are used to give a visual flair to any text in a project. They can make text unique, memorable and fit into the visual style of the project all at the same time. Zilch can accept either OpenType font (OTF) and TrueType font (TTF). Importing New Fonts New font resources can be added in one of two ways: the file can be either dragged and dropped into the editor window, or the Add command can be used by using Command : Add. This will open a new window where the user may select the font or fonts to import. Once a font has been imported any SpriteText can change its Font drop-down menu property to the newly imported font. Related Materials Manual SpriteText resourceadding Commands Reference Font"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/resources/level.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/resources/level.html",
    "title": "Using Levels | ZilchEngine",
    "keywords": "A level is resource that stores a set of objects which will then be created later when the level is loaded. Levels can be loaded into a space in order to create all objects saved to the resource. Levels can be edited using several tools, especially those found via the Editor UI. Using Levels Creating a Level A new level can be added by using the Add command (Command : Add or clicking on the Add button button) followed by selecting Level drop-down menu. The newly-created level will open in the Level Window and allow for the manipulation of objects to build game levels. At creation the level will only have the default objects inside it: LevelSettings and a few other object from the level template you select. The LevelSettings object is a cog that has a single unique instance per level that cannot be deleted or duplicated. It has several components attached in order to run various effects in the level, such as gravity. The background grid will also be turned on. The grid is there to help place objects within the level editor but will not be visible during gameplay, and can be turned on and off by using the toolbar in the top left corner of the Level Window. The collapsible toolbar has a few buttons for altering the view. Buttons Purpose Toggles between 2D & 3D camera controls. Toggles the editor camera's rendering mode between Orthographic and Perspective Projection. With the camera options you can either reset the editor camera to its default settings, or align a selected camera with the editor's camera. Toggles the grid line visuals in the editor. Levels vs. Spaces While levels are resources that store object data to later be loaded, spaces are where those objects are placed upon creation. This allows multiple spaces to load multiple levels at once, which is used to create HUD or UI elements, or to pause the main game while still allowing pause menus to function properly. // The level made with all the Pause Menu UI elements [Property] var PauseLevel : Level; // A property to hold a Space archetype used to create the Pause level [Property] var PauseSpaceArchetype : Archetype; // A variable used as a reference for the Space holding the pause menu var PauseSpace : Space = null; function Initialize(init : CogInitializer) { } function Pause() { // Create a new named Space for the Pause Menu this.PauseSpace = this.GameSession.CreateNamedSpace(\"PauseSpace\", this.PauseSpaceArchetype); // Load the Pause Menu level in the newly created Space this.PauseSpace.LoadLevel(this.PauseLevel); } function UnPause() { // If the PauseSpace exists, destroy it along with the Pause level if (this.PauseSpace != null) this.PauseSpace.Destroy(); } This code snippet gives an example of having two levels exist at once. By giving it a Space archetype and level to load and then calling the Pause() function in a NadaScript, it will create a new Space and load the new level without destroying the currently existing one. The Unpause() function will do the reverse, and destroy the level and Space. Related Materials Manual Editor UI Spaces CamerasViewportsRenderers Level Settings"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/resources/nadascript.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/resources/nadascript.html",
    "title": "| ZilchEngine",
    "keywords": "A NadaScript resource is an in-editor representation of a NadaScript file, which is a text file that follows the syntax of the Nada language. A single NadaScript usually defines and implements a single component, however it can contain any number of object definitions if needed. Common Uses Defining custom NadaComponents and NadaEvents Extending existing engine tools, commands and libraries Implementing custom game logic Using NadaScripts ###Creating a NadaScript A new NadaScript can be added by using the Add command Command : Add or clicking on the Add button, followed by selecting NadaScript. After giving the new NadaScript a name it's also possible to choose a template to use for the NadaScript, depending on what the script will be used for. The most commonly used template is Component and is therefore the default, however a NadaScript can also be used to create a custom Zilch Command or Tool. Component Template The Component template will generate a simple class structure which inherits from NadaComponent inside the newly create NadaScript. class TestScript : NadaComponent { function Initialize(init : CogInitializer) { //Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { } } By inheriting from NadaComponent, it becomes attachable to any in game object. NOTE: Nada is a statically compiled language, which means that all object definitions are global and aware of each other. It also means that in order for any one object definition to be compiled the entire project must be in a compilable state. Command Template When creating a NadaScript using the Command template, a basic class definition which inherits from NadaComponent is generated. [Command(autoRegister:true)] class TestCommand : NadaComponent { function Initialize(init : CogInitializer) { Zilch.Connect(this.Owner, Events.CommandExecute, this.OnCommandExecute); } function OnCommandExecute(event : CommandEvent) { Console.WriteLine(\"TestCommand Command Executed\"); } } The [Command(autoRegister:true)] will register the NadaScript so that it can be used just like any other Command in Zilch, and the connection to Events.CommandExecute will trigger the OnCommandExecute function whenever the custom command is used. While Commands can be used to trigger several things in the Editor, in order to effect the game space it needs to use event.Space in the OnCommandExecute function, rather than this.Space. Tool Template The template for a new Tool script is slightly more complex, but it is also commented for ease of use. [Tool(autoRegister:true)] class TestTool : NadaComponent { function Initialize(init : CogInitializer) { // We connect to this.Owner because we will get all events // forwarded to us when we're the active tool Zilch.Connect(this.Owner, Events.LeftMouseDown, this.OnLeftMouseDown); } function OnLeftMouseDown(event : ViewportMouseEvent) { // The space that was clicked in var targetSpace = event.Viewport.TargetSpace; // The ray from the mouse into the world var mouseRay = event.WorldRay; // Find the first object that was clicked on var castResult = targetSpace.PhysicsSpace.CastRayFirst(mouseRay); var clickedObject = castResult.ObjectHit; if(clickedObject != null) { // Undo / redo is handled through our operation queue object var queue = Zilch.Editor.OperationQueue; // Lets the Editor know that we're going to start modifying objects. // Any objects modified between this and the 'EndBatch' call will // all be undone at once with ctrl+z queue.BeginBatch(); // Before modifying the properties of an object, call this to save // the state of the object so that changed can be recorded once EndBatch is called. queue.SaveObjectState(clickedObject); // Make the object 5% bigger clickedObject.Transform.Scale *= 1.05; // We've finished modifying objects. Now when you press ctrl+z, // the object should back to its previous scale queue.EndBatch(); // This tells the Editor not to do what it would normally do with this event. // In the case of LeftMouseDown, the editor would attempt to select an object. event.HandledEvent = true; } } } Like the Command template uses the [Command(autoRegister:true)] attribute, the Tool template uses the [Tool(autoRegister:true)] attribute to register the Component defined in the NadaScript as a tool. This allows it to be selected like any other engine tool. The template tool is implemented so that when it is selected it will increase the scale of the first object hit by the projected ray from the mouse when the left mouse button is depressed. Since it is using a ray however, the object in question must have some form of collider attached. Tools may also have Properties defined, which will then be available when that particular tool is chosen. [Tool(autoRegister:true)] class TestTool : NadaComponent { [Property] var ToCreate : Archetype; Also a part of the Tool template is a section of comments giving the user a list of events available for use for Tools. //----------------- Tool Specific Events (Connect to this.Owner) // Events.GetToolInfo - Called when the tool is selected - Access to SelectTool // Events.ToolActivate - Called when the tool is selected // Events.ToolDeactivate - Called when the tool is deselected // Events.ToolDraw - Called every frame while the tool is selected //----------------- Input Events (Connect to this.Owner) // Events.LeftMouseDown // Events.LeftMouseUp // Events.RightMouseDown // Events.RightMouseUp // Events.MiddleMouseDown // Events.DoubleClick // Events.OnMouseScroll // Events.MouseMove // Events.KeyUp // Events.KeyDown //----------------- If you want to do a mouse drag, // Events.MouseDragStart // Events.MouseDragMove // Events.MouseDragEnd //----------------- Other Events (Connect to this.Owner) //Events.FocusLostHierarchy - The viewport no longer has focus Related Materials ###Manual Pages Scripting in Zilch Nada in Zilch Tutorial Pages Scripting Tutorials"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/resources/path.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/resources/path.html",
    "title": "| ZilchEngine",
    "keywords": "The Path resource is used as a base for the LevelPath component. Using a Path The Path resource on its own has no accessible functions. Instead a LevelPath component should be attached to an object, which will make its unique instance of a path which can then be accessed and modified. See the LevelPath page for more information. Related Materials ###Manual Pages Using LevelPaths Reference Pages Path LevelPath"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/resources/resourcetable.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/resources/resourcetable.html",
    "title": "Array Interface | ZilchEngine",
    "keywords": "ResourceTable is a resource that stores a collection of entries of a certain resource type for sampling during run-time. Sampling can be performed through three different interfaces: array, hashmap, and a weighted table. ResourceTables store a homogeneous collection of entries. Pictured above is a table of Archetypes . This can be switched to any other resource type or to strings. ResourceTable entries are composed of three items: Name: A name used for hashmap queries. This is sometimes used as a display name for the entry. Note: This name does not have to Value. Value: The actual resource/string of the entry. Weight: The weight to use when randomly sampling the table. See the WeightedTable Interface section below for details. All sampling functions for a ResourceTable return a ResourceTableEntry. In addition to the above listed properties, the stored resource can also be looked up via the Resource property. Note: This must be casted to the correct resource type. Array Interface ResourceTables can be accessed as an array at run-time. This is useful for a list of objects where order is important (e.g. generating UI). Given below is a simple example of using the array interface to spawn archetypes: // Spawn each archtype one below another for(var i = 0; i < this.Table.Count; ++i) { var entry = this.Table[i]; // The table can only return Resources. We have to cast to Archetype var archetype = entry.Resource as Archetype; // Arbitrary spawn position var pos = Real3(0, i * -10, 0); this.Space.CreateAtPosition(archetype, pos); } HashMap Interface ResourceTable can also be used as a hashmap where the entry's name is the key. One such example is mapping button names to a resource. Pictured above is a table of Levels. A menu in a game could use the Name properties to populate the text on buttons. When a button is clicked, the easiest way to get the Level to load is to use the HashMap interface to look up the entry by name. function GetLevelByName(name : String) : Level { var entry = this.Table.GetOrNull(name); if(entry == null) throw new Exception(\"Level '`name`' didn't exist\"); return entry.Resource as Level; } WeightedTable Interface The more interesting use of a ResourceTable is as a weighted probability table. A weighted probability table is used to sample items with a non-uniform distribution which can be thought of as rolling loaded dice. The weighted table view should be used to more easily edit and visualize the weights. This can be done by pressing the \"Swap View\" button in the UI. Weight vs. Probability Each entry in a table has a weight used to determine how likely it is to be randomly sampled. The weight is not to be confused with the actual probability of rolling an item though. An entry's probability is computed as its weight divided by the sum of all the weights in the table. In the above picture the \"Can\" has a weight of 0.66. The total weights in the table sum to 2.18. This means the \"Can\" has a probability of 0.66 / 2.18 = 0.30275 or approximately 31%. Sampling the Table ResourceTable can be sampled at run-time through the Sample function: function SpawnDropAt(pos : Real3) { // Sampling the weighted table requires two random numbers in the range of [0, 1) var entry = this.Table.Sample(this.RandomContext.Real(), this.RandomContext.Real()); var archetype = entry.Resource as Archetype; this.Space.CreateAtPosition(archetype, pos); } One of the most common uses of the weighted table is for a drop table. In the above example the table is randomly sampled to Spawn an Archetype at a given position. Note that the sample function requires two random numbers in the range of 0 to 1. Additionally, ResourceTable exposes the SampleIndex function which returns the index into the table instead of the entry itself. Related Materials Reference ResourceTable ResourceTableEntry Archetype RandomContext"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/resources/samplecurve.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/resources/samplecurve.html",
    "title": "Using a SampleCurve | ZilchEngine",
    "keywords": "The SampleCurve editor is Zilch's tool for creating custom curves that can be used with any value that can be normalized, such as the Ease parameter in Actions. Just as eases can be represented on a graph as a function of a change of one value given another, the same applies to the curves created with the SampleCurve editor. Common Uses Creating a custom curve that can be used in place of the Ease parameter in an Action. Visually representing a range of outputs for a range of inputs. Using a SampleCurve Creating a SampleCurve A new SampleCurve can be added by using the Add Command or clicking on the Add button, followed by selecting SampleCurve. By default, the initial curve shows a linear progression. To begin manipulating the curve, an anchor point will need to be added by double-clicking on the curve where the anchor point is desired. It can then be grabbed by holding down the left mouse button on top of the point, and moved around the graph, as is demonstrated below: If more anchor points are needed on the curve, simply double-click again on the curve at the next desired edit point. A virtually unlimited number of anchor points may be added, but eventually the curve will fill up to the point where effective edits are no longer possible. Editing a SampleCurve Once an anchor point has been created, the tangents of that point can be manipulated using one of four options: Linear Tangents, Weighted Linear Tangents, Split Tangents, and Weighted Split Tangents. All four are demonstrated below: Linear Tangents Weighted Linear Tangents Split Tangents Weighted Split Tangents NOTE: While Linear and Weighted Linear Tangents are mutually exclusive and selecting one will deselect the other, Split Tangents act as a toggle and can be used alongside either Linear or Weighted Linear Tangents. Applying the SampleCurve In the abstract a SampleCurve is a visual representation of a change over time or any other range. Once a SampleCurve has been created and edited to the desired result, it can then be used to effect changes in various Component properties such as position, color, light intensity, etc. The upcoming examples of using SampleCurves will be using the same Curve: Using Actions A SampleCurve can be used in place of the Ease parameter of an Action and alters the manner in which the value changes between its starting and ending values. The vertical axis of the SampleCurve represents a normalized value of the property being changed, with 0 representing the starting value and 1 representing the desired ending value. class SampleCurveTests : NadaComponent { // The SampleCurve to be used [Property] var Curve : SampleCurve; function Initialize(init : CogInitializer) { // The property to be changed; in this case, the object's translation var propertyToChange = @this.Owner.Transform.Translation; // The target translation var targetTrans = Real3(0, 5, 0); // The time it takes to move var time = 5.0; // Call the action property Action.Property(this.Owner.Actions, propertyToChange, targetTrans, time, this.Curve); } } This code will move an object from (0,1,0) to (0,5,0) over a period of 5 seconds, with the SampleCurve determining the path of the object. The shape of the SampleCurve will dictate where along the path the object should be, with 1 on the vertical axis representing the end value (in this case (0,5,0)) and 1 on the horizontal axis representing the total time (5 seconds). While the maximum value of both axes can be modified, using a SampleCurve in an action will still always use 1 from both axes as representing the ending values. Therefore moving past 1 along the vertical axis will change the property beyond what the final result will be; in this case the object moves past its final location, as it is having its Translation modified. Likewise if the horizontal maximum is changed: if it is set to a value lower than 1 then it will finish moving in the manner the SampleCurve dictates early then wait until the total time has passed before moving to its final position, and if it is set higher than 1 it simply will not finish the entirety of the curve. Sampling from the SampleCurve SampleCurve has access to a function, Sample() , that returns the value of the curve at a given point. It takes one argument of type Real , which represents an input value on the horizontal axis, and returns an output of type Real, representing the value of the vertical axis at that point. The return value is scaled by the Y maximum as defined in the curve editor. If the input value is less that the X value of the curve's first anchor point (usually 0.0), or greater than the X value of the curve's final anchor point (usually the X maximum as defined in the curve editor), then the value will clamp to the Y value of that anchor point. class LightTest : NadaComponent { [Dependency] var DirectionalLight : DirectionalLight; [Property] var Curve : SampleCurve; // The SampleCurve to be used [Property] var Lifetime : Real; // The lifetime of the light var Timer : Real; // Timer to track how long object has existed function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { // Increment the timer by Dt this.Timer += event.Dt; // Adjust intensity according to value sampled from curve this.DirectionalLight.LightIntensity = this.Curve.Sample(this.Timer); // Destroy self once timer reaches lifetime limit if(this.Timer > this.Lifetime) { this.Owner.Destroy(); } } } By adding this component to an archetype, it can then be created at runtime to create a sudden burst of light that will destroy itself after it flashes. Since using SampleCurve.Sample() uses the full values of both axes, if they are changed then it will affect the light's behavior. By changing the vertical axis to 5 and the horizontal axis to 2 it's possible to both extend its lifetime and make it brighter easily. Related Materials Manual Using Custom Eases in Actions Tutorials Using Actions Reference SampleCurve"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/resources/spritesource.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/resources/spritesource.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "A SpriteSource is used to create a two dimensional visual element. SpriteSources can be added and modified as needed, and the same base image can be used to create several different SpriteSources if need be. Common Uses Characters and other artwork in a two dimensional project Placing 2D pictures into a 3D landscape 2D animations Adding a SpriteSource NOTE: Zilch Engine only allows the importing of .PNG type images. It is possible to add SpriteSources of your own as well. By dragging a .png file into the Editor window, Zilch Engine will import the chosen asset. Alternatively, using the Command : Add and selecting SpriteSource from the list followed by clicking on From File, will open a new window. The user may then select the image or images to import into the engine, keeping the saved Resolution and Size. Once imported, these files can then be assigned to a game object with the Sprite component by clicking on the current SpriteSource and finding the imported image in the drop-down menu that opens. If changes need to be made, the SpriteSource can be modified in the Sprite Source Editor. Related Materials Manual Pages Sprites SpriteSource Editor Adding a Resource Tutorials Sprites Reference Pages SpriteSource"
  },
  "docs/zilch_editor_documentation/zilchmanual/architecture/resources/textblock.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/architecture/resources/textblock.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "TextBlock resources are used to organize and format the visual style of SpriteText in a project. They are a very helpful resource any time more than a single sentence of text needs to be used. NOTE: Recommended Reading This section covers topics that may not have been addressed yet. To learn or review those topics, please see: Area component, Sprites, & SpriteText Common Uses Organizing on screen text High volume text data entry Easier text swapping Using a TextBlock Adding Text using the TextBlock requires two elements: a TextBlock resource and a SpriteText component. To get the text from the TextBlock into the SpriteText you will need a component like this [RunInEditor] class SpriteTextBlock : NadaComponent { [Dependency] var SpriteText : SpriteText; [Editable] var TextBlock : TextBlock { get { return this.Block; } set { this.Block = value; this.SpriteText.Text = this.Text; } } var Block : TextBlock = null; var Text : String { get { if(this.TextBlock != null) return this.TextBlock.Text; else return \"\"; } } function Initialize(init : CogInitializer) { } } The SpriteTextBlock component is added to the object whose SpriteText needs to be changed. These two work in tandem to change the Text property of the SpriteText component. To create a new TextBlock, use TextBlock requires two elements: a TextBlock resource and and a SpriteTextBlock component. The SpriteTextBlock component is added to the object whose SpriteText needs to be changed. These two work in tandem to change the Text property of the SpriteText component. To create a new TextBlock, use commands : Add and select TextBlock from the resource list. This will open a new TextBlock in a new Tab where text may be written. After entering the desired text, simply add the SpriteTextBlock component to the Game Object and set the TextBlock property to the new TextBlock. As can be seen in the example above, one feature of TextBlock is that when applied to a SpriteTextBlock, the formatting in regards to line breaks is kept. One problem that remains, however, is that changing the Align property of the SpriteText component will change the Transform of the of the text itself, instead of adjusting the alignment. The Area component can help solve this problem. While SpriteTextBlock keeps the formatting of the TextBlock, it has no alignment options of its own. Adding the Area Component allows the user to define the area the text is displayed in, changing the alignment of the text inside that area. It will also use word wrapping to make sure no text spills outside of the defined area. Related Materials Manual Pages Area component Sprites SpriteText commands Reference Pages textblock SpriteText"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio.html",
    "title": "Sound | ZilchEngine",
    "keywords": "Sound A Sound resource is created for every imported audio file. Sounds can be attached to any number of SoundCues, allowing the user to play the same sound multiple ways while only storing the file once. SoundCue SoundCues are a fundamental part of playing audio in the Zilch Engine, allowing the user to modify various properties without affecting the original Sound resource. SimpleSound The SimpleSound component, like its name suggests, is a simple way to play a sound, requiring only a SoundEmitter component and a SoundCue. SoundAttenuator The SoundAttenuator resource controls how a sound played through a SoundEmitter on an object decreases in volume as the object gets further away from a SoundListener. SoundEmitter The SoundEmitter component handles the 3D positioning of sounds in a level. SoundInstance SoundInstances are created at runtime whenever a SoundCue is played, and can then be controlled by the user in scripts. SoundListener The SoundListener component �hears� all positional audio in a SoundSpace. SoundSpace The SoundSpace keeps sounds separate from other Spaces and allows the user to control overall settings for all audio in the SoundSpace. SoundTag SoundTags are resources that allow users to pause, resume, and stop a group of SoundInstances; control their volume, EQ, and compression; and get a list of tagged SoundInstances to change other properties in NadaScripts. Volume Meter The Volume Meter tool allows the user to monitor and change the audio system volume. SoundNode SoundNodes are the underlying objects which create and modify all audio in the Zilch Engine. Many types of SoundNodes can only be created and added to the node graph in NadaScripts. SoundNode Graph The SoundNode Graph tool displays the connections between all SoundNodes that are currently attached to the output of a SoundSpace. MIDI If a MIDI device is connected when the Zilch Engine starts up it will listen for messages from that device and send corresponding MidiEvents. AudioSettings The AudioSettings component can be added to Zilch Engine's project settings to control project-wide audio settings."
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/audio_error.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/audio_error.html",
    "title": "Audio Error: Audio is too loud and is being clipped. Reduce volume or number of sounds to avoid audio problems. | ZilchEngine",
    "keywords": "Audio Error: Audio is too loud and is being clipped. Reduce volume or number of sounds to avoid audio problems. Why does this happen? All digital audio is represented by oscillating waves that can range in value from -1.0 to 1.0. If some of the waves are very loud, or if too many get added together, mathematically that can result in values outside of this range. Those results must be clamped to 1.0 or -1.0, which means that some of the audio data is lost. This can cause clicks, pops, or static in the audio. There are a few different reasons why this might be happening, but the most common reasons are: Too many sounds playing Volume is too high somewhere (a SoundInstance, a SoundEmitter, a SoundSpace, etc.) Remember that volume adjustments by different objects are multiplied together. If a SoundInstance's Volume is 1.2 and the SoundEmitter's Volume is 1.2 the volume applied to the audio file will be 1.44. How can this be fixed? This is highly dependent on what is happening in the project, but in general there are two solutions; manage the number of active sounds or reduce the volume somewhere. If the problem is too many sound effects playing at once, the InstanceLimit property on a SoundTag can be used to limit how many effects can play at once. The SoundTag's Compressor settings can be used to reduce the volume of the sound effects when they are too loud. SoundNodes such as the VolumeNode or CompressorNode can be used to control the overall volume of a SoundSpace or collection of SoundInstances. The best plan, however, is to investigate what is happening with the audio in the project and fix the underlying issues instead of papering over the problem with a quick fix."
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/audiosettings.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/audiosettings.html",
    "title": "Using the AudioSettings Component | ZilchEngine",
    "keywords": "The AudioSettings component can be added to Zilch Engine's project settings to control project-wide audio settings. Some of these settings are advanced and must be used with caution. Using the AudioSettings Component Volume SystemVolume is used to change the volume of audio produced by the Zilch Engine. This volume modifier will be applied to all audio, both in the editor and during gameplay. This value can also be changed in the Volume Meter window or by using the Audio.SetSystemVolume and Audio.GetSystemVolume methods at runtime. Audio Channels The MixType enum property allows the user to choose how many audio channels will be used when creating audio. The default setting, AutoDetect, will produce audio using the same number of channels as the user's default audio output device. Choosing any other setting will create audio using the specified number of channels which will then be automatically translated to match the number of channels needed by the audio output device. In most situations it is best to leave this setting on AutoDetect. Volume Threshold The MinVolumeThreshold property should also usually be left alone. Any sounds at a volume lower than this value will skip a significant portion of their processing. The sounds will continue to track their position and other relevant data, but will not output any audio data until their volume rises above this threshold. Raising this value can improve audio performance in some situations, but raising it too high will cause audible problems. Audio Latency If the user is experiencing audio problems such as clicks, static, or other audible glitches, changing the LatencySetting enum to High could help. This will likely cause some perceptible audio lag, so it should only be used when necessary. This property can also be set by using the Audio.SetUseHighLatency method at runtime. Related Materials Reference AudioSettings"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/midi.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/midi.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "If a MIDI device is connected when the Zilch Engine starts up it will listen for messages from that device and send corresponding MidiEvents . It does not keep track of device changes, so if a MIDI keyboard is plugged in after the editor or the game is running it won't respond to that device. Common Uses Using a synthesizer created with the AdditiveSynthNode Alternate game input and control Using the MIDI Events Each MidiEvent has three properties, though not all of them apply to every event. See the table below for the property meanings on each type of event. The Channel property is the MIDI channel received from the device. The MIDINumber property is the MIDI note number associated with the message. This value will be 0 on event types where it is not applicable. The Value property contains the value, if any, that was associated with the MIDI message. Most of these values will be integers from 0 to 127 and will need to be translated before they are used. This value will be 0 on event types where it is not applicable. The following events will be sent whenever a corresponding MIDI message is received from the connected device: MIDINoteOn: sent whenever a note should start playing, i.e. when a key is pressed on a keyboard. MIDINoteOff: sent when a note should stop playing, i.e. when a key is released on a keyboard. (Some MIDI devices will send a NoteOn message with a volume of 0 instead of a NoteOff message.) MIDIVolume: sent when an overall volume control is changed on the MIDI device. MIDIPitchWheel: sent when the pitch control is changed on the MIDI device. MIDIModWheel: sent when the modulation control is changed on the MIDI device. MIDIOtherControl: sent for all other control change messages received from the MIDI device. Event Type Channel MIDINumber Value MIDINoteOn Channel# Note# Volume of the note in the range 0 - 127. Should be translated to 0.0 - 1.0. MIDINoteOff Channel# Note# N/A MIDIVolume Channel# N/A Volume set by the device in the range 0 - 127. Should be translated to 0.0 - 1.0. MIDIPitchWheel Channel# N/A Pitch set by the device in the range -1.0 - 1.0. MIDIModWheel Channel# N/A Modulation value in the range 0 - 127. MIDIOtherControl Channel# Control# Control value in the range 0 - 127. Related Materials Manual AdditiveSynthNode Reference MIDIEvent"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/simplesound.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/simplesound.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The SimpleSound component, like its name suggests, is a simple way to play a sound. Choose a SoundCue, set the StartPlaying checkBox property to true, and the sound will play as soon as its object is created in an active level. Common Uses Looping background music Sound effects that play whenever an object is created An object with a single sound effect Using SimpleSound Components SimpleSound components are dependent on the SoundEmitter component, so a SoundEmitter will need to be added first before the SimpleSound component. When the StartPlaying checkBox property is checked the SoundCue will be played immediately after the object is created. It can also be played by calling the Play method in a NadaScript. This method returns the SoundInstance which can then be used to further control the audio as it's playing. Positional Sound Effects If the Positional checkBox property is checked the selected SoundCue will play through the SoundEmitter with the appropriate SoundAttenuator , and will be heard at that position by any SoundListeners in the level. In other words, if the object with the SoundEmitter is located to the left of the SoundListener on the screen, the user will hear the SoundCue more loudly from the left speaker. Background Audio When the Positional checkBox property is not checked the SoundCue will play directly through the SoundSpace , bypassing the SoundListeners. This is a good way to play background music or ambiance that should only be heard as long as its parent object is alive. Related Materials Manual SoundCue SoundEmitter SoundInstance SoundAttenuator SoundListener SoundSpace Reference SimpleSound"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/sound.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/sound.html",
    "title": "Using Sounds | ZilchEngine",
    "keywords": "A Sound resource is created for every imported audio file. Sounds can be attached to any number of SoundCues, allowing the user to play the same sound multiple ways while only storing the file once. Using Sounds Supported Audio Formats The Zilch Engine supports audio files in both PCM WAV format (16 or 24 bit) and Ogg format, with up to eight audio channels, at almost any sample rate. (Note that audio output is usually at a sample rate of 44100 Hz or 48000 Hz, depending on the computer's output device, so it is best to use audio files with similar sample rates.) Importing Audio Files The easiest way to import audio files is to drag them directly onto a level. The Add window can also be used to choose the audio file. Both of these methods will then open a window with options for creating a SoundCue that will contain this Sound resource. Once files are imported, they will be resampled to 48000 Hz and stored in a custom format using the Opus codec. Opus is a high-quality, low-latency compression format which can be quickly decoded at runtime. Using this format has little to no effect on what the user hears and significantly reduces the size of the project's audio. SoundBuilder Options When a Sound resource is selected, the SoundBuilder properties will be shown in the Property window. NOTE: When changing these properties for an existing resource the user must click on the Reload button before the settings will take effect. Streaming Files When the Streamed checkBox property is un-checked the entire audio file is loaded into memory as soon as the resource is loaded. This simplifies the audio decoding, as all the data is stored and only decoded once. If Streamed checkBox is checked only a small piece of the file will be held in memory at any one time; these pieces will be repeatedly read from the disk as needed to play the file. This means that audio decoding will be happening continuously and repeatedly. Streaming files can negatively affect performance in some cases since they are repeatedly reading from disk while playing. In general the only audio that should be streamed are long files, such as background music, and only when worried about memory usage. NOTE: Streaming files can't be played multiple times simultaneously, can't have their playback position set directly, and can't use the LoopTailLength property on SoundEntries. Normalizing If the Normalize checkBox property is checked the MaxVolume property will be shown and the volume of the audio file will be adjusted when it is processed and encoded. The volume of the entire audio file will be changed equally so that the highest volume peak will match the MaxVolume property value. This can be used to either raise or lower the volume of an audio file. Related Materials Manual SoundCue SoundEntry Reference Sound SoundBuilder"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundattenuator.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundattenuator.html",
    "title": "Using SoundAttenuators | ZilchEngine",
    "keywords": "The SoundAttenuator resource controls how a sound played through a SoundEmitter on an object decreases in volume as the object gets further away from a SoundListener . Using SoundAttenuators SoundAttenuators can be added to both SoundCues and SoundEmitters. If a SoundCue has a SoundAttenuator other than the DefaultNoAttenuation resource attenuator, its settings will be used when the SoundCue is played through any SoundEmitter. Otherwise the settings from the SoundAttenuator on the SoundEmitter will be used. If the SoundEmitter also has DefaultNoAttenuation resource selected, the sound will be heard spatially by SoundListeners (panned to left or right depending on the location of the object), but will not change its volume with distance. Attenuation The volume of sounds are reduced, or attenuated, according to their distance from a relevant SoundListener, using a specified curve. In the real world, as sounds get further away their volume drops off quickly at first, and then slowly. This logarithmic curve is the default setting for SoundAttenuators, but other types of curves can be chosen for custom behaviors. Low Pass Filter Another thing that happens in the real world with distance is that high frequencies are attenuated more quickly than low frequencies. This can be imitated by applying a low-pass filter to the audio. The low-pass filter on SoundAttenuators can be turned off and on depending on the desired sound. Related Materials Manual SoundEmitter SoundListener SoundCue Reference SoundAttenuator"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundcue.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundcue.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "SoundCues are a fundamental part of playing audio in the Zilch Engine. However the user chooses to play a sound, they will need to use a SoundCue to play it. SoundCues allow the user to modify various properties without affecting the original Sound resource: the same Sound can be applied to different SoundCues, have different property values on the SoundCue, and end up sounding completely different. Common Uses Playing sounds with a SimpleSound component Playing sounds at runtime using methods on SoundEmitters or SoundSpaces Playing sounds directly on a SoundNode Using SoundCues If a SoundCue has multiple Sounds attached it can either randomly select which Sound to use each time it is played or it can play them sequentially. Each time a SoundCue is played it creates a new SoundInstance , which can then be accessed in NadaScripts to control the sound as it's playing. Changing properties on the SoundInstance does not affect the properties on the SoundCue. Volume Settings The Volume and Decibels properties set the volume adjustment that is applied to a sound when the SoundCue is played. The Volume property uses floating point values, while the Decibels property uses the logarithmic decibel scale commonly used in audio. These properties are linked, so changing one will also change the value of the other. If UseDecibelVariation checkBox is checked, the DecibelVariation property will be shown in the Property Window and will be used when randomizing the volume of a new SoundInstance. If not checked, the VolumeVariation property will be shown and used for randomization. These properties set how much the volume of SoundInstances will be randomized each time the SoundCue plays. For instance, if the Volume value is 1 and VolumeVariation is 0.5 the volume of the SoundInstance will be chosen randomly from between 0.5 and 1.5. Note that these volume changes will be multiplied together with any other volume modifications applied by objects such as SoundTags , SoundEmitters, and SoundSpaces. If a SoundCue's volume is set to 0.5 and it is played on a SoundEmitter which also has a volume of 0.5, this effectively sets the resulting SoundInstance's volume to 0.25. Pitch Settings The Pitch and Semitones properties set the pitch adjustment that is applied to the SoundInstance whenever the SoundCue is played. This adjustment affects both the pitch and speed of the sound: higher-pitched sounds will play faster, while lower-pitched sounds play slower. Large pitch changes will likely affect the quality of the sound. The Pitch property uses floating point values, while the Semitones property uses semitones, or half-steps. These properties are linked, so changing one will also change the value of the other. If UseSemitoneVariation checkBox is checked, the SemitoneVariation property will be shown in the Property Window and will be used when randomizing the pitch of a new SoundInstance. If not checked, the PitchVariation property will be shown and used for randomization. These properties set how much the pitch of SoundInstances will be randomized every time the SoundCue plays. For instance, if the Pitch value is 0 and PitchVariation is 0.3 the pitch of the SoundInstance will be chosen randomly from between -0.3 and 0.3. Note that these changes will be combined with any other pitch modifications applied by objects such as SoundEmitters and SoundSpaces. If a SoundInstance's Semitones is set to 12 and it is played on a SoundEmitter with a Semitones value of -6, this effectively raises the SoundInstance's pitch by 6 semitones. Attenuation If a SoundAttenuator resource other than DefaultNoAttenuation is selected its settings will be used when the SoundCue is played on a SoundEmitter to change the sound's volume depending on the distance to a SoundListener . Otherwise, either the attenuation settings on the SoundEmitter will be used, or if the SoundEmitter has no settings, the sound will not be attenuated. Music Notification Settings If the ShowMusicOptions checkBox box is checked, fields will be shown for setting the speed and time signature of a music file. The two numbers in the time signature tell how many beats are in each measure of music and what type of note has the beat. For instance, a time signature of 4/4 has four quarter note beats per measure, and 3/8 has three eighth note beats. If all three of the fields are set to values other than zero, whenever the SoundCue is played the resulting SoundInstance will send Nada events for every bar, beat, whole note, half note, quarter note, and eighth note (see the SoundInstance page for more details). SoundEntries Each SoundEntry holds a Sound which can be played by the SoundCue. SoundEntries have properties to control when the audio file starts and stops, when it starts looping and stops looping, and whether it should cross-fade audio after it loops. SoundTagEntries Every SoundTag in the list of SoundTagEntries will be applied to the resulting SoundInstance whenever a SoundCue is played. SoundTags allow the user to control SoundInstances as a group. See the SoundTag page for more information. Nada Events The SoundCuePrePlay SoundInstanceEvent is sent just before a SoundInstance is played. The SoundCuePostPlay SoundInstanceEvent is sent immediately afterward. The following code block shows how to connect to the SoundCuePrePlay event and change the SoundInstance's volume before it plays. [Property] var Cue : SoundCue; function Initialize(init : CogInitializer) { Zilch.Connect(this.Cue, Events.SoundCuePrePlay, this.OnCuePlay); } function OnCuePlay(event : SoundInstanceEvent) { event.SoundInstance.Volume = 0.5; } Related Materials Manual Sound SimpleSound SoundEmitter SoundSpace SoundNode SoundInstance SoundTag SoundAttenuator SoundListener Reference SoundCue SoundEntry SoundTag SoundInstanceEvent"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundemitter.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundemitter.html",
    "title": "Using SoundEmitters | ZilchEngine",
    "keywords": "The SoundEmitter component handles the 3D positioning of sounds in a level. For instance, if the SoundEmitter's object is to the left of a SoundListener , it will reduce the amount of sound going to the right speaker, so that the player hears the sound to their left. Using SoundEmitters Volume and Pitch Settings The Volume and Decibels properties set the volume adjustment that is applied to any SoundInstances played through the SoundEmitter. The Volume property uses floating point values, while the Decibels property uses the logarithmic decibel scale commonly used in audio. These properties are linked, so changing one will also change the value of the other. The Pitch and Semitones properties set the pitch adjustment that is applied to SoundInstances. This adjustment affects both the pitch and speed of the sound: higher-pitched sounds will play faster, while lower-pitched sounds play slower. Large pitch changes will likely affect the quality of the sound. The Pitch property uses floating point values, while the Semitones property uses semitones, or half-steps. These properties are also linked. The InterpolateVolume, InterpolateDecibels, InterpolatePitch, and InterpolateSemitones methods can be used at runtime to smoothly change the SoundEmitter's volume or pitch over time. Using these interpolation methods is preferable to using Actions to set the properties: changing a property every frame with an Action can result in audible jumps in volume or pitch, while the interpolation method causes the volume change to be handled smoothly by the audio engine. Note that these volume and pitch changes will be combined with any other volume modifications applied by objects such as SoundTags, SoundCues, and SoundSpaces. If a SoundCue's volume is set to 0.5 and it is played on a SoundEmitter which also has a volume of 0.5, this effectively sets the resulting SoundInstance's volume to 0.25. If a SoundInstance's Semitones is set to 12 and it is played on a SoundEmitter with a Semitones value of -6, this effectively raises the SoundInstance's pitch by 6 semitones or half an octave. Directional SoundEmitters When the Directional checkBox property is checked the audio output of the SoundEmitter will be limited by the EmitAngle so that sound in front of the object will be louder than sound behind it. Within the EmitAngle the sound will be at full volume. Outside the angle, the volume will interpolate using a logarithmic curve until it reaches the RearVolume value directly behind the object. This is useful for sounds on objects such as loudspeakers or objects with a wall behind them that the sound shouldn't be heard through. Attenuation If a SoundAttenuator resource other than DefaultNoAttenuation resource is selected, its settings will be used for any SoundCues played through the SoundEmitter that have DefaultNoAttenuation resource selected on their Attenuator resource property. SoundNodes Unlike other objects, SoundEmitters are a collection of multiple SoundNodes . This allows them to have settings for volume and pitch as well as handling spatialization. Because of this, instead of one SoundNode property, SoundEmitters have two separate properties for the first and last SoundNodes in their chain. The InputNode property should be used for attaching other SoundNodes to the input of the SoundEmitter, while the OutputNode should be used for attaching to its output. Users cannot insert other SoundNodes before or after the InputNode, and cannot insert SoundNodes before the OutputNode. Neither of these nodes can be replaced or removed from the graph. Nada Events The SoundInstancePlayed SoundInstanceEvent will be sent when a SoundCue is played using either the PlayCue or PlayCuePaused methods. The AudioInterpolationDone SoundEvent is sent whenever a volume or pitch interpolation has finished. Related Materials Manual SoundListener SoundInstance SoundTag SoundCue SoundSpace SoundAttenuator SoundNode Reference SoundEmitter SoundInstanceEvent SoundEvent"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundinstance.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundinstance.html",
    "title": "Using SoundInstances | ZilchEngine",
    "keywords": "SoundInstances are created at runtime whenever a SoundCue is played. Their properties are initially set by the SoundCue, but the user can then manipulate the SoundInstance's properties without affecting the SoundCue or any other SoundInstances created by it. Using SoundInstances A SoundInstance is returned by the PlayCueand PlayCuePaused methods on SoundEmitters and SoundSpaces , the Play method on SimpleSounds , and the PlayCueOnNode method on SoundCues. If a PlayCuePaused method is used, the SoundInstance must have its Paused checkBox property set to False before it will begin playing. SoundInstance objects are reference counted: they will stay alive as long as a variable is stored with the SoundInstance assigned to it, so the SoundInstance can still be accessed even after it finishes playing. If the user does not store a variable, the SoundInstance will continue playing audio, but cannot be accessed in NadaScripts. Controlling Playback When a SoundInstance is paused it stops playing all audio, then can be resumed and will continue playing where it left off, with no change to its settings or behavior. SoundInstances have a single Boolean property, Paused checkBox, which controls whether they are playing or paused. If Paused checkBox is set to true when the SoundInstance is already paused, or set to false when it is not paused, nothing will happen. When a SoundInstance is stopped using the Stop method it immediately stops playing audio and cannot be restarted. The Time property tells the user the current playback position of a SoundInstance, in seconds, from the beginning of the audio file used for the sound. It also allows the user to tell the SoundInstance to jump to a different position. Note that when reading the Time property, the time given will not be precisely accurate. It will never be ahead of the exact position, but, due to the multi-threaded nature of the audio system, it may be very slightly behind. Controlling Volume and Pitch The Volume and Decibels properties set the volume adjustment that is applied to the SoundInstance. Volume uses floating point values, while Decibels uses the logarithmic decibel scale commonly used in audio. These properties are linked, so changing one will also change the value of the other. The Pitch and Semitones properties set the pitch adjustment that is applied to the SoundInstance. This adjustment affects both the pitch and speed of the sound: higher-pitched sounds will play faster, while lower-pitched sounds play slower. Large pitch changes will likely affect the quality of the sound. Pitch uses floating point values, while the Semitones uses semitones, or half-steps. These properties are also linked. The InterpolateVolume, InterpolateDecibels, InterpolatePitch, and InterpolateSemitones methods can be used at runtime to smoothly change the SoundInstance's volume or pitch over time. Using these interpolation methods is preferable to using Actions to set the properties: changing a property every frame with an Action can result in audible jumps in volume or pitch, while the interpolation method causes the volume change to be handled smoothly by the audio engine. Note that these volume changes will be combined with any other volume modifications applied by objects such as SoundTags , SoundEmitters, and SoundSpaces. If a SoundInstance's Volume is set to 0.5 and it is played on a SoundEmitter which also has a Volume of 0.5, this effectively sets the SoundInstance's Volume to 0.25. If it's Semitones is set to 12 and it is played on a SoundEmitter with a Semitones value of -6, this effectively raises the SoundInstance's pitch by half an octave. Looping A SoundInstance's Looping checkBox property is initially set by the corresponding property on the SoundCue. When this property is true, the SoundInstance will repeat indefinitely, using the LoopStartTime and LoopEndTime properties on the SoundEntry that the SoundCue used to create the SoundInstance. If a SoundInstance is looping and the property is changed to false as it is playing it will continue playing to its EndTime and then stop. The following code block shows you how to make a SoundInstance finish naturally after it has looped three times, using the SoundLooped event. // A property to be set to the SoundCue desired [Property] var MySoundCue : SoundCue; // A variable that will later be set to an instance of MySoundCue var MySoundInstance : SoundInstance; // A variable that will count how many times MySoundInstance has looped var Counter : Integer = 0; function Initialize(init : CogInitializer) { // Create a SoundInstance by playing MySoundCue on the object's SoundSpace this.MySoundInstance = this.Space.SoundSpace.PlayCue(this.MySoundCue); // Connect to the SoundLooped event that will be sent by MySoundInstance Zilch.Connect(this.MySoundInstance, Events.SoundLooped, this.OnSoundLoop); } function OnSoundLoop(event : SoundInstanceEvent) { // Increase the counter ++this.Counter; if (this.Counter == 3) { // Tell the SoundInstance to stop looping, play until it reaches its end, and stop this.MySoundInstance.Looping = false; } } Events The following SoundInstanceEvents will be sent out by all SoundInstance objects: SoundLooped is sent by looping SoundInstances each time they reach their LoopEndTime and jump back to their LoopStartTime . SoundStopped is sent when a SoundInstance has completely finished playing audio. AudioInterpolationDone will be sent whenever a volume or pitch interpolation has finished. Music Events If the music options were set on the SoundCue before the SoundInstance was created (all three of the BeatsPerMinute , TimeSigBeats , and TimeSigValue properties must be set) then the SoundInstance will also send the following SoundInstanceEvents: MusicBeat is sent on every beat of the music (the beat value set in the time signature). MusicBar is sent at the beginning of every measure. MusicEighthNote is sent for every eighth note beat of the music. (If the music's time signature is 4/4, you will receive eight MusicEighthNote events during every measure.) MusicQuarterNote is sent for every quarter note beat of the music. (If the music's time signature is 4/4, you will receive four MusicQuarterNote events during every measure.) MusicHalfNote is sent for every half note beat of the music. (If the music's time signature is 4/4, you will receive two MusicHalfNote events during every measure.) MusicWholeNote is sent for every whole note beat of the music. (If the music's time signature is 4/4, you will receive one MusicWholeNote event for every measure.) If the CustomEventTime checkBox property is set, the SoundInstance will also send the MusicCustomTime event when it reaches that many seconds from the beginning of the audio file. Related Materials Manual SoundCue SoundEmitter SoundSpace SimpleSound SoundTag Reference SoundInstance SoundInstanceEvents"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundlistener.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundlistener.html",
    "title": "Using SoundListeners | ZilchEngine",
    "keywords": "SoundListeners , along with SoundEmitters , are responsible for all positional audio in the Zilch Engine. Using SoundListeners The SoundListener component �hears� all positional audio in a SoundSpace , using the orientation of the object it's attached to, as if it added a set of ears to that object. For example, if there is a SoundListener component on the Player object, and an object with a SoundEmitter playing a constant sound moves past the player from left to right, the sound will initially play primarily from the user's left speaker and will move to the right speaker as the object moves across the screen. If the SoundEmitter or SoundCue is also using a SoundAttenuator resource, the sound will start quietly and become louder as the object approaches the player, then become quiet again as it moves away. It would sound exactly the same if the player moved past the object instead of the object moving past the player. The SoundListener component is traditionally placed on the player object (or the camera if the camera uses a first-person POV), as this the allows the player of the game to control the source from which all sounds in the level are heard. It is unusual to have multiple SoundListeners in a single SoundSpace, but if there are the audio that they hear will be combined. WARNING: New levels have a SoundListener component automatically attached to the GameCamera. If a SoundListener is added to another object the one on the GameCamera must be removed (unless the user is deliberately using two listeners). If the SoundListener's Active checkBox property is set to false in a NadaScript, the SoundListener will not produce any sound. All audio in the SoundSpace will continue to be processed, even if there are no active SoundListeners, so this is not the same as pausing the sounds. Related Materials Manual SoundEmitter SoundSpace SoundCue SoundAttenuator Reference SoundListener"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode.html",
    "title": "Generating Audio | ZilchEngine",
    "keywords": "SoundNodes are the objects which create and modify all audio in the Zilch Engine. If you are new to SoundNodes and the SoundNode graph, be sure to read the overview page first. SoundNode Overview SoundNode Graph Tool Generating Audio GeneratedWaveNode Creates audio at a specified pitch using generated audio waves. AdditiveSynthNode Plays notes at specified pitches using additive synthesis. CustomAudioNode Allows the user to pass buffers of audio data directly to the audio engine for output. Volume and Pitch Modifications VolumeNode Changes the volume of the audio provided by its inputs. Panning Node Changes the volume of the left and right channels of the audio provided by its inputs separately. PitchNode Changes the pitch of the audio provided by its inputs. EqualizerNode Changes the volume of the audio provided by its inputs in certain frequency ranges. CompressorNode Applies a compressor filter to the audio provided by its inputs. ExpanderNode Applies an expander filter to the audio provided by its inputs. Audio Effect Filters ReverbNode Applies a simple reverb filter to the audio provided by its inputs. LowPassNode Applies a low pass filter to the audio provided by its inputs (removes high frequencies). HighPassNode Applies a high pass filter to the audio provided by its inputs (removes low frequencies). BandPassNode Applies a band pass filter to the audio provided by its inputs (removes frequencies higher and lower than the band). DelayNode Applies a delay filter to the audio provided by its inputs. ChorusNode Applies a chorus filter to the audio provided by its inputs. FlangerNode Applies a flanger filter to the audio provided by its inputs. AddNoiseNode Adds white noise to the audio provided by its inputs. ModulationNode Applies either ring modulation or amplitude modulation to the audio provided by its inputs. Recording Audio RecordingNode Saves all audio produced by its inputs to a WAV file."
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/additivesynthnode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/additivesynthnode.html",
    "title": "Related Materials | ZilchEngine",
    "keywords": "AdditiveSynthNodes are basic synthesizers, generating notes using a combination of sound waves. Common Uses A custom synthesizer using MIDI events sent by a keyboard or other device Creating music or sound effects with no audio files Dynamic or procedural music Using the AdditiveSynthNode The AdditiveSynthNode generates audio at specified pitches using additive synthesis, where multiple sound waves at different frequencies are added together to make one sound. Each of these separate waves is called a harmonic. All harmonics have their own volume envelope which controls how quickly the sine wave goes from silence to full volume and back to silence: varying the envelopes for different harmonics will affect how the generated sound changes over time. Online tools such as this waveform generator are useful for experimenting with different sounds, though the envelope values and types of sound waves will have a large effect. (This particular tool uses harmonics which are integer multiples of the base frequency, resulting in sounds that always have a distinct pitch.) The code block below showing how to use the AddHarmonic method contains a simple example that can be used as a starting point. Adding Harmonics The AddHarmonic method adds a new harmonic which will be used for all notes played. The first parameter is the base frequency multiplier to use for this sine wave's frequency (i.e. if you play a note at 200 Hz and the multiplier is 2 this sine wave will be at 400 Hz); the second is the volume adjustment applied to this harmonic (1.0 is full volume); the third is an AdsrEnvelope object containing the envelope-related values (see the AdsrEnvelope section below); and the fourth is the type of sound wave to use. The valid SynthWaveTypes to use are SineWave, SquareWave, SawWave, and TriangleWave. If you do not fill out the AdsrEnvelope parameters before calling AddHarmonic default values will be used. The following code block shows you how to create a simple instrument with two harmonics. var Synth : AdditiveSynthNode = Audio.AdditiveSynthNode(); function Initialize(init : CogInitializer) { // Adds the AdditiveSynthNode to the SoundSpace's SoundNode for output this.Space.SoundSpace.InputNode.AddInputNode(this.Synth); // Create a variable for the AdsrEnvelope var envelope = AdsrEnvelope(); // Set the envelope values for the first harmonic envelope.AttackTime = 0.09; envelope.DecayTime = 0.5; envelope.SustainTime = 0.07; envelope.SustainLevel = 0.5; envelope.ReleaseTime = 1.0; // Add the first harmonic to the synth at the base frequency and half volume, using a sine wave this.Synth.AddHarmonic(1.0, 0.5, envelope, SynthWaveType.SineWave); // Set the envelope values for the second harmonic envelope.AttackTime = 0.02; envelope.DecayTime = 0; envelope.SustainTime = 0.02; envelope.SustainLevel = 1.0; envelope.ReleaseTime = 0.5; // Add the second harmonic at triple the base frequency and quarter volume, using a sine wave this.Synth.AddHarmonic(3.0, 0.25, envelope, SynthWaveType.SineWave); } Playing Notes The NoteOn method plays a note at a specific frequency, using MIDI key numbers. The Zilch Engine uses the MIDI convention where middle C is considered to be C3 and has the number 60. (MIDI key number charts such as this one can be used to translate between notes at different octaves and their corresponding key numbers.) The NoteOff method stops any currently playing notes with the specified MIDI key number. The notes will jump to their Release phase but the release tail will not be cut off. AdsrEnvelope An ADSR envelope controls the Attack, Decay, Sustain, and Release portions of a sound's volume. The Attack period is first, where the sound goes from silence to full volume. The Decay period is next, where the sound goes from full volume to its sustain volume. The Sustain period controls how long it stays at the sustain volume, and the Release period is where it goes from the sustain volume back to silence. The AdsrEnvelope object used by the Zilch Engine also has a parameter for delaying when the sound starts. NOTE: Setting the SustainTime property to 0 will make the harmonic play indefinitely until the NoteOff method is called. Related Materials Manual soudnode_overview MIDI Code Reference AdditiveSynthNode AdsrEnvelope"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/addnoisenode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/addnoisenode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The AddNoiseNode collects audio data from all of its inputs and adds white noise (with a low pass filter) to the audio before passing it along to its outputs. Common Uses Simulating effects such as a crackling speaker Using the AddNoiseNode The AddNoiseNode inserts noise into the audio using both addition and multiplication; the additive noise will sound similar to having a separate white noise generator playing, while the multiplicative noise alters the audio directly. The combination can mimic what you might hear from something like an old-fashioned radio speaker. Related Materials Reference AddNoiseNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/bandpassnode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/bandpassnode.html",
    "title": "Using the BandPassNode | ZilchEngine",
    "keywords": "The BandPassNode collects audio data from all of its inputs and applies a band pass filter to it before passing it along to its outputs. Using the BandPassNode Band pass filters are a combination of low pass and high pass filtering which allows only a select band of frequencies through. The CentralFrequency property sets the frequency at which the band is centered, while the width of the band is controlled by the QualityFactor property. Related Materials Manual soudnode_overview lowpassnode highpassnode Code Reference BandPassNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/chorusnode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/chorusnode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The ChorusNode collects audio data from all of its inputs and applies a chorus filter before passing it along to its outputs. Common Uses Combining with other audio filters to create sound effects or environmental effects Using the ChorusNode Chorus filters use an oscillating delay filter to add a chorus-like effect to the audio. The ModulationFrequency property controls the speed of the oscillation, while the MinDelayMillisec and MaxDelayMillisec properties set the delay values that the filter oscillates between. Related Materials Manual soudnode_overview Code Reference ChorusNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/compressornode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/compressornode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The CompressorNode collects audio data from all of its inputs and applies a compressor filter before passing the data along to its outputs. Common Uses Preventing a sound (or group of sounds) from becoming too loud Using the CompressorNode Compressor filters reduce the volume of sounds that go above a certain threshold, according to a specified ratio. The volume is calculated according to this formula: (NOTE) VolumeAdjustmentDecibels = (1.0 - (1.0 / Ratio)) * (ThresholdDecibels - CurrentVolume) In other words, if the Ratio is 4.0, the ThresholdDecibels is -2 dB, and the current volume of the sound is +2 db, a volume adjustment of -3 dB will be applied and the volume of the sound will be reduced to -1 dB. If the Ratio property is set to 0.0, the 1.0 - (1.0 / Ratio) value will be set to 1.0, so the volume will never go above the ThresholdDecibels value: this creates a Limiter filter. The AttackMillisec and ReleaseMillisec properties control how quickly the filter eases in and out as the sound goes above the ThresholdDecibels then goes back below. The AttackMillisec should generally be short and the ReleaseMillisec should be longer, but this will depend on the desired effect. The KneeWidth property sets the number of decibels, centered at the ThresholdDecibels, over which the volume compression eases in. Related Materials Manual soudnode_overview expandernode Code Reference CompressorNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/customaudionode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/customaudionode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The CustomAudioNode allows the user to provide buffers of custom audio data to the system for output, using a SoundBuffer object. Common Uses Playing user-generated pre-computed audio Using the CustomAudioNode NOTE: This is a fairly limited and high-latency way to output audio. The audio data must be in floating-point numbers between -1.0 and 1.0, and it must match the sample rate of the audio engine, which is provided via the SystemSampleRate property. To output audio using a CustomAudioNode the user must connect to the CustomAudioNode's NeedMoreSamples event and send a buffer of audio samples when the event is received which is at least as large as the MinimumBufferSize. The CustomAudioNode will work best when the audio data is pre-computed and as little as possible is done when the event is received. If the data is not received quickly enough by the audio engine there may be clicks or gaps in the audio. The following code block illustrates how to use a CustomAudioNode and a SoundBuffer to generate a single audio channel with a constant Sine tone. // Create and store the CustomAudioNode object var CustomNode : CustomAudioNode = Audio.CustomAudioNode(); // Create and store the SoundBuffer object var Buffer : SoundBuffer = Audio.SoundBuffer(); function Initialize(init : CogInitializer) { // Connect to the NeedMoreSamples event of the CustomAudioNode Zilch.Connect(this.CustomNode, Events.NeedMoreSamples, this.OnSoundEvent); // Get the minimum buffer size from the CustomAudioNode var bufferSize = this.CustomNode.MinimumBufferSize; var twoPi = 2.0 * Math.Pi; var volume = 0.25; var buffersPerSecond = this.CustomNode.SystemSampleRate / bufferSize; // Fill the SoundBuffer with Sine wave values at a frequency that fits evenly into the buffer for (var i = 0; i < bufferSize; ++i) { this.Buffer.AddSampleToBuffer(Math.Sin(twoPi * buffersPerSecond * i / bufferSize) * volume); } // Add the CustomAudioNode to the SoundSpace's SoundNode this.Space.SoundSpace.InputNode.AddInputNode(this.CustomNode); } function OnSoundEvent(event : SoundEvent) { // Send the buffer of Sine wave samples this.CustomNode.SendBuffer(this.Buffer); } Related Materials Manual soudnode_overview Code Reference CustomAudioNode SoundBuffer"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/delaynode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/delaynode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The DelayNode collects audio data from all of its inputs and applies a delay filter before passing it off to its outputs. Common Uses Using the FeedbackPercent property to create echo effects Combining with other audio filters to create sound effects Using the DelayNode The delay filter plays a second copy of the audio which is delayed by the number of seconds set by the Delay parameter. The FeedbackPercent property sets a percentage of the filter output which is fed back into the filter as input. If the FeedbackPercent is 0, the user will only hear one repeat of the sound. If it was 100, the sound would keep repeating indefinitely. Values in between will make each echo quieter than the last. The WetPercent property controls the loudness of the delayed echo. At 100 the echo will sound just as loud as the original sound. Lower values will make the echo quieter than the sound. Related Materials Manual soudnode_overview Code Reference DelayNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/equalizernode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/equalizernode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The EqualizerNode collects audio data from all of its inputs and applies several filters to it before passing it along to its outputs, allowing the user to control the loudness of frequencies in specific ranges. Common Uses Controlling volume of specific frequencies for either a single sound or several sounds at once Using the EqualizerNode The EqualizerNode controls volume for five separate frequency ranges. The LowPassGain value adjusts the volume of frequencies below 80 Hz; HighPassGain adjusts volume above 5000 Hz; Band1Gain adjusts the volume of frequencies in a band centered at 150 Hz; Band2Gain adjusts the band centered at 600 Hz; and Band3Gain adjusts the band centered at 2500 Hz. All five properties can be smoothly changed over time using the InterpolateAllBands method. Related Materials Manual soudnode_overview Code Reference EqualizerNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/expandernode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/expandernode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The ExpanderNode collects audio data from all of its inputs and applies an expander filter before passing the data along to its outputs. Common Uses Increasing the contrast between the soft and loud parts of the audio Removing quiet sounds from the audio Using the ExpanderNode Expander filters reduce the volume of sounds that drop below the threshold, according to a specified ratio. The volume is calculated according to this formula: (NOTE) VolumeAdjustmentDecibels = ((1.0 / Ratio) - 1.0) * (ThresholdDecibels - CurrentVolume) In other words, if the Ratio is 2, the ThresholdDecibels is -10 dB, and the current volume of the sound is -14 db, the volume adjustment will be -2 dB and the sound will be reduced to -16 db. If the Ratio is set to 0.0, the (1.0 / Ratio) - 1.0 value will be set to 0.0, so audio that goes below the ThresholdDecibels value will have their volume reduced by the same number of decibels that they are below the threshold. This will create an effect like a Gate filter. The AttackMillisec and ReleaseMillisec properties control how quickly the filter eases in and out as the sound goes below the ThresholdDecibels then goes back above it. The AttackMillisec should generally be short and the ReleaseMillisec should be longer, but this will depend on the desired effect. The KneeWidth property sets the number of decibels, centered at the ThresholdDecibels, over which the volume change eases in. Related Materials Manual soudnode_overview compressornode Code Reference ExpanderNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/flangernode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/flangernode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The FlangerNode collects audio data from all of its inputs and applies a flanger filter before passing it along to its outputs. Common Uses Combining with other audio filters to create sound effects or environmental effects Using the FlangerNode Flanger filters apply an oscillating delay filter to the audio. The delay will interpolate from 0 milliseconds to the MaxDelayMillisec value at the rate set by the ModulationFrequency property. Related Materials Manual soudnode_overview Code Reference FlangerNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/generatedwavenode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/generatedwavenode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The GeneratedWaveNode will generate audio using a specified wave type and frequency. Since it is a generating node, it will ignore any input connections. Common Uses Creating synthesized sound effects Combining white noise with audio filters to generate wind or other sound effects Using the GeneratedWaveNode GeneratedWaveNodes create audio using either a sine wave, square wave, saw wave, triangle wave, or white noise. The WaveFrequency property controls the pitch of the audio, and can be smoothly changed over time using the InterpolateWaveFrequency method. Like other objects, its volume can be controlled using either the Volume or the Decibels property, and interpolated with the InterpolateVolume and InterpolateDecibels methods. The following code block illustrates how to use a GeneratedWaveNode to make a simple alarm-siren noise. class SimpleSiren : NadaComponent { // Make sure this object has a SoundEmitter component [Dependency] var Emitter : SoundEmitter; // Store the GeneratedWaveNode so its properties can be edited later var WaveNode : GeneratedWaveNode = Audio.GeneratedWaveNode(); // Keep track of whether we are interpolating up or down var GoingUp : Boolean = true; function Initialize(init : CogInitializer) { // Attach the GeneratedWaveNode to the SoundEmitter this.Emitter.InputNode.AddInputNode(this.WaveNode); // Set the node's starting properties this.WaveNode.WaveFrequency = 200.0; this.WaveNode.WaveType = SynthWaveType.SawWave; this.WaveNode.Volume = 0.2; // Start playing the generated wave this.WaveNode.Play(); // Start interpolating the frequency this.ChangeFrequency(); } function ChangeFrequency() { // Check if we should interpolate the frequency up or down if (this.GoingUp == true) { // Interpolate the wave's frequency to 700Hz over 1 second this.WaveNode.InterpolateWaveFrequency(700.0, 1.0); // Reset the variable to go down next time this.GoingUp = false; } else { // Interpolate the wave's frequency to 500Hz over 1 second this.WaveNode.InterpolateWaveFrequency(500.0, 1.0); // Reset the variable to go up next time this.GoingUp = true; } // Call this function again in 1.1 seconds var sequence = Actions.Sequence(this.Owner.Actions); Actions.Delay(sequence, 1.1); Actions.Call(sequence, this.ChangeFrequency); } } Related Materials Manual soudnode_overview Code Reference GeneratedWaveNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/highpassnode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/highpassnode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The HighPassNode collects audio data from all of its inputs and applies a high pass filter to it before passing it along to its outputs. Common Uses Removing excessive low frequencies Combining with white noise and other audio filters to create wind or other sound effects Using the HighPassNode High pass filters leave high frequencies untouched while silencing low frequencies below their cutoff frequency. The only property on the HighPassNode is the CutoffFrequency, which sets the frequency at which the filter starts to take effect. Related Materials Manual soudnode_overview bandpassnode lowpassnode Code Reference HighPassNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/lowpassnode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/lowpassnode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The LowPassNode collects audio data from all of its inputs and applies a low pass filter to it before passing it along to its outputs. Common Uses Making audio sound muffled Combining with white noise and other audio filters to create wind or other sound effects Using the LowPassNode Low pass filters leave low frequencies untouched while silencing high frequencies above their cutoff frequency. The only property on the LowPassNode is the CutoffFrequency, which sets the frequency at which the filter starts to take effect. Related Materials Manual soudnode_overview bandpassnode highpassnode Code Reference LowPassNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/modulationnode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/modulationnode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The ModulationNode collects audio data from all of its inputs and applies either amplitude or ring modulation to the audio before passing it along to its outputs. Common Uses Using amplitude modulation to regularly vary the volume of a sound Using ring modulation to create sound effects or synthesizers Using the ModulationNode Amplitude modulation will oscillate the volume of the audio at a rate set by the Frequency property. The volume changes from 0 to 1.0. If the user does not want the volume to go to silence, setting the WetPercent to values below 100 will reduce the strength of the modulation. Ring modulation will directly alter the frequencies of the sound, with stronger effects as the Frequency value gets larger. Related Materials Manual soudnode_overview Code Reference ModulationNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/panningnode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/panningnode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The PanningNode collects audio data from all of its inputs and applies a volume modification to the left and right channels separately. Common Uses Moving sounds from left to right and right to left (such as an ambient wind sound) Positioning sounds without using a SoundEmitter Using the PanningNode PanningNodes will always process audio in two channels regardless of how many channels are used by their inputs or outputs. If the audio input has more than two channels it will be translated into only two before being processed. SumToMono If the SumToMono property is set to true, all channels of audio input will be combined before being spread to the left and right channels with the appropriate volume modification. This can be useful if you want the entire sound to be heard as if it is coming from a single position (this is how audio is handled by SoundEmitters). If it is false, the volume modifications will be applied to the existing channels. Events The AudioInterpolationDone event will be sent when a volume interpolation has finished. Example The following code block illustrates how to make white noise sound like it's moving back and forth. class MovingNoise : NadaComponent { // Create and store the PanningNode to change its properties later var Panning : PanningNode = Audio.PanningNode(); // Create and store the GeneratedWaveNode var Noise : GeneratedWaveNode = Audio.GeneratedWaveNode(); function Initialize(init : CogInitializer) { // Set the GeneratedWaveNode properties this.Noise.WaveType = SynthWaveType.Noise; this.Noise.Volume = 0.2; // Start playing the generated sound wave this.Noise.Play(); // Reduce the PanningNode's left volume this.Panning.LeftVolume = 0.3; // Add the GeneratedWaveNode to the inputs of the PanningNode this.Panning.AddInputNode(this.Noise); // Attach the PanningNode to the output node of the SoundSpace this.Space.SoundSpace.SoundNode.AddInputNode(this.Panning); // Start panning this.ChangePanning(); } function ChangePanning() { var time = 3.0; // Are we now panning from left to right? if (this.Panning.LeftVolume < this.Panning.RightVolume) { // Interpolate the left volume back to 1.0 and the right volume to 0.2 this.Panning.InterpolateVolumes(1.0, 0.2, time); } // If not, we are panning from right to left else { // Interpolate the right volume back to 1.0 and the left volume to 0.2 this.Panning.InterpolateVolumes(0.2, 1.0, time); } // Delay the next call of this function by the time var sequence = Actions.Sequence(this.Owner.Actions); Actions.Delay(sequence, time); Actions.Call(sequence, this.ChangePanning); } } Related Materials Manual soudnode_overview Code Reference PanningNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/pitchnode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/pitchnode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The PitchNode collects audio data from all of its inputs and applies a pitch modification to the samples before passing them off to its output nodes. Common Uses Controlling the pitch of several sounds at once Using the PitchNode WARNING: When using PitchNodes, if a generating node has multiple output connections the user must make sure all of them are at the same pitch. If SoundNodes request data from the generating node at different pitch settings there will be an error and the nodes will be disconnected. Pitch and Semitones PitchNodes have two linked properties for setting their pitch change: changing one will also change the value of the other. Raising the pitch also speeds up the sound, while lowering the pitch slows it down. Large pitch changes will likely affect the quality of the sound. The Pitch property is a floating point value where 0.0 does not affect the pitch, 1.0 raises the pitch by an octave (doubles the pitch), 2.0 raises it by two octaves, -1.0 lowers it by an octave, etc. The Semitones property uses semitone (or half-step) values to set the pitch. There are twelve semitones in an octave, so a value of 12 would double the pitch while -12 would halve it. The pitch can be interpolated over time using either floating point or semitone values with the InterpolatePitch and InterpolateSemitones methods. In both methods, the first value is the pitch to interpolate to, and the second is the length of time (in seconds) for the interpolation. Using these methods ensures that the pitch change is applied smoothly by the audio engine. Events The AudioInterpolationDone event will be sent when a pitch interpolation has finished. Related Materials Manual soudnode_overview Code Reference PitchNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/recordingnode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/recordingnode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The RecordingNode collects audio data from its inputs and writes that data to a file. The audio data is then passed along to its outputs with no changes. Common Uses Allowing the player to record game audio Saving sound effects or music created in the Zilch Engine Using the RecordingNode The file created by the RecordingNode will be in WAV format. By default the node will constantly write small amounts of data to the file (when StreamToDisk is True). The disk access will not affect the audio, but it could possibly affect the game performance. The RecordingNode can also save all data into a buffer and write it all at once when recording is stopped. Unless the recording is very short, writing this much data to disk at once will take a noticeable amount of time. Which method to choose depends on usage and performance needs. IMPORTANT: The FileName must contain the full path of the location where the file should be opened and all folders in the path must already exist. Do NOT include a file extension. This property must be set before calling StartRecording. The following code shows how to create a file named \"RecordingTest.wav\" inside the Zilch folder in the user's Documents folder. this.MyRecorder.FileName = FilePath.CombineDirectoriesAndFile(FilePath.UserDocumentsDirectory, \"Zilch\\\\\", \"RecordingTest\"); Related Materials Manual soudnode_overview Code Reference RecordingNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/reverbnode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/reverbnode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The ReverbNode collects audio data from all its inputs and applies a simple reverb filter before passing it off to its outputs. Common Uses Creating an echoing ambience for areas such as large rooms or caves Using the ReverbNode Although ReverbNodes use relatively straightforward calculations, they do take computation time. It is best to use as few ReverbNodes as possible. Reverb calculations will not affect game performance, but if they take too long, it will result in audio glitches. Any reverb that is not dependent on factors that change during gameplay should be applied to the audio files themselves using higher-quality reverb in audio software. The Length property sets the length of the reverb tail (the number of seconds it will take for a sound to completely die away after it finishes playing). The WetPercent property controls the percentage of the audio which is affected by the reverb filter. This can be smoothly changed over time using the InterpolateWetPercent method. Related Materials Manual soudnode_overview Code Reference ReverbNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/soudnode_overview.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/soudnode_overview.html",
    "title": "Using SoundNodes | ZilchEngine",
    "keywords": "SoundNodes are the building blocks behind all audio in the Zilch Engine. A SoundNode receives audio data from other SoundNodes through its input connections, modifies that data in some way (or simply collects it), then passes it along to more SoundNodes through its output connections. Some SoundNodes only generate audio data, like SoundInstances. Those nodes do not collect anything from their input connections and attaching nodes to their input would have no effect. All sound objects in the Zilch Engine use some type of SoundNode. These nodes are connected together into a tree-like graph, with generating nodes as the topmost branches, and the output node of the SoundSpace as the root node at the bottom. The SoundNode graph processes audio by starting at the root node and requesting data from its input nodes. These nodes then request data from their inputs, and so on, until the request reaches a generating node which returns audio data that then follows the chain back down the graph. There are many types of SoundNodes that can only be created and added to the node graph in NadaScripts. These SoundNodes are reference counted: they will stay alive as long as the user stores a variable with the SoundNode assigned to it. If it is not stored, the node will be alive as long as it is connected to the graph, but users can no longer access it. The SoundNodes of built-in objects are also exposed in Nada, and users can freely edit most of the graph connections, giving them a great deal of flexibility in creating audio. When building connections it is important to remember that nodes closer to the generating node modify the audio before nodes that are further away. For example, to change the pitch of a sound before applying reverb, the PitchNode must be between the SoundInstance and the ReverbNode. The SoundNode Graph tool can be extremely helpful when editing the graph directly. WARNING: SoundNodes can be connected in many complicated ways, but users must be careful not to create a loop. If loops are created, the user will receive an error, and the SoundNodes will be automatically disconnected. In most cases, nodes can be connected in any order and to any number of other nodes. The exception is the PitchNode . The PitchNode changes the pitch of a sound by essentially stretching or squishing the sound waves, which means that it needs a different amount of data than other nodes. This causes a problem when a PitchNode and a node that was not pitch-shifted request data from the same SoundInstance. WARNING: When using PitchNodes, if a generating node has multiple output connections the user must make sure all of them are at the same pitch. If SoundNodes request data from the generating node at different pitch settings there will be an error and the nodes will be disconnected. Using SoundNodes In NadaScripts, all SoundNodes are created using the appropriate method on the Audio object. The following code block shows how you would create a PitchNode. var myPitchNode = Audio.PitchNode(); There are multiple places in the SoundNode Graph that sound nodes can be attached. Here is an example of a component that creates and controls a PitchNode for its neighboring SoundEmitter: class EmitterPitch : NadaComponent { [Dependency] var SoundEmitter : SoundEmitter; var PitchNode : PitchNode = Audio.PitchNode(); [Property] var Pitch : Real { get { return this.PitchNode.Pitch; } set { this.PitchNode.Pitch = value; } } function Initialize(init : CogInitializer) { this.SoundEmitter.OutputNode.InsertNodeAfter(this.PitchNode); } } The functionality described below is available on all SoundNodes. See the individual Manual pages for details about each SoundNode type. Adding and Removing SoundNodes To add a SoundNode as input on another SoundNode, call the AddInputNode method on the SoundNode that should receive the input, passing in the input SoundNode as the parameter. There are two ways to insert a SoundNode into the existing graph, InsertNodeAfter and InsertNodeBefore. As expected, InsertNodeAfter will insert a SoundNode into the graph after the SoundNode the method is called on (placing it between that SoundNode and all its output nodes), and InsertNodeBefore will insert a SoundNode before the SoundNode the method is called on (placing it between that SoundNode and all its input nodes). NOTE: Some built-in objects do not allow insertion and will give a warning if the user calls this method. To disconnect a SoundNode's input, the RemoveAllInputs method can be used to remove all input connections from the SoundNode. Removing a single input can be done using the RemoveInputNode method, which will remove the SoundNode passed in as the parameter from the inputs of the SoundNode the method is called on. The RemoveAllOutputs method will remove all output connections from the SoundNode, disconnecting it from the node graph. There are two ways to remove a SoundNode from the graph while keeping the rest of the graph intact. The RemoveAndAttachInputsToOutputs method will remove the SoundNode from the graph but will also connect all of the SoundNode's input SoundNodes to all of its output SoundNodes. The ReplaceWith method will replace the SoundNode the method is called on with the SoundNode passed in as the parameter; all inputs and outputs of the SoundNode the method is called on will be switched to the new SoundNode. NOTE: Built in objects that do not allow insertion before their SoundNode also do not allow you to remove all of their inputs. Built in objects such as SoundSpaces will not allow you to remove them from the graph. Bypassing SoundNodes The BypassPercent property sets a percentage of a SoundNode's input that will be sent directly to its outputs, without any processing. In other words, if the BypassPercent is set to 30.0, seventy percent of the sound will be processed by the SoundNode while thirty percent will not. This can be a useful way to turn nodes on and off without removing them from the graph, or to reduce the strength of an audio effect. NOTE: On some types of SoundNodes changing this value by large amounts at runtime could result in clicks or other problems with the audio. Collapsing Unused SoundNodes If the AutoCollapse property is set to True, the SoundNode will automatically remove itself from the graph when its last input node is removed. This property is set to False by default. Nada Events The SoundNodeDisconnected SoundEvent is sent by all SoundNodes when they are is completely disconnected from the graph (when the node has no more inputs or outputs). Related Materials Manual SoundInstance SoundSpace SoundNode Graph Reference SoundNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/volumenode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode/volumenode.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The VolumeNode collects audio data from all of its inputs and applies a volume modification to the samples before passing them off to its output nodes. Common Uses Collecting several sounds together and changing their volume all at once Using the VolumeNode There are two linked properties that can be used to set the value of the volume modification: changing one of them will also change the value of the other. The Volume property is a floating point multiplier applied to the audio signal: a value of 1.0 does not affect the sound, 2.0 will double the volume, 0.5 will halve it, and 0.0 will make the sound inaudible. The Decibels property allows you to set the volume using the logarithmic decibel scale. A value of 0 dB does not affect the sound, 6 dB will double the sound's volume, -6 dB will halve it, and -100 dB is effectively the same as setting Volume to 0. The volume can be interpolated over time using either floating point or decibel values with the InterpolateVolume and InterpolateDecibels methods. In both methods, the first value is the volume you want to interpolate to, and the second is the length of time (in seconds) for the interpolation. Using these methods ensures that the volume change is applied smoothly by the audio engine. NOTE: If a VolumeNode has an output connection, setting the volume directly using the Volume or Decibels property is not actually instantaneous, so setting the volume and then calling InterpolateVolume immediately afterward may have unexpected results. Events The AudioInterpolationDone event will be sent when a volume interpolation has finished. Related Materials Manual soudnode_overview Code Reference VolumeNode"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundnode_graph.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundnode_graph.html",
    "title": "| ZilchEngine",
    "keywords": "The SoundNode Graph tool displays the connections between all SoundNodes that are currently attached to the output of a SoundSpace. The nodes are color-coded and labeled according to their type. Orange lines connecting nodes indicate a connection which is currently producing audio, while gray lines indicate connections with no audio."
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundspace.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundspace.html",
    "title": "Using SoundSpaces | ZilchEngine",
    "keywords": "The SoundSpace is one of the default components of a Space. Its basic purpose is to separate sound areas, which means that a SoundListener in one SoundSpace can't hear sounds in a different SoundSpace. It also allows the user to control properties like pitch and volume for all sounds in the Space. Using SoundSpaces Playing SoundCues SoundCues can be played through SoundSpaces for non-positional audio that does not go through the SoundListeners. The PlayCue method will start playing the SoundCue immediately, while the PlayCuePaused method will create a paused SoundInstance , which allows the user to change its settings before un-pausing it. this.MySoundInstance = this.Space.SoundSpace.PlayCuePaused(this.MySoundCue); this.MySoundInstance.Volume = 0.5; this.MySoundInstance.Paused = false; Controlling Volume and Pitch The Volume and Decibels properties set the volume adjustment applied to all sound in the SoundSpace. Volume uses floating point values, while Decibels uses the logarithmic decibel scale commonly used in audio. These properties are linked, so changing one will also change the value of the other. The Pitch and Semitones properties set the pitch adjustment applied to all sounds. This adjustment affects both the pitch and speed of the sound: higher-pitched sounds will play faster, while lower-pitched sounds play slower. Large pitch changes will likely affect the quality of the sound. Pitch uses floating point values, while Semitones uses semitones, or half-steps. These properties are also linked. The InterpolateVolume, InterpolateDecibels, InterpolatePitch, and InterpolateSemitones methods can be used at runtime to smoothly change the SoundSpace's volume or pitch over time. Using these interpolation methods is preferable to using Actions to set the properties: changing a property every frame with an Action can result in audible jumps in volume or pitch, while the interpolation method causes the volume change to be handled smoothly by the audio engine. Note that these volume changes will be combined with any other volume modifications applied by objects such as SoundTags, SoundEmitters, and SoundCues. If a SoundCue's {Volume is set to 0.5 and it is played on a SoundSpace which also has a volume of 0.5, this effectively sets the SoundInstance's volume to 0.25. If the SoundCue's Semitones is set to 12 and it is played on a SoundSpace with a Semitones value of -6, this effectively raises the SoundInstance's pitch by half an octave. When the PitchWithTimeSpace checkBox property is true, which is the default, the audio of the SoundSpace will be pitched according to the TimeScale of the Space. In other words, if time slows down the audio will slow down and lower in pitch, and if time is sped up the audio will speed up and raise in pitch. Controlling Playback SoundSpaces can be paused by setting their Paused checkBox property to true. This will stop all audio processing for SoundInstances in that SoundSpace. When the Paused checkBox property is set to false the SoundInstances will resume playing with no changes. If the icon-check-square-o, name=PauseWithTimeSpace property is true, which is the default, the SoundSpace will be paused when the Space is paused. SoundNodes Each SoundSpace has a single SoundNode that all audio in the Space is connected to, the InputNode. SoundListeners are connected directly to this node, as well as SoundInstances that are not played through a SoundEmitter. Since the SoundSpace uses additional SoundNodes to modify pitch and volume, it also has an OutputNode property which you can use to attach to the output of the SoundSpace. SoundNodes that the user creates to affect all audio in the SoundSpace should be inserted after the OutputNode. NOTE: SoundNodes that are inserted after the SoundSpace's OutputNode must be removed by the user, as these will not be automatically removed when the SoundSpace is destroyed. SoundNodes cannot be inserted after the InputNode or before the OutputNode, and neither of these nodes can be replaced or removed from the graph. Related Materials Manual SoundListener SoundCue SoundInstance SoundTag SoundEmitter SoundNode Reference SoundSpace"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/soundtag.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/soundtag.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "SoundTags are resources that allow users to pause, resume, and stop a group of SoundInstances ; control their volume, EQ, and compression; and get a list of tagged SoundInstances to change other properties in NadaScripts. Common Uses Controlling the volume or EQ of certain types of sounds (such as setting volume for music separately from sound effects) Using the TagForDucking and compressor properties to reduce the volume of one group of sounds when another group is playing (for instance, making sound effects quieter when dialog is playing) Using the compressor settings to keep a type of sound effect from getting too loud Using SoundTags SoundTags can be added to SoundCues using SoundTagEntries . When a SoundCue is played, the resulting SoundInstance will be automatically added to all SoundTags that are on the SoundCue. Users can also add and remove SoundInstances from SoundTags in scripts at runtime. Unlike other audio objects, SoundTags exist across all Spaces, so the same SoundTag can be used for SoundInstances in different SoundSpaces . Volume The Volume and Decibels properties set the volume adjustment that is applied to all tagged SoundInstances. Volume uses floating point values, while Decibels uses the logarithmic decibel scale commonly used in audio. These properties are linked, so changing one will also change the value of the other. Note that these volume changes will be combined with any other volume modifications applied by objects such as SoundEmitters, SoundCues, and SoundSpaces. If a SoundCue's Volume is set to 0.5 and it is played with a SoundTag which also has a volume of 0.5, this effectively sets the resulting SoundInstance's volume to 0.25. Volume can be interpolated over time using either floating point or decibel values with the InterpolateVolume and InterpolateDecibels methods. Using these methods ensures that the volume changes are applied smoothly by the audio engine. Equalizer If the UseEqualizer property is set to true, the EQ properties will be applied to all tagged SoundInstances. These settings control the volume of the audio at different frequency ranges. SoundTags have properties for EQLowPassGain, EQBand1Gain, EQBand2Gain, EQBand3Gain, and EQHighPassGain. See the EqualizerNode for explanations of how these properties work. Compressor If the UseCompressor property is set to true, the Compressor properties will be applied to all tagged SoundInstances. A compressor reduces the volume of the sound if it goes above a specified decibel level, or threshold. SoundTags have properties for CompressorThreshold, CompressorAttack, CompressorRelease, CompressorRatio, and CompressorKneeWidth. See the CompressorNode for explanations of how these properties work. If the TagForDucking property is set to another SoundTag that tag's volume level will be used to trigger the compressor settings of this SoundTag. Nada Events The AddedInstanceToTag SoundEvent is sent when a new SoundInstance is added to the SoundTag. The TagHasNoInstances SoundEvent is sent when all SoundInstances have been removed from the SoundTag. Resources Manual SoundInstance SoundCue SoundTagEntries SoundSpace SoundEmitter EqualizerNode CompressorNode Reference SoundTag SoundEvent"
  },
  "docs/zilch_editor_documentation/zilchmanual/audio/volume_meter.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/audio/volume_meter.html",
    "title": "| ZilchEngine",
    "keywords": "The Volume Meter tool allows the user to monitor and change the audio system volume. The slider sets the volume adjustment, in decibels, which will be applied to all audio in the Zilch Engine. The colored bars indicate the RMS volume of all the audio currently playing. Roughly speaking, this is the average volume of the recent audio. The red line on top of the volume bars indicates the recent peak volume of the audio. This shows you the highest level that the audio data has reached. If this reaches the top of the meter, there may be clicks or static in the audio, since audio data is lost of the volume becomes too loud."
  },
  "docs/zilch_editor_documentation/zilchmanual/editor.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor.html",
    "title": "The Launcher | ZilchEngine",
    "keywords": "Many new users will often make the mistake of calling the editor the engine. The engine however can function completely with out the editor and often is just manipulating data that the engine uses. Think of it like a car engine, the steering wheel is part of the car but not part of the engine. The Launcher The Zilch Engine Launcher is an application that helps you choose which version of zero you want to open a project with. It is also a place to find information about the engine community, and create new projects. Editing Modes There are a few editor modes that can be used in Zilch, check out some of the basics here. EditorCommands Commands that can be run from the search bar Editor User Interface Initially the amount of buttons and the breadth of actions that can be taken in Zilch can be a bit complex. Start here to get yourself oriented in the engine. EditorUI Tags CogPathsManual UsingCustomEaseInActions Tools TextEditor Hotkeys, customization, and word/code completion Adding To Your Project Whether it is visual assets or scripts you will often find yourself needed to bring in data from outside the engine. Check out the sections below to find out where to go to add your assets. AddRemoveComponent Exporting At some point you may want to play your game outside the editor, learn how to do so here. Exporting a project Customizing and exported project"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/addremovecomponent.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/addremovecomponent.html",
    "title": "Adding a Component | ZilchEngine",
    "keywords": "Add and remove components from objects to give them new functionality. Adding a Component There are multiple ways to add a component to an object: The Add Component button in the Properties Window brings up the Add Component drop down: Typing the name of the component you want to add will filter the list: Notice that component options appear in the drop down selection You can click on desired component to add it to the object or press enter. The component drop down menu can also be opened with the hotkey Ctrl + M Remove a Component You may remove a component in either of two ways: Using the \"X\" Button in Properties window. Using the component's Right-Click Submenu in Properties window Related Materials Manual components"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/cogpathsmanual.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/cogpathsmanual.html",
    "title": "The CogPath Property | ZilchEngine",
    "keywords": "CogPaths provide a good way to get a reference to any Cog anywhere within a game session. It points directly to the object as identified in the editor (or through a written file path) instead of wasting valuable computation time searching for it in code. As such, it is usually best to instantiate any CogPath variables before run-time The CogPath Property To use a CogPath cogPath property in a component, a CogPath variable with the [Property] attribute is necessary: [Property] var ObjectCogPath : CogPath = CogPath(); When viewed in the Properties window, a CogPath property will appear: Selecting the object the CogPath refers to may be done in one of three ways: from the Level Editor window, the Objects window, or by typing it in directly To select from the Level Editor: Hold Left-Click over the Orange reticle icon and Drag over to the object in the Level Editor window: To select from the Objects window: Hold Left-Click over the Orange reticle icon and Drag over the object name in the Objects window: To select by typing the name in directly: The syntax is very similar to a file system hierarchy. The space that the object is in acts as the \"Drive Name\" (this.Space:/), which allows a CogPath to reference a Cog in a different Space than the one the object with the component exists in. If the object is in the space that the component is in, you do not need to type in the space (i.e. just :/): To access the Cog that the CogPath points to, simply use the dot operator after the name of the CogPath variable: var myObject = this.ObjectCogPath.Cog; In-Editor Properties of CogPath Once an object has been selected, a number of different options become available. These may be accessed in the Properties window by clicking on the arrow icon next to the orange reticle, like so: Editor Property Description DirectCog drop-down menu If the current cog is null, and it is accessed through CogPath.Cog, it will try to resolve the path. DirectCog never tries to resolve the path. It's a pointer to the object ErrorOnResolveToNull checkBox Is an exception thrown if a Cog is accessed when it's invalid or not found? ErrorOnPathCantCompute checkBox Throw an exception/notification if the path to an object cannot be computed? ErrorOnDirectLinkFail checkBox Throw an exception/notification if a direct link to the object cannot be resolved? UpdateCogOnPathChange checkBox When cog path is set, should object be resolved? (this also detects parse errors) UpdateCogOnInitialize checkBox Whether the cog path attempts to resolve an object when the object is fully initialized UpdatePathOnCogChange checkBox When the cog is set, should the path to the object be recomputed? CogRelative (Path Preference) First attempt to represent the path as a relative path. This is only valid if the objects are on the same hierarchy (such as .. for parent, ../OtherObject for a sibling, or Child1/Child2 for children) SpaceRelative (Path Preference) Assumes the objects are not on the same hierarchy, but exist within the same space. This means all paths begin with :/, which means look within the same space. Absolute (Path Preference) Always require a named space (such as Hud or Main) and then a full path to the object such as Hud:/HealthText. Note that Absolute can only be used in the editor with the orange reticle target picker if the space is given a name. Related Materials Manual Game Objects (Cogs) Reference cogpath cog"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/customizeexportedgame.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/customizeexportedgame.html",
    "title": "| ZilchEngine",
    "keywords": "How to customize an exported game. Custom Game Icon To give your exported game a custom icon: Create a .ico file using a tool or website. Example: http://converticon.com/ Place in the same directory as your project file (Command \"ShowProjectFolder\") Set the name Name to: \"Icon.ico\" Export your game and your new icon will replace the default. Related Materials Manual exporting"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/editmode.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/editmode.html",
    "title": "Overview | ZilchEngine",
    "keywords": "This section covers the basic differences between 2D and 3D editing modes in the engine. Overview As prototype projects were being developed with the Zilch Engine, a shift was made to have strong 2D support. The engine features several 2D support elements, such as the ability to: set the Physics to 2D, change the camera to orthographic, and use a special sorting mode for sprites. 2D mode is a setting that activates all these features by default. Settings that 2D Mode changes on project startup: Default camera in the level is orthographic with Z depth based sprite sorting Level is created with 2D physics Linear forces applied on the Z axis will not be integrated on objects. During Collision Resolution angular forces will only be applied on the Z axis Editor Camera is changed to orthographic and set into Z plane mode NOTE: In 2D Mode, objects can still have their Z Translation set to a value other than zero. Can I change my 2D project to 3D? The setting is just defaults, so you can change any setting back. You can also use the Command : Mode3D/Mode2D. You can also click the buttos in the top left corner of the name=Level Window, icon=window-restore. (NOTE)Physics when switching to 3D mode: Keep in mind that the PhysicsSpace will not change mode when you use the Mode2D or Mode3D command. These commands are intended to help with editing not change the foundation of a project. Collision The engine and collision detection are still 3D. This z dimension is a nice way of creating complex layers of collision. You can have objects span multiple layers of collision or jump forward and back between layers, they just won't translate on the Z axis. Related Materials Manual Physics PhysicsSpace Command Code Reference Mode2D Mode3D"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/editor_configuration.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/editor_configuration.html",
    "title": "Selecting the EditorConfig Object | ZilchEngine",
    "keywords": "The Zilch Editor has a number of configuration settings that can be modified within the editor, such as text editor preferences. Selecting the EditorConfig Object To modify the editor's settings, first select the EditorConfig object: In the Level Window Press Shift + E Or Click Select > Select Editor Config EditorConfig Components Components found on EditorConfig object are unique to it, and cannot be attached to other objects. Properties Window of EditorConfig object MainConfig The MainConfig component shows details about the current version of the editor. Its fields are read-only. The MainConfig component ContentConfig The ContentConfig component contains settings controlling the loading of additional content libraries when using the Zilch Editor. This component is #deprecated and is not accessible from within the Zilch Editor. It currently exists for #legacy purposes. TextEditorConfig The TextEditorConfig component allows the user to view and modify various settings of Zilch's text editor. TabWidth The text editor may be configured to insert either two or four spaces when the Tab key is pressed. Left: TwoSpaces, Right: FourSpaces ShowWhiteSpace If this is true, whitespace characters are shown as little dots. Left: true, Right: false LineNumbers If this is true, Nada files will display their line numbers in the gutter. Left: true, Right: false CodeFolding Code folding is a common feature of code editors that allows the user to hide code that they don't want to see at the moment. In the Zilch Editor, with code folding enabled, any paired set of curly braces may be collapsed by clicking its toggle button in the editor. If code folding is disabled, these controls will be hidden, and the code folding section of the gutter will be collapsed. ConfidentAutoCompleteOnSymbols If this is true, code completion suggestions can be accepted and inserted into the file by typing a symbol character, such as a period or a parenthesis. FontSize This defines the initial font size used for text files when they are opened in the editor. This can be changed on a per-file basis by pressing Control + + and Control + -, or by holding Control and using the scroll wheel. Changes made to a file's font size in this manner are overwritten by the FontSize property when that file is closed. EditorSettings The editorsettings component allows the user to view and modify various general editor settings. WARNING: Some of the settings in this component should not be modified by the user, as noted below. ViewCube If this is true, the view cube is visible in the upper-right corner of the Level Window. ViewCubeSize This defines the size of the view cube, if it is visible. ScriptReloadGame This defines what happens in the event that a script is modified while the game is running in the editor. This property is deprecated and should not be changed. It currently exists for legacy purposes. AutoUpdateContentChanges This defines what happens in the event that an open project's content library is modified while the editor is running. This property is deprecated and should not be changed. It currently exists for legacy purposes. EditorConfig The EditorConfig component contains settings that define which project and which level from that project are opened when the editor is opened. It has no editable properties from within the editor because it is not intended to be modified by the user. NOTE: The data from EditorConfig object is read from and written to a config file on the user's hard drive, in the Documents > ZilchEditor folder. This includes data that cannot be modified from within the Zilch Editor. An experienced user may make changes to the config file directly. While this is not strictly forbidden, it is generally not recommended. The config file is called {nav icon=file, name=ConfigurationVX.data}, where X is a number, with more recent config files using larger numbers. Later versions of the engine may use the same config file, or they may create a new one with a larger number. In general, the latest engine version will always use the latest config file. Related Materials Manual Project Configuration Tab Completion Reference MainConfig TextEditorConfig editorsettings TabWidth"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands.html",
    "title": "Editor Commands | ZilchEngine",
    "keywords": "This section covers the basics actions you can take on your project from creating and running, to saving and exporting. Editor Commands Actions you can take on your project often come in the form of commands, so let's look at them first. Editor Commands In Concept The Command List Viewer command_reference New Project New Project from Launcher In Editor Actions Save your project runthegame createobject Stop your game Switching edit modes Adding Resources Selecting Objects Right Click Context Menus Exporting Your Project Creating an EXE"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/command_list_viewer.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/command_list_viewer.html",
    "title": "| ZilchEngine",
    "keywords": "The command list viewer is an in editor window which displays all registered engine commands, their hotkeys, and a brief description of their behavior. The list can be accessed in the same way as any other command Command : CommandListViewer"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/commands.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/commands.html",
    "title": "Executing Commands | ZilchEngine",
    "keywords": "Commands are actions you can take in the Zilch Editor through the search (sometimes called command) bar. Executing Commands Commands can be run in four ways Using Menus Menu options will be referred to like this Project > New Project which should be interpreted as follows: Click on top level menu entry on the menu bar Then click on the desired command entry Use the Search Window Click on the Zilch Search Button located at the top left corner of the editor : Or Press Space in the main window Or From any window press ctrl + shift + space The Zilch Search Window will appear: Zilch Search Window, often abbreviated to just \"Search Window\" Type the command name into the text box Command names will be referred to like this New Project Keyboard Shortcuts Displayed in the menu bar is the keyboard shortcut for the command. This key sequence can be pressed to activate the command without using the menu. For example, Save Project can be accessed with Ctrl + S Keyboard shortcuts will be referred to like this: Ctrl + O Tool Bar Icons Locate the toolbar located at the top of the editor Press the button for the desired command."
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/createobject.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/createobject.html",
    "title": "Create > Create Sprite | ZilchEngine",
    "keywords": "Creating an object is a common action within Zilch Engine, in this page we outline all the ways to create one (using Sprite as an example). Create > Create Sprite Open the Search Window and type CreateSprite Additionally, here is a list of all create commands Zilch Engine provides: CreateBlockTower CreateCamera CreateCube CreateCylinder CreateDirectionalLight CreateDirectionalLightShadows CreateGrid CreatePointLight CreatePyramid CreateSphere CreateSplineParticleSystem CreateSprite CreateSpriteParticles CreateSpriteText CreateTeeter CreateTower CreateTransform CreateWall CreateWedge"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/exporting.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/exporting.html",
    "title": "| ZilchEngine",
    "keywords": "Exporting is the process of converting your project into a single playable executable. This process is used to create the final build of your game but can also be useful for creating Playtest builds. Setting a Starting Level By default, Zilch will set the auto-generated 'Level' as the starting level but that can be changed by: Select the Game Session Shift + G or Select > Game Under the DefaultGameSetup component, change StartingLevel enum to the desired one Custom Launch/StartUp Banner To give your exported game a custom start-up banner: Add a SpriteSource to your project with the name LaunchBanner. Its size must be 400 x 150 pixels. When you export your game, your new banner will replace the default one. Custom Game Icon To give your exported game a custom icon: Create a .ico image file using a tool or website (we recommend converticon ) Place in the same directory as your project file - Command : ShowProjectFolder Rename it to: Icon.ico Export your game and your new icon will replace the default. Handling Escape Event By default, Zilch will map the Escape key to close the game application instantly. To prevent that, use the following steps: Create a Nada Script called GameStateManager and attach it to your Level Settings object class GameStateManager : NadaComponent { function Initialize(init : CogInitializer) { Zilch.Connect(this.GameSession, Events.GameRequestQuit, this.OnGameRequestQuit); } function OnGameRequestQuit(event : GameEvent) { event.Handled = true; } } Now, Zilch will no longer close the application when Escape is pressed. In Editor you can still use the StopGame button F8 to close the game tab, but on the exported version you'll need to close the application through some other means. (Usually by offering a pause menu with an option to quit the game) Handling Focus Change Events Alt + Tab Similarly to handling Escape events, you may want to do special logic (such as pausing the game) when the users loses or regains focus of the application. You can accomplish that by connecting to the following events: Zilch.Connect(this.GameSession, Events.GameFocusOut, this.OnGameFocusOut); //When focus is lost Zilch.Connect(this.GameSession, Events.GameFocusIn, this.OnGameFocusIn); //When focus is regained You can connect to these events from any object but we recommend doing it from a script attached to a persistent object (such as LevelSettings). The GameStateManager script we wrote earlier would work really well for this. Changing Resolutions and Fullscreen mode In addition to setting the resolution at launch, you can set the game's resolution or its fullscreen mode by using the following function: var fullscreen : Boolean = true; var resolution : Real2 = Real2(1280, 720); this.GameSession.ChangeResolution(fullscreen, resolution); IMPORTANT: Some combinations of resolutions/fullscreen mode might produce jarring visual effects. Make sure to test them thoroughly."
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/launchernewproject.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/launchernewproject.html",
    "title": "| ZilchEngine",
    "keywords": "This page covers various methods and options for creating a new project. Creating the Project The following methods can be used to enter the project creation screen on the launcher: Open the Zilch Launcher and go to the New Project subtab of the Projects tab. Run the Command: NewProject Project > New Project Project Creation NOTE: For more details on this tab, visit the Launcher page. Related Materials Manual Zilch Launcher Code Reference NewProject"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/resourceadding.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/resourceadding.html",
    "title": "Access the Add a Resource Window | ZilchEngine",
    "keywords": "Access the Add a Resource Window The Add a Resource window is the interface by which all new Resources added. There are a number of ways, however, to access this window: through the Add Command and through a Resource Property in the Properties window window. Add Command The Add command can be invoked in two different ways: Command : Add Resource In the Menu bar Resource > Add Create Resource Through Properties A Resource may be added by clicking on the Create New Resource button on any Property that has a Resource as its type: Add a Resource Window Either of the methods illustrated above will result in the Add a Resource window, though at different states. As seen in the screenshot above, using the Create New Resource button will access the interface for the same type of Resource as the the Property by which it is being opened (e.g., the Material Resource interface will be opened if creating a new Resource through a Material property). When using the Add Command, however, the type of Resource desired must first be chosen: Select the resource type you wish to add Select the resource template you wish to use Choose a name for your resource Add any applicatable tags. Click the Create button button The Add Resource Window Related Materials Manual Command Reference Commands Add"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/rightclicksubmenu.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/rightclicksubmenu.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The Right-Click Submenu is a simple-to-use tool that gives different functionality depending on if it is used in the Library, Object, or Properties Window, or even inside a NadaScript. It can be used to rename Objects, remove Components from them, make duplicates of them, and other actions as well. Common Uses Edit the Name and Tags of an Object Removing a Component from an Object, or Resource from the Project Viewing more detailed information on a Component, or Variable in a NadaScript In the Library Window The Right-Click Submenu will be slightly different in the Library Window depending on if either a Tag or a Resource is right-clicked. Tags Right-clicking on a Tag in the Library window will only give a single option, Add Tag to Search. Left-clicking on this option will act the same as if that Tag was typed into the Search function, or if the Tag was double left-clicked: the Library Window will show any Resources with the selected Tag. Resources Right-clicking on a Resource will bring up a different list with four options available to all Resources: Edit, Rename, EditTags and Remove, and if the Resource is not a NadaScript, Duplicate. Edit will open the selected Resource to have changes made to it. If need be it will open a new editor window, such as if there is a visual aspect to be edited or to edit a text entry. Rename will highlight the current name of the Resource and allow the user to type in a new one. EditContentMeta will open the ContentComponents for a Resource (i.e., a Resource's meta data) in the Properties Window EditTags allows custom tags to be added to and removed from the Resource. Note that the default tag that marks what type of Resource the object is cannot be removed. Remove will remove the Resource from the Project completely. Note that this cannot be undone and the Resource will have to be recreated if it was done in error. Duplicate will create a copy of the selected Resource. In order to differentiate between the new copies, the names of the copies will be appended with Copy(CopyNumber). In the Objects Window When an Object in the Objects Window is right-clicked, it gives only two options: Rename and Delete. Rename: Just like in the Library Window, the Rename option allows the user to change the name of the selected object. Delete: Rather than being removed from the project, the Delete option simply removes the selected Object from the current Level. In the Properties Window When a Component is right-clicked in the Properties Window, it is given three options: Remove, View Docs, and Search Online Docs. Remove: The Remove option will remove the selected Component from the Object. If another Component is dependent on the Component attempting to be removed, the Engine will not allow the removal to take place and will show an error message. View Docs: View Docs will open a new Editor Window that will give a Class Description of the Component, as well as the various Properties and Methods that Component has. NOTE: Only Components supplied by the Engine will have documentation, and the documentation is the same that will appear in Nada's code-completion and the Code Reference Section. As it is generated automatically from meta data, not all components will have docs available for viewing. Search Online Docs: Using Search Online Docs will open a new page in the user's web browser, navigate to \"zero.digipen.edu\" and perform a search using the name of the Component as the query. Inside a NadaScript Right-clicking on any word written in a NadaScript will give the user the Go To Definition option. On a Tab in an Editor Window When right-clicking on an open tab in the Editor Window, three options are given: Close, Close All But This, and Move to New Window. Close: This option will close the selected tab in the Editor Window. Close All But This: This will leave the selected tab open, but will close any other tabs in the same window. Related Materials Manual Tags Reference code_reference"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/runthegame.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/runthegame.html",
    "title": "| ZilchEngine",
    "keywords": "Running the game will and should be done often. You can run the game in one of four ways: Press F5 Press the button on the tool bar The standard right-pointing triangle plays the game Command : PlayGame Select Menu Project > Play Game"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/savingproject.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/savingproject.html",
    "title": "| ZilchEngine",
    "keywords": "Saving the project will and should be done often. You can save your project in one of four ways: Press Ctrl + s Clicking the button in the top left corner of the editor. Command : SaveProject Select Menu Project > Save Project"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/selectobject.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/selectobject.html",
    "title": "Selecting Multiple Objects | ZilchEngine",
    "keywords": "When an object is selected it allows you to perform extra functions on it, such as Copy or Cut, or view its properties in the Properties Window. This is done in one of three ways: Click on the object in the Level Window Notice orange outline around selected object Search for the object by name in the Search Window Notice the term Cog is used to describe it Click on the object in the Objects Window When an object has recently been selected, you may also select it via the navigation bar in the Properties Window using the arrows or Recent button: Selecting Multiple Objects You may also select more than one object at the same time. With multiple objects selected, you may Copy or Cut them all simultaneously, or view and edit the properties on any components that they all share. Multi-selecting may be done in three different ways: Click the LeftMouseButton in the Level Window and Drag over all the objects you wish to select Hold Ctrl and click on the objects individually in the Objects Window Hold Shift and click on the first and last objects in a desired range in the Objects Window"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/stopgame.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/stopgame.html",
    "title": "Related Materials | ZilchEngine",
    "keywords": "It is a good practice to close your game window promptly. Editing levels while it a Game Window is open can cause erratic behavior, undefined behavior, or errors. Ways to close out of the Game Window include: Press Esc Command : StopGame Click x on the name=Game Window, icon=window-restore tab Press the Stop Game button: Related Materials Code Reference StopGame"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/switchingmode2dto3d.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/editorcommands/switchingmode2dto3d.html",
    "title": "Switch to Mode2D | ZilchEngine",
    "keywords": "This affects your {icon university}[[zilch_engine_documentation/zilch_editor_documentation/zilchmanual/graphics/camerasviewportsrenderers/|Camera's]] projection mode. Switch to Mode2D Command : Mode2D Manually Change just the camera In the name=Objects Window, icon=window-restore Select the EditorCamera object In the Properties Window Under Camera Set ProjectionMode enum to: Orthographic Switch to Mode3D Command : Mode3D Manually change just the camera In the Objects Window Select EditorCamera object In the Properties Window Under Camera Set ProjectionMode enum to: Perspective"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/editorui.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/editorui.html",
    "title": "| ZilchEngine",
    "keywords": "This page introduces the Zilch Engine editor and user interface. It covers editor windows such as the Objects Window, Properties Window, Library Window, Level Window, and Search Window. Create a New Project (NOTE)COMMANDS: Commands represent all actions you can perform as a user in the Zilch Editor (such as CreateSpriteText, BackupProject, and ExportGame). Links are used throughout the lesson for refreshing your knowledge on how to do common essential tasks. View how to enter Commands in Zilch by following the link provided in the tutorial! It is recommended that you create a new project. If this is the first time you have run the Zilch Engine you will already be in the Projects screen and can simply type in a name for your project. If you are not on the new Projects screen, you can access it using the Project menu. See the section The Zilch Launcher) for more information. To create a new project follow these steps: Command : NewProject In the launcher Select EMPTY 2D PROJECT template Enter a NAME for the project Enter a Project Folder directory (if the default is not sufficient) by either typing out you're preferred folder path or left clicking the button to the right of LOCATION . Left click on the CREATE PROJECT button. Windows Overview After creating a new project, the editor should look something like this: The first, default view as the Zilch Editor is opened Level Window The Level Window (located in the center of the editor as seen in the image above) is where you will manipulate objects to build levels. The visible grid is a customizable visual to help place objects within the level editor view, but isn't visible in actual gameplay. This is located in the top left corner of the Level Window In a collapsible toolbar at the top of the Level Window are a few buttons for altering the view. | Buttons | Purpose | |-------------------------------------|---------------------------------------------| | | Toggles between 2D & 3D camera controls. | | | Toggles the editor camera's rendering mode between Orthographic and Perspective Projection. | | | With the camera options you can either reset the editor camera to its default settings, or align a selected camera with the editor's camera. | | | Toggles the grid line visuals in the editor. | Properties Window When an object is selected, the properties of that object are accessible from the Properties Window. The Properties Window showing the Components of the LevelSettings object The Properties Window is the primary means for editing or building objects and their Components. This is located directly under the Properties tab in the Properties Window The Properties Navigational buttons allow for quick and efficient editing. | | These arrows allow you to navigate back and forth between recently selected items that have been shown in the Properties Window. | | | The Show Selection button, on first click, pans the camera to the object and on second click, zooms in the camera to frame the selected object in the Level Window. | | | The recent button pulls up a drop down list of the recently accessed items for selection. | Tools Window This window contains several useful tools for managing various objects within the level. Settings for the current tool being used are also available here. You can switch tools from the drop-down selection or by using hotkeys 1 through 9. Tools Window Tools drop-down selection Library Window Library Window Anything you add to the game using the Add command or through drag-and-drop importing is stored as a Resource. All resources added to your project can be found in the Library Window. Objects Window Every level contains objects. An object can represent the floor, a wall, enemies, the player, and many other things. There are a few different buttons in the Objects Window that you should know about: Eyeball: Toggles visibility of an object only while in the editor. Objects with the eye button disabled will be invisible in the editor, but still visible when the level is played. Selection Lock: The small lock button can be turned on and off to toggle the ability to select an object from within the editor. This is especially helpful if you do not want to accidentally move an object. View of the eye and lock button in the Objects Window The objects in the Objects Window can be searched for by name using the search bar. This feature can be invaluable if you have a level populated with dozens, or even hundreds, of objects. Each level has three objects by default: Visible objects in the level by default Other Windows and Bars ###Search Window This powerful tool allows you to search for various things within the editor. It also has several other uses such as selecting objects, opening archetypes, viewing properties, etc., that are accessible from here. For example, if you wanted to quickly access a script file, you can just open the search view and type in the name of the script to find it and begin editing. Another important use of the Zilch Search Window is for performing commands. See Commands for more information. The Zilch Search Window for performing commands There are three ways to pull up the Zilch Search Window: Click anywhere in the Level Window and press Space From any window press Ctrl + Shift + Space Click the Zilch drop-down in the upper left-hand corner Console Window Pressing ~ will open the Console Window. It should appear directly below the Level Window. The console can also be cleared out by pressing Ctrl + Delete while in focus. Console Window (NOTE)\"In Focus\": To be \"in\" a window requires that the window has \"focus\". To gain focus you need to click on the window itself. This ensures that all your keyboard input works as intended. Game Window The Game Window is where your game actually runs inside the editor. You can test or play your game (or specific levels) here without having to create an executable. Command: PlayGame The Game Window should appear with its tab next to the Level Window tab: Game Window displaying empty level Close the Game Window by pressing the X button on the Game tab You can also press Esc or use Command: StopGame WARNING: It is a good practice to close the game window while editing levels. There are some assets in the Zilch Engine that can be changed by scripts running in the game session. Tool Bar The tool bar is located at the top left of the entire editor. Various buttons to perform common actions are located here. | | Saves the project and all the resources in your Library | | | These buttons line up with hotkeys 1 to 5 and they represent the some of the most commonly used tools for editing objects in the Level Window. | | | These are correspond to other less common Tools that are available. | | | These open windows in the Editor, such as the Library Window and the Add Window. | | | These buttons allow you to run your game from the current level, pause, step through frame by frame, or stop executing the game, covering keys F5 to F8. | | | These buttons are for downloading content and reporting bugs. | In order to find out more about the function of each button, you can hover over them to get a pop-up tool tip. All Tool Bar buttons have equivalent commands in the Zilch Search Window. The game session can be played, paused, stepped through, and stopped with the keys F5 through F8. F9, F10, and F11 are also engine specific hotkeys. F9 will open the edit in game window for the first space, allowing objects to be edited in the scene while the game is running. F10 will toggle whether the cursor is trapped, meaning it is made invisible and locked to the center of the screen. F11 toggles fullscreen mode for the currently focused window. Menu Bar The menu bar includes a catagorized set of commands in the form of drop-down menus. Reopening Windows & Docking The Zilch Search Window can be used to reopen closed windows and tabs. Once reopened, a window can dragged onto another location, a process known as \"docking\". Docking location options are indicated by the editor with light blue regions as another window is hovered over that location. Docking the Library Window to the upper right-hand corner Related Materials Manual The Zilch Launcher Components Resource Code Reference CreateSpriteText BackupProject ExportGame NewProject Add PlayGame StopGame"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/exportanproject.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/exportanproject.html",
    "title": "Export to a stand alone executable | ZilchEngine",
    "keywords": "This page covers how to export your project. Export to a stand alone executable For small projects this is the easiest option. It will produce an executable that should run on any windows machine Open your project Run the Command : ExportGame Select a executable file name You are done! Export for an installer If you project is a very large stand alone, executable may not be the right options since it has to extract the files when it runs. Open your project Run the Command : ExportContent A folder will be opened will all the files that need to be in the installer The Inno-Setup file will generate an installer"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/launcher.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/launcher.html",
    "title": "Download the Engine | ZilchEngine",
    "keywords": "This page covers the launcher and its multiple subtabs. Download the Engine The Discover Tab The Discover tab is the Launcher's information hub, featuring links to documentation, news, and informative websites. Link Description ZEROHUB The ZilchHub homepage ZILCH The Nada user documentation ROADMAP An overview of current development on Zilch Engine DOCUMENTATION The root documentation page MARKET The Zilch Market webste Q&A The Zilch Q&A website The Projects Tab The Projects tab lets the user create new projects and manage existing ones. New Project Project Creation Project Templates The project templates are EMPTY 2D PROJECT and EMPTY 3D PROJECT. Both options will result in an empty Zilch project, but with a few differences in settings. New Project Default Settings by Template Setting Description EMPTY 2D PROJECT EMPTY 3D PROJECT PhysicsSpace Mode2D Default behavior for collision resolution true false EditorCamera Settings of editor camera 2D (orthographic projection, etc.) 3D (perspective projection, etc.) DefaultCamera Settings of the camera that is placed by default in each new level 2D (orthographic projection, etc.) 3D (perspective projection, etc.) GridDraw Axis Perpendicular axis to the grid plane ZAxis YAxis NOTE: Even if a game starts with the 2D template, it can still become a 3D game or even just use 3D elements. The template you choose simply specifies the default settings for certain properties. Name and Location The Name of the project is required, but the TAGS field is optional. Both are ways of labeling a project so that it can be searched for in the Recent Projects subtab. TAGS will parse a comma-delimited list of strings, where each string becomes a seperate tag: <tag1>, <tag2>, <tag3> Version The version can be selected from here as long as it's installed from the Builds tab. Optionally, the latest version can be installed by selecting the version drop-down > INSTALL LATEST Recent Projects Moving on to projects previously created, by clicking the Recent button you will bring up the Recent Projects subtab. The recent projects tab a list of the latest Zilch projects that were worked on. The maximum number of recent projects shown can be changed through the MAX RECENT PROJECTS in the Settings tab. Project Tiles Each recent project will show up as a project tile, showing information relating to that project. There is an option to remove a tile from the project list, by clicking on an X on the bottom right of the tile. Search Bar The search bar can be used to filter the project list, by name and by tag. In a Project Tile Once a project tile is selected, more information and a launch option are displayed. Clicking on the button will open the directory of the project. The version selector works the same as the one in the New subtab. Browse Projects Clicking on the Browse subtab will open the systems default explorer to manually find and locate a project. The expected file type of a project is .zeroproj. The Builds Tab The Builds tab features a list of Zilch Engine build versions that are currently installed or available for download. A new build can be installed by clicking on it's version in the left pane, and finding the button. Alternatively, an installed version will have a button for uninstalling. (WARNING)Why Choose a Different Build? While it may seem unnecessary initially, having access to earlier builds of the engine can be beneficial. Changing the version between project launches can make a project unplayable, unlaunchable, or otherwise broken. One solution is to fix the project as the latest engine version changes, but time may not permit this. The quicker more reliable solution is to retain the version of the last working build. WARNING: Any number of builds can be installed and stored at once, but each build installed takes up around 300 MB of disk space. The Settings Tab The settings tab has a number of different properties about how the Launcher itself behaves. PROJECT SETTINGS: Choose whether to launch the launcher or the engine when a zero project is opened. DEFAULT PROJECT LOCATION: Where projects are saved. DEFAULT DOWNLOAD LOCATION: Where builds are saved. MAX RECENT PROJECTS: The most project tiles that can show up on the Recent Projects subtab. AUTO CHECK FOR MAJOR UPDATES: Check for updates SHOW DEVELOPMENT BUILDS: This shows more recent and potentially unstable builds. SHOW EXPERIMENTAL BRANCHES: This shows builds from other branches of the Zilch Engine repository. Revert to default: Restores the launcher to its default settings. Related Materials Manual launchernewproject"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/project_configuration.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/project_configuration.html",
    "title": "Selecting the Project Cog | ZilchEngine",
    "keywords": "Each Zilch project has a handful of settings that can be configured within the editor, such as frame rate and fullscreen editing settings. Selecting the Project Cog To modify a project's settings, first open the project. Then, select the Project object cog: In the Level Window Press Shift + P Or Click Select > Select Project Project Components Components found on the Project object cog are unique to it, and cannot be attached to other objects. Not all of the Project object components are accessible from within the Zilch Editor. Properties Window of the Project object cog ProjectSettings The ProjectSettings component allows the user to specify an owner for the project. WindowLaunchSettings The WindowLaunchSettings component allows the user to specify settings pertinent to the window and resolution of the exported executable of the project. FrameRateSettings The FrameRateSettings component allows the user to configure settings related to the project's frame rate. LauncherProjectInfo The LauncherProjectInfo component is a proxy of a component used by the Zilch Launcher, and is not accessible from within the Zilch Editor. Related Materials Manual Editor Configuration The Zilch Launcher Code Reference ProjectSettings WindowLaunchSettings FrameRateSettings"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/tags.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/tags.html",
    "title": "Conceptually | ZilchEngine",
    "keywords": "This explains what and how tags are used in the Zilch Engine. Conceptually Tags are an alternate form of organization to the hierarchical folders. Properties of Tags: Tags represent ideas or categories that are associated with an object. Multiple tags can be associated with a single object. Objects are found by filtering all available objects by their tags, thus each object would at least need one tag to be found. Each additional tag used while searching would further restrict the results; however, the order in which the filtering is applied would not change the final result. Thus, would show the same objects as and and all other permutations of tags. Tags in Zilch Tags in the Zilch Engine are used in the Library Window to organize the Resources. Adding and Removing Tags Right-clicking on an object in the Library Window will give you the option to Edit Tags: Here you can add tags and remove them using the x button. Automatically Generated Tags There are a few automatically generated tags, such as Archetype , Level , Texture , etc. These arise from the need to have a tag for every object so that they can show up when you search. They are added when you add the resource and cannot be removed. This prevents a user from losing the ability to access a resource they created."
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/texteditor.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/texteditor.html",
    "title": "Usability Features | ZilchEngine",
    "keywords": "The Zilch Engine's text editor can be used to modify NadaScripts, NadaFragments , and TextBlock resources. Usability Features Text Editor Hotkeys [Tab Completion](texteditor/tab completion.md) Customization Text Editor Config"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/texteditor/tab_completion.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/texteditor/tab_completion.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "Many code editors offer some form of code completion that suggests token or line options based on the characters that have already been typed on the current line. Zilch offers both code completion and basic word completion. Common Uses Reduces amount of typing Encourages proper code formatting Reduces chance for simple typing, spelling, and character case errors Reduces the immediate API knowledge needed Provides an avenue for code base exploration Using Code Completion While writing code in Zilch, one will often see the code/word completion window pop up. This window will suggest possible ways to complete the token that is currently being typed. Navigation and Activation The code completion window will appear when a . is typed following a valid identifier, if that identifier has any members or functions that can be shown in a code completion window. The code completion list is populated by members and functions of the identifier before the .. Tab or Enter can be used to complete the current token as the highlighted suggestion. If the first suggestion is not the desired member, the suggestion list box can be navigated with the up and down keys and the mouse cursor. (NOTE)Event Connection Suggestion: Upon initial inspection of the partial line Zilch.Connect, one may not expect typing the partial token Connect to cause the tab completion menu to display the suggestions Connect, Disconnect, and DisconnectAll. However, upon looking again, it can be seen that all of the suggestions contain Connect, even if they do not start with Connect. Word Completion While the code completion window is open, one may notice it will occasionally have a red border: This indicates that the menu has switched to word completion mode. If it is enabled (it can be disabled in the TextEditorConfig), the word completion window pops up any time an alphabetical character is typed and there isn't already a code or word completion window open. The word completion list is populated by every whole word it can find in the current file. In addition, it also lists all keywords (such as if and foreach), special words (like this and value), and all bound type names (like Transform and Event). Script Errors Occasionally when using the code editor, the user may find that class types that they defined are not available in code completion options. This usually happens when trying to declare a variable of a type that was just defined and indicates that there is another error somewhere in the project. Since Nada is a statically compiled language, each file must individually compile in order for the whole project to do so. This allows all contexts within the user's code to be aware of all definitions within the project. However, it means that since code completion depends on a clean project compilation, a single error will prevent code completion options from being correctly generated. In this case, the word completion menu will appear. Related Materials Manual Pages Text Editor Hotkeys Text Editor Config Code Reference TextEditorConfig Tasks T442"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/texteditor/texteditorconfig.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/texteditor/texteditorconfig.html",
    "title": "Accessing the Text Editor Config | ZilchEngine",
    "keywords": "The Zilch Engine provides you with various ways to customize your code editing experience. These customizations range from preset color schemes to changing the functionality of code editing features. Accessing the Text Editor Config The TextEditorConfig component which manages the editable properties of the Zilch Engine text editor is located on the EditorConfig object. This is a special object that is created and managed by the core engine. The EditorConfig can be accessed in the following way: With the Level Window focused Use the hotkey Shift + E Related Materials Manual Pages Text Editor Hotkeys Tab Completion Code Reference texteditorconfig"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/texteditor/texteditorhotkeys.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/texteditor/texteditorhotkeys.html",
    "title": "The Cursor | ZilchEngine",
    "keywords": "While Zilch implements many features found in other common code editors, it also has many additional features users may find useful in their workflow. The Cursor The Cursor serves to indicate the location in a text file or script where new text will be entered. By default the cursor is set to insertion mode like most text editors. In insertion mode the cursor highlights the space between two characters. Pressing a character key will insert the character at the location of the cursor. Moving The Cursor By Character The cursor can be moved left, right, up, and down between characters using the arrow keys. You can also move the cursor by clicking on any space between two characters to move the cursor to that location. Left, Right, Up, and Down Left-Click Moving The Cursor By Token & Whitespace Often in a text file a single character will not have much meaning in the context of the whole file. So at times it make sense to navigate code at the conceptual level one is thinking about it. By using Control and an arrow key we can moving the cursor by token jumping over characters which belong to the previous or next token or whitespace sequence. Control + Left Control + Right Moving the File Continuing the trend of minimizing unnecessary mouse use while typing in the text editor the hotkeys Control + Up & Control + Down can be used to scroll the file view up and down. Control + Up Control + Down Multi-Cursors The Zilch text editor has the capability of placing multiple cursors in the file from which one is currently editing. Holding Control while clicking in the text file will result in the placement of additional cursors instead of moving the original cursor. Each of these cursors can be expanded uniformly into a selection using the various methods of selection outlined below. Keep in mind that each keystroke will be applied to each cursor and/or selection. This is particularly useful when there are multiple identical constructs that need to be identically modified. Column Cursors Another form of cursor is the vertically extended column cursor. A column cursor can be created from a standard cursor by holding Alt + Shift and pressing Up + Down. Alt + Shift + Up Alt + Shift + Down Selection Cursors can be extended into selections, allowing the user to modify entire sections of text. Row & Token Selection To use row selection using the only the keyboard, Shift should be held while performing standard cursor commands. By holding Shift + Left characters are selected along the row. If Shift + Right is held the selection cursor box will continue expanding to the right until it wraps around with the text to the next row. To select entire rows with each keystroke use Shift + Up, or Shift + Down can also be used. This is the same behavior one would get if one were to Click + Drag in the text file. Shift can also be held while clicking to extend the current cursor or selection. Row Selection by Token and WhiteSpace Row selection can be done by token just as you can move the cursor with Control + Left and Control + right. Control + Shift + Left Control + Shift + Right Token & Line Selection One can also select any given token by double clicking it, an entire line can be selected by triple clicking it. Once a token is selected to can add the next instance of that token to appear in the file to the selection by pressing Control + D. Column Selection NOTE: Column selection is also sometimes called rectangle selection. Column selections can be created in various ways with and without a preexisting column cursor. Creating a Column Selection From a Standard Cursor By holding Alt + Shift and then pressing Left-Click you can create a column selection that covers all character between the cursor and the point clicked. Expanding a Column Cursor Into a Selection Alt + Shift and Left Right Up Down can be used to expand an existing column cursor into a column selection. Selecting the Entire File To select all text in the focused file use the Control + A hotkey. Row Operations Some hotkeys perform a basic operation on the row that the cursor is currently on. Commenting To quickly comment in and out all lines on which cursors/selections exist use the Control + K hotkey. Duplication Use the Control + Shift + D hotkey to duplicate each line with a cursor on it. Cutting Use the Control + L hotkey to quickly cut the current line from the file. Swapping Use the Control + T hotkey to quickly swap each line with a cursor on it with the line above it with out moving the cursor. The hotkeys Control + Shift + Up or Control + Shift + Down to swap each line with a cursor on it with the line above or below it. This command also shifts the cursor to the newline. This allows the line to be continuously shifted up or down by repeating the hotkey sequence. Clipboard Operations The Zilch Editor supports the standard clipboard operations of copy, cut, and paste. To copy selected text to the clipboard use the Control + C hotkey. To copy selected text to the clipboard and remove it from the file use the Control + X hotkey. To paste the text from the clipboard to the location of each cursor in a file use the Control + V hotkey. All three operations are shown in the gif below. Undo & Redo To undo a previous operation use the Control + Z hotkey. To redo a previous operation use the Control + Y hotkey. Search Operations The search tool is useful for finding instances of specific text through out individual files or an entire project. Find Mode To quickly access the search window in find mode use the Control + F hotkey. If there is an active selection in the current text file, it will be pasted in as the search argument upon opening the window. Notice that because the search window is in find mode it will find locations of the given text but not modify them. Replace Mode To quickly access the search window in replace mode use the Control + H hotkey. If there is an active selection in the current text file, it will be pasted in as the search argument upon opening the window. Notice that because the search window is in replace mode it will find locations of the given text and replace them with whatever string is in the replace field of the search window. Go to Definition One of the most common patterns while programming is to reference the definition of a particular type being used. This can be done in Zilch via a shortcut. When the user right clicks in a text file GoToDefintion is listed as an option in the context. If the context menu option is chosen, then the definition of the type currently highlighted by or containing the cursor will be displayed in the file that contains it. This functionality can also be activated by pressing F12 while the text editor cursor is highlighting or sitting within a valid type. Window Operations Some hotkeys used in the text editor will not actually affect the text file or cursor. By using the Ctrl + Tab and Ctrl + Shift + Tab hotkey sequences the tabs in the main docked window can be cycled through to the right and left, respectively. Control + Tab Control + Shift + Tab Hotkey Reference The tables below are meant for both quick reference via the name column as well as more detailed information in the description column. Keyboard Sequences Keyboard Command Brief Left Move cursor left by character Right Move cursor right by character Up Move cursor up one row Down Move cursor down one row Control + Left Move cursor left by symbol Control + Right Move cursor right by one symbol Control + Up Scroll file up Control + Down Scroll file down Control + F Open the search window in find mode Control + H Open the search window in replace mode F12 Go to Definition of the highlighted type. Control + A Select all text in the file Control + T Swap line with the row above without the cursor Control + K Comment/Uncomment current line Control + L Cut current line Control + S Save project Control + Z Undo last action Control + Z Redo last action Control + X Cut current selection Control + C Copy current selection Control + V Paste from the clipboard Control + = Increase font size Control + - Decrease font size Control + Tab Cycle to the next tab in the window Control + Shift + Tab Cycle to the previous tab in the window Control + Shift + D Duplicate the line the cursor is on Control + Shift + Up Swap line with row above with the cursor Control + Shift + Down Swap line with row below with the cursor Control + Shift + Left Row selection/deselection left by symbol Control + Shift + Right Row selection/deselection right by symbol Shift + Left Row selection/deselection to the left by character Shift + Right Row selection/deselection to the right by character Shift + Up Row selection/deselection up by character Shift + Down Row selection/deselection down by character Alt + Shift + Left Column selection/deselection left by character Alt + Shift + Right Column selection/deselection right by character Alt + Shift + Up Column selection/deselection up by row Alt + Shift + Down Column selection/deselection down by row Mouse Actions Mouse Command Brief Left-Click Move cursor Left-Click x2 Select token Left-Click x3 Select entire line Left-Click + Drag Row selection Control + Left-Click Create additional cursor Shift + Left-Click Row selection Alt + Shift + Left-Click Column selection Related Materials Manual Pages Code Completion Text Editor Config Code Reference TextEditorConfig"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/tools.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/tools.html",
    "title": "| ZilchEngine",
    "keywords": "The Zilch Editor provides a number of tools that make creating and editing various objects easy and intuitive for the user. - HeightMap Tool Multi Convex Mesh Editor spritesourceeditor"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/tools/heightmaptool.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/tools/heightmaptool.html",
    "title": "Using the HeightMapTool | ZilchEngine",
    "keywords": "The HeightMapTool is a tool used to create a HeightMap object and manipulate patches created on it. It has five sub-tools the user can use to create and destroy, raise and lower, smooth and sharpen, flatten, and paint patches on a HeightMap object. Using the HeightMapTool There are two ways to access the HeightMapTool: Select HeightMapTool from SelectTool drop-down menu in the Tools Window Or, press 7, the hotkey for bringing up the HeightMapTool When the HeightMapTool is opened and there is no previous HeightMap object, a message will appear on the screen informing the user that there is no HeightMap object, as can be seen here: To make a new HeightMap object, simply click anywhere on the text that has appeared on the Level window. An object named HeightMap should now appear in the Objects Window. Now that there is a HeightMap object, the user may start adding patches to it by using the CreateDestroy sub-tool found in CreateTool drop-down menu within HeightMapTool. Patches are the segments of the HeightMap that can be altered through the HeightMapTool. CreateDestroy The CreateDestroy sub-tool is used to create and destroy patches that make up the height map. The size of the patch is created is dictated by the UnitsPerPatch property of the HeightMap object. See the [[ for more information on this important property. There are four properties in the CreateDestroyTool window that define certain parameters of the patches created: BaseHeight - A real that defines the height at which the map will be created UsePerlinNoise checkBox - A boolean that when sets to true allows the user to create patches with different levels of noise, defined by PerlinFrequency and PerlinAmplitude . PerlinFrequency - A Real that defines the frequency of \"bumps\" to be added to the patch (e.g., a higher number makes for a bumpier patch) PerlinAmplitude - A Real that defines the height of the \"bumps\" created (e.g., a higher number makes for higher bumps) To create a new patch, simply click wherever in the Level Window where the patch should be placed. To destroy a patch, Shift + Click on the patch to be destroyed. Settings are changed on a per-patch basis and do not affect previously placed patches (notice the PerlinFrequency and PerlinAmplitude have been modified: RaiseLower The RaiseLower sub-tool is used to increase and decrease points on the height map patches. There are four properties in the RaiseLowerTool window that define the range and strength of the area to be raised or lowered: Radius - A Real that defines the size of the area (in the shape of a circle) to be raised or lowered according to the value set in the property Strength. FeatherRadius - A Real that defines a circle outside the one created by the Radius property, where the value of the property Strength linearly interpolates down from 100% (where it meets the inner circle) to 0% (at its own outer limit). Strength - A Real that defines the strength by which a part of the height map (see Radius and FeatherRadius) is raised or lowered. {\"nav icon=check-square-o, name=Relative} - This property is not currently functional. To raise an area on a patch of the height map, simply left-click on the area to be raised. One can either make multiple clicks or keep the left-mouse button held while moving the mouse around to continue to raise parts of the patch. To lower an area on a patch, hold Shift while clicking. NOTE: A number of sub-tools in the HeightMapTool have both Radius and FeatherRadius . These two properties work together with Strength to determine the values by which the height map is being changed. While the descriptions of these properties in the property lists of the sub-tools is accurate, a diagram is provided to make clear how the value changes from the circle defined by Radius and the circle defined by FeatherRadius : SmoothSharpen The SmoothSharpen sub-tool is used to either smooth or sharpen bumps on the height map. There are seven properties in the SmoothSharpenTool window that define the range, strength, and sampling used to smooth and sharpen the map: Radius - A real that defines the size of the area (in the shape of a circle) to be smoothed or sharpened according to the value set in the property Strength . FeatherRadius - A real that defines the area outside the area defined by Radius, where the value of the property Strength linearly interpolates down from 100% (where it meets the inner circle) to 0% (at its own outer limit). Strength - A Real that defines the strength by which a part of the height map (see Radius and FeatherRadius) is smoothed or sharpened. (IMPORTANT)Deprecated Properties While the following properties will affect the behavior of the SmoothSharpen tool, it is highly recommended that the user leaves them at their default values as they will be removed in a later build. UniformSamples , RandomSamples , RandomSampleDistance , and AutoDetermineSamples To smooth an area on the height map, simply left-click on the area to be smoothed. One can either make multiple clicks or keep the left-mouse button held while moving the mouse around to continue smoothing parts of the patch. To sharpen an area on a patch, hold Shift while clicking (or holding the left-mouse button). The following screenshot shows two patches; the one on the left has been smoothed, while the one on the right has been sharpened: Flatten The flatten sub-tool is used to to flatten an area of a patch to a certain height. By default, this height will be sampled on the first mouse-click when using the sub-tool. This allows the user to pick an area on the height map with the desired height and then flatten the surroundings to match that height. To flatten based on a specific height instead of a sample, set SampleOnMouseDown checkBox to false. The properties of the Flatten tool are as follows: Radius - A real that defines the size of the area (in the shape of a circle) to be flattened according to a sample or the value set in the property Height . FeatherRadius - A real that defines the area outside the area defined by Radius , where the value of the property Height linearly interpolates down from 100% (where it meets the inner circle) to 0% (at its own outer limit). Height - A real that defines the specific height to which one wishes to flatten a given part of the height map (set this value if not sampling from the mouse-click). SampleOnMouseDown checkBox - A boolean that when checked, samples the height to which the map will be flattened. If unchecked, specify the height in Height . (IMPORTANT)Deprecated Properties SlopeNormal , SampleNormal To flatten an area on the height map, one must first decide whether to sample a height from a surrounding point on the height map or to set the value directly in Height . Once a method has been chosen, simply left-click (or hold the left-mouse button) on the area to be flattened. A flattened \"valley\" amidst raised peaks on a height map WeightPainter The WeightPainter sub-tool is used to paint textures onto a height map. In order to use the WeightPainter sub-tool, one must first make a Material that has the HeightMapTextureWeights material block on it, as seen here: Both the HeightMapTextureWeights material block and the WeightPainter sub-tool support four separate textures. The user must load each texture into the HeightMapTextureWeights material block. Once this new Material has been applied to the HeightMap object, one may use the WeightPainter sub-tool to select each texture separately and paint the height map with it. TextureChannel enum on the WeightPainter sub-tool gives the user access to each of the four Textures. The following screenshots show a height map--the one created in the Material has been applied to the HeightMap object, one may use the WeightPainter sub-tool to select each texture separately and paint the height map with it. The following screenshot shows a height map, the one created above, painted with varying texture weights. The road is 100% of Texture3 and Texture4, while the rest is all Texture1 with splotches of the other textures painted with a low strength. All four weighted textures used with varying weights. Related Materials Manual HeightMap Collider Code Reference HeightMap Integer Real Boolean Real3 Material"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/tools/multiconvexmesheditor.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/tools/multiconvexmesheditor.html",
    "title": "Using the MultiConvexMesh Editor | ZilchEngine",
    "keywords": "The MultiConvexMesh Editor is a tool that allows the user to create a MultiConvexMesh Resource to use as the Mesh in a MultiConvexMeshCollilder. The Editor provides a number of different methods for creating the Mesh allowing the user a great of customizability. Using the MultiConvexMesh Editor The following section will be split up into two main sections: the In-Editor properties and methods of the MultiConvexMesh Editor and creating a MultiConvexMesh using the Editor. In-Editor Properties and Methods Properties and Methods to the Left of the Editor View MeshThickness - Determines the length the Mesh is extended in the z-axis. SpriteSource drop-down menu - Sets the base SpriteSource that the Mesh is being created for. It is used for reference and Auto-Computing. ClearColor - The color of the Editor window's background. OuterContourColor - The color of the outer edges (the contour line) of the current shape of the MultiConvexMesh being created. DrawMode enum - Sets the DrawMode for the MultiConvexMesh currently being created. Options include: None - Removes all internal coloring Edges - Only shows the internal edges of the polygons of the MultiConvexMesh Filled - Shows the combined area of the polygons of the MultiConvexMesh AutoComputeMode enum - Sets the mode for auto-computing the MultiConvexMesh. Options include: Alpha - Uses alpha values of the SpriteSource to compute where the vertices for the MultiConvexMesh should be. Intensity - Uses the color intensity values (derived from a comparison of RGB values) of the SpriteSource to compute where the vertices for the MultiConvexMesh should be. SurfaceLevelThreshold - Sets the value that defines how much the Alpha/Intensity affects the Auto-Compute process. Value ranges from 0.0 - 1.0. AutoComputeMethod enum - Sets the method for auto-computing the MultiConvexMesh. Options include: Pixels - Uses pixel position to the perform the auto-computing process. MarchingSquares - Uses the Marching Squares algorithm to perform the auto-computing process. SimplificationThreshold - Determines how close any vertex can be from another AutoCompute() - Computes the calculations to generate a MultiConvexMesh based on the parameters defined above. Properties and Methods Above the Editor View X - Sets the X position of the currently selected vertex. Y - Sets the Y position of the currently selected vertex. This property toggles the grid and determines the size of each grid square SetGridSizeToPixels() This method sets the grid size to be the same as the pixels of the current SpriteSource Snapping This property defines whether or not a selected vertex will snap to the closest grid vertex. Options include: None - The selected vertex will not snap to a grid vertex IfClose - The selected vertex will only snap to a grid vertex if it is close enough to that the grid vertex Always - The selected vertex will always snap to the closest grid vertex Using the MultiConvexMesh Editor Adding a MultiConvexMesh Resource To add a new MultiConvexMesh Resource, use the Add Resource window. When the Resource is created, the MultiConvexMesh Editor window will automatically open, like so: Editing the MultiConvexMesh Resource The first thing one needs when making a new MultiConvexMesh is select a SpriteSource to use as the base onto which the Mesh is created. Once a SpriteSource is selected the grid size will often need to be adjusted and AutoCompute can be run. As can be seen, the entire sprite is covered, but there is extra space covered by the mesh. Because this sprite has no transparent parts all pixels are above the alpha threshhold of 0.5. If the AutoComputeMode enum option is set to Intensity instead the SurfaceLevelThreshold option now has an affect on the AutoCompute process. Notice the warning popping up in the bottom right which says Invalid Mesh. This is means that no convex mesh could be constructed at the current SurfaceThreshold . As the value of SurfaceThreshold is lowered, and Intensity is selected as the AutoComputeMode enum, other parts of the SpriteSource that have a lower average color value will be included, as seen above. However, notice the new mesh generated fits better then before. If we need it to fit even closer name=Simplification Threshold, icon=pencil-square-o can be lowered to generate a higher definition mesh. Related Materials Manual MultiConvexMeshCollilder Add Resource Reference MultiConvexMesh Mesh"
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/using_the_market.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/using_the_market.html",
    "title": "| ZilchEngine",
    "keywords": "The Market is a convenient hub for downloading and uploading content for use within the Zilch Editor. It contains content made by the #zilch_engine_developers and users alike. How to open the market in editor The Market can be opened from within the Zilch Editor by clicking on located in the upper right hand corner. You can also visit the Market from any web browser by going to market.zeroengine.io. How to track down downloads in editor Active or completed downloads may be viewed within the Zilch Editor by clicking on located next to the Market icon. A drop down list of complete and in progress items will be displayed. Selecting completed items will open the file at its current location. How to navigate the website Button Purpose If the user already has an account they may log in. If the user does not have an account they may create an account. Having an account will let the user rate content located on the Market or even upload their own content to share with other users. Lets users with accounts upload their own content to the Market. Takes the user to the products page with no filters selected or active search terms. Takes the user to a page for contacting the Zilch team with various issues. Takes the user to a page containing a brief overview of the Zilch Engine project. The Zilch logo will redirect back to the landing page from anyplace on the website. Using the search bar will direct the user to products page with their search submitted. How to filter packages On the products page for the Market packages can be filtered by the author of the package or by tags. These filters are located on the left hand side of the page. At the top of the page there is a search bar that can be used to search packages by tags, author, or package name. How to sort packages Immediately above the package display is the the method by which displayed packages are sorted. You can sort them by user rating, upload date, title, price, or author. Each of these has an ascending or descending option that can be toggled by simply clicking arrow displayed next to the currently selected sort option. How to download packages in editor When you click on a zeropack file to download while in the Zilch Editor upon completion of the download an import window will be presented. Clicking on the checkbox's toggles whether any one item will be included in the project or not. If an item is already in the project importing another copy will replace the current item. The default tag for imported items is the name of the zeropack downloaded. On import this tag can be changed or removed all together in addition to having the option of adding more tags. Any other file type downloaded through the editor will be saved into the users temporary files and can be opened through the drop down menu. How to download packages through a web browser Any files downloaded through a web browser will prompt the user for a location to save the file to. Downloaded zeropack files can be dragged and dropped directly onto any open projects within the Zilch Editor to prompt the user with the import window."
  },
  "docs/zilch_editor_documentation/zilchmanual/editor/usingcustomeaseinactions.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/editor/usingcustomeaseinactions.html",
    "title": "A Closer Look at Easing Functions | ZilchEngine",
    "keywords": "While Zilch provides a number of pre-defined Eases (e.g., QuadIn, QuadOut, SinIn, SinOut), these may not cover all situations that may arise. In those cases, a custom ease may be created by adding a samplecurve. A Closer Look at Easing Functions Eases are used primarily in what is called \"tweening\", short for in-betweening (and Actions are Zilch Engine's form of tweening). Tweening is a procedure for interpolation between two values that can provide animation through the use of mathematical functions without the user having to adjust any frames. Eases are functions that control the rate of acceleration of the change in value. Usually, eases are used to make animations look more natural or \"life-like\", though the most basic of eases--Linear--is decidedly sterile-looking or robotic, as can be seen in this example of a simple moving platform: The platform moves side to side at a steady, constant rate of motion. In other words, its rate of movement is linear. For the sake of comparison, let's look at another, nicer-looking, more \"life-like\" ease; specifically, the QuadInOut ease (which uses the quadratic function to derive acceleration): In this case, the acceleration changes throughout the movement from left to right (and vice versa). It start slow, builds up speed, then slows back down once it nears the end. This type of movement is common in everyday life. For example, elevators use a non-linear movement. Imagine if a high-speed elevator in a high-rise building did not change its acceleration, and the elevator comes to a complete stop while at the relatively high speed it moves at as it passes floors: every one in it would go flying to the ceiling. Instead, as the elevator approaches its destination, it slows down so that it comes to a smooth, non-person-launching stop. Standard Easing Classes There are five \"standard\" (and consequently, the most popular) easing types: Linear, Quadratic, Cubic, Quartic, and Quintic. These names refer to the power by which a part of the ease equation is raised. Linear has an exponent of 1, Quadratic is rasied to the 2nd power, and so on. Whether the ease is In, Out, or InOut depends on whether the animation desired starts slow and then speeds up at the end (EaseIn), starts fast and then slows down at the end (EaseOut), or starts out slow, speeds up, but then slows back down at the end (EaseInOut). When the exponent is increased, the essential part of the ease equation (the representing current percentage of completion of the tween) is multiplied by itself. For example, if there was an EaseOut that is moving to 70% of the desired value change, 0.7 would be multiplied with the exponent of the ease. For Quadratic, the exponent is two, so the result would be: 0.7 * 0.7 = .49, instead of 0.7. This means the value would move to 70% of the desired value in 49% of the time it would take linearly, moving quicker at the start and slower at the end. To make this relationship explicit, here's the function usually used for determining ease (though this one will just be a linear tween without any proper easing applied). function LinearTween(beginningVal, changeToVal, currentTime, totalTime) { return changeToVal * currentTime / totalTime + beginningVal; } Here's what each argument of the function stands for: beginningVal is the beginning value of the property that is being animated changeToVal is the change between the beginning value and the end value of the property that is being animated currentTime is the start time of the tween and can be described using any unit (e.g. frames, seconds, etc...) as long as the unit stays the same for totalTime as well. totalTime is the total amount of time the tween will take One thing to note is that the currentTime / totalTime portion of the equation represents the percentage of completion for the tween (if 5 seconds of a 10 second duration has elapsed, it is 50% of the way through). To see this in action, let's look at a simple example. At the start of a level, a platform at position Real3(0,5,0) should move up the y-axis to Real3(0,15,0) over the course of 2 seconds. beginningVal would be 5 (this is the y-value from Real3(0,5,0)) changeToVal would be 10 (this is the differnce in the y-value from Real3(0,5,0) to Real3(0,15,0)) currentTime would be 0 (seconds) as the tween should start when the level starts totalTime is 2 as the tween should occur over 2 seconds Using the equation provided above: 10 * 0 / 2 + 5 = 5, leaving the platform where it started. The next case to consider is checking the value during the tween itself, say 50% of the way through. This would only change the currentTime value to 1 (2 * 0.5 = 1). Our equation now gives us: 10 * 1 / 2 + 5 = 10 10 is the exact midpoint on the y-axis between the start and end values of 5 and 15, which is exactly the value one would expect given that the equation was changed to provide the value at 50% of the way through the tween. With any change in the percentage of the completion of tween (the currentTime/totalTime portion of the equation), the result will be the value at that particular percentage of time elapsed. The portion of this equation that will be affected by the exponent associated with the standard eases is currentTime/totalTime. One could even substitute 0 for beginningVal and 1 for changeToVal so that the result is a factor, which could then be multiplied by the difference between the values, while also adding back in the original value, to end up with the same thing as the original equation, like so: function EasingFunction(beginningVal, changeToVal, currentTime, totalTime) { return changeToVal * currentTime / totalTime + beginningVal; } function EaseIn(beginningVal, changeToVal, currentTime, totalTime) { var easeFactor = this.EasingFunction(0, 1, currentTime, totalTime); this.Owner.PropertyToChange = (endValue - originalVal) * easeFactor + originalVal; } Quadratic Ease Functions The Quadratic ease function includes a new argument--the exponent by which to multiply the completion percentage: function QuadEaseIn(0, 1, currentTime, totalTime, easePower) { easePower = 2; return changeToVal * Math.Pow(currentTime / totalTime) + beginningVal; } This function can be reduced by removing the value parameters from the function altogether. Doing so will work nearly identically as the equation above in all the standard eases: function QuadEaseIn(currentTime, totalTime, easePower) { easePower = 2; return Math.Pow(currentTime/totalTime, easePower); } For an EaseOut function, which starts fast and then slows down, the same equation is used but is subtracted from 1 so that it comes at the end of the tween: function QuadEaseOut(currentTime, totalTime, easePower) { easePower = 2; return 1 - Math.Pow(1 - (currentTime/totalTime), easePower); } For the EaseInOut function, the previously omitted parameters will need to be incorporated back in: function QuadEaseInOut(beginningVal, changeToVal, currentTime, totalTime, easePower) { easePower = 2; if((currentTime /= totalTime / 2) < 1) { return changeToVal / 2 * Math.Pow(currentTime/totalTime, easePower) + beginningVal; } else { return -changeToVal / 2 * (currentTime * (currentTime - 2) - 1) + beginningVal } } All of these eases can be visualized on a graph. In Zilch, graphs like this may be plotted on a SampleCurve, allowing their use as the ease parameter in Actions. Applying a Custom Ease After creating a SampleCurve, it can be directly applied to an Action. The following NadaScript illustrates how to apply a SampleCurve to an Action that translates an object back and forth. class EasedMovement : NadaComponent { [Dependency] var Transform : Transform; [Property] var TargetPos : Real3; [Property] var Time : Real; [Property] var EaseToUse : SampleCurve; var Property : Real3; var StartPos : Real3; function Initialize(init : CogInitializer) { // Call the function to move the object this.Move(); } function Move() { // Save starting position to move back to this.StartPos = this.Transform.Translation; var seq = Action.Sequence(this.Owner.Actions); // Move the object Action.Property(seq, @this.Transform.Translation, this.TargetPos, this.Time, this.EaseToUse); // Call the function that will move it back Action.Call(seq, this.MoveBack); } function MoveBack() { var seq = Action.Sequence(this.Owner.Actions); // Move the object back Action.Property(seq, @this.Transform.Translation, this.StartPos, this.Time, this.EaseToUse); // Call the function to move the object Action.Call(seq, this.Move); } } Related Materials Manual ResourceAdding samplecurve Code Reference action"
  },
  "docs/zilch_editor_documentation/zilchmanual/gameplay.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/gameplay.html",
    "title": "Randomness | ZilchEngine",
    "keywords": "While gameplay is not inherently part of the engine, there are parts of the engine that are usually only used for gameplay scripting. Here we'll cover the tools and features you need to make some gameplay of your own. Randomness Need to add randomness to your game? Input Learn how to detect various forms of input here. VectorMath Understanding vector math is key to writing good game logic. Quitting the Game At some point your player will want to quit your game, learn how to let them do so here. Interpolation Learn about two important math functions used frequently in gameplay scripting: Lerp (or linear interpolation) and Slerp (or spherical linear interpolation)"
  },
  "docs/zilch_editor_documentation/zilchmanual/gameplay/handlingquitmessage.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/gameplay/handlingquitmessage.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "Quit Messages are sent by the engine to quit out of a game by closing Game window. This happens by default when the esc (escape) key is pressed in game. Using the GameRequestQuit event, however, gives the user control over the esc key press (which is otherwise inaccessible by Keyboard events). When connecting to the GameRequestQuit event, the user may assign any activity to the esc key that they wish. Common Uses Using the esc key to pause the game Using the esc key to pause the game and bring up a confirmation-of-destructive-action window Using the esc key to to exit out of the current level How to Use the GameRequestQuit Event This section will cover connecting to the event and setting up the response function. Connecting to the GameRequestQuit Event When connecting to the GameRequestQuit, it must be listening for the Events.GameRequestQuit dispatch (which is done by pressing the esc key) onto this.GameSession, as follows: //Listening for Events.GameRequestQuit dispatch onto this.GameSession Zilch.Connect(this.GameSession, Events.GameRequestQuit, this.OnGameRequestQuit); The GameRequestQuit Response Function The GameRequestQuit event is of type GameEvent that includes a few properties that can be used inside the response function. The most notable of these, for the purposes of removing the game-exiting functionality, is event.Handled. Handled is a boolean that if set to true, tells the engine that the behavior for the esc key will now be handled by the code inside the response function. If event.Handled is left false, the event would persist to be handled by the engine (once again performing the default behavior of closing the Game Window after your response function completed). The following will code-block will show how the response function can create alternate behavior for the esc key while still allowing for game-quitting functionality: class GameQuitTest : NadaComponent { // Boolean variable that when set to true, Esc key will keep game-quitting functionality [Property] var ApplyQuit : Boolean = false; function Initialize(init : CogInitializer) { // Listening for Events.GameRequestQuit dispatch onto this.GameSession Zilch.Connect(this.GameSession, Events.GameRequestQuit, this.OnGameRequestQuit); } function OnGameRequestQuit(event : GameEvent) { // Let the engine know that this function will handle behavior for the Esc key event.Handled = true; // If this.ApplyQuit is set to true... if(this.ApplyQuit) { // Call function to quit game from the GameSession object event.Game.Quit(); } // If this.ApplyQuit is set to false... else { // Supply alternate behavior (pausing/unpausing the game) for Esc key var spaces = this.GameSession.AllSpaces; foreach (var space in spaces) { space.TimeSpace.TogglePause(); } } } } Related Materials Manual Pages Events and Connections Code Reference GameEvent GameRequestQuit"
  },
  "docs/zilch_editor_documentation/zilchmanual/gameplay/input.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/gameplay/input.html",
    "title": "| ZilchEngine",
    "keywords": "Input With out a system to detect and interpret input data any game will be very boring and non interactive. Zilch supports mouse, keyboard, and gamepads. With these peripherals we can make most games. Mouse Input Using Custom Cursors Keyboard Input Gamepad Input"
  },
  "docs/zilch_editor_documentation/zilchmanual/gameplay/input/customcursor.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/gameplay/input/customcursor.html",
    "title": "Using a Custom Cursor | ZilchEngine",
    "keywords": "Custom Cursors are a great way to add a level of professionalism and polish to any project. A Cursor created specifically for a project can be used for player feedback and fits into the project universe better than the normal Mouse icon in most situations. There are several methods that can be used to add this functionality, all of which come with their own strengths and weaknesses. NOTE: Recommended Reading This section covers topics that may not have been encountered yet. To learn or review those topics, please see: Mouse Input and {icon university}[[zilch_engine_documentation/zilch_editor_documentation/ZilchManual/Graphics/CamerasViewportsRenderers/|Cameras, Viewports and Renderers]] Using a Custom Cursor Hiding the Mouse Pros Cons Quick to implement Mouse Icon can leave window bounds Retains all mouse functionality Will become visible if it does The first option involves making the Mouse Cursor invisible while not affecting any of its functionality. This has two easy-to-see benefits: it's quick to implement and all functionality is retained. class HiddenMouseExample : NadaComponent { [Dependency] var Transform : Transform; function Initialize(init : CogInitializer) { // Set the Mouse to invisible Zilch.Mouse.Cursor = Cursor.Invisible; // Connect to MouseMove Event Zilch.Connect(this.Space, Events.MouseMove, this.OnMouseMove); } // Code continued below This would be the start of a component attached to the object that will act as the Custom Cursor. After making sure the object has a transform Component using the Dependency - Component using the Dependency attributes, it then sets the Mouse Cursor to be invisible. The final part of the code-block connects to the MouseMove event, which is fleshed out in the following code-block: // continued from above function OnMouseMove(event : ViewportMouseEvent) { // Get mouse WorldPosition on the Z-Plane at depth 0 var mousePosition = event.ToWorldZPlane(0); // Set the MouseCursor Objects position to the Mouse position this.Transform.Translation = mousePosition; } } The OnMouseMove function will fire every time the Mouse is moved, keeping the custom cursor in the same location as the invisible Mouse. It could also connect to other Mouse Events, such as MouseDown or MouseUp, in order to interact with these events visually (e.g., by changing the SpriteSource of the object). All other working functionality can then be given to the Mouse itself, so that it can react with objects that have the Reactive Component attached the them. A large drawback to using this method is the fact that it allows the Mouse icon to leave the boundaries of the Game window, which will make the Mouse visible and not hide it again even if the Game is brought back into focus. Below is an example of how a Sprite with this script attached would act: It would also be possible to set the Mouse invisible from the LogicUpdate event, keeping the cursor invisible in within the editor even when leaving the game window. Locking the Mouse Pros Cons Mouse stays within widow bounds Loses most mouse functionality Allows use of multiple Spaces More complex the hiding the mouse A second option, rather than hiding the Mouse, is to lock it to the center of the screen. It helps to solve the issue of the the Mouse staying within the the Game boundaries but also comes with its own set of problems. class LockedMouseExample : NadaComponent { // An Archetype of the Custom Cursor Object [Property] var CursorArchetype : Archetype; // An Archetype of the Space to be built [Property] var CursorSpaceArchetype : Archetype; // An Archetype of the GameCamera to use in the Cursor Level [Property] var CameraArchetype : Archetype; // Reference to the CameraViewport of the created Cursor Space var CurViewport : CameraViewport = null; // An empty Level used to create the Custom Cursor in [Property] var CursorLevel : Level; // Reference to the Custom Cursor Object once it's created var CursorObj : Cog = null; // The Space the Custom Cursor will inhabit var CursorSpace : Space = null; // Reference to the Translation of the Custom Cursor var CursorTranslation : Real3 { get { return this.CursorObj.Transform.Translation; } } // Calls a function to give the Cursor Position in Screen Space var CursorScreenSpacePosition : Real2 { get { return this.CurViewport.WorldToScreen(this.CursorTranslation); } } // Calls a function to give the Cursor Position in the Viewport var CursorViewportPosition : Real2 { get { return this.CurViewport.ScreenToViewport(this.CursorScreenSpacePosition); } } // Code continued below Just from the initial setup it becomes obvious that this method is much more complex than simply making the Mouse invisible and having an Object follow it, but it also offers benefits. NOTE: Get-Sets In order to reduce the amount of repetitive typing, a number of getters have been used to hold references to other functions. For further explanation of get-sets, see Get-Sets. When this component is attached to the current level's LevelSettings object, it will create an Object in a new Space that is built on top of the GameSpace. This object allows it to function properly in a 3D game. As the getters have defined most of the variables, much of the script is ready to be used. ... function Initialize(init : CogInitializer) { // Traps the Mouse, locking it and making it invisible Zilch.Mouse.Trapped = true; // Creates a new Space for the Cursor to inhabit this.CursorSpace = this.GameSession.CreateNamedSpace(\"CursorSpace\", this.CursorSpaceArchetype); // Loads the CursorLevel inside the newly made space this.CursorSpace.LoadLevel(this.CursorLevel); // Create the GameCamera var cam = this.CursorSpace.Create(this.CameraArchetype); // Set the viewport based on the GameCamera this.CurViewport = cam.CameraViewport; // Creates the Custom Cursor at (0,0,0) in the new Level this.CursorObj = this.CursorSpace.CreateAtPosition(this.CursorArchetype, Real3()); // Connects to the MouseMove Event In the Cursor Space, NOT the Game Space Zilch.Connect(this.CursorSpace, Events.MouseMove, this.OnMouseMove); } ... The Initialize function creates the required Space, Level and Object for the Custom Cursor. It's important to make sure that the objects are being made in the CursorSpace, not the main GameSpace. ... function OnMouseMove(event : ViewportMouseEvent) { // Get a new position by adding the distance of the MoveEvent to the Cursors current position var newPos = this.CursorViewportPosition + event.Movement; // Create a new position within the Viewport for the Cursor while also Clamping the range var newCurViewportPos = Math.Clamp(newPos, Real2(), this.CurViewport.ViewportResolution); // Adjust the Viewport position to the proper Screen position var newCurScreenPos = this.CurViewport.ViewportToScreen(newCurViewportPos); // Set the Cursor Objects position to the newly determined position in World Space this.CursorObj.Transform.Translation = this.CurViewport.ScreenToWorldZPlane(newCurScreenPos, 0.0); } } Similar to hiding the mouse, the code-block above uses MouseMove Events to control the movement of the Custom Cursor object. This time, however, a few more steps are needed: The intended new cursor position is found by adding the current viewport position of the Cursor and the Mouse Movement vector given in the MouseMove Event. The new cursor viewport position must be clamped within the boundaries of the viewport. The viewport position must be converted to screen position as there is no way to directly convert from viewport space coordinates directly to worldspace. The cursor screenspace position must be converted to worldspace so the custom cursor can be moved. The biggest problem with using this method is the fact that most Mouse functionality is lost, as it becomes locked to the center of the screen. All Cursor functionality will have to be determined using either collision events or Cursor position, which can become taxing on the system as it has to either check the position every frame or resolve various collisions. Below is an example of this script attached to the LevelSettings object of an empty level, with the blue sprite given as the CursorArchetype and the white sprite following the same script as the hidden cursor example, to show how the mouse is attempting to move from the world origin. Related Materials Manual Mouse Input Getters and Setters {icon university}[[zilch_engine_documentation/zilch_editor_documentation/ZilchManual/Graphics/CamerasViewportsRenderers/|Cameras, Viewports and Renderers]] Code Reference Mouse Transform Sprite Reactive Space"
  },
  "docs/zilch_editor_documentation/zilchmanual/gameplay/input/gamepadinput.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/gameplay/input/gamepadinput.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "Gamepads are very useful tools for any game project. They often offer a more comfortable method of controlling a game, especially if two or more players are intended to play at the same time. As well as being an alternate method of control, Gamepads can also make use of vibration as a method of feedback. Common Uses Provides a alternative method of control to Keyboard and Mouse inputs Lets multiple players comfortably play a game on the same screen Gives access to vibration for tactile feedback to players Before Using Gamepads Before starting to use Gamepads in a project, take the time to check that they are properly working. What may be thought to be an error in code may, in fact, be that the Gamepad is not plugged in properly, has outdated drivers, etc. Most wired Gamepads should work without issue; however, some wireless Gamepads may need to have drivers updated. This page was written using wired XBox 360 controllers. If using an XBox One Gamepad, drivers may be found here . Using Gamepads Initial Setup Unlike most things in Zilch, it's not possible to make a simple reference to Zilch.Gamepads and have the Engine understand what is meant, even if only a single Gamepad is connected. Rather, whenever any number of Gamepads are detected, Zilch will store them in a list that must be accessed to select the desired Gamepad. class GamepadLogic : NadaComponent { // Create a variable to later use as reference to the Gamepad var Controller : Gamepad = null; // Set a Speed property to be used to adjust the movement speed [Property] var Speed : Real = 0.0; function Initialize(init : CogInitializer) { // Assign the first Gamepad detected as the Gamepad this object will use this.Controller = Zilch.Gamepads.GetGamePad(0); } } Zilch.Gamepads is a reference to the ZilchObject Gamepads, which keeps track of all detected Gamepads. The GetGamePad function will return a reference to whichever Gamepad corresponds to the ID passed to the function. In the case above, the Gamepad in the first element (at index 0 in the list) is accessed. Zilch.Gamepads is a helpful reference to remember for the future, as it can be used to affect all Gamepads at once. Reading from Thumbsticks Thumbsticks on a Gamepad are typically used for moving the player or aiming. When accessed, they return a normalized 2D vector that is stored in corresponding LeftStick and RightStick Real2 variables on each Gamepad object. function OnLogicUpdate(event : UpdateEvent) { // Create a local variable to be used for movement var movement = local Real3(0.0, 0.0, 0.0); // Check to make sure that the Gamepad exists if (this.Controller.IsActive) { // Assign the current direction of the Left thumbstick to the movement variable movement.X += this.Controller.LeftStick.X; movement.Y += this.Controller.LeftStick.Y; } // Apply this movement to the Velocity of the Game Objects RigidBody, multiplied by the Speed this.Owner.RigidBody.Velocity = movement * event.Dt * this.Speed; } Since the thumbsticks return a Real2 at a range from -1 to 1, this can easily be translated into creating movement on a 2D plane. Keep in mind this example does not use the RightStick, only the LeftStick. Button Input Similar to Mouse Input, assigning logic to the various buttons on the Gamepad can be Frame Based or Event Based. Both have their strengths and weaknesses; determining which approach is better for a specific project should be decided on a case by case basis. Frame Based Button Input The example given above is Frame Based, and the reason for that is simple: Frame Based Input from a Gamepad works best when there will be sustained action, such as when a thumbstick is held down to move a player character. This same logic applies to buttons as well. function OnLogicUpdate(event : UpdateEvent) { if (this.Controller.IsButtonDown(Buttons.A)) { // Insert code here } } (NOTE) Using Buttons in Zilch Engine: Zilch Engine has an enum set up to be used to call a desired button, which can be accessed in a NadaScript with Buttons followed by a period (e.g., Buttons.X). It should be noted however that the list of buttons specifically refers to the button layout of an Xbox 360 Gamepad, and may not be accurate for other Gamepads. This particular line of code will simply trigger whatever is placed inside the if statement whenever the A button on the Gampad is held down. Buttons can be changed to refer to any button on the Gamepad. Buttons.AnyButton can also be used if it doesn't matter which button is pressed, such as at a title screen. Event Based Button Input When looking for a single press or release of a button to trigger a function, Event Based Input is a better choice. In this approach, the component listens for a gamepad event dispatch, rather than checking every frame to see if a change has occurred. function Initialize(init : CogInitializer) { Zilch.Connect(this.Controller, Events.ButtonDown, this.OnButtonDown); Zilch.Connect(this.Controller, Events.ButtonUp, this.OnButtonUp); } function OnButtonDown(event : GamepadEvent) { if (event.Button == Buttons.B) { // Insert code here } } function OnButtonUp(event : GamepadEvent) { if (event.Button == Buttons.B) { // Insert code here } } This block of code first connects to two different events: ButtonDown and ButtonUp. These events will be sent whenever a button on the Gamepad has been either pressed or let go, respectively. If it is the B button, OnButtonDown or OnButtonUp will run. A short example of this functionality: an attack charges as long as a button is held down; the attack is then used when the button is released. NOTE: Using Triggers in Zilch Engine By looking at the options that come up by typing Buttons. into a NadaScript, one may notice that neither of the Xbox 360 Triggers are options. This is because they return a Real instead of a boolean. While this excludes them from sending any Events, it also allows them to be used as pressure sensitive buttons, as can be seen below in the Vibration section. Flicking Flicking is a Gamepad event that is sent whenever a thumbstick moves further than 0.5 is any direction. Because of how the event associated with flicking is dispatched--immediately and automatically once the stick goes past the \"halfway point\"--it should usually be used on whichever thumbstick is not being used for movement. function Initialize(init : CogInitializer) { Zilch.Connect(this.Controller, Events.GamepadStickFlicked, this.OnGamepadStickFlicked); } function OnGamepadStickFlicked(event : GamepadEvent) { // Left thumbstick if(event.FlickedStick == 1) { // Insert code here } // Right thumbstick if(event.FlickedStick == 2) { // Insert code here } } This event is useful for something like a dodging mechanic, as it can be called side by side with an UpdateEvent (e.g., LogicUpdate), allowing for normal movement to continue at the same time. Vibration Provided that the Gamepad being used has a Vibration feature, Zilch simply needs a function call to access it. As it is a physical reaction, however, an example works best to explain. function OnLogicUpdate(event : UpdateEvent) { // Amount of time to spend vibrating var vibrationTime = 1; this.Controller.Vibrate(vibrationTime, // Time to vibrate for this.Controller.LeftTrigger, // Left-Side Vibration this.Controller.RightTrigger); // Right-Side Vibration } This will cause the controller to vibrate whenever either the left or right triggers are depressed on the Gamepad. The second and third parameters for Vibrate() are Reals that define the intensity of the vibration. In the example abovea, as the triggers are pressed in further, the value they return slowly rises from 0 (not pressed) to 1 (fully depressed). As the value rises, the vibration will become stronger as the value moves towards 1, with each trigger controlling the vibration on their respective sides. Most Gamepads that have vibration functionality will create it by utilizing two motors housed in the casing, oftentimes with one side slightly heavier than the other (typically the left side). This allows for numerous different combinations of tactile feedback to be created, such as if the player is hit: function OnCollisionStarted(event : CollisionEvent) { this.Controller.Vibrate(0.25, // Time to vibrate for 1, // Left-Side Vibration 0.5); // Right-Side Vibration } which will cause the controller to vibrate for a quarter of a second, with the left side vibrating at full power and the right side vibrating at half. Using Multiple Gamepads When using multiple Gamepads, Zilch will need to keep a reference of which object is associated with which Gamepad. This is easily done with the addition of a Property. // Which Gamepad is meant to control this object [Property] var PlayerIndex : Integer = 0; var Controller : Gamepad = null; function Initialize(init : CogInitializer) { this.Controller = Zilch.Gamepads.GetGamePad(this.PlayerIndex); } Simply change the PlayerIndex of an object to assign it to Gamepad One, Gamepad Two, etc. Keep in mind, however, that the GamePad index starts at 0, so the index for GamePad One would be 0, GamePad Two would be 1, Three 2, and so on. Properties of Gamepad and Object Events All of the events associated with the Gamepad are GamepadEvents, with the exception of GamepadUpdated, which is an ObjectEvent. As all the others are the same type of event, they all share the same properties that can be accessed when the event is dispatched. ObjectEvents themselves can access the Gamepad that dispatched the event by using ObjectEvent, which GamepadEvents likewise has access to with GamepadEvent.Gamepad. IMPORTANT: As of the time of the creation of this page, ObjectEvent.Source returns a null pointer rather than the Gamepad that dispatched the event. Both of these can be used to trigger the same functions, the main difference being GamepadEvent.Gamepad would need to be triggered by the specific Gamepad, while ObjectEvent.Source could be used for a general script that runs the logic for multiple Gamepads during a GameSession. GamepadEvents can also reference the button used to dispatch the event with GamepadEvent.Button, which returns an int referring to the triggering button. The last two references all GamepadEvents have can only be used by the GamepadStickFlicked event: FlickDirection, which returns a Real2 of the direction the thumbstick moved in; and FlickedStick, which returns a reference to the thumbstick that dispatched the event. These can be used together to create movement mechanics very easily. function OnGamepadStickFlicked(event : GamepadEvent) { var movement = local Real3(0.0, 0.0, 0.0); // Assign the X and Y values of the moved thumbstick to the local movement variable movement.X += event.FlickDirection.X; movement.Y += event.FlickDirection.Y; //This uses the right thumbstick, while the left is 1 if(event.FlickedStick == 2) { // \"Teleport\" to a further away location // note no Dt, so it'll be approx 60x further than normal this.Owner.RigidBody.Velocity = movement * this.Speed; } } Gamepad Events GamepadUpdated : ObjectEvent * An event dispatched to an object whenever the Gamepad updates. Runs every frame. ButtonDown : GamepadEvent * An event dispatched when any button is pressed on the connected Gamepad. ButtonUp : GamepadEvent * An event dispatched when any button is released on the connected Gamepad. GamepadStickFlicked : GamepadEvent * An event dispatched when either thumbstick on the connected Gamepad is pushed forward more than halfway to its max. Related Materials Manual Mouse Input Code Reference Gamepad Gamepads Real2 ObjectEvent GamepadEvent"
  },
  "docs/zilch_editor_documentation/zilchmanual/gameplay/input/keyboardinput.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/gameplay/input/keyboardinput.html",
    "title": "Polling-Based Input vs. Event-Based Input | ZilchEngine",
    "keywords": "The keyboard is a common channel of providing user input to a Zilch project. Keyboard controls are quick and easy to set up, but there are a few details that are important to bear in mind. Polling-Based Input vs. Event-Based Input There are two ways of checking keyboard input in the Zilch Engine: by polling the state of the keyboard (typically in an Update function), known as polling-based input, and by connecting to keyboard events, known as event-based input. Each has its advantages. Polling-Based Input Polling-based input typically occurs in a callback for an Update event such as LogicUpdate: function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } The keyboard may be polled using a handful of functions on Zilch.Keyboard. KeyIsDown The KeyIsDown function returns whether the given keyboard key is down on the current frame. It is often used for movement and other actions that are performed over the course of many consecutive frames: if (Zilch.Keyboard.KeyIsDown(Keys.Up)) { this.MoveForward(); } KeyIsUp The KeyIsUp function returns whether the given keyboard key is not down on the current frame. It is sometimes used in combination with KeyIsDown in movement code: if (Zilch.Keyboard.KeyIsDown(Keys.Right) && Zilch.Keyboard.KeyIsUp(Keys.Left)) { this.TurnCounterClockwise(); } if (Zilch.Keyboard.KeyIsDown(Keys.Left) && Zilch.Keyboard.KeyIsUp(Keys.Right)) { this.TurnClockwise(); } KeyIsPressed The KeyIsPressed function returns whether the given keyboard key is down on the current frame and was up on the previous frame. It is often used for discrete actions, like activating character abilities and interacting with menus: if (Zilch.Keyboard.KeyIsPressed(Keys.Space)) { this.Jump(); } KeyIsReleased The KeyIsReleased function returns whether the given keyboard key is up on the current frame, but was down on the previous frame. It is often used to end actions or processes that were started by the same key in a KeyIsPressed check: if (Zilch.Keyboard.KeyIsReleased(Keys.Space)) { this.EndJump(); } Such queries are usually performed in a function that is called every frame, once per frame, such as an Update function; polling for input in this way is also called frame-based input. However, the keyboard can be polled at any time. For instance, one might check whether a certain key is held in a CollisionStarted callback, to determine whether some special action should occur: function OnCollisionStarted(event : CollisionEvent) { if (Zilch.Keyboard.KeyIsDown(Keys.Z)) this.AttemptDealDamage(event.OtherObject); } NOTE: Beware that the LogicUpdate event is not dispatched on a paused TimeSpace. If input polling is performed in a LogicUpdate callback, it won't happen while the game is paused. This may result in a scenario where LogicUpdate is used to pause the game, and then it becomes impossible to unpause. For this reason, it is usually best to pause the game using event-based input, or by polling the keyboard via another event, such as FrameUpdate, or in the LogicUpdate of another Space. Event-Based Input The keyboard dispatches a set of handy events that can be used for keyboard input: function Initialize(init : CogInitializer) { Zilch.Connect(Zilch.Keyboard, Events.KeyDown, this.OnKeyDown); Zilch.Connect(Zilch.Keyboard, Events.KeyUp, this.OnKeyUp); Zilch.Connect(Zilch.Keyboard, Events.KeyRepeated, this.OnKeyRepeated); } The KeyboardEvent object that gets sent with these events specifies which key triggered the event, along with other relevant information, such as whether any of various modifier keys was held when the event was dispatched, etc. KeyDown When any key on the keyboard is pressed, the KeyDown event is dispatched that frame: function OnKeyDown(event : KeyboardEvent) { if (event.Key == Keys.R && event.CtrlPressed) this.RestartLevel(); } KeyUp When any key on the keyboard is released, the KeyUp event is dispatched that frame: function OnKeyUp(event : KeyboardEvent) { if (event.Key == Keys.Shift) this.EndChargingWeapon(); } KeyRepeated When any key on the keyboard is held long enough for the operating system to send its \"repeated\" event, the KeyRepeated event begins being dispatched. The delays before this begins and between dispatches are determined by the operating system: function OnKeyRepeated(event : KeyboardEvent) { if (event.Key == Keys.Back) this.Backspace(); } Timing Every frame, all keyboard events are dispatched at the beginning of the frame before any update events are dispatched. If it is desired that any code that is called from an Update function be run before the effects of some keypress are considered, then either polling-based input should be used instead of event-based input, or the keypress should be cached, and the cached data should be used later. What to Use First and foremost, in many cases, there will be no noticeable performance difference between using polling-based input and using event-based input. For example, when creating a simple prototype or adding a quick debugging feature, it is often best to use whichever method is easiest for the developer implementing it. However, when performance does become an issue, or when scalability is a concern, knowing which input method to use is important. To decide whether to use polling-based or event-based input, begin by answering these guideline questions: Is this component already connected to an update event? Yes: polling may be better No: consider events Some of the performance impact in frame-based input comes from the act of polling, but some of it comes from the mere fact of being connected to an update event. If a component's update event connection overhead is already considered acceptable, then the added overhead of input polling may not be a problem. How many instances of this component are likely to be alive at once? A lot: events may be better Not many: consider polling Performance can suffer noticeably if a large number of objects are simultaneously connected to update events, especially if they're running complex logic. If there will be more than about a few hundred instances of a component all running at once, it may be wise to consider using event-based input instead of frame-based input. Of course, this number will vary greatly with factors such as the complexity of the logic being run and the capabilities of the user's computer. How much time is likely to elapse between relevant inputs? A long time: events may be better Not long: consider polling Update events are generally dispatched every frame. Keyboard events, on the other hand, are only dispatched when the keyboard is used. For this reason, event-based input has the potential to be more efficient than frame-based input, especially when checking for an input that is expected to occur only rarely or sporadically. How hard will it be to do this logic using events? Very hard: polling may be better Not very hard: consider events Some input tasks don't lend themselves to being done with event-based input. For example, it can be awkward to make keyboard events, which are dispatched only on keyboard state changes, work with character movement code, which generally should apply its changes every frame. Related Materials Manual Events & Connections Components Code Reference Keyboard KeyboardEvent"
  },
  "docs/zilch_editor_documentation/zilchmanual/gameplay/input/mouseinput.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/gameplay/input/mouseinput.html",
    "title": "Using the Mouse | ZilchEngine",
    "keywords": "Along with the keyboard and gamepads, the mouse is a common channel of providing user input to a Zilch project. Mouse controls are easy to set up, but there are a few different input styles to consider. Using the Mouse The mouse can either be used as a cursor controller, for tracking a specific position and pointing at and clicking on objects and buttons, etc., or it can be used as a direct input device, just like a keyboard or a gamepad. Cursor Control Cursor control, also known as point-and-click control, is usually what is used for mouse-driven GUIs. It is mostly focused on the use of the mouse to manipulate the position of a cursor in a 2D plane. Cursor control typically makes heavy use of the Reactive component to receive mouse events sent directly to interactive objects, such as buttons. The mouse controls the position of the cursor, and game actions are performed by clicking on objects themselves. Direct Mouse Control Direct mouse control is commonly used for first-person camera controls, and anything else that is concerned with the frame-to-frame movement deltas of the mouse, and the state changes of its buttons and scroll wheel, rather than with the position of a cursor. When using direct mouse control, mouse event connections should be made on the Space or the camera viewport (rather than on individual interactive objects, as with cursor control). The movement of the mouse directly controls the rotation of the camera, and its buttons are used to control game actions. Event-Based Input vs. Polling-Based Input Whether the mouse is used for cursor control or direct control, in any case, there are two ways of using mouse input in the Zilch Engine: by connecting to mouse events, known as event-based input, by polling the state of the mouse (typically in an Update function), known as polling-based input. Each has its advantages. Events Mouse events are dispatched as the mouse is used, and the position of the mouse cursor determines the targets of these events. When the cursor is positioned over an cog with the Reactive component, that cog receives mouse events. In addition, mouse events are also sent to viewports. When a mouse event occurs in a viewport, it is dispatched to the cog with the Camera component and the cog with the CameraViewport component that represent that viewport. (Events are not dispatched doubly if both components are on the same cog, as is commonly the case.) NOTE: A mouse event target is anything that can receive a mouse event. Mouse event targets are spaces, cogs with the Camera component, cogs with the CameraViewport component, and cogs with the Reactive component. Here is an example of the use of mouse events, showing two different event connections, one to the space and one to the Reactive object itself: class MouseEventDemonstration : NadaComponent { [Dependency] var Transform : Transform; [Dependency] var Reactive : Reactive; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LeftMouseDown, this.OnLeftMouseDown); Zilch.Connect(this.Owner, Events.RightMouseDown, this.OnRightMouseDown); } function OnLeftMouseDown(event : ViewportMouseEvent) { // when the left mouse button is pressed anywhere, // make a cube at the mouse's world position var mousePosition = event.ToWorldZPlane(0); var cube = this.Space.CreateAtPosition(Archetype.Cube, mousePosition); // delay five seconds and then destroy the cube var destroySeq = Action.Sequence(cube.Actions); Action.Delay(destroySeq, 5); Action.Call(destroySeq, cube.Destroy); } function OnRightMouseDown(event : ViewportMouseEvent) { // when the right mouse button is pressed on this object, // make it a little bigger this.Transform.Scale = this.Transform.Scale * 1.1; } } This component's dependency on Reactive requires that the object it is attached to has that component as well. Thus, whenever the left mouse button is pressed with the cursor over an object with this component, the OnLeftMouseDown function will be called. Additionally, whenever the right mouse button is pressed anywhere in the viewport showing this component's space, the OnRightMouseButton function will be called. Right-clicking the square makes it bigger, while left-clicking anywhere spawns a cube. List of Mouse Events There are a number of mouse events that are dispatched to mouse event targets: function Initialize(init : CogInitializer) { Zilch.Connect(this.Owner, Events.MouseUpdate, this.OnMouseUpdate); Zilch.Connect(this.Owner, Events.MouseEnter, this.OnMouseEnter); Zilch.Connect(this.Owner, Events.MouseExit, this.OnMouseExit); Zilch.Connect(this.Owner, Events.MouseEnterPreview, this.OnMouseEnterPreview); Zilch.Connect(this.Owner, Events.MouseMove, this.OnMouseMove); Zilch.Connect(this.Owner, Events.MouseScroll, this.OnMouseScroll); Zilch.Connect(this.Owner, Events.MouseDown, this.OnMouseDown); Zilch.Connect(this.Owner, Events.MouseUp, this.OnMouseUp); Zilch.Connect(this.Owner, Events.LeftMouseDown, this.OnLeftMouseDown); Zilch.Connect(this.Owner, Events.LeftMouseUp, this.OnLeftMouseUp); Zilch.Connect(this.Owner, Events.RightMouseDown, this.OnRightMouseDown); Zilch.Connect(this.Owner, Events.RightMouseUp, this.OnRightMouseUp); Zilch.Connect(this.Owner, Events.MiddleMouseDown, this.OnMiddleMouseDown); Zilch.Connect(this.Owner, Events.MiddleMouseUp, this.OnMiddleMouseUp); Zilch.Connect(this.Owner, Events.LeftClick, this.OnLeftClick); Zilch.Connect(this.Owner, Events.RightClick, this.OnRightClick); Zilch.Connect(this.Owner, Events.MiddleClick, this.OnMiddleClick); Zilch.Connect(this.Owner, Events.DoubleClick, this.OnDoubleClick); } Each of these events is a ViewportMouseEvent. This event contains various relevant mouse data, such as the position of the cursor and the states of its buttons. MouseUpdate Every frame that the mouse is over a mouse event target, the MouseUpdate event is dispatched to that target: function OnMouseUpdate(event : ViewportMouseEvent) { // move this object to the mouse position this.Transform.Translation = event.ToWorldZPlane(0); } MouseEnter, MouseExit, and MouseEnterPreview When the mouse cursor \"enters\" a mouse event target � that is, when it goes from not being over the target to being over it from the perspective of the viewport showing it � the MouseEnter event is dispatched to that target that frame. Likewise, when the cursor \"exits\" a target � it goes from over it to not over it � the MouseExit event is dispatched to that target that frame. As the mouse cursor enters a mouse event target, if it is simultaneously exiting another one, the MouseEnterPreview event is dispatched that frame to the target being entered. This event is dispatched immediately before the MouseExit and subsequent MouseEnter events are dispatched, in the same frame. For example, this code snippet connects to two different cogs, CogA and CogB (declared elsewhere in the script), for these events: function Initialize(init : CogInitializer) { Zilch.Connect(this.CogA, Events.MouseExit, this.OnMouseExit); Zilch.Connect(this.CogB, Events.MouseEnter, this.OnMouseEnter); Zilch.Connect(this.CogB, Events.MouseEnterPreview, this.OnMouseEnterPreview); } function OnMouseExit(event : ViewportMouseEvent) { Console.WriteLine(\"Exiting `this.CogA.Name`\"); } function OnMouseEnter(event : ViewportMouseEvent) { Console.WriteLine(\"Entering `this.CogB.Name`\"); } function OnMouseEnterPreview(event : ViewportMouseEvent) { Console.WriteLine(\"About to enter `this.CogB.Name`\"); } Here is the console output when the mouse moves from CogA to CogB: About to enter CogB Exiting CogA Entering CogB MouseEnterPreview is useful when there is code that should be run before the MouseExit and MouseEnter callbacks are executed. MouseMove and MouseScroll Every frame that the mouse moves while the cursor is over a mouse event target, the MouseMove event is dispatched to that target. When the mouse is scrolled while the cursor is over a mouse event target, the MouseScroll event is dispatched to that target: function OnMouseMove(event : ViewportMouseEvent) { // move the camera an amount equal to the // mouse's movement vector this.PanCamera(event.Movement); } function OnMouseScroll(event : ViewportMouseEvent) { // zoom the camera an amount equal to the // Y component of the scroll vector this.Zoom(event.Scroll.Y); } Down and Up Events When any mouse button is pressed while the cursor is over a mouse event target, the MouseDown event is dispatched to that target. Likewise, when any mouse button is released while the cursor is over a mouse event target, the MouseUp event is dispatched to that target. MouseDown and MouseUp are useful when writing controls that can be bound to any mouse button. To determine which mouse button was pressed or released, just check the Button field on the ViewportMouseEvent object that is sent with the event: function OnMouseDown(event : ViewportMouseEvent) { if (event.Button == this.LaserButton) this.BeginChargingLaser(); else if (event.Button == this.ShieldButton) this.RaiseShields(); else if (event.Button == this.CameraPanningButton) Zilch.Connect(this.Space, Events.MouseMove, this.OnMouseMove); } function OnMouseUp(event : ViewportMouseEvent) { if (event.Button == this.LaserButton) this.FireLaser(); else if (event.Button == this.ShieldButton) this.LowerShields(); else if (event.Button == this.CameraPanningButton) Zilch.Disconnect(this.Space, Events.MouseMove, this); } Zilch also has specific events for LeftMouseDown and LeftMouseUp, RightMouseDown and RightMouseUp, and MiddleMouseDown and MiddleMouseUp, which are dispatched only when the corresponding button is pressed or released: function OnLeftMouseDown(event : ViewportMouseEvent) { this.BeginChargingLaser(); } function OnRightMouseUp(event : ViewportMouseEvent) { this.LowerShields(); } function OnMiddleMouseDown(event : ViewportMouseEvent) { Zilch.Connect(this.Space, Events.MouseMove, this); } Click Events When a mouse button is both pressed and released over the same object, that object is said to have been //clicked//. Click events are commonly used for UI elements, such as buttons. Zilch dispatches LeftClick, RightClick, and MiddleClick events: function OnLeftClick(event : ViewportMouseEvent) { // perform whatever effect this button does this.ExecuteButtonFunction(); } function OnRightClick(event : ViewportMouseEvent) { // open the context menu for this object this.OpenContextMenu(); } function OnMiddleClick(event : ViewportMouseEvent) { // close this window this.CloseWindow(); } DoubleClick When a mouse event target is double-clicked, the DoubleClick event is dispatched to that target: function OnDoubleClick(event : ViewportMouseEvent) { if (event.Button == this.LaserButton) this.ReloadLaser(); else if (event.Button == this.ShieldButton) this.RebootShields(); } NOTE: The timing of the two clicks involved in a double click is defined by the user's operating system. Polling-Based Input Polling-based input typically occurs in a callback for an Update event such as LogicUpdate: function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { // check for mouse input here } The mouse may be polled via the global Mouse object, which can be found at Zilch.Mouse; of interest to mouse input are its CursorMovement, RawMovement, and ClientPosition properties and its IsButtonDown function. CursorMovement, RawMovement, and ClientPosition RawMovement represents the amount of movement detected this frame by the mousing device. ClientPosition gives the screen-space cursor position in pixels, as computed by the OS. ClientPosition is relative to the upper left pixel of the Zilch client (application), which is (0, 0), with X and Y increasing to the right and down respectively. The CursorMovement property is computed by Zilch as the difference in the ClientPosition between the current frame and the previous frame. NOTE: CursorMovement and RawMovement often differ because the final position of the cursor depends on OS settings. The ClientPosition property is given in screen space, but it may be helpful to convert it to another coordinate basis, such as world space. The CameraViewport component has handy functions for performing such changes of basis: function OnLogicUpdate(event : UpdateEvent) { // mouse position in screen space var clientPosition = Zilch.Mouse.ClientPosition; // mouse position in world space (at Z = 0) var mouseWorldPosition = this.CameraViewport.ScreenToWorldZPlane(clientPosition, 0); // move this object to the mouse's world position this.Transform.Translation = mouseWorldPosition; } IsButtonDown The IsButtonDown function returns whether the given mouse button is down on the current frame. It closely parallels the KeyIsDown function on the Keyboard object: function OnLogicUpdate(event : UpdateEvent) { // if the mouse look button is held, turn the camera with the mouse's movement if (Zilch.Mouse.IsButtonDown(this.MouseLookButton)) { this.RotateCamera(Zilch.Mouse.CursorMovement); } } What to Use Whether direct control or cursor control is used, event-based input and polling-based input may have performance differences. As is the case with Keyboard Input, the difference will often be very small, so sometimes it is best to use whichever method is easiest for the developer, but knowing how to decide which input method to use is always important. To decide whether a component should use event-based mouse input or polling-based mouse input, begin by answering these guideline questions: Is the mouse being used for cursor control or direct mouse control? Cursor control: mouse events are probably better direct mouse control: either may work The nature of a cursor-driven interface is well-suited to being controlled by mouse events, and is often awkward and impractical to implement with polling. Is this component already connected to an update event? Yes: polling may be better No: consider events Some of the performance impact in frame-based input comes from the act of polling, but some of it comes from the mere fact of being connected to an update event. If a component's update event connection overhead is already considered acceptable, then the added overhead of input polling may not be a problem. How many instances of this component are likely to be alive at once? A lot: events may be better Not many: consider polling Performance can suffer noticeably if a large number of objects are simultaneously connected to update events, especially if they're running complex logic. If there will be more than about a few hundred instances of a component all running at once, it may be wise to consider using event-based input instead of frame-based input. Of course, this number will vary greatly with factors such as the complexity of the logic being run and the capabilities of the user's computer. How much time is likely to elapse between relevant inputs? A long time: events may be better Not long: consider polling Because mouse events are only dispatched when the mouse is used (other than MouseUpdate), event-based input has the potential to be more efficient than frame-based input, especially when checking for an input that is expected to occur only rarely or sporadically. Related Materials Manual Keyboard Input Code Reference Mouse ViewportMouseEvent Reactive CameraViewport Camera Keyboard Development Task {T404}"
  },
  "docs/zilch_editor_documentation/zilchmanual/gameplay/interpolation.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/gameplay/interpolation.html",
    "title": "Linear Interpolation | ZilchEngine",
    "keywords": "Linear Interpolation Spherical Linear Interpolation"
  },
  "docs/zilch_editor_documentation/zilchmanual/gameplay/random.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/gameplay/random.html",
    "title": "Creating a Random Number Generator Object | ZilchEngine",
    "keywords": "Randomness is an important part of most games, without randomness a game will be deterministic meaning the same outcome will always happen given the same set of player inputs. Creating a Random Number Generator Object There are two ways you can create a Random Number Generator Object in Zilch Engine: randomcontext random (only available through Nada Scripts) RandomContext is a component that can be added to an object while Random is a type (such as Real2 or Quaternion). While they both offer slightly different methods, they both can be used to accomplish the same goals and are often interchangeable. RandomContext component The RandomContext component can be added to a game object just like every other component. Random class object The Random class object can be created much like every other object in the game. class RandomScript : NadaComponent { ... var RandomGenerator : Random = Random(); ... } or if you want to where exactly when the object is created function Initialize(init : CogInitializer) { ... this.RandomGenerator = Random(); ... } Using the Random Number Generator Object Below are some examples on how to use the functions offered by the Random Number Generator object. DieRoll DieRoll is a function that takes an integer that determines the number of sides of a die and returns a random number between 1 and Sides. Here's an example: function GenerateRandomNumber () { Console.WriteLine(this.RandomGenerator.DieRoll(20)); } Range Real Range (Real Min, Real Max) The Range function can be used when you need to generate a random number between two numbers. We can call this function by function GenerateRandomRange () { Console.WriteLine(this.RandomGenerator.Range(0, 100)); } Linear vs Non-Linear Up untill now we are only generating random numbers linearly. This means that all possible numbers in a specified range has an equal chance to be generated. There are functions that the generator offer that generates random numbers in a non-linear manner where all possible numbers in a specified range does not have an equal chance to be generated. Functions like BellCurve generate numbers in a non-linear manner so in a range of 0 to 1, numbers in the middle of the range has a higher chance of being generated than the numbers on the edges. Deterministic Random Number Generator In some situations, deterministic random number might be needed in order for a feature to work correctly. This can normally be found in a Replay feature or networked games. In a Replay feature, game sessions are recorded and replayed for people to see and evaluate. This means that we will have to record all randomness in the game as well. Or in a networked game where randomness are involved, we need to make sure that all the connected players are playing the same game which means we have to somehow make sure that random number generator generates the same number between the different players. Seeding a Random Number Generator When we seed a random number generator, we make sure that the random number generator will generate the same sequence of number when it is called. function Initialize(init : CogInitializer) { ... this.RandomGenerator.Seed(0); ... } When the following function is called multiple times, the same sequence of number will be generated every time. function GenerateRandomNumber () { Console.WriteLine(this.RandomGenerator.DieRoll(20)); } So in a Replay feature, we simply save the current seed of the random number generator and then seed the random number generator with the seed to get the same sequence of random number every time we run the replay. Also, in a networked game, we can simply share the seed between all connected players to make sure that everyone shares the same gameplay experience between multiple random number generator. Related Material Reference randomcontext random"
  },
  "docs/zilch_editor_documentation/zilchmanual/gameplay/vectormath.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/gameplay/vectormath.html",
    "title": "| ZilchEngine",
    "keywords": "Most games involve some physics, and even those that don't use physics often use vector math heavily. Vectors are used for everything from object position to input to Velocity. Make sure you are familiar with this section before you start trying to develop in game behaviours. Orientation based rotation"
  },
  "docs/zilch_editor_documentation/zilchmanual/gameplay/vectormath/orientation.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/gameplay/vectormath/orientation.html",
    "title": "Configuring Orientation | ZilchEngine",
    "keywords": "The orientation component is a utility component that helps makes the manipulation of the transform of an object easier. It can be particularly useful when an object has its own sense of forward (for example where a person or a spaceship is facing). Configuring Orientation The first step after attaching an Orientation component to an object is to configure the orientation basis. By redefining forward, up, and right for an object, many calculations of finding those values at runtime can be avoided later. In the image below a cube can be seen with the default orientation values. The blue arrow is the WorldForward, the green arrow is the WorldUp, and the red arrow is the WorldRight of the cube. The cube has defined the -Z axis as its LocalForward and the +Y axis as its LocalUp. This means that its LocalRight is the +X axis. This can be changed to a number of common presets as scene in the next image. The built in Orientation presets. Occasionally, an object's default rotation does not align with any World axis, making all the built in Orientation presets unusable. In cases such as these it is possible to manually define the orientation bases by rotation. Defining a custom Orientation Bases. The Orientation component calculates the WorldDirections from its LocalDirection Properties by applying the object's Rotation. When an Oriented object is rotated, its WorldDirections are rotated with it. Using Orientation Oriented directions are helpful in and of themselves. Attaching Orientation to a character is an easy way to determine which direction the character is looking at any given moment with out having to calculate it in script. This can come in useful for vision checks, aligning two objects, etc. Look At Functions Orientation.LookAtPoint() Orientation.LookAtDirection() The most common use of Orientation is to make the object face a given point or direction. There are multiple ways to do this in the script below uses the LookAtPoint function to make the cube face the mouse position on the world Z-Plane. class LookAtMouse : NadaComponent { [Dependency] var Orientation : Orientation; [Property] var CameraPath : CogPath = CogPath(); function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var mousePos = this.CameraPath.Cog.CameraViewport.ScreenToWorldZPlane(Zilch.Mouse.ClientPosition, 0.0); var debugSphere = DebugSphere(mousePos, 0.1); DebugDraw.Add(debugSphere); this.Orientation.LookAtPoint(mousePos); } } P576 in rotating the object to face the mouse. The same functionality can be achieved with LookAtDirection by slightly altering the script. class LookAtMouse : NadaComponent { [Dependency] var Orientation : Orientation; [Property] var CameraPath : CogPath = CogPath(); function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var mousePos = this.CameraPath.Cog.CameraViewport.ScreenToWorldZPlane(Zilch.Mouse.ClientPosition, 0.0); var debugSphere = DebugSphere(mousePos, 0.1); DebugDraw.Add(debugSphere); var direction = Math.Normalize(mousePos - this.Owner.Transform.Translation); this.Orientation.LookAtDirection(direction); } } Notice that when the WorldForward of the cube rotates past the Y axis, its WorldUp, the WorldRight flips to the other side of the object. This is because typically the WorldRight is derived from the cross product of the object's WorldForward and WorldUp. The orientation component does not care about any previous rotation of the object and LookAt functions will always result in a normalized rotation, meaning all Euler Angles will fall in the range [-180.0, 180.0] when LookAt functions are used to set an object's Rotation. This issue can be fixed by properly setting Orientation.WorldUp to [0,0,1] to match the DefaultOrientationBases of the object. WithUp... Functions Orientation.LookAtPointWithUp() Orientation.LookAtDirectionWithUp() The LookAt functions on Orientation each have a corresponding version with WithUp appended. These functions let the user define the WorldUp to rotate around instead of the objects WorldUp defined on the Orientation component. class LookAtMouse : NadaComponent { [Dependency] var Orientation : Orientation; [Property] var CameraPath : CogPath = CogPath(); [Property] var Up : Real3 = Real3(1,0,0); function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var mousePos = this.CameraPath.Cog.CameraViewport.ScreenToWorldZPlane(Zilch.Mouse.ClientPosition, 0.0); var debugSphere = DebugSphere(mousePos, 0.1); DebugDraw.Add(debugSphere); var direction = Math.Normalize(mousePos - this.Owner.Transform.Translation); this.Orientation.LookAtDirectionWithUp(direction, this.Up); } } In this example LookAtDirectionwithUp() was called with and up value of (1, 0, 0). Notice that now the WorldRight of the cube now flips when the WorldForward crosses over the X axis instead of the Z axis as before. GetLookAt...Rotation Functions While the LookAt functions can be very useful, they will often not be smooth enough for gameplay; in such cases, the GetLookAt functions must be used. These are \"query-only\" functions and return the Quaternion representing the rotation that the corresponding LookAt function would have set Transform.Rotation to. class LookAtMouse : NadaComponent { [Dependency] var Transform : Transform; [Dependency] var Orientation : Orientation; [Property] var CameraPath : CogPath = CogPath(); [Property] var Up : Real3 = Real3(1,0,0); [Property] var Interpolated : Boolean = true; [Property] var InterpolationSpeed : Real = 1.0; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var mousePos = this.CameraPath.Cog.CameraViewport.ScreenToWorldZPlane(Zilch.Mouse.ClientPosition, 0.0); var debugSphere = DebugSphere(mousePos, 0.1); DebugDraw.Add(debugSphere); var direction = Math.Normalize(mousePos - this.Owner.Transform.Translation); var targetRotation = this.Orientation.GetLookAtDirectionWithUpRotation(direction, this.Up); if(this.Interpolated) { var newRotation = Math.Slerp(this.Transform.Rotation, targetRotation, this.InterpolationSpeed * event.Dt); this.Transform.Rotation = newRotation; } else this.Transform.Rotation = targetRotation; } } With the cube's Rotation being interpolated instead of directly set it is now possible to see the behavior that the flip of WorldRight will cause, and it is most often undesirable. However, this flip only occurs because Up is set to a value that the WorldForward aligns with and then crosses over. By setting the Up axis to be the intended axis of rotation (the world Z axis) the cube no longer flips, as the cube's WorldForward no longer crosses over the defined Up for the rotation. (WARNING)Slow Interpolation Speeds: A common mistake when using GetLookAt functions in combination with Math.Slerp is to set the interpolation speed to slow. In this case because the mouse has no digital limit on the speed of movement the target rotation of the cube can change much faster than the InterpolationSpeed allows the cube's Rotation to change. As shown, due to the normalized rotation values returned by GetLookAtDirectionWithUpRotation the cube never makes a full rotation despite the mouse making multiple full rotation around it. Related Materials Code Reference orientation"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics.html",
    "title": "PBR Overview | ZilchEngine",
    "keywords": "PBR Overview The #zilch_engine uses physically based rendering techniques (PBR). The PBR overview offers a high level PBR description and resources for learning more about the details of PBR and its implementation in the #zilch_engine. Components tracked by the graphics engine to represent visual objects, each with different benefits for their intended usage. graphical Models General way of rendering meshes, such as characters or environment. Sprites & Text Efficient rendering for a large amount of 2D art, frame-based animations, UI, and text display. Particles Creation and animation for a large amount of 2D images for visual effects, without the overhead of each particle being an independent game object. Scene Setup How to add graphical assets and configure a scene to look the way you want. Adding Assets Importing textures, meshes, and animations and configuring how these resources are built. Materials Describe the surface attributes of an object or, more generally, define a shader program for any Graphical. RenderGroups Categories for Materials that Renderers use to specify a group of objects to be rendered. Cameras and CameraViewports Control how and from what perspective all rendering is done. Lighting Adding and configuring lighting in a scene for the default Renderers provided in Zilch. Renderer Nada script components that define the entire rendering pipeline of a scene."
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/adding_assets.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/adding_assets.html",
    "title": "Adding 2D Assets | ZilchEngine",
    "keywords": "Assets such as textures and models comprise the majority of the graphical content in a game. 2D assets take the form of sprites and spritesheets (i.e. sprite animations) while 3D assets take the form of models, model animations, and textures (which are 2D art assets, but commonly applied to 3D objects through a {link university}Material). The following pages discuss importing and the initial setup of these assets: Adding 2D Assets Importing and setting the initial values for 2D assets such as sprites and spritesheets. Adding 3D Assets Importing and setting the initial values for 3D assets such as meshes, model animations, and textures. Block Compression Choosing the right compression type for a Texture."
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/adding_assets/adding_3d_assets.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/adding_assets/adding_3d_assets.html",
    "title": "Models and Model Animations | ZilchEngine",
    "keywords": "3D assets, such as models, model animations, and images to be used on a Material, are added as Resources in the form of meshes, animations, and textures. The preferred file format for 3D assets is .fbx for models and animations (though Zilch does accept a number of other formats such as.obj, .3ds, .blend, etc...) and .png for textures. See resourceadding for how to import data files into Zilch. Models and Model Animations After the file has been imported, a new window will open-GroupImportOptions window-that will provide a number of options for how the data should converted into a Resource. Group Import Options This window allows the user to specify a number of properties such as whether to import meshes, animations, and textures, whether to convert the scale of the imported asset, and more. All available options are described below. NOTE: All options except for ImportMeshes checkBox, ImportAnimations checkBox, and ImportTextures checkBox may be modified in the Properties window window by selecting the Resource from the Library after the asset has been imported. GenerateSmoothNormals and SmoothingAngleDegreesThreshold GenerateSmoothNormals checkBox is a boolean property set to false by default. When set to true, it exposes SmoothingDegreesAngleThreshold . Together, they smooth the normals between the vertices of a mesh where the angle between the vertices falls below the value set in SmoothingDegreesAngleTheshold . On an object shaded with uniform colors, smoothing the normals will have the effect of making the mesh appear seamless. Normally, whether an object should appear seamless or have each polygon be discretely visible is up to the artist working on a project. If using outsourced or pre-made art assets, however, one might wish to smooth the normals on an object with visible seams between each polygon. InvertUvYaxis This boolean property should be set to true if the mesh being imported was authored and exported in a program where the default export options do not match Zilch's convention. When imported, the y-coordinate for each vertex will be inverted. Zilch's uv coordinate convention is for (0,0) to be at top-left and (1,1) at bottom right. Note this will only change the mesh being imported, not any textures that being imported along with it. Asset creation programs may export with a different convention where (0,0) is at bottom-left, causing the y-axis (or v-axis) to be inverted if imported to Zilch. If this happens, any Material applied to the object created from textures made for this mesh will not appear as expected. If working with an artist on a project, it is best to have them set the export options to match Zilch's convention. If using outsourced or pre-made art assets, however, one may need to invert the uv y-axis when importing scene assets. GenerateTangentSpace This boolean property is set to true by default and should remain that way unless an artist has specifically authored the tangent space in a specific way that is different from Zilch's conventions. In Zilch, the vertex tangent will always be in the increasing x (or u) direction, while the bi-tangent will always be in the increasing y (or v) direction. FlipWindingOrder This boolean property, when set to true, will flip the winding order of the vertices of a mesh. The winding order, described as either clockwise or counter-clockwise, is what determines whether a triangle within in the mesh is front-facing or back-facing (for more information on how winding order affects face culling, check out this page. If they are ordered clockwise when imported, setting FlipWindingOrder checkBox to true will change them to counterclockwise; if ordered counterclockwise when imported, they will be changed to clockwise. OriginOffset Setting this property will offset the mesh from it's origin by the value specified. As an example, imagine a model of a dragon is imported and OriginOffset is set to [10, 0, 0]. Now, an instance of the archetype generated when the model was imported is created within the level and it's Translation is set to [0, 0, 0]. Normally, the dragon would appear at [0, 0, 0], but since its origin has been offset, it now appears at [10, 0, 0] even though the object's Translation remains at [0, 0, 0]. ScaleConversion and ScaleFactor ScaleConversion changes the mesh's scaling convention from one unit of measurement to another. For example, if a modeling program exported using centimeters as the unit of measurement, but the rest of the game has been using meters, choosing CentimetersToMeters would scale the mesh to match the units of measurement used throughout the game. The factor by which each option scales an incoming mesh are listed here: ScaleConversion Factor CentimetersToInches 0.39 CentimetersToMeters 0.01 InchesToCentimeters 2.54 InchesToMeters 0.0264 MetersToCentimeters 100.0 MetersToInches 39.3701 Custom allows the user to define the factor by which the mesh is scaled by using the value set in ScaleFactor . If a project is using a custom unit of measurement, all imported meshes could be scaled to this custom unit by using ScaleFactor in conjunction with setting ScaleConversion drop-down menu to Custom. ChangeBasis This boolean property, when set to true, exposes three more properties, allowing the user to change the X-, Y-, and Z-bases of the mesh. Any of the three bases may be changed to the positive or negative x-, y-, or z-axis. One example where this setting would be changed is if a project is created where the orientation (i.e. right, forward, and up directions) is different from the mesh being imported. Textures When a file is imported as a texture, there are no options available to it directly after import as there are with models and model animations. There are, however, a number of options available through the texture Resource's ContentComponents, which are listed in the Properties window window and accessed by clicking on the texture Resource in the Library window window. Default Texture Settings Based on certain features of the file being imported, the default settings for a texture found in the ContentComponents will be changed. The following table lists the file feature, feature value, setting affected, and the value applied for each possible default setting: File Feature Value Affected Setting Setting Value File Extension .hdr Compression None Name Substring \"albedo\" Compression BC1 Name Substring \"normal\" Compression BC5 Name Substring \"metallic\"/\"metalness\" and \"roughness\" Compression BC5 Name Substring \"metallic\"/\"metalness\" Compression BC4 Name Substring \"roughness\" Compression BC4 Name Substring \"albedo\" GammaCorrection true ContentComponents Every texture has two ContentComponents: TextureBuilder and TextureInfo. TextureInfo provides basic information about the texture. These values will stay the same with the exception of Size, which will change if certain properties are modified in the TextureBuilder component, such as Compression or MipMapping. TextureBuilder, on the other hand, is comprised of a number of modifiable properties that address a few different questions: how should the texture be interpreted, compressed, addressed, sampled & filtered, and corrected. Interpretation Type sets whether a texture should be interpreted as a Texture2D or as a TextureCube. TextureCube is the TextureType that should be chosen when the image should be used as a skybox in the renderer. For any possible use, Texture2D should be chosen. Compression Compression sets the lossy, hardware-supported format to convert the texture to, if any. For a more detailed explanation, see compression.md. Addressing AddressingX and AddressingY set how to address the texture whose uv fall outside of the range [0, 1]. The choices available are described in the table below: Enum Value Description Clamp Uses the last pixel found at the border of the range Repeat Wraps to the other side and continues to sample the image Mirror The texture is mirrored at the range boundaries Compression, Anisotropy, and so on. Once imported, check these settings to make sure they have been set correctly. Sampling and Filtering Texture sampling is the process by which data is accessed from a texture. Given the near-infinite amount of positions, angles, and distance a texture may be viewed when placed on mesh within a level, as well as the computational limits of a real-time simulation, a number of different algorithms for how this data is accessed have been developed. These algorithms are the different methods of texture filtering. Filtering describes how pixels from the texture are sampled when viewing the texture from different sizes. Filtering enum sets the algorithm by which to sample the texture. The choices available are: Nearest - Gets the closest pixel Bilinear - Get the four closest pixels and linearly blends between them Trilinear - The same as Bilinear, but with an additional linear blend between mip levels. anisotropy enum describes how pixels are sampled when the ratio of pixels viewed along its uv directions is not 1 : 1 (typically at an oblique angle). The settings available represent how large of a ratio will be accounted for when sampling the texture. For example, x1 corresponds to a 1 : 1 ratio, which means this is no anisotropy. x16, which is also the highest quality available, corresponds to a 16 : 1 ratio. Correction GammaCorrection checkBox, when set to true, will correct the values of each individual texel of a texture to account from moving the texture from linear space to gamma space that is caused by almost all current monitors (HDR monitors are the exception). When a texture authored in linear space is displayed on a monitor, it loses a percentage of its intensity, causing it to appear more washed-out than than was originally intended by the artist who created it. Gamma correction will account for this loss in intensity and correct it back to the intended level. Generally speaking, textures should be gamma corrected unless they have been authored with gamma space in mind. For a more detailed explanation of gamma correction, go here. Related Material Manual Models and Skinned Models Code Reference Mesh Model Skinned Model Simple Animation"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/adding_assets/adding_3d_assets/compression.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/adding_assets/adding_3d_assets/compression.html",
    "title": "Related Material | ZilchEngine",
    "keywords": "Block Compression is a technique used on Textures in Zilch Engine to greatly reduce texture size. Compression takes advantage of common patterns found in an image to make assumptions, resulting in less explicit data storage. When these assumptions are false, artifacts will appear on the image. Whether or not the loss in quality is worth the size saved is up to the discretion of the user. By selecting the different block compression types in the Properties window window of a Texture, one can see the size difference and the resultant image. Simply select a block compression method from BC1 to BC6 (or NONE) from the Compression drop-down menu dropdown and hit the Reload Content button. The table below can be used to choose the best compression technique for an image. For more information, visit this page on the Microsoft MSDN website. Compression Bytes Per Pixel Color Format Notes BC1 1/2 RGB no alpha BC2 1 RGBa low precision alpha BC3 1 RGBa has alpha BC4 1/2 R single channel BC5 1 RG two channels BC6 1 RGB floats for hdr images (NOTE)Compressions with the same BPP: When two or more compression types have the same bytes per pixel, one should choose the compression with the best fitting color format. For example, BC4 and BC1 have the same bpp. If the texture in question has RGB color, BC1 should be used since the color format is RGB. If the texture has only one color, such as a height map, then BC4 should be preferred. By choosing the best fitting compression type for the height map, precision is almost guaranteed to be better on that texture. Related Material Manual Adding Textures and Sprites Code Reference BlockCompression"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/adding_assets/adding_textures_and_sprites.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/adding_assets/adding_textures_and_sprites.html",
    "title": "SpriteSource Setup | ZilchEngine",
    "keywords": "SpriteSource is the Resource used to create Sprites, which represent all 2D graphical assets in Zilch. Sprites can take the form of a single 2D image or a SpriteSheet displaying all the Sprites needed for an animation in the same file. See resourceadding for how to import an image as a SpriteSource. NOTE: The only file format that may be imported to create a SpriteSource is .png. Other formats, such as .jpg, are lossy and can result in undesirable artifacts, especially when scaled. If the image only exists as a .jpg and it is absolutely necessary, there are a number of websites that offer free conversion from .jpg (and many other formats) to .png. SpriteSource Setup To change the values applied to a SpriteSource when an image is imported, double-click the appropriate SpriteSource from the Library window window, which will open the Sprite Source Editor: Sprite Source Editor window There are many different properties that may be modified such as where to set the origin, the type of sampling, and the SpriteFill mode (to change from Fill to Nine Slice for example). If the SpriteSource is a sprite sheet created for Sprite animation, click on Convert to Animation to open the Sprite Importer window. Related Material Manual BaseSprite Sprite Sprite Source Editor Block Compression Reference SpriteSource Sprite"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/camerasviewportsrenderers.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/camerasviewportsrenderers.html",
    "title": "CameraViewport | ZilchEngine",
    "keywords": "A cameraviewport draws to an on-screen or off-screen texture. Whether it is visible to in the editor or game depends on whether RenderToViewport checkBox is set to true. It references both a camera component and a Renderer component from their respective cogs to render that scene from the perspective of the camera. As long as there are single instances of these components, it doesn't matter what cog they're on. If a game has a HUD, two renderers may be necessary and therefore two seperate renderer cogs. If a game supports splitscreen, both the CameraViewport and Camera should be duplicated onto another cog. A single CameraViewport can be used to reference multiple Camera objects at different times. A Camera, however, cannot generally be referenced by multiple CameraViewports. For example, if a script sets a CameraViewport's Camera reference to a Camera that is already being referenced by a CameraViewport, the one in the script will \"steal\" the reference, removing it from the CameraViewport that originally had it. By default the Camera and CameraViewport components are on the object called \"GameCamera\" where the DeferredRenderer is found on the Renderer object. This is useful for game scripting as a reference to the camera can be obtained through CameraViewport.Camera in order to change it. CameraViewport CameraViewport Component (NOTE)Where does the CameraViewport render to? The camera can draw onto both the editor window and the game session window. By default, the EditorCamera has RenderInEditor checkBox set to true and RenderInGame checkBox set to false. As long as RenderToViewport checkBox is also set to true, it will render in the editor window and not the game session window. Viewport Placement The position and scale of each viewport is controlled with NormalizedSize , NormalizedOffset , ResolutionOrAspect , and ViewportScaling. When placing viewports, the dimentions of the game session window are in the normalized range [0,1] on both the x and y axes. (0,0) is then the top left corner and (1,1) is the bottom right corner. Below is an example of a camera viewport taking up the whole screen: Default Single CameraViewport Viewport Scaling ViewportScaling drop-down menu sets the method of fitting the viewport to the region defined by the viewport placement. Below is a brief description of what each mode does. Viewport Fitting Method Description Fill The viewport fills the entire window size LetterBox Viewport aspect ratio is always preserved and gaps are filled in with margins. Exact The viewport is not scaled LargestMultiple The viewport is the largest multiple of the resolution that fits in the window Render Order Render order sets the value by which the CameraViewport should be rendered relative to other CameraViewports (such as the one on a directional_light), where the viewport with the lowest value is rendered first and the one with the highest value is rendered last. Viewport Layering The viewports exist in 2D, so there's no Z-axis to sort our viewports on. Instead, viewports are layered in the order they're drawn. The draw order is determined first by the integer value RenderOrder , where a high value is drawn later. If two viewports are on the same layer, the viewport with the cog earlier in the Objects window window draws first. When a mouse event is sent to the window, it's forwarded to the topmost viewport containing the cursor. If ForwardViewportEvents checkBox is on, the cursor will then be sent to viewports on underlying layers. For example, a first person shooter might have a hud map on a separate viewport, but the mouse tracking should work even when the mouse is over the hud. Mouse events should be sent through the hud viewport, and therefore its CameraViewport should have ForwardViewportEvents checkBox on. Camera The cog considered to be the Camera is whatever the CameraViewport references with CameraPath cogPath. The Camera cog should also have a Camera component, or else the viewport wont be rendered. Camera Component Perspective vs. Orthographic Changing the shape of the view frustum has a significant impact on how objects are viewed in the world. Usually in a 2D setting, PerspectiveMode is set to Orthographic while with 3D applications PerspectiveMode drop-down menu is set to Perspective. Objects in a Perspective view and the distances between them will appear smaller as they move away from the camera. 2D games often work with the assumption that everything is approximately the same distance from the camera, and so objects that move away from an Orthographic camera will appear the same. Perspective camera(left) vs. Orthographic camera(right) (NOTE)Parallaxing Even if the camera has an orthographic perspective, the illusion of depth is still possible. Instead of just one universal depth, the new assumption is that there are a set number of layers for an object, often refered to as foregrounds and backgrounds. For an example, try the Parallaxing Background tutorial. NOTE: The method of controlling the viewport size changes with different viewing frustums. When PerspectiveMode drop-down menu is set to Perspective, the FieldOfView parameter represents the vertical angle that the frustum makes from the camera eye outward. When PerspectiveMode drop-down menu is set to Orthographic, the Size parameter represents the height that the camera sees in world space. Related Materials Manual Renderer Reference cameraviewport camera"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/graphical.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/graphical.html",
    "title": "ViewCulling | ZilchEngine",
    "keywords": "All graphical components-2D and 3D alike-inherit from the Graphical base class. As a result there are a number of properties that all graphical components have in common. ViewCulling By default, this property is set to true and the model will be culled if its bounding box goes outside of the view frustum (e.g. off-screen in the case of the game camera). Note that this only applies to the graphical component, so as to not alter any expected behavior. As a general rule, this property should be set to true unless there is a good reason not to (e.g. a particle system whose particles should still be visible even if they move outside of their bounding volume as a result of forces). If all Graphicals are drawn whether or not they are within the view frustum of the game camera, it will result in the performance taking a huge hit. VisibilityEvents When set to true the object that owns this graphical component will receive events upon entering or exiting the view frustum of an active camera (such as the game camera). To put it another way, if set to false, when the object that owns this graphical component enters an active view frustum, it will not connect to view GraphicalEvents such as EnterView and ExitView. OverrideBoundingBox All graphical objects generate an axis-aligned bounding box (i.e. aabb) according to that's object scale. If this auto-generated bounding box is not sufficient for whatever reason, it may be redefined manually by the user by setting OverrideBoundingBox checkBox to true. When set to true, two more properties will become visible that will define the new bounding box: LocalAabbCenter and LocalAabbHalfExtents . Initially, the values of these two properties will be such that they do not change the bounding box from it's originally generated size. LocalAabbCenter is set to [0, 0, 0] by default and any change in the value will offset the bounding box. For example, if the the value was changed to [2, 5, 0], the bounding box would be offset 2 units in the positive x-axis and 5 units in the positive y-axis. LocalAabbHalfExtents sets the x-, y-, and z-half extents, in local space, that define the size of the box. By default, it is set to [1, 1, 1], which effectively doubles the size of the generated bounding box. The resulting bounding box is a direct result of the scale of the object multiplied with the half-extents. For an object scaled to [3, 3, 3] and LocalAabbHalfExtents set to the [2, 2, 2], the resulting bounding box will have a volume defined by the scale [12, 12, 12], as each half-extent will be 6. GroupSortValue This property should only be used if using a RenderGroup that uses GraphicalSortValue as its GraphicalSortMethod enum. While GroupSortValue could be set on an object by object basis, if there is even a moderate amount of graphicals in a project, setting this value for all graphicals through a script-where graphicals can be filtered into discrete groups-is recommended. Material Every graphical uses a Material, whether it is user-defined or built-in. Information on Materials can be found in the materials_overview. RelatedMaterials Manual RenderGroup materials_overview Code Reference graphical graphicalevent"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/lighting.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/lighting.html",
    "title": "Direct Lighting | ZilchEngine",
    "keywords": "Direct Lighting Direct lighting involves the creation and placement of light objects, such as a directional light or point light. Indirect Lighting Indirect, or image-based, lighting comes primarily through the use of a skybox."
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/lighting/direct_lighting.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/lighting/direct_lighting.html",
    "title": "Directional Light | ZilchEngine",
    "keywords": "Direct lighting comes from any lights that are created and setup by the user. This includes directional and point lights. While there may appear to be some surface-level similarities between the two, they make use of certain components and are implemented entirely differently. Please note that when using a forward renderer, the only direct lighting allowed is the DirectionalLight that is present by default in any new level. DirectionalLight cogPath on the ForwardRenderer component should be set to this DirectionalLight. If dynamic lighting is needed on a project that uses a forward renderer, it must implemented by the user. There is no single implementation for dynamic lighting with a forward renderer that may be applied as there with a deferred renderer, so any particular implementation must be based off the particular requirements of a project. Directional Light A light that is applied over an entire scene, emitting light from a specific direction. Point Light A light that has a defined shape, exists at particular point in space, and sends light out equally from all points on that shape."
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/lighting/direct_lighting/directional_light.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/lighting/direct_lighting/directional_light.html",
    "title": "Casting Shadows | ZilchEngine",
    "keywords": "A directional light is a light that, as its name suggests, emits light from a specific direction. While the light has a direction, it has no single point from which it emits. Instead, it lights everything within a level from that particular direction. LightIntensity is an arbitrary scalar applied to the final lighting calculations that includes all lights. One very common use of a directional light is to simulate the sun (and/or moon). Casting Shadows NOTE: As of now, DirectionalLight is the only type of light that can cast shadows. In the near future, PointLight and the soon-to-be-implemented SpotLight will also have the ability to cast shadows similarly to the way DirectionalLight does. Directional lights may be created either with or without the ability to cast shadows using either the CreateDirectionalLightShadows or CreateDirectionalLight commands, respectively. When created with the ability to cast shadows, the DirectionalLight object will have Camera, CameraViewport, and ShadowRenderer components on it. Changing the translation or rotation of the DirectionalLight object will cause the shadows of objects in the scene to change: DirectionalLight rotating around an object Shadows cast from a directional light are rendered separately than the other objects on a scene. Therefore, a different renderer, camera, and camera viewport are needed. CameraViewport The CameraViewport component on a directional light has different default settings than the one found on the EditorCamera or GameCamera. First, RenderInEditor checkBox and RenderInGame checkBox are set to true, while RenderToViewport checkBox is set to false. This setup ensures that shadows will be visible both in the editor and in the game, but that the camera viewport will not act as a renderer for the game itself. Second, RenderOrder is set to -1. This setting ensures that shadows are always rendered before any other camera during runtime (unless, of course, this property on another CameraViewport component is set to a value less than -1). Third, ResolutionOrAspect (in this case, it's referring specifically to the aspect ratio) is set to [1, 1]. This setting not only makes the camera a square shape, but also ensures that the shadow map texture isn't squished or skewed. Camera and ShadowRenderer This component defines the blue, debug-drawn bounding box visible in the editor. This box, in turn, defines the the volume in which shadows are cast. That is, for an object to cast shadows some part of that object's bounding box must fall within the volume defined by the Camera component. The Size property's of 64 (which means that the width and height have a value of 64) is a default of the DirectionalLight archetype, which means that the volume in which shadows will appear within 64 world units defined by the camera. Shadow Acne Be wary when increasing the size of the camera as Resolution on the ShadowRenderer component is set to Low. In fact, at default values, setting Resolution enum to Low will cause shadow acne: This problem may be addressed by increasing the value of the NormalOffsetBias property on the DirectionalLight component. The default value is 0.1, but when changed to 0.2 the shadow acne seen in the previous screenshot is gone: NormalOffsetBias biases depth in the direction of an object's surface normal, causing surfaces to \"pretend\" they're slightly ahead of themselves in regards to shadow mapping. To generalize the issue, there is direct correlation between the values of the NormalOffsetBias , Size , and Resolution enum properties and the presence of shadow acne: When Resolution enum is set Low, Size should be kept at the default value or smaller and NormalOffsetBias will probably need to be increased in small increments (e.g 0.05 or 0.1 increments) to remove shadow acne. When Resolution enum is set to Medium, Size may be increased to approximately 100 without the need to increase NormalOffsetBias . When Resolution enum is set to High, Size may be increased to approximately 200 without the need to increase NormalOffsetBias . If one or two directional lights are being used to represent the sun and/or moon, coupling the light object or its parent object's translation to the player character's translation can dramatically reduce the value of Size . If implementing a day/night cycle, the light object may even be parented to the player character itself. Related Materials Manual Camera and CameraViewport Code Reference ShadowResolution"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/lighting/direct_lighting/point_light.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/lighting/direct_lighting/point_light.html",
    "title": "LightIntensity and LightRadius | ZilchEngine",
    "keywords": "A point light is a light that has a defined shape, exists at particular point in space, and sends light out equally from all points on that shape. It uses a sphere mesh to define its volume, as can be seen on the Model component. The light that is emitted will only be processed on geometry that the light overlaps, which is found using a special depth test unique to the point light. LightIntensity and LightRadius LightIntensity falls off as the distance increases from the surface of the light as defined by the LightRadius . The fall off follows the inverse square law. The LightIntensity and FalloffRadius are independent from each other. LightRadius defines the size of the \"physical\" object that represents the object emitting the light. This \"physical\" object that can only be seen in the reflection of the PointLight (see screenshots below) As this radius approaches zero, it comes to represent an infinitely small point. As the radius increases and the intensity stays the same, the light emitted will be spread out as the same intensity must now be spread across the surface of a larger object. The following series of screenshots shows a point light in the Editor view where LightIntensity remains constant at 50, but LightRadius changes to values of 0.0, 0.5, and 1.0, respectively: As is illustrated in the screenshots above, when the value LightRadius increases, the size of the specular, or reflected, light grows. This is most obvious when looking at the reflection of the light source: the sphere reflected on the surface of the floor and wall objects gets larger. As the specular light increases, however, the intensity also dims, as the amount of energy emitted remains the same despite increasing the area from which it is emitted. FalloffRadius FalloffRadius defines the size of the sphere mesh that acts as the volume in which emitted light may be processed. If the value defines a volume larger than what the emitted light would reach, increasing it any further will have no effect. If the value defines a volume below what the emitted light would reach, the intensity falloff is truncated. The following series of screenshots show a point light in Editor view where the value of FalloffRadius is set to 10, 7, and 5, respectively: Related Materials Manual Model component Code Reference Mesh"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/lighting/indirect_lighting.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/lighting/indirect_lighting.html",
    "title": "| ZilchEngine",
    "keywords": "Indirect lighting in Zilch takes the form of image-based lighting, where an image--primarily a skybox--provides environmental ambient lighting throughout a scene. Whether a skybox is artist-created or derived from HDR images, is often used to give a scene an ambient light associated with a certain time of day (e.g. dusk, noon, dawn) or certain types of weather (e.g. clear skies, threatening clouds). In the case of interior scenes, it may just provide a static ambient light so that no matter where in the scene a player is, objects maintain some level of visibility. When using a skybox, it may be either visible, providing a static background for a scene (e.g. clouds in a sky) or invisible, in which the skybox provides ambient light for an interior scene (e.g. a cave that needs to have a constant source of ambient light not provided by deferred or forward renderer. NOTE: If a skybox is used and is visible, MipMapping on the skybox TextureBuilder ContentComponent must be set to PreGenerated. When applying indirect lighting to scene, the math used is the same as is used when applying direct lighting. The only difference between the two is that much of the math is pre-calculated for indirect lighting."
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/materials.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/materials.html",
    "title": "Materials Overview | ZilchEngine",
    "keywords": "Materials define the various texture mappings and shaders that will be applied to a model that has the material. Materials Overview Material blocks represent various rendering models and shaders of a material. The deferred renderer in Zilch should be fed with PBR-based materials composed of specific components. albedo.md metallic.md normal_map.md roughness.md Textures Textures are the external data that materials apply to a model. Shaders Shaders are generally short linear math programs that modify texture data before they are rendered. Physically Based Rendering Physically-based rendering (PBR) is a rendering technique that aims to represent how the surface of objects appear in real life."
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/materials/albedo.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/materials/albedo.html",
    "title": "Using the Albedo Fragment | ZilchEngine",
    "keywords": "In Zilch, albedo refers to the color of a Material as defined by the reflected light an object should realistically reflect. In the case of non-metals, or dielectrics, the vast majority reflect almost all light as diffuse. In the case of metals, or conductors, almost all light is reflected, rendering a reflection of its surroundings if the metal is polished or smooth. The rougher the surface is, however, the more blurred the reflection will become. Metals also tint the light they reflect leading to the different colors of metals such as gold, copper, and silver. The albedo fragments in Zilch handle both of these cases depending on the values of other fragments, such as metallic, roughness, and specular. Other frameworks and engines may refer to this as the base color or diffuse map. When setting this property by map or by value, there are other considerations to take into account when visualizing how the final material will appear. For a quick example of this difference, compare the following three screenshots. They all have the same albedo value of R:255 G:226 R:155, which should appear as gold when seen as a metal. The first image shows a sphere with only the AlbedoValue fragment on it. The second also has a SpecularValue fragment set to 1.0. The third has a MetallicValue fragment set to 1.0 instead of specular. The following page will first cover the differences between the AlbedoValue fragment and AlbedoMap fragment, with demonstrations designed to show different albedo settings in conjunction with other material shader fragments as well as in different environments that have notably different indirect and direct lighting schemes. Using the Albedo Fragment The albedo of a material may be set using either a map or by value. Setting albedo by value will apply a particular color uniformly across the material, while using an artist-produced albedo texture map allows the user to have precise control over the color at every point on the material. If there is no albedo map or value fragment on a material, the material will appear red by default. AlbedoValue When an AlbedoValue fragment is added to a material, the user may set a color value to be uniformly applied to the material. To add an AlbedoValue fragment to a material, click on the Add NadaFragment button in the Properties window: Before getting into how albedo is affected by material fragments, let's look at how a material appears with only an AlbedoValue fragment on it. The following screenshots show a range of albedo values applied to spheres with no other fragments applied to the material: Using the [ShaderInput] attribute to access the AlbedoValue fragment within a NadaScript, one may change the albedo value during runtime. The following gif shows this effect in engine (all other shader inputs are at default values): The following script used to achieve the above effect must be placed on an object that is using a material with at least an AlbedoValue NadaFragment. class ChangeAlbedo : NadaComponent { // The shader input for Albedo value (necessary to change value at run-time) [ShaderInput] var AlbedoValue : Real4 = Real4(0,0,0,0); // User-defined albedo values [Property] var AlbedoValue1 : Real4 = Real4(); [Property] var AlbedoValue2 : Real4 = Real4(); [Property] var AlbedoValue3 : Real4 = Real4(); [Property] var AlbedoValue4 : Real4 = Real4(); [Property] var AlbedoValue5 : Real4 = Real4(); // Time and Ease properties for Actions [Property] var Time : Real = 1.0; [Property] var Ease : Ease = Ease.QuadInOut; function Initialize(init : CogInitializer) { // Call the function that contains the action loop this.AlbedoOne(); } function AlbedoOne() { // Action sequence changing albedo value from one // user-defined value to the next var seq = Action.Sequence(this.Owner.Actions); Action.Property(seq, @this.AlbedoValue, this.AlbedoValue1, this.Time, this.Ease); Action.Property(seq, @this.AlbedoValue, this.AlbedoValue2, this.Time, this.Ease); Action.Property(seq, @this.AlbedoValue, this.AlbedoValue3, this.Time, this.Ease); Action.Property(seq, @this.AlbedoValue, this.AlbedoValue4, this.Time, this.Ease); Action.Property(seq, @this.AlbedoValue, this.AlbedoValue5, this.Time, this.Ease); // Action call back to this function, creating an infinite loop Action.Call(seq, this.AlbedoOne); } } Note that in the previous two examples there were no other fragments on the material other than AlbedoValue, leaving the default values for roughness, specular, and metallic intact. Changing the values of the other default fragments can significantly alter how the albedo appears. To see some of these effects, the next set of screenshots will show one line of spheres that has roughness values increasing from 0 to 1 and another line that has metallic values increasing from 0 to 1. Specular will remain constant at the default value of 0.5. The albedo value will remain constant at R:244 G:162 B:137, or Copper, so as to focus on the change brought by the roughness and metallic fragments: AlbedoMap An albedo map is a texture provided by an artist for use on a Model. While most of these textures will be unique to the model for which they were made, others, such as tileable textures, may be applied to the materials on a number of geometric primitives and look completely natural. To apply an AlbedoMap fragment to a material, click on the Add NadaFragment button in the Properties window: Tileable Texture Before moving on to unique, artist-crafted models, let's take a look at how professionally-made tileable textures, complete with Normal, Metallic, Roughness, and Specular maps, appear when applied to some primitive shapes. The following screenshot shows the Properties window window of a material using a tileable, metal box texture: Using all of the maps made available by the artist, a simple cube becomes a PBR-ready object to use in a level environment: By changing the scale of the object slightly (e.g. [4, 1, 4]), it's a quick jump to creating the floor for a level using only this object: As this particular material has maps for all of the default fragments included in a new Material, it presents an ideal case to see how the Material's appearance, specifically the albedo, changes when one or more of these maps is removed. Model-Specific Textures In a game with many artist-crafted, unique models, these will make up the majority of the texture maps. Just as was shown with the tileable textures directly above, even though it does provide the color of the object, it is only one part of a whole that is significantly altered when one or more of the other texture maps is removed. Let's take a look at how model-specific textures are applied to unique models. The albedo map that will be applied to the material before being imported into Zilch The albedo map after being imported into Zilch and gamma corrected The AlbedoMap fragment has been added to a Material and applied to the Model The finished object with all texture maps applied to the Material Lighting and Albedo As may have been obvious from the screenshots above, lighting has a direct effect on the Albedo of a Material. In all of the examples above, it is indirect lighting that bears the most influence on the apparent color of the Material. Indirect Lighting Indirect lighting, or image-based lighting, refers primarily to the skybox that encircles the scene. The following screenshots will show different angles of gold spheres that have a constant Metallic value of 1.0 and an increasing Roughness value in the range 0.0 - 0.6: If you change the skybox, however, the overall color will change as a result of the indirect lighting the skybox provides. To demonstrate this, the following screenshots are of the exact same spheres but with a significantly brighter skybox: The difference may be subtle or pronounced depending on the degree of change between skyboxes. It should be apparent, however, how much of an influence indirect lighting, through the influence of the skybox, has on a PBR material. Reference Pages Manual model_component materials Code Reference model material"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/materials/materials_overview.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/materials/materials_overview.html",
    "title": "Material Templates | ZilchEngine",
    "keywords": "Materials, and the parameters found in them, define the shader for drawing objects for any purpose, using any renderer. Their overarching, generalized purpose is to house shader code (pixel, vertex, and geometry) using individual NadaFragments. These NadaFragments added to a Material as MaterialBlocks. These shader fragments define how the surface of the object on which it is placed will react to its environment. PBR, which is provided for the user as the default DeferredRenderer, is just one instance of how Materials may be used to render objects. To add a new Material, see Adding a Resource. Material Templates When creating a new material, there are six templates from which to choose: Template Description ZilchMaterial PBR-based material defined by TextureMaps OpaqueFlat PBR-based material defined by uniform values EmptyMaterial Free of any default MaterialBlocks or references to RenderGroups AdditiveSprite Used for sprites that require additive blending AlphaCut Used for graphicals that should be alpha cut AlphaSprite Used for sprites that require alpha blending Each of these templates has MaterialBlocks and references to RenderGroups pre-added. The ZilchMaterial, for example, has AlbedoMap, NormalMap, RoughnessMap, MetallicMap, and SpecularValue MaterialBlocks and references Opaque, and ShadowCasters RenderGroups. Albedo , Normal , Metallic , Roughness , and Specular are the parameters that define how light interacts with the material. Each of these parameters may be defined by a texture map or by a value, with the exception of the Normal parameter which may only be defined by a map. Related Materials Manual rendergroups model_component materials Albedo Normal Metallic Roughness shaders Code Reference rendergroup model material"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/materials/metallic.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/materials/metallic.html",
    "title": "The Metallic Fragment | ZilchEngine",
    "keywords": "The metallic fragment, in the form of either a map or value, describes whether a Material, or part of a material, should have the properties of a metal (or conductor) in relation to light. Metals have high specular and their color represents the visible spectrum of light that a particular metal reflects. This is in opposition for dielectrics, or non-metals, that--for the most part--have high diffuse reflectance. In fact, when authoring a new material for a PBR-based renderer, whether that material is a metal or not (or some combination of the two) is usually the first consideration one should make. As metals have very high specular and very low diffuse reflectance, their color comes from a \"tint\" to reflected light. Gold and copper are two metals associated with their unique colors, instead of the grays usually found with metals. A simplified explanation of why gold and copper have the tint that they do is because they do not reflect much of the blue part of the spectrum. Compare the following three spheres, each tinted to represent gold, copper, and silver respectively. Using either a map or a value fragment, one may assign a metallic value between 0.0 and 1.0. While there may be an impulse to assign this value somewhere in the middle, it usually far more accurate to make a material or part of a material either completely 1.0 (metal) or completely 0.0 (non-metal). If the effect desired is a brushed or aged metal, this may best be achieved by using a RoughnessMap in conjunction with a MetallicMap. The Metallic Fragment Metallic may be set using a Texture map or a value. If a value is used, it applied uniformly across the entire Material. If a map is used, the metallic value may be set to different levels across the Material. If there is neither a metallic map or value fragment, it would be as if a metallic value of 0.0 is applied to the entire Material. MetallicValue When a MetallicValue fragment is applied to a Material, the user may set a metallic value to applied uniformly across the Material in the from 0.0 to 1.0. To add a MetallicValue fragment, click on the Add MaterialBlock button and select MetallicValue, as seen below: The following screenshots show the progression of the metallic value of a material from 0.0 to 1.0 with a constant roughness value (0.25) and albedo value (gold, copper, and silver, front to back): The spheres furthest to the left look have a matte look there as there is no metallic or specular reflectance added while the spheres furthest to the right looks like polished, completely reflective metals. The difference between the three sphere in the middle of each line are subtle and may not be terribly useful, but with a uniform metallic value that shouldn't be a problem. The vast majority of objects are either metals or non-metals so to have a uniform metallic value somewhere in between 0.0 and 1.0, especially as the value approaches 0.5, will not appear like the surface of anything in reality. MetallicMap A MetallicMap is a texture provided by an artist for use on a model. While most of these textures will be unique to the model for which they were made, others, such as tileable textures, may be applied to the materials on a number of geometric primitives while still appearing completely natural. To apply a MetallicMap fragment to a material, click on the Add NadaFragment button in the Properties window: A MetallicMap fragment is appropriate to use when the Material will have sections that are metallic and sections that are not. Related Materials Manual materials adding_textures_and_sprites Code Reference material texture"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/materials/normal_map.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/materials/normal_map.html",
    "title": "NormalMap Material Block | ZilchEngine",
    "keywords": "Normal maps give texture to objects. The idea of normal maps isn't to necessarily deform the model (though that is certainly possible), but to change the way that light interacts with the model`s surface. Normal maps represent minor deformities on a surface, such as the notches on a wooden plank. The three colors that store the values in a normal map are red, green, and blue. Each color is interpreted as X, Y, and Z respectively, to makeup a vector. These vectors represent the direction that is normal to the surface, hence the name NormalMap. Normal map for decals Most of the color on a normal map ends up blue because most of the direction vectors on a normal map are in the Z direction. In the space of the normal map, otherwise known as tangent space, X and Y point in the U and V directions of the texture, while Z points away from the texture. Z can also be thought of as the direction away from the surface, and so the more blue a pixel is, the more outward a normal will be. It then follows that redder pixels represent horizontal normals, and greener pixels represent vertical normals, which would both be tangent to the surface. NOTE: If the normal map seems like a mix of green and yellow, it's probably because the textures been compressed with BC5. For more on block compression, visit Block Compression. NormalMap Material Block The NormalMap resource material block contains a few additional properties vs other mapping material blocks. RedLeft checkBox and GreenDown checkBox can be used to reorient the normal map to the desired direction. In addition, Bumpiness checkBox will change the amount a normal map will effect a surface. Related Materials Manual Block Compression"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/materials/roughness.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/materials/roughness.html",
    "title": "The Roughness Fragment | ZilchEngine",
    "keywords": "Roughness quite simply defines how rough--or conversely, how smooth--a particular material is. The greater the roughness of a surface, the greater the diffusion of light that hit that surface. Roughness can be defined either by value, which is uniformly applied across the surface of a Material, or by texture map, which defines the roughness value for each discrete part of the Material. Roughness as defined in the deferred renderer follow microfacet theory, in which surface irregularities on the Material cause reflected light to \"blur\". The higher the Roughness value, the greater the blurring effect will be. For a quick look at how increasing roughness corresponds to increased blur, the following screenshot shows spheres with constant albedo and metallic , but an increasing value of roughness from 0 to 1: Especially through the first five or six spheres, as the roughness goes up, the reflection gets progressively more pronounced until individual objects reflected from the skybox are no longer visible. The Roughness Fragment Roughness may be set using a value or a texture map. If a value is used it is applied uniformly across the surface of the Material. If a texture map is used, the Roughness value may be set to different values ranging from 0 to 1 across the surface of the Material. Roughness Value When the RoughnessValue fragment is applied, the roughness value specified will be applied uniformly across the surface of the Material. To add a RoughnessValue fragment, click on the the Add NadaFragment button in the Material Properties window and select RoughnessValue, as seen below: Roughness Map When the RoughnessMap fragment is applied, different roughness values are applied to discrete sections of the Material, as dictated by the texture map. To add a RoughnessMap MaterialBlock, click on the Add MaterialBlock button in the Material Properties window and select RoughnessMap, as seen below: RoughnessMaps may be broken down into two broad categories: tileable roughness maps, which can be used on any model, and model-specific roughness maps, which are intended to be used with a specific model or set of models. Related Materials Manual Material deferred_renderer"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/materials/shaders.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/materials/shaders.html",
    "title": "Shader Translation Debug Helper | ZilchEngine",
    "keywords": "Shaders may be added to Zilch in the form of NadaFragments, allowing the user to write shaders using the Nada language. Zilch currently supports the following types of shaders: Pixel - Operates on individual pixels, setting and changing their properties. Vertex - Operates on individual vertices, setting and changing their properties. Geometry - Operates on transformed primitives (e.g. point, lines, triangles), setting and changing their properties. PostProcess - Operates on the window of an entire scene, after that scene has been processed. When adding a new NadaFragment, there are multiple templates for each type of shader: Shader Template Source Description Pixel Pixel Annotated P559 All of the built-in inputs that may be used have been commented. Pixel Pixel Empty P561 No inputs or outputs pre-defined. Pixel Pixel Normal Map P560 Uses a NormalMap to perturb the surface normal Vertex Vertex Annotated P562 All of the built-in inputs that may be used have been commented. Vertex Vertex Empty P564 No inputs or outputs pre-defined. Vertex Vertex Oscillate P563 Demonstration of a vertex shader that applies a simple oscillation to all vertices. Geometry Point To Quad P565 Demonstration of generating geometry, creating quads from points. Geometry Polygon Normals P566 Demonstration of manipulating geometry, changing normals of a triangle. PostProcess Post Process Blur P567 Applies a simple post-process blur effect. PostProcess Post Process Copy P568 Copies a texture. Shader Translation Debug Helper This tool translates Materials�rather, thNadachFragments that make up the Material�into different versions of the shader language GLSL. Command : DebugShaderTranslation will open the tool On the left hand side of the window are properties that set the parameters that define the shaders to be be translated: CoreVertex enum, Material enum, and RenderPass enum. Translation Language set the version of GLSL to translate to. These options set what exactly will be translated. Material enum, for example, sets the Material to be translated as its name would suggest. Here's a screenshot of a dragon material made for PBR: Figure 1: A material to apply to a dragon material made with PBR in mind. Figure 1 shows that the Material has Material Blocks for the four inputs expected by the physically-based renderer as well as a NormalMap. When setting the Material enum to the Golden Dragon material and and set LightPass enum the shader outputs are: If not familiar with GLSL, these will become overwhelmingly complex very quickly. With at least an intermediate amount of experience in GLSL, however, this translator provides a valuable tool for debugging your NadaFragment shaders. Changing the other attributes to different settings will result in different outputs, so try to make sure that the attributes selected line up to the location on the render pipeline. Related Materials Manual normal_map Material"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/materials/textures.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/materials/textures.html",
    "title": "Texture Builder | ZilchEngine",
    "keywords": "Textures are a special type of image used to render 3D graphics. It's commonly mapped to meshes , particles and surfaces and it controls different aspects of rendering through colors, normals and masks and more. Textures are not a final picture of the object; they are inputs that, when combined with lighting and other visual effects, produce a variety of graphical results. One of the most important aspects of textures is the ability to be drawn at different sizes efficiently. This is accomplished through Mipmapping and anisotropic filtering. For information on importing textures, see adding_textures_and_sprites. NOTE: Zilch only supports images up to 4096 x 4096 pixels. If a larger image is imported, Zilch will clamp it down to its maximum size. Due to Mipmapping and compression, it is highly recommended to use images with powers of 2 proportions. They DO NOT need to be squares, however. Zilch supports the following image types: PNGs: Lossless and compressed. We highly recommend that you use it. TGAs: Lossless and compressed. TIFs: Lossless and compressed. PSDs: Lossless but large in file size. JPGs: Lossy. We do not recommend using it for final assets. Texture Builder The Texture Builder is a collection of settings used to convert your image file into a texture that's suitable for the game. They can be accessed by clicking on the texture in the Library Window. Texture Types Texture 2D: Standard 2D texture. TextureCube: A cubemap consisting of six faces used for a SkyBox and Reflection. Images will be read as a series of faces as illustrated by the image below. Compression By default, Zilch performs an operation called block_compression on all textures. While this can reduce image quality it greatly reduces memory usage allowing it to be rendered faster. This setting should not be disable unless color accuracy is extremely important. For more information on this topic we recommend this article . Related Materials Manual adding_textures_and_sprites mesh particles Code Reference texture"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/models.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/models.html",
    "title": "Models and Skinned Models | ZilchEngine",
    "keywords": "Models are how we represent 3D objects in a game visually. Models are rendered using meshes, materials, textures, shaders, and other graphical features. Models and Skinned Models This page covers applying the Model and SkinnedModel components to objects as well as the Properties of those components. Mesh"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/models/mesh.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/models/mesh.html",
    "title": "ContentComponents for a Sample Mesh | ZilchEngine",
    "keywords": "Imported meshes may be used to apply to a Model or SkinnedModel component as well as to create a PhysicsMesh for that object. This page focuses solely on using a mesh for a Model and SkinnedModel. Clicking on a particular mesh in the Library window will open up the ContentComponents of that mesh in the Properties window: ContentComponents for a Sample Mesh The properties in the ContentComponents are the same as those found in the Group Import Options, along with a few additional properties. One can fix incorrect values set during import as well as add or remove automatic resource generation (e.g. importing textures and animations from the same .fbx that included the base mesh). WARNING: All meshes imported from a single .fbx or other scene asset file will have the same values in the properties of the ContentComponents. It is therefore recommended to only import one object per scene asset file. MeshBuilder The MeshBuilder ContentComponent includes those properties specifically related to an imported mesh (instead of other resources imported in the same file that are associated with the mesh such as animations and textures). AnimationBuilder and AnimationClips The AnimationBuilder ContentComponent defines clips of animation that have been imported. If importing a single animation, the AnimationClip will be automatically generated and there is nothing more to do. If using a workflow where all animations for a certain mesh are included in the same timeline or track in an asset file, different AnimationClips will need to added for each separate animation, defined by their start and end frames. If using such a workflow, the artist should provide the user with the frame specifications for each distinct animation. Every AnimationClip can be named, have its start and end frames defined, and its looping mode set (Default, Once, or Looping). Once an AnimationClip is added it is treated like an Animation Resource in Zilch and can be accessed in NadaScript like any other Animation. TextureContent and GeneratedArchetype These components have no properties and are there only if ImportTextures and GenerateArchetype are set to true in the Group Import Options window when importing an asset. If a scene asset file has textures in it, but ImportTextures was set to false when imported, adding the TextureContent component and reloading the mesh will add the textures to the project Library. If no archetype was created on import, adding GenerateArchetype and reloading will create an archetype in the project Library. Related Materials Manual model_component adding_scene_assets Reference model skinnedmodel PhysicsMesh"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/models/model_component.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/models/model_component.html",
    "title": "Material and Mesh | ZilchEngine",
    "keywords": "The Model component allows the user to assign a Mesh and a Material to an object. Material and Mesh These properties are where the Material and Mesh resources for the model are set. If a model has been imported using a scene asset file, the archetype for the object will have the Mesh associated with a specific object already set. By default, the Material will be set to the ZilchMaterial until changed by the user. If using the SkinnedModel component, the Mesh resource should be a skinned mesh. Skinned Model The only property the SkinnedModel component has that the Model component does not is SkeletonPath. When a skinned mesh is imported, SkeletonPath is automatically set to whatever object the animation takes as its first target (i.e. the root object of a skeleton of the generated hierarchy). The object that SkeletonPath points to should have the Skeleton component on it as well as being the root object of the entire skeleton (i.e. the parent object of all of the bone objects). If SkeletonPath is set incorrectly, the object will fail to animate as the SkinnedModel receives all of its transformation data from the skeleton. Related Materials Reference Model SkinnedModel Mesh Material"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/particles.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/particles.html",
    "title": "Sprite Particle System | ZilchEngine",
    "keywords": "Modelling a cloud of dust with individual game objects is prohibitively expensive. We use particle systems to simulate physics for effects such as dust, explosions, and fire. Sprite Particle System This is the core of sprite based particle systems. Emitters Emit Particles based on either standard or custom meshes. Linear Particle Animator Apply forces to particles. Particle Color Animator Color particles based on time and velocity"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/particles/emitters.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/particles/emitters.html",
    "title": "Variance | ZilchEngine",
    "keywords": "Emitters are necessary components for a particle system that define the properties of a particle as it's created. One of those properties is the spawn position, which is in part defined by the component itself. The emitter types are BoxParticleEmitter, SphericalParticleEmitter, and MeshParticleEmitter, and each one defines a surface or curve that particles emit from. Cycling through meshes on a MeshParticleEmitter NOTE: By default the shape isn't apparent on the Box or Sphere particle emitter. This is because the EmitterSize is zeroed out by default. Variance Some properties on an emitter have a variance property to match. Each particle inherits its properties from the emitter by adding a random value from variance to base value. For example, two common properties for emitters are Size and SizeVariance . If Size were set to 1 and the SizeVariance was 0.1, the size of each particle would be a random value in the range [0.9,1.1]. The property StartVelocity also has the variance counterpart RandomVelocity . The velocity vector is computed similarly with a variance property, where the X, Y, and Z components of the vector are computed independently. Fast Emitters When an object is moving fast, the fact that its motion is an illusion becomes more apparent. When the gaps between the small teleportations grow bigger, the illusion is lost. The illusion of motion is even harder to keep when a particle system is moving since the particles tend to trace the path of the object. One way to fix this is to use a high EmitRate and turn on FastMovingEmitter checkBox. This will emit some of the extra particles between the gaps of the current and previous positions. Two particle emitters in motion, where the right one is using FastMovingEmitter checkBox Related Material Manual Color Gradient Code Reference SpriteParticleSystem BoxParticleEmitter SphericalParticleEmitter MeshParticleEmitter"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/particles/linear_particle_animator.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/particles/linear_particle_animator.html",
    "title": "Forces | ZilchEngine",
    "keywords": "The linear particle animator give particles the ability to move. It adds an integration step which allows particles to have some physically based motion. The LinearParticleAnimator component is required to generate particles and and to move them. (NOTE)Where to set particle velocity? Properties relating to velocity are not found on the LinearParticleAnimator, but are instead on the emitter component. The reason for this property placement is that all properties on the emitter component are applied when a particle is created, whereas the properties from LinearParticleAnimator are applied every frame. Forces Both Force and RandomForce are used to apply forces to a particle. The force will effect the velocity, which in turn effects the position of each particle. If the RandomForce defines the half-vector for a bounding box, then the random component of this frames Force is confined to this box. Debug Drawing the SpriteParticleSystem's bounding box(orange), the LinearParticleAnimator's RandomForce halfvector(white), and the bounding box for the values RandomForce can generate(blue) NOTE: Torque , Dampening , and Twist forces are also available. Growth The Growth property can change the size of particles over time. Set Growth to a positive number to make it grow, and a negative number to make it shrink. Related Material Manual Physics Effects and Regions Code Reference SpriteParticleSystem LinearParticleAnimator"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/particles/particle_color_animator.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/particles/particle_color_animator.html",
    "title": "Time and Velocity Gradients | ZilchEngine",
    "keywords": "The particle animator uses ColorGradients to color each particle uniquely based on its current state. The final color of any given particle is calculated from an element-wise multiplication of three color vectors: Color = VertexColor * TimeGradientColor * VelocityGradientColor where VertexColor comes from VectexColor on the SpriteParticleSystem component. TimeGradientColor is then found from sampling the TimeGradient resource, while VelocityGradientColor is found from sampling the VelocityGradient resource. The TimeGradient resource is interpolated from black to white to black such that the color fades in and out. The VelocityGradient resource is interpolated from blue to red, such that slow particles are blue and fast particles are red. Time and Velocity Gradients In order to use the gradients on the ParticleColorAnimator, one must understand how each gradient is sampled. The TimeGradient resource defines colors in the range of t[0,1]. When t=0, the particle is created, and when t=1, the particle dies. The range is important because we need to map time that the particle has lived to [0,1]. When sampling from TimeGradient resource, the ParticleColorAnimator uses the particle lifetime as the range. When sampling from VelocityGradient resource, the magnitude of the velocity is used. However, unlike with time, ParticleColorAnimator can't guess how to map velocity magnitudes to the [0,1] range. ParticleColorAnimator therefore includes MaxParticleSpeed as an upper limit. When t=0 the particle isn't moving, and when t=1 when the particle is moving at the speed of MaxParticleSpeed . Related Material Manual Color Gradient Sprite Particle System Code Reference SpriteParticleSystem"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/particles/sprite_particle_system.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/particles/sprite_particle_system.html",
    "title": "BoundingBoxSize | ZilchEngine",
    "keywords": "The SpriteParticleSystem is a graphical and a necessary component of a particle system. Particle systems not only provide a simple interface for applying visual effects to an object, but are more efficient than spawning the equivalent game objects under the same conditions. When editing particle systems, it is important to note that no one particle has unqiue logic in the same system. Every particle follows the same set of universal rules within the system to transform how they are rendered. BoundingBoxSize Some objects have a bounding box to determine if they should be rendered or not. Either all particles in a particle system are renderered, or none of them are. It's up to the user to determine how far off the screen is far enough to stop rendering any given system. The BoundingBoxSize defines the width, length, and height of the bounding box. Once the bounding box leaves the screen, the particle system won't render. WARNING: Be careful of particles that leave the bounding box, because these are the particles that have potential to disappear. Particle System Hierarchies When working with particle system hierarchies, the ChildSystem checkBox switch gives the ability to make a particle system of particle systems. This means that a child particle system will emit particles on each particle of a parent particle system. To force a particle system to generate particles in this way, ChildSystem checkBox should be checked. Particle Spaces The SystemSpace is used to set the space for particles in the particle system. If SystemSpace enum is set to WorldSpace, then particles are created in world space and position is not longer affected by the Transform component. If SystemSpace enum is set to LocalSpace, then the space is the Transform, and will therefore follow the Transform. Geometry Mode Particles made in the Sprite Particle System are 2D, so the way that particles are placed in a 3D environment needs to be determined. The GeometryMode parameter has the following modes: | Mode | Description | | -- | -- | | Billboarded | Each particle faces the camera | | Beam | Same as Billboarded, but each particle is stretched by its velocity vector | | Outward | Each particle faces the particle system origin | | Face Velocity | Each particle faces the direction of its velocity vector | | Flat` | Each particle faces the SystemSpace enum Z-axis | Related Material Reference SpriteParticleSystem graphical LinearParticleAnimator"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/physically_based_rendering.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/physically_based_rendering.html",
    "title": "PBR Introductions and Overviews | ZilchEngine",
    "keywords": "Physically-based rendering (PBR) is a relatively recent rendering technique and workflow that aims to better represent how the surface of objects appear as they do in real life. This is primarily achieved by taking a more nuanced approach to how light interacts with different types of surfaces, metals and non-metals in particular. If you are unfamiliar with PBR, check out one of the following links regarding basic theory, asset creation, or the actual physics and math behind the calculations. PBR Introductions and Overviews Introduction for the Artist or Designer Basic Theory of Physically Based Rendering by Jeff Russell The Comprehensive PBR Guide - Volume I by allegorithmic The Theory of Physically Based Rendering Asset Creation Guides The Comprehensive PBR Guide - Volume II by allegorithmic Practical Guidelines for PBR Texturing Physically-Based Rendering and You Can Too by Joe \"Earthquake\" Wilson PBR Texture Conversion by Joe \"Earthquake\" Wilson Math and Physics for the Developer Real Shading in Unreal Engine 4 by Brian Karis Physics and Math of Shading by Naty Hoffman Physically Based Shading at Disney by Brent Burley Implementation in Zilch The DeferredRenderer and ForwardRenderer follow a metallic-roughness workflow (as opposed to metallic-glossiness) and expects inputs for albedo (referred to as \"base color\" in other workflows), metallic, roughness, and specular in the form of texture maps or uniform values. These maps or values are set via NadaFragments and applied to a Material. Related Materials Manual DeferredRenderer and ForwardRenderer Material"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/renderer.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/renderer.html",
    "title": "Deferred and Forward Renderer | ZilchEngine",
    "keywords": "A Renderer in Zilch is simply any Nada Script Component that connects to the RenderTasksUpdate event. Renderer scripts receive this event from a CameraViewport that CogPaths to it (could be the same object) and the tasks added during this event are used during rendering. While active, the RenderTasksUpdate event is sent every frame and the Renderer script can contain any logic desired to dynamically alter the effective rendering pipeline. Deferred and Forward Renderer The default renderers in the core library. Screen Space Ambient Occlusion An extension of the DeferredRenderer that applies Ambient Occlusion. Bloom An extension of the DeferredRenderer that applies a bloom effect. Custom Renderers IMPORTANT: Zilch allows the user to create their own renderer, but this is only recommended for advanced users and graphics developers."
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/renderer/bloom.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/renderer/bloom.html",
    "title": "Theory | ZilchEngine",
    "keywords": "Bloom is a collection of PostProcess RenderTasks that adds an emissive effect to bright pixels. Theory Bloom comes from the idea that the no lens, such as an eye or a camera, can distinguish perfectly between adjacent incoming light rays of high intensity. The light that passes through will be scattered, causing the color of some surfaces to bleed past it's boundary. Under normal circumstances, this effect is invisible, but with large intensity the scattering becomes noticeable. This is what's known as bloom. (WARNING)Performance Impact Bloom will decrease performance because of the extra render passes made to upsample and downsample. The only way to increase performance is to remove the component. Property Overview Active checkBox: Toggle the bloom effect on the final target. Intensity : A scaling factor for brightness. Threshold : The minimum brightness that bloom may be applied to. {nav icon=check-square-o, name=Bloom1}: Apply the 1st blur and down sample pass. {nav icon=check-square-o, name=Bloom2}: Apply the 2nd blur and down sample pass. {nav icon=check-square-o, name=Bloom3}: Apply the 3rd blur and down sample pass. {nav icon=check-square-o, name=Bloom4}: Apply the 4th blur and down sample pass. {nav icon=check-square-o, name=Bloom5}: Apply the 5th blur and down sample pass. DebugBuffer checkBox: Debug draw just the added light from the bloom passes. Changing Intensity The effect of bloom on a color is controlled by two parameters, Intensity and Threshold . The threshold is the minimum luminance a fragment must have in order to be subject to bloom. *Decreasing Threshold * NOTE: The luminance of a fragment can be determined by Utility.luminance. The intensity then scales the brightness level of fragments subject to bloom. *Increasing Intensity * Bloom Pipeline The ability to control the effect of bloom on a color is only the first step in a applying bloom. Once the brightness of each fragment is determined, the result is blurred and then down sampled a number of times. Down sampling means to decrease the resolution of an image. The process of down sampling and blurring happens 5 times. Each result can be added or excluded from the final target using {nav icon=check-square-o, name=Bloom1} through {nav icon=check-square-o, name=Bloom5}. Bloom targets incrementally added from smallest to largest blur radius Bloom targets incrementally added from largest to smallest blur radius Related Material Manual Deferred and Forward Renderer"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/renderer/deferred_renderer.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/renderer/deferred_renderer.html",
    "title": "Deferred Renderer | ZilchEngine",
    "keywords": "Deferred Renderer The Deferred Renderer is the default, pbr-based renderer that most users will use. This renderer uses the attributes of pbr found on materials to create the final scene we see in the game. The renderer can be found as a component of the default object named \"Renderer\" in the Objects window. It also utilizes bloom.md and Screen Space Ambient Occlusion if the two components, name=bloom and name=SSAO, are found on the same object. The DeferredRenderer has the {nav name=[RunInEditor]} attribute on its class, so the renderer can be used in the level editor. DeferredRenderer component Deferred Renderer UI Overview GeometryDebug drop-down menu: Draw one of the properties used in the final target instead of the final target itself. Depending on the given property, it's value at each fragment is used as the color. None: Draw the final target. Normal: The surface normal in world space. Depth: The distance to the camera. Roughness: The roughness value from the texture. Albedo: The albedo value from the model's texture. Metallic: The metallic value from the model's texture. Specular: The specular value of the model. EditorDebugDraw checkBox: Toggle adding debug drawn content to the final render in the editor. GameDebugDraw checkBox: Toggle adding debug drawn content to the final render in the game session. RenderDiffuse checkBox: Toggle the diffuse light on a fragment. RenderSpecular checkBox: Use the specular light on a fragment. RenderSkybox checkBox: Toggle drawing the skybox. Skybox texture: A texture used as the skybox for that renderer. ClearColor : The color to draw before the skybox. DirectLighting checkBox: Toggle applying lighting from light components. IndirectLighting checkBox: Toggle applying image based lighting from the Skybox. IndirectIntensity : A multiplier for the ammount of indirect lighting to apply. In general, this value should remain in the range [0,1], where 0 means to use no indirect lighting, and 1 means to apply all of it. ToneMap checkBox: Toggle applying tone mapping. Forward Renderer The ForwardRenderer is similar to the DeferredRenderer, except the forward renderer only supports a maximum of one directional light. There's a performance gain when switching from deferred to forward rendering, and it comes from reducing the number of render passes. Not only will one light be taken into consideration when rendering, but lighting is computed in the same render pass that a {icon university}[[zilch_engine_documentation/zilch_editor_documentation/zilchmanual/graphics/models/model_component/|model's]] geometry is computed. In addition, there is no GeometryDebug drop-down menu on the ForwardRenderer since there's no geometry pass. ForwardRenderer Component Forward Renderer UI Differences DirectionalLight cogPath: A cogpath to the one directional light that the ForwardRenderer will use. Debug Drawing Every render task that shares the DebugRenderGroup is associated with some debug drawing feature of the editor, such as the grid or translation arrows. These are the types of features that are toggled with DebugDraw checkBox. Normal Geometry Debugging allows the user to view certain values in the deferred renderer pipeline. When troubleshooting issues relating to lighting, one may wonder if the vertex normals of a model are applied in the way they intended, or if the normal map was applied correctly. In this case, one would want to set GeometryDebug drop-down menu to Normal, which associates the world normal of a point on a surface with a color, and so green is upwards, red is in the positive x direction and blue is in the positive z direction. Each of the three colors are also found on the view cube in the same directions. Depth The Depth option uses the z value in view space as the red, green, and blue components. This means the resultant color will be a grey scale value, where brighter fragments are further from the camera. This can be useful when looking for changes in depth and whether the transition is smooth or instant. Other Texture Maps Each fragment on a surface samples from a texture to get Albedo, Roughness, or Metallic values. Each of these properties can be debug drawn using GeometryDebug drop-down menu. Diffuse and Specular Light When analyzing how light bounces off a surface, we can categorize the light as either diffuse or specular. Each photon on it's own follows one behavior or the other, but when many photons hit a surface, we view the surface as a weighted distribution of specular and diffuse. These properties aren't directly edited, but are a result of the other PBR material inputs. Specular light refers to photons that reflect off a surface. Diffuse light is scattered off a surface in every direction, a result of subsurface scattering. Both of these elements can be enabled and disabled with ShowDiffuse checkBox and ShowSpecular checkBox Direct and Indirect Light Indirect Lighting comes from using Image Based Lighting on the skybox in the scene. The skybox is a background texture, defined by Skybox texture, that wraps around the world. It represents things that are so far away, that they are only effected by rotation of the camera, and not translation. For example, if you see a mountain in the distance, looking downwards causes the mountain to move up with respect to you. If you sidestep to the right, the mountain remains static. Direct lighting is the light that comes from every other light in the scene. Both direct and indirect lighting can be enabled and disabled using DirectLighting checkBox and IndirectLighting checkBox. Disabling DrawSkybox checkBox will remove the skybox from the final render, but won't remove the effects of indirect lighting. IndirectIntensity defines the amount of indirect lighting summed into the final render. Tone Mapping Tone mapping uses a function to take a color value and remap it to a new value. It's a technique that's often used to emphasize the brightness of a fragment. Light is added together linearly, so if two lights each give a color value of 0.5 to a fragment, the resultant fragment will have a color value of 1. The problem with linear lighting, or lighting without tone mapping, is that the resultant color is clamped. The same two lights might give a different fragment a color value of 0.75 each, and yet the resultant fragment will still have a color value of 1. Using tone mapping, we convert our linear light into a gamma range. Small color values remain about the same, while large color values approach 1 without ever reaching it. This is realistic, as no light is 100% bright. Tone Mapping can be enabled and disabled using ToneMap checkBox. Related Material Manual Direct Lighting Indirect Lighting model_component physically_based_rendering"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/renderer/ssao.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/renderer/ssao.html",
    "title": "Theory | ZilchEngine",
    "keywords": "Theory Screen Space Ambient Occlusion(SSAO) is a method of simulating Ambient Occlusion. Ambient Occlusion refers to the amount a point on a surface is occluded by objects. A shadow effect occurs, but the shadow doesn't come from any particular light source. It comes from the ambient light, hence the name. Specifically, SSAO uses the depth of the visible pixels to compute the AO map, which is then applied to the light buffer of the Deferred Renderer. (WARNING)Performance Impact SSAO will decrease performance when more pixels on the screen are occluded. Property Overview Active checkBox: Toggle the SSAO effect on the final target. Radius : The radius that ssao will sample from in perspective space. Intensity : The amount that light is shadowed by Ambient Occlusion. BlurDepthThreshold : A threshold of depth for when pixels should be blurred. DebugBuffer checkBox: If on, the output light buffer will be set to the ambient occlusion for debugging. World Scale and SSAO SSAO gives the user control of the radius of the spherical sampling region. This should be set proportional to normal sized objects in the scene. The player is usually a good object to model the SSAO radius with. Make the radius too small for the character, and the ambient occlusion effect will be weak. Make the radius too large however, and other far away objects will start to cast shadows on your character model. The properties of SSAO are constant across the entire scene, so one should experiment with Radius to get the desired ambient occlusion effect. Ambient Occlusion Intensity While the Intensity property has a direct influence on the shadow introduced in SSAO, one should first choose the appropriate Radius value. In general, the larger the sampling radius from a fragment, the further away the sampled geometry will be, and thus the lighter it will become. Intensity should be used to mitigate the effect that Radius has on the ambient occlusion. Blur Depth SSAO can introduce artifacts, so the ambient occlusion layer is blurred. To see why this is important, observe the following image with no blurring: *No BlurDepthThreshold * Horizontal patterns become noticeable from the shadow and the sphere has repeating dots introduced in ambient occlusion. Here is the same sphere with a large blurring threshold: BlurDepthThreshold is too high The artifacts are gone and the result looks far better, however the blur is too intense and has bled the AO shadow onto the surface of the sphere in an unrealistic way. To avoid this, the blur should only occur at small changes in depth, which is determined by BlurDepthThreshold . There's a fine range of thresholds that are large enough to avoid horizontal patterns, and small enough to avoid separating the shadow from the object. A correct depth value can produce the following result: BlurDepthThreshold is just right Related Material Manual Deferred and Forward Renderer"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/rendergroups.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/rendergroups.html",
    "title": "RenderGroup usage in the DeferredRenderer | ZilchEngine",
    "keywords": "RenderGroup resources act as categories for Materials. In a Renderer script, when adding a RenderPass task, a RenderGroup is used to specify which set of objects is to be drawn by that render task. When that render task is executed, all Graphicals in the scene that are using a Material that is categorized as that RenderGroup will be drawn. RenderGroup usage in the DeferredRenderer A variety of RenderGroup usage examples can be found in the DeferredRenderer resource script. The table below provides some brief descriptions for how it uses different groups of objects to define different steps of the rendering pipeline, in the order they're used. RenderGroup Usage Description Opaque Renders scene geometry and PBR attributes to buffers that are used throughout the pipeline. OpaqueDoubleSided Same as Opaque but for backface triangle culling to be disabled. Lights Renders lights to detect overlaps with scene geometry to perform light calculations. AdditiveBlend Renders additively to the lighting results so that objects can invoke the Bloom effect if enabled. AlphaBlend Renders with semi-transparency after lighting effects. DebugDraw Same as AlphaBlend but is a different RenderGroup so debug drawing can be arbitrarily disabled. DebugDrawOnTop Same as DebugDraw but does not depth test with scene geometry, so objects are not occluded. Assigning RenderGroups To assign a RenderGroup to a Material, open the Material in the Properties window window. Under the RenderGroups drop-down menu dropdown are all the RenderGroups currently assigned to that Material. Assign a new RenderGroup by clicking {nav icon=square-o, name=Add RenderGroup...} and select one from the list. Clicking on one in the current list will select that RenderGroup in the Properties window window and clicking the x button will remove it from the list. While this way of assigning RenderGroups is sufficient in most cases, there may be times when an existing Material should have a RenderGroup but the Material either can't or shouldn't be modified. For this reason, a RenderGroup can also reference a Material by selecting a RenderGroup and adding a Material to its list in the same way. If either or both resources reference one another then that Material belongs to that RenderGroup. (NOTE)For Convenience If either a RenderGroup or Material reference one another, the ReferencedBy drop-down menu list displays which resources are referencing it. Resources can also be selected from this list by clicking on them. Sort Method No matter what the renderer is, the order that graphicals are drawn will almost always be important. In a 3D game, depth tests can be used instead of any sorting. In a 2D game, where every graphical shares the same z coordinate the player should be drawn after the background. In some cases like this, usual Z-based sorting methods wont work. On each RenderGroup, there's a GraphicalSortMethod drop-down menu property that defines how graphicals in that RenderGroup are sorted. Below are all the sorting methods and what they do: Sort Method Description None No sorting is done GraphicalSortValue Graphicals are sorted by their GroupSortValue BackToFrontView Graphicals are sorted back to front on the View space Z axis BackToFrontZ Graphicals are sorted back to front on the World space Z axis FrontToBackView Graphicals are sorted front to back on the View space Z axis FrontToBackZ Graphicals are sorted front to back on the World space Z axis SortEvent Sorting is done by a value handled in the SortEvent Creating RenderGroups To create a RenderGroup, use Command : Add or the Add button button. From the resource list, select RenderGroup > DefaultRenderGroup: Related Materials Manual Renderer Deferred and Forward Renderer Reference rendergroup"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/sprites.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/sprites.html",
    "title": "Base Sprite | ZilchEngine",
    "keywords": "Sprites are 2-Dimensional images that can used for several different reasons in a video game. If the game is 2D itself, there's a high chance that the majority or even all of the artwork will be made using Sprites rather than 3D models. Even in a 3D game Sprites are often used for images along flat surfaces or can be \"billboarded\" so that the normals are always facing the camera to create a low cost image where detail is not really needed. Common uses for Sprites include: Character animations for 2D games Creating simple images or animations to be put onto flat surfaces in 3D games Putting simple text into a scene in either 2D or 3D games, especially where the text needs to be changed in game Base Sprite The base class for all sprites. Area Component Setting the right size for your sprite instance Editing Sprite Sources and Animations Sprite Source Editor Sprite Importer Sprite Types Sprite SpriteText"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/sprites/area.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/sprites/area.html",
    "title": "Nine-Slicing Sprites | ZilchEngine",
    "keywords": "The Area Component is a very powerful tool when working with Sprites or SpriteTexts, allowing for the manipulation of sizes without losing visual acuity. It is able to work in conjunction with the SpriteSourceEditor in order to define the Area that the Sprite or SpriteText cover. Nine-Slicing Sprites Often when scaling Sprites (particularly UI sprites) the edges of the sprite will be stretched causing undesirable results as can be seen here: By adding an Area Component instead, the Sprite can be enlarged without having the issues of blurry and stretched edges. Changing the SpriteFill enum option found in the SpriteSourceEditor to NineSlice and then changing the Left , Right , Top , and Bottom options that come after it changes the borders the Sprite uses to Stretch. It then stretches based on this format instead: By using these options instead of simply using Scale , Sprites can be increased in size while still being clear visually. Tiling Sprites Similar to using the NineSlice option, any Sprite can use the Area in order to tile itself and repeatedly copy itself when stretched. Adjusting the Scale of a Sprite like this isn't the solution. Instead attach the Area Component and change the SpriteFill enum option in the SpriteSourceEditor to Tiled. This will allow the Area component to properly adjust and repeat the image as Size is increased beyond the original scale of the SpriteSource. Organizing Text By utilizing the Area Component alongside the SpriteText componet, it becomes possible to gain a large amount of control over how the SpriteText is displayed. Adding the Area Component will give the ability to define the area the text is displayed in, while retaining the alignment set in the SpriteText component. It also will use word wrapping to make sure no text spills outside of the defined area. Related Materials Manual Pages sprite spritetext spritesourceeditor Reference Pages Area Sprite SpriteText"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/sprites/basesprite.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/sprites/basesprite.html",
    "title": "Using the Color Picker | ZilchEngine",
    "keywords": "While not being a class that is directly accessed by the User, both the Sprite class and the SpriteText class inherit directly from the BaseSprite class, making it an important class on its own. Any of the Properties of the BaseSprite class can be directly used by either Sprites or SpriteText, changing many of the visual aspects of the Object. Using the Color Picker The base color of a Sprite can be changed in several different methods: Entering the Hex Code of the desired color into the Color Picker. For example, FF0000 for Red. Click and Drag the Eye Dropper tool onto the desired color on screen. By setting the VertexColor property to a Real4 within a NadaScript. Choosing the desired color in the Color Picker either in the gradient window or by directly setting either the RGBA or HSV values. (NOTE)The Strength of the Eye Dropper: Using the Eye Dropper tool, it's possible to take colors from any image that is on the computer screen. For example, by having an image of a painting open, it becomes possible to take the colors used for the painting and make the same color palette. (NOTE)Nadascript vs Editor Differences: You'll notice when using the Color Picker tool in Editor the RGB values go between 0 and 255, however when changing the color through a NadaScript the Color Property takes a Real4 with the parameters of (R, G, B, A) that are between 0 and 1. You can get these values by dividing the RGB values by 255; for example, a purple color with an RGB of (255, 0, 185) and Alpha of 1 would have a Real4 of (1.0, 0.0, 0.73, 1). As you can see, there are several parameters that can be changed using the Color Picker: (H)ue: The base color of the Sprite object, ranging between 0 and 360 (S)aturation: How deep the base color is, ranging from 0 to 100 (V)alue: How bright the color is, ranging from 0 to 100 (R)ed: Between 0 and 255 (B)lue: Between 0 and 255 (G)reen: Between 0 and 255 (A)lpha: Transparency, ranging between 0 and 1 HDR: High Dynamic Range, which allows for the Sprite to show a higher luminosity value than normal #: Hex Code of the current color Depending on the current parameter chosen the Color Picker will change how it looks, however two things will always remain constant: The Parameter Bar will always adjust the currently selected parameter between 0 at the bottom, and that parameters maximum value at the top The Alpha Bar will always adjust the Alpha value, from 0 at the bottom to 1 at the top Using these the color can be changed to any shade needed. Alternately if either the HSV or RGB values are known, they can also simply be typed in. Alpha Blending When using alpha blending, a renderpass must be performed with the appropriate blendsettings set. The DeferredRenderer performs an linearly interpolating blend by default using the AlphaBlend resource RenderGroup. Since the AlphaSprite resource Material is already in AlphaBlend resource, setting the alpha value of the VertexColor is sufficient in making transparent sprites. Additive blending is also available through the alternative AdditiveBlend resource RenderGroup. Alpha Blending(left) vs. Additive Blending(right) RenderGroups for Sprites RenderGroup Equation Effect AlphaBlend resource Color = Lerp(Source, Destination, Alpha) Linear Interpolation between sprite and image AdditiveBlend resource Color = Source*Alpha + Destination Adding the sprite to the image Related Materials Manual {icon university}[[Sprite spritetext DeferredRenderer RenderGroup Material Code Reference Sprite BaseSprite Code Reference"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/sprites/sprite.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/sprites/sprite.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "The Sprite component is used to add and control two-dimensional artwork on a Cog. A Sprite can be used for many things from a simple poster on a three-dimensional wall to all the visual elements of a 2D game. The Sprite Component can be added to any game object with a Transform component. (NOTE)Recommended Reading This section only covers the properties that are specific to Sprites, and doesn't cover the properties shared by the BaseSprite. Common Uses Characters and other artwork in a two dimensional project Placing 2D pictures into a 3D landscape 2D animations Using Sprites Creating Sprites Sprites can be made in one of two ways. Typically they will be made by using Command : CreateSprite ; however, the Sprite component can also be added to any game object. The actual image is defined by the SpriteSource resource property, and all other properties control how the sprite is displayed: Sprite Component UI Adding a SpriteSource NOTE: Zilch Engine only allows the importing of .PNG type images. It is possible to add SpriteSources of your own as well. By simply grabbing the file on your computer and dragging it into the Editor window, Zilch Engine will import the chosen asset. Alternatively, one can invoke the Command : Add and select SpriteSource > IMPORT SPRITESOURCE: Adding a SpriteSource A window will open where the user may select the image or images to import, keeping the saved Resolution and Size. Once imported, these files can then be used to create single frame images or multi-frame animations using the Sprite Importer. Changing SpriteSources After importing one's images, the next step is to change the SpriteSource resource Property on the Sprite Component to the resource created by the imported image. This is done by clicking on the current SpriteSource and finding the imported image in the drop-down menu that opens. Changing SpriteSources Flipping Sprite Orientation A quick and efficient way to change the sprite orientation is to use some combination of FlipX checkBox and FlipY checkBox variables. Flipping Sprite Orientation Sprites As Animations To use Sprites as animations rather than still images, please refer to Sprite Source Editor. Related Materials Manual Pages Base Sprite SpriteLayers and SpriteLayerOrder Sprite Source Editor Reference Pages SpriteSource Sprite Event BaseSprite"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/sprites/spriteimporter.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/sprites/spriteimporter.html",
    "title": "Using the Sprite Importer | ZilchEngine",
    "keywords": "(NOTE)Recommended Reading This page includes topics one might not have addressed yet. To learn about or review these topics, the following list provides the links to their respective Manual or Tutorial pages: Sprite Source Editor Using the Sprite Importer By taking a SpriteSource that has multiple frames and opening it in the Sprite Source Editor, it is possible to turn it into a moving animation. The first step is to open a SpriteSource in the Sprite Source Editor, then click on Convert To Animation. Sprite sheet in Sprite Source Editor While a majority of the information is the same as that found in the Sprite Source Editor, there are a few very important differences highlighted here: Sprite Source Editor Properties Sprite Importer UI Overview Name : The name of the output animation/sprites. FrameWidth : Uniform width of each sprite frame. FrameHeight : Uniform height of each sprite frame. FramesPerRow : Total image width divided by FrameWidth (not accounting for offset and spacing) NumberOfRows : Total image height divided by FrameHeight (not accounting for offset and spacing) OffsetX : Horizontal frame grid offset. OffsetY : Vertical frame grid offset. SpacingX : Horizontal space between frames. SpacingY : Vertical space between frames. FrameRate : Number of frames to display in one second. PixelsPerUnit : Number of pixels in the texture that will fit in one unit length in the GameSession's world space. Smoothing: The method of sampling used. Nearest: looks more discrete, or 'pixelated' Linear: pixels are blurred together CreatePalette checkBox: Creates a TilePalette with the {Add Frames as Spritesaction. [Origin](../../../../code_reference/enum_reference.md#spriteorigin): The point of the given frame that is(0,0,0)` in object space. Custom: choose your own origin Center: the middle of the frame UpperLeft: the top left of the image BottomLeft: the bottom left of the frame BottomCenter: the bottom center of the frame PreviewAnimate checkBox: Toggle viewing the animation. PreviewFrame : Set the previewed animation frame. UserAlphaColorKey checkBox: Toggle whether or not to convert the alpha of AlphaColor to 0. AlphaColor : The color to be transparent if UserAlphaColorKey checkBox is true. FrameCount : The number of frames that will be output. Clear Frames: Unselect all frames. Add Frames as Sprites: Add each frame as a new sprite, where the name is appended with the frame index for each new sprite. Add and Close: Perform Add and Continue, then Close button. Add and Continue: Create a new animated SpriteSource from the selected frames. Close button: Close the Sprite Source Editor. Frame Cell Sizes When parsing images in a spritesheet, it's standard to have every frame of a set of animations alligned to a 2D grid. The red grid in the Sprite Source Editor shows how the sprite sheet is subdivided into frames. The size of each frame is controlled by one of two pairs of options: FrameWidth and FrameHeight , or FramesPerRow and NumberOfRows . If the width and the height of each frame are known, then by putting that into FrameWidth and FrameHeight it will calculate how many Rows to break the original image into as well as how many Frames are in each Row. Likewise by setting the NumberOfRows and FramesPerRow it will calculate what the width and height of each frame should be. Frame Cell Offsetting OffsetX , OffsetY , SpacingX and SpacingY are used to control the offset of the frame cells into the spritesheet. OffsetX and OffsetY will move the starting point of the first frame forward, which will also push every other frame forward by the same amount. SpacingX and SpacingY do not effect the first Frame or Row, but rather adds a space in between each instead. When changing the frame cell offsets, NumberOfRows and FramesPerRow will be modified such that the number of frames cells is maximized, and so that no frame cell reaches outside the bounds of the sprite sheet. Choosing Frames for Animations At this point, if the animation is playing properly, it's simply a matter of clicking either Add and Close or Add and Continue to add the animations as SpriteSources. Add Frames as Sprites will add each individual frame as its own SpriteSource, and Close button will close the window and discard all work done to the SpriteSource. This assumes, however, that all cells within the grid are apart of the animation. Here's an example where this isn't the case: Sprite sheet with all frames selected by default The SpriteSource uses the top row for one animation while the bottom row contains separate sprite frames. Animation with all frames The second row contains frames that are not part of the animation contained in the first row; therefore, they should be ommited from the animation. To do this, every frame in the animation needs to explicitly be selected with the mouse. Sprite sheet selecting all relevant frames (WARNING)Mouse Selected Frame Order: The default frames are indexed from left to right, and top to bottom. When selecting frames explicitly with the mouse, the order of frames in the animation is the order that the frames are clicked. The index of each frame is also denoted by an integer in the top left of each cell in the sprite sheet. Animation without blank frame If your SpriteSource doesn't have a blank background, it's possible to use the Sprite Importer to erase the background color. Simply set AlphaColor to the color that needs to be erased (this is the perfect application for the EyeDropper tool), and set UseAlphaColorKey checkBox to true. On importing the Sprite, the color chosen will be erased. Related Materials Manual Sprite Source Editor Sprite Code Reference SpriteSource Sprite Smoothing Origin"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/sprites/spritesourceeditor.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/sprites/spritesourceeditor.html",
    "title": "Using the Sprite Source Editor | ZilchEngine",
    "keywords": "(NOTE)Recommended Reading This page includes topics one might not have addressed yet. To learn about or review these topics, the following list provides the links to their respective Manual or Tutorial pages: Adding Textures and Sprites Frequently, when a SpriteSource has been imported into Zilch, it still needs some minor modifications; this is where the Sprite Source Editor comes into play. This can be used not only to make changes to the SpriteSource, but also to cut a SpriteSource into multiple Sprites or animate a Multi-Frame Sprite. Using the Sprite Source Editor Once the SpriteSource has been imported, the Sprite Source Editor can be opened by going into the Library tab and double clicking on the SpriteSource that needs to be edited. It can also be opened by clicking on the small grey arrow next to the name=SpriteSource, icon=picture-o Property, as seen below on the Sprite Component. Edit SpriteSource Arrow Sprite Source Editor window Sprite Source Editor UI Overview SpriteName : The name of the SpriteSource. Origin: The point of the given frame that is (0,0,0) in object space. Custom: choose your own origin Center: the middle of the frame UpperLeft: the top left of the image BottomLeft: the bottom left of the frame BottomCenter: the bottom center of the frame OriginX : The origin's x value when Origin drop-down menu is Custom, where 0 is the far left OriginY : The origin's y value when Origin drop-down menu is Custom, where 0 is the very top Looping checkBox: Toggle whether the sprite animation should loop (if it is an animation) Sprite Sampling: The method of sampling used. Nearest: looks more discrete, or 'pixelated' Linear: pixels are blurred together FrameRate : Number of frames to display in one second. PixelsPerUnit : Number of pixels in the texture that will fit in one unit length in the GameSession's world space. SpriteFill: The method of filling the sprite into a given Area Stretch: The sprites texture is stretched to fit the area component of a cog. NineSlice: The sprite texture is stretched, but only within the nine-sliced middle region. Tiled: The sprite texture is tiled evenly across the area component of a cog. Left : pixel offset from the left marking the unstretchable left region, if SpriteFill drop-down menu is NineSlice. Right : pixel offset from the right marking the unstretchable right region, if SpriteFill drop-down menu is NineSlice. Top : pixel offset from the top marking the unstretchable top region, if SpriteFill drop-down menu is NineSlice. Bottom : pixel offset from the bottom marking the unstretchable bottom region, if SpriteFill drop-down menu is NineSlice. CurrentFrame : Set the previewed animation frame. PreviewAnimation checkBox: Toggle viewing the animation. Smoothing / Sampling When displaying a 2D image in a 3D environment, the step where a texel is accessed from the image is known as Smoothing drop-down menu, or sampling. More specifically, a point in 3D space is mapped into texture space to get the right color to place on the screen/texture buffer. When the output color is the color of the texel we found, this is known as the Nearest method because only the nearest texel color is used. While initially it might make sence to always access textures in this way, there are bound to be poor quality results. The poor quality comes from mismatches between the sprite's texels and the screen's texels. T Near and Far sprites displaying artifacts of Nearest blending From just this one generic example, it becomes clear that there needs to be a better way of sampling textures. Instead of taking just one texel, we will take a weight of texels in the proximity of the single mapped texel. Linear sampling is a method that uses weights to retain details, but at the cost of a blurrier image. Near and Far sprites using Linear blending When choosing a blending method, remember that Linear blending will retain detail at far distances and small angles, but the image will look blurry. Setting the Origin The Origin drop-down menu property will place whichever point on the Sprite that is chosen at the coordinates chosen in the transform Component. It is also possible to use OriginX and OriginY to set the origin in a specific spot, as opposed to one of the four preset options. All of the Sprites below, for example, have had their Origins changed while the position of their Game Objects are represented by the white Sprites. (NOTE)The Origin Property The origin of any SpriteSource can be changed by adjusting the OriginX and OriginY properties, but only if the Origin drop-down menu property is set to Custom. If it is set to any of the preset options (Center, UpperLeft, BottomLeft or BottomCenter) then the Zilch Engine will calculate the OriginX and OriginY to set the origin in the selected location. Related Materials Manual Adding Textures and Sprites Sprite Importer BaseSprite Sprite Area Reference SpriteSource Sprite transform Origin Sprite Sampling SpriteFill"
  },
  "docs/zilch_editor_documentation/zilchmanual/graphics/sprites/spritetext.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/graphics/sprites/spritetext.html",
    "title": "Common Uses | ZilchEngine",
    "keywords": "(NOTE)Recommended Reading This section covers topics that may not have been addressed yet. To learn or review those topics, please see: Base Sprite spritetext is a useful component for quickly adding text into a project that allows the user to easily modify the properties of the text, such as the font, size, and runtime output. As with sprite, SpriteText can be added to any existing Game Object. Common Uses Scores, timers, and other HUD texts Title, menu and button text Using SpriteText Creating SpriteText SpriteText can be made in different two ways: using the Command : CreateSpriteText or adding the SpriteText Component to any existing Game Object. The actual font is defined by the Font resource property, and all other properties control how the font is displayed: The only differences in the objects are the values of a few properties: SpriteText Component Adding new Fonts Importing and accessing different Font resource resources is arguably the most important thing to understand regarding SpriteText. Luckily, Zilch Engine makes this very simple, allowing the user to drag and drop the font into the Editor window. Alternatively, the user can use either Command : Add or click on the Add button button and select Font > IMPORT FONT: Resource Add Button Adding a Font This will open a new file explorer window where the user may select the Font or Fonts to import. Once a Font is imported into Zilch, simply select the Font resource property on the SpriteText component and choose the desired Font. Selecting Multiple Fonts NOTE: Zilch accepts both OpenType Font (OTF) and TrueType Font (TTF). Changing the Text Typing the desired text into the Text property and changing the FontSize will adjust the text on screen, but that's also a bare minimum of what SpriteText is able to do. For example, by adjusting the PixelsPerUnit property, it becomes possible to create different sized Fonts without losing any visual clarity. Related Materials Manual Pages BaseSprite TextBlock Reference Pages SpriteText Font Camera Event"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch.html",
    "title": "Variables and Types | ZilchEngine",
    "keywords": "This guide is meant for those who are already familiar with another programming language and Object Orientation Programming principles. Its main purpose is to help orient new users to its syntactic structure. As this language is made to be embedded in C++, the differences between Nada and C++ will be highlighted, although users of ActionScript 3.0 may find it has a familiar syntax. Variables and Types variables_and_data_types.md strings.md Enums Flags Get-Sets Property Delegates Swizzle Containers Arrays HashMap Operators Comparison Operators boolean_operators.md Control Structures Conditionals Looping Functions Objects Classes and Structs Inheritance Casting Delegates Reflection Memory Memory Management Construct By-Value Vs By-Ref (Local Vs New) Misc Attributes Reference Operators Precedence Chart Keywords nada_base_types"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/arrays.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/arrays.html",
    "title": "Array Access | ZilchEngine",
    "keywords": "Array is a templated Nada type used to represent an ordered list. An array is a container class: it contains other objects. The type of object it contains is specified between square brackets when the array is declared: var recentPositions = Array[Real3](); var currentTargets = Array[Cog](); var inputBuffer = Array[Array[Boolean]](); When an array is created, by default, it has no elements, but its initial size can be specified, and, optionally, the initial value of each element can be provided as well: var emptyArray = Array[Integer](); var eightDefaultIntegers = Array[Integer](8); var eightFives = Array[Integer](8, 5); Console.WriteLine(emptyArray); Console.WriteLine(eightDefaultIntegers); Console.WriteLine(eightFives); {} {0, 0, 0, 0, 0, 0, 0, 0} {5, 5, 5, 5, 5, 5, 5, 5} NOTE: When specifying the initial value for an array's elements in this manner, take note that one such element is constructed, and then it is duplicated as necessary to fill the array. If the type stored in the array is a value type, this will result in the construction of additional elements, but if it is a reference type, then each additional element will be a by-reference copy of the first. This may lead to unexpected behavior when modifying the array's contents later. If explicit copies of a reference type object are desired, they should be created and added after construction. Additionally, an array can be initialized with an initializer list: var a = Array[String]() { \"abc\", \"def\", \"ghi\", \"jkl\" }; Console.WriteLine(a); {abc, def, ghi, jkl} Array Access Array elements can be accessed for reading or writing using the indexing operator, []. Array indexing in Nada is zilch-based (the very first element in an array has an index of 0): var words = Array[String]() { \"the\", // element 0 \"quick\", // element 1 \"brown\", // element 2 \"fox\", // element 3 }; var chosenWord = words[1]; // reading element 1 Console.WriteLine(chosenWord); words[2] = \"polka-dotted\"; // writing element 2 Console.WriteLine(words); quick {the, quick, polka-dotted, fox} Attempting to access a negative index or an index that is greater than or equal to the array's Count will throw a Nada exception. Adding to and Removing from Arrays Nada arrays are //dynamic//: that is, the number of elements in an array is not fixed, so elements can be added or removed after the array is created. Adding The most basic way to add an element to an array is with the Add method, which puts the element at the end of the array: var greetings = Array[String]() { \"hello\", \"bonjour\", \"yo\", }; Console.WriteLine(greetings); greetings.Add(\"howdy\"); Console.WriteLine(greetings); {hello, bonjour, yo} {hello, bonjour, yo, howdy} The Push method is functionally identical to Add for arrays, and they may be used interchangeably. Adding to the end is generally the fastest way of adding to an array, but it is possible to insert an element at any valid position within an array via the Insert method: var digitsOfE = Array[Integer]() { 2, 7, 1, 2, 8 }; Console.WriteLine(digitsOfE); digitsOfE.Insert(3, 8); // adds an 8 so that its new index is 3 Console.WriteLine(digitsOfE); {2, 7, 1, 2, 8} {2, 7, 1, 8, 2, 8} NOTE: Insert is less efficient than Add because it requires all the elements following the given index to be shifted toward the back of the array to make room for the new element. If the proper position of a new element is at the end of the array, or if the order of the elements is irrelevant, Add should generally be used instead of Insert. Removing The most basic way to remove an element from an array is with the Pop method, which shrinks the array by one from the end: var taskList = Array[String]() { \"make the game fun\", \"UI overhaul\", \"create placeholder SFX\", \"vacuum the break room\", }; Console.WriteLine(taskList); taskList.Pop(); Console.WriteLine(taskList); {make the game fun, UI overhaul, create placeholder SFX, vacuum the break room} {make the game fun, UI overhaul, create placeholder SFX} As with adding, removing from the end is fast, but it is also possible to remove an element at an arbitrary valid index via the RemoveAt and RemoveSwap methods. RemoveAt removes the element that is found at the given index, and preserves the order of the remaining elements: var commonLetters = Array[String]() { \"e\", // 0 \"t\", // 1 \"a\", // 2 \"x\", // 3 (this one doesn't belong) \"o\", // 4 \"i\", // 5 \"n\", // 6 }; Console.WriteLine(commonLetters); commonLetters.RemoveAt(3); Console.WriteLine(commonLetters); {e, t, a, x, o, i, n} {e, t, a, o, i, n} NOTE: RemoveAt is less efficient than Pop because it causes all the elements following the given index to be shifted toward the front of the array to close the gap following the removal. If the element to be removed is the last element in the array, Pop should be used instead of RemoveAt. Alternatively, there is another option if the order of elements is irrelevant. RemoveSwap first swaps the element at the given index with the last element in the array, and then Pops the element from the end. The order of the remaining elements is thus not preserved: var animals = Array[String]() { \"tardigrade\", // 0 \"aardwolf\", // 1 \"pile of dirt\", // 2 (this one doesn't belong) \"sponge\", // 3 \"plesiosaur\", // 4 }; Console.WriteLine(animals); animals.RemoveSwap(2); Console.WriteLine(animals); {tardigrade, aardwolf, pile of dirt, sponge, plesiosaur} {tardigrade, aardwolf, plesiosaur, sponge} Though RemoveSwap does not preserve element order, it is essentially just as efficient as Pop. It is also possible to remove a known element with an unknown index. RemoveFirst finds an array's first element that matches the given value and then removes it, preserving the order of the remaining elements: var data = Array[Integer]() { 0, 4, 1, -1, // (this one doesn't belong) 2, }; Console.WriteLine(data); data.RemoveFirst(-1); Console.WriteLine(data); {0, -1, 4, 1, 2} {0, 4, 1, 2} To find and remove all elements that match a given value, use the RemoveAll method: var waterfowl = Array[String]() { \"duck\", \"duck\", \"duck\", \"duck\", \"goose\", }; Console.WriteLine(waterfowl); waterfowl.RemoveAll(\"duck\"); Console.WriteLine(waterfowl); {duck, duck, duck, duck, goose} {goose} NOTE: Both RemoveFirst and RemoveAll require searching the array and comparing each element with the given value, which makes them even slower than RemoveAt. In certain situations, such as a deeply nested loop, or when element comparison is slow, this performance difference may be significant. Finally, to remove all of the elements from an array, use the Clear method: var inventory = Array[String]() { \"car keys\", \"cell phone\", \"screwdriver\", \"leaflet\", \"crumpled note\", }; Console.WriteLine(inventory); inventory.Clear(); Console.WriteLine(inventory); {car keys, cell phone, screwdriver, leaflet, crumpled note} {} NOTE: The act of removing an item from an array does not itself delete the item. If one or more external references to an element exist, then that element will persist if it is removed from an array: var arrayContainer = Array[Array[Real]](); var array0 = Array[Real]() { 1, 2, 3 }; var array1 = Array[Real]() { 1.61803, 2.71828, 3.14159 }; arrayContainer.Add(array0); arrayContainer.Add(array1); Console.WriteLine(\"arrayContainer before Clear: `arrayContainer`\"); arrayContainer.Clear(); Console.WriteLine(\"arrayContainer after Clear: `arrayContainer`\"); Console.WriteLine(\"array0 after Clear: `array0`\"); Console.WriteLine(\"array1 after Clear: `array1`\"); arrayContainer before Clear: \\{\\{1, 2, 3}, {1.61803, 2.71828, 3.14159\\}\\} arrayContainer after Clear: {} array0 after Clear: {1, 2, 3} array1 after Clear: {1.61803, 2.71828, 3.14159} Reference Type In Nada, Array is a //reference type//. Be aware of this when making copies. When setting one array variable to equal another existing array using the assignment operator, =, a copy is not constructed; rather, the first just ends up pointing to the second. In such a case, modifying the array through one of the two references will appear to modify both, because they are in fact one array. To create a copy, the Copy method should be used: var firstExample = Array[Integer]() { 0, 1, 2, 3, 4, 5, 6, 7 }; Console.WriteLine(\"firstExample, before copy and clear: `firstExample`\"); var naiveCopy = firstExample; // this doesn't actually make a copy, it just points the variable // \"naiveCopy\" to the same array that \"firstExample\" points to naiveCopy.Clear(); // thus, this line clears the original array Console.WriteLine(\"firstExample, after copy and clear: `firstExample`\"); var secondExample = Array[Integer]() { 7, 6, 5, 4, 3, 2, 1, 0 }; Console.WriteLine(\"secondExample, before copy and clear: `secondExample`\"); var properCopy = secondExample.Copy(); // the Copy method should be used to clone an array properCopy.Clear(); Console.WriteLine(\"secondExample, after copy and clear: `secondExample`\"); firstExample, before copy and clear: {0, 1, 2, 3, 4, 5, 6, 7} firstExample, after copy and clear: {} secondExample, before copy and clear: {7, 6, 5, 4, 3, 2, 1, 0} secondExample, after copy and clear: {7, 6, 5, 4, 3, 2, 1, 0} Looping Over Arrays As arrays are ordered sequences of objects, they lend themselves naturally to use in loops: in each loop iteration, the next element of the array can be accessed, modified, copied, etc. For Loops The most basic way to loop over an array is by using a for loop. This takes advantage of the fact that an array contains its Count, or number of elements, as a property: var numbers = Array[Integer]() { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, }; Console.WriteLine(\"Squares:\"); for (var i = 0; i < numbers.Count; ++i) { var currentNumber = numbers[i]; Console.WriteLine(currentNumber * currentNumber); } Squares: 0 1 4 9 16 25 36 49 64 81 For Each Loops Another way to iterate through an array is to use a foreach loop: var numbers = Array[Integer]() { 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, }; Console.WriteLine(\"Cubes:\"); foreach (var number in numbers) { Console.WriteLine(number * number * number); } Cubes: 0 1 8 27 64 125 216 343 512 729 Array Size A Nada array keeps track of two different size-related properties: Count and Capacity. When an array is initialized, it is allotted just enough memory to store the given number of elements. If an element is added when it doesn't have enough allocated space for another one, the array is automatically expanded so that it can fit more elements. An array's Count is the number of elements that have been added to it (or were placed there on initialization); its Capacity is the number of elements that could possibly fit in it before it needs to grow again: var array = Array[Integer](); for (var i = 0; i < 10; ++i) { Console.WriteLine(\"Count: `array.Count` | Capacity: `array.Capacity`\"); array.Add(i); } Console.WriteLine(\"Count: `array.Count` | Capacity: `array.Capacity`\"); Count: 0 | Capacity: 0 Count: 1 | Capacity: 2 Count: 2 | Capacity: 2 Count: 3 | Capacity: 3 Count: 4 | Capacity: 4 Count: 5 | Capacity: 6 Count: 6 | Capacity: 6 Count: 7 | Capacity: 9 Count: 8 | Capacity: 9 Count: 9 | Capacity: 9 Count: 10 | Capacity: 13 NOTE: If an element can be added to an array without it having to grow, it can be done very quickly, but expanding an array is potentially costly. In certain situations, such as a deeply nested loop, it may be beneficial to consider an array's Capacity before adding to it. Likewise, if the desired maximum size of an array is known ahead of time, space can be pre-allocated without adding any elements using the Reserve method. Sorting Arrays Nada arrays may be sorted using the Sort method. Sorting an array may put it in, say, increasing or decreasing order, in the case of an array of Integer or another numeric type, or in alphabetical order, in the case of a String array, or some other order via some more abstract or complex set of criteria. Sort sorts an array using the given comparison function. In many cases, this is something the user creates, though some types, such as String, provide static functions that can be used with the Sort method: var strings = Array[String](); strings.Add(\"hi\"); strings.Add(\"greetings\"); strings.Add(\"nice to see you\"); strings.Add(\"good morning\"); Console.WriteLine(strings); strings.Sort(String.Compare); // the Compare function is passed as a delegate Console.WriteLine(strings); {hi, greetings, nice to see you, good morning} {good morning, greetings, hi, nice to see you} A user-created array comparison function should take as arguments two objects of the type stored in the array. It should compare them in some relevant manner and return either a Boolean or an Integer that tells the Sort function what to do with the two array elements: the Boolean should be true if first item should be sorted before the second, and false otherwise; the Integer should be negative if the first item should be sorted before the second, and nonnegative otherwise. Consider these two classes: one defining some data for an adventurer and some static functions that can be used to sort an array of Adventurers, and another containing an array of Adventurers and a method that returns a string representation of that array: class Adventurer { var Name : String; var HP : Integer; var Height : Real; // in meters [Static] function CompareNames(a : Adventurer, b : Adventurer) : Integer { return String.Compare(a.Name, b.Name); } [Static] function CompareHPsAscending(a : Adventurer, b : Adventurer) : Integer { if (a.HP < b.HP) return -1; if (a.HP == b.HP) return 0; return 1; } [Static] function CompareHeightsAscending(a : Adventurer, b : Adventurer) : Integer { if (a.Height < b.Height) return -1; if (a.Height == b.Height) return 0; return 1; } [Static] function CompareNameLengthsThenAlpha(a : Adventurer, b : Adventurer) : Integer { var aNameLength = a.Name.ComputeRuneCount(); var bNameLength = b.Name.ComputeRuneCount(); if (aNameLength < bNameLength) return -1; if (aNameLength > bNameLength) return 1; return Adventurer.CompareNames(a, b); } } class Party { var Roster : Array[Adventurer] = Array[Adventurer](); function ToString() : String { var sb = StringBuilder(); sb.Write(\"{ \"); for (var i = 0; i < this.Roster.Count; ++i) { var member = this.Roster[i]; sb.Write(member.Name); if (i < this.Roster.LastIndex) sb.Write(\", \"); } sb.Write(\" }\"); return sb.ToString(); } } These classes can be used to illustrate how to sort objects of custom classes: var party = Party() { Roster = Array[Adventurer]() { Adventurer() { Name = \"Trevor\", HP = 14, Height = 1.75 }, Adventurer() { Name = \"Nathan\", HP = 17, Height = 1.80 }, Adventurer() { Name = \"Joshua\", HP = 14, Height = 1.85 }, Adventurer() { Name = \"Josh\", HP = 17, Height = 1.68 }, Adventurer() { Name = \"Ryan\", HP = 25, Height = 1.83 }, Adventurer() { Name = \"Dane\", HP = 9, Height = 1.70 }, Adventurer() { Name = \"Andrea\", HP = 17, Height = 1.65 }, } }; Console.WriteLine(\"Default order: `party.ToString()`\"); party.Roster.Sort(Adventurer.CompareNames); Console.WriteLine(\"Alphabetical order: `party.ToString()`\"); party.Roster.Sort(Adventurer.CompareHPsAscending); Console.WriteLine(\"HP order, ascending: `party.ToString()`\"); party.Roster.Sort(Adventurer.CompareHeightsAscending); Console.WriteLine(\"Height order, ascending: `party.ToString()`\"); party.Roster.Sort(Adventurer.CompareNameLengthsThenAlpha); Console.WriteLine(\"Name lengths then alpha: `party.ToString()`\"); Default order: { Trevor, Nathan, Joshua, Josh, Ryan, Dane, Andrea } Alphabetical order: { Andrea, Dane, Josh, Joshua, Nathan, Ryan, Trevor } HP order, ascending: { Dane, Joshua, Trevor, Andrea, Josh, Nathan, Ryan } Height order, ascending: { Andrea, Josh, Dane, Trevor, Nathan, Ryan, Joshua } Name length then alpha: { Dane, Josh, Ryan, Andrea, Joshua, Nathan, Trevor } Note that the CompareNameLengthsThenAlpha function sorts Adventurers in ascending order of the lengths of their names, except where there is a tie, in which case it sorts in ascending alphabetical order instead. Array Properties All All converts the array into an ArrayRange. In Nada, Arrays can be implicitly cast to ArrayRanges, so it is typically not necessary to use this property. Count and Capacity Count and Capacity get the number of elements in the array, and its potential capacity to hold elements, respectively. They are discussed in detail above. LastIndex LastIndex gets the index of the last element in the array. It is always one less than Count (even when Count is 0). Array Methods Add, Push, and Insert The Add method expands an array so that the given element is the last item in it. The Push method is identical to Add, and exists only for legacy purposes. The Insert method expands an array so that the given element is at the given index in it. All of these methods are discussed in detail above. Pop, RemoveAt, RemoveSwap, RemoveFirst, RemoveAll, and Clear The Pop method removes the last item from an array. The RemoveAt method removes from an array the element found at the given index. The RemoveSwap method removes from an array the element found at the given index and swaps the last item in the array to that newly-vacated index. The RemoveFirst method removes from an array the first element that matches the given object. The RemoveAll method removes from an array every element that matches the given object. The Clear method removes all the elements from an array. All of these methods are discussed in detail above. Copy The Copy method returns a new array that is a copy of the original. This method should be used to create a clone of an array that is to be modified separately without affecting the original. Because Array is a reference type, this cannot be done merely with the assignment operator, as shown above. FindFirstIndex The FindFirstIndex method returns the index of the first occurrence in an array of a given object. This method compares value types by comparing their data, and it compares reference types by comparing their handles. If the given object is not found, it returns -1: var valueType0 = Integer2(1, 2); // Integer2 is a value type var valueType1 = Integer2(valueType0); // valueType1 is a data-wise copy of valueType0 var arrayOfValueType = Array[Integer2]() { valueType0 }; Console.WriteLine(arrayOfValueType.FindFirstIndex(valueType1)); // valueType1 is found because its data is identical to valueType0 var referenceType0 = Array[Integer]() { 0, 1, 1, 2, 3, 5, 8 }; // Array[Integer] is a reference type var referenceType1 = referenceType0.Copy(); // referenceType1 is a data-wise copy of referenceType0 var arrayOfReferenceType = Array[Array[Integer]]() { referenceType0 }; Console.WriteLine(arrayOfReferenceType.FindFirstIndex(referenceType1)); // referenceType1 is not found because its handle is not found in the array 0 -1 Get and Set The Get method returns the array element at the given index. The Set method writes the given object to the given index. These methods are called when the indexing operator, [], is used: var aStates = Array[String]() { \"alabama\", \"nebraska\", \"arizona\", \"kansas\" }; Console.WriteLine(aStates.Get(0)); Console.WriteLine(aStates[2]); // this is reading, so Get is called aStates.Set(1, \"alaska\"); aStates[3] = \"arkansas\"; // this is writing, so Set is called Console.WriteLine(aStates); alabama arizona {alabama, alaska, arizona, arkansas} Range The Range method returns an ArrayRange containing the specified range of elements, beginning with the given start index and including the given element count: var primes = Array[Integer]() { 2, 3, 5, 7, 11, 13, 17, 19, 23, 29, }; // etc. var primeSubset = primes.Range(4, 5); foreach (var prime in primeSubset) { Console.WriteLine(prime); } 11 13 17 19 23 Resize and Reserve The Resize method resizes an array so that its new Count is the given value. If the given count value is greater than the array's old Count, then new elements are constructed and added to the end of the array. This method can take an optional default value parameter, which is used to set the value of these new elements; if this is not specified, then the type default for the type stored in the array will be used instead: var iceCreamServings = Array[String]() { \"cookies 'n cream\", \"pistachio\", \"neapolitan\", }; Console.WriteLine(iceCreamServings); iceCreamServings.Resize(5, \"vanilla\"); Console.WriteLine(iceCreamServings); iceCreamServings.Resize(6); Console.WriteLine(iceCreamServings); {cookies 'n cream, pistachio, neapolitan} {cookies 'n cream, pistachio, neapolitan, vanilla, vanilla} {cookies 'n cream, pistachio, neapolitan, vanilla, vanilla, (null) String} If the given count value is less than the array's old Count, then enough elements will be removed from the end of the array to bring its Count to the new value: var cubes = Array[Integer]() { 0, 1, 8, 27, 64, 125, 216, 343, 512, 729, }; Console.WriteLine(cubes); cubes.Resize(4); Console.WriteLine(cubes); {0, 1, 8, 27, 64, 125, 216, 343, 512, 729} {0, 1, 8, 27} As with all cases of changing an array's size, if Resize raises an array's Count past its Capacity, more space is allocated to accommodate its new size. Since this can affect performance in certain situations, it may be beneficial to change an array's Capacity before any resizing is done. The Reserve method sets an array's Capacity to the given value, allocating more space as necessary. Sort The Sort method sorts an array using the given comparison function. Typically, this is something the user provides, though some types, such as String, provide static functions that can be used with the Sort method. Array sorting is discussed in depth above. Related Materials Manual Strings Classes and Structs Looping Code Reference Array Integer Real String"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/attributes.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/attributes.html",
    "title": "Using Attributes | ZilchEngine",
    "keywords": "Attributes are part of the Nada grammar allowing additional information to be associated with other Nada constructs, i.e. they may be applied to classes, fields, get-sets, and functions. While some attributes are inherent to the Nada programming language, the program embedding Nada may create and assign their own meaning to new attributes as appropriate for their scripting needs. This means that some attributes exist in Nada, the standalone language, while others are available in Nada due to the extensions made by the Zilch Engine in which it is embedded. Using Attributes In Nada, attributes can be assigned by annotating the affected construct with a capitalized name of the recognized attribute in square brackets above the definition: [Virtual] // Here we've added the attribute \"Virtual\" to the function Speak function Speak() : String { return \"...\"; } Existing Attributes The following are usable in the Zilch Engine: Attribute From High Concept [Static] Nada Makes construct static [Virtual] Nada Marks a construct as a polymorphic base [Override] Nada Marks a construct as overriding a base construct [Extension(typeid(OtherType))] Nada Appends construct to preexisting OtherType [Display] Zilch Allows construct to appear in Property Grid [Serialize] Zilch Allows construct value to be saved by Zilch [Property] Zilch Combines [Display] and [Serialize] [Dependency] Zilch Enables Zilch to enforce explicit dependencies [RunInEditor] Zilch Allows code to run in the editor [Tool] Zilch Can run in editor and accessible in Tools Window [Command] Zilch Can run in editor and accessible in Search Window [ComponentInterface] Zilch Defines a class as a generic interface for derived classes (IMPORTANT)Deprecation Warning: The [Editable] and [Serialized] attributes were #deprecated in release 1.1.0 and will be removed in the next major version of the engine. Use [Property] and [Serialize] for all engine versions 1.1.0 and newer. [Static] Static can be used on function, fields, and get-sets. These allow you to access fields, get-sets, and functions without first creating an instance of the class in your code. class Mathematics { [Static] var PI: Real{ get{return 3.14159292;}} [Static] function Circumference(radius : Real) : Real { return Mathematics.PI * radius * radius; } } Given the class above you can use its functionality by calling into the class's namespace: var myNewFavoriteNumber = Mathematics.PI + Mathematics.Circumference(2.0); Console.WriteLine(My new favorite number is: `myNewFavoriteNumber`\"); will result in My new favorite number is: 15.708 NOTE: While these attributes enable polymorphism, they are still in their infancy. Virtual is to be used with the base class field/get-set/function, while Override is for all the derived classes seeking to write over the base class's field/get-set/function. That said, mixing up [Virtual] and [Override] , or forgetting the use of the [Override] may still provide desired results. To promote forward compatibility, we highly encourage the correct, indicated usage. [Virtual] Virtual is used to give Base classes the ability to determine some functions as being able to be overridden by its derived classes. class Animal { [Virtual] function Speak() : String { return \"...\"; } } [Override] Override is used by a derived class to mark the intentional overriding of a base class's virtual function. class Dog : Animal { [Override] function Speak() : String { return \"Woof\"; } } [Extension(typeid(OtherType))] This allow you to add functionality to a preexisting class from inside another. Currently, you can only extend a class by adding get-sets and functions (i.e. you cannot add fields). If a function is being added to an existing class (Math, for example), the [Static] attribute should also be used: class MyClass : NadaComponent { [Extension(typeid(Math))][Static] function Circumference(radius : Real) : Real { return Mathematics.PI * radius * radius; } } Zilch works with Nada to offer these additional attributes: [Display] Allows you to set a field or get-set via the Property Grid in the editor. Because this doesn't save the settings, it is usually used in conjunction with either [RunInEditor] or [Serialize] . For example, changing class MyClass : NadaComponent { var MyVariable : Real; } to [Editiable] var MyVariable : Real; results in the the variable appearing in the Property Grid in Properties window: [Serialize] Allows a value to be saved by the Engine. This allows a field and get-sets to be saved with ObjectStore. When used with [Display] it allows the values to be saved from the Property Grid so that they may be loaded in an instance of the game. [Property] Property wraps the [Display] and [Serialize] attributes together into one. As implied by the use of [Display] and [Serialize], it works on fields and get-sets. Properties of certain types will result in unique set fields in the Property Grid. For example, class MyClass { [Property] var MyColor : Real4; [Property] var MyMaterial : Material; } results in [Dependency] Allows the programmer to make a dependency between components explicit. This allows users to determine the interrelatedness without having intimate knowledge of a component's inner workings. The Zilch Engine supports this by requiring dependencies to be added prior to attaching the component, preventing the removal of dependencies while the component is still attached, and safeguarding the order of initialization of components such that the dependencies will always be initialized first. The below sample demonstrates the declaration of a dependence upon another component: class SimpleOffset : NadaComponent { // Declaring that SimpleOffset depends upon Transform component. [Dependency] var Transform : Transform = null; function Initialize(init : CogInitializer) { // This declaration also physically adds that variable to our fields: // Since this.Transform contains the component we have a dependency // on, we can access it without going through the Owner. this.Transform.Translation += Real3(0,5,0); } } The [Dependency] attribute may also be used on get-sets. NOTE: Did you know? When working in the editor, the space the objects operate in is paused. This means that the LogicUpdate event will never fire, and that Actions on objects never get updated! In order to receive continuous events, the object should connect to UpdateFrame instead. [RunInEditor] When placed on a class derived from NadaComponent, it changes proxy objects into live objects upon being attached in the editor. This means that the object will run its code in the editor. When any scripting file is saved in the editor, all live objects (i.e. those with the RunInEditor component attached) will, by default, have their object destroyed, recreated, and its data reinitialized. IMPORTANT: Any code you choose to run via [RunInEditor] can result in editor instability. For instance, if you choose to loop through and destroy all the objects and save your game you may lose your ability to recover the lost objects, and have to recreate them by hand. Undo and Redo operations for RunInEditor components must be handled by the programmer! [Tool] Allows for a tool to be hooked into the Tools Window such that it shows up in the drop down menu, and can be used in the editor. When creating a new custom tool, a good starting point is generating the NadaScript with the Tool template chosen in the Add Window. [Command] Allows for a class to be hooked into the command system such that it shows up, and can be ran, from Zilch's Search Window. The following Paste provides a template for a custom Command that creates an object based on an archetype, allowing the user to make their own \"Create\" commands similar to CreateCube and CreateSphere: [Command(autoRegister:true)] class CreateArchetype : NadaComponent { // The archetype from which to create an object var ArchetypeToCreate : Archetype = Archetype.MyObject; // The position at which to create the object var Position : Real3 = Real3(0, 1, 0); function Initialize(init : CogInitializer) { Zilch.Connect(this.Owner, Events.CommandExecute, this.OnCommandExecute); } function OnCommandExecute(event : CommandEvent) { var selection = Zilch.Editor.Selection; selection.SelectOnly(this); selection.FinalSelectionChanged(); this.CreateObject(); } function CreateObject() { // Create the object in Editor space var editorSpace = Zilch.Editor.EditSpace; editorSpace.CreateAtPosition(this.ArchetypeToCreate, this.Position); } } [ComponentInterface] The ComponentInterface attribute allows the user to define a class as a generic interface for its derived types. One common example of this is collider, which acts as a component interface for all collider types, such as boxcollider, capsulecollider, and more. Defining an interface using this attribute allows the user to access the members of a derived class using the component name of the base class. var collisionGroup = this.Owner.BoxCollider.CollisionGroup; var collisionGroupAccessedByInterface = this.Owner.Collider.CollisionGroup; if(collisionGroup == collisionGroupAccessedByInterface) Console.WriteLine(\"These variables reference the same component\"); Using a component interface does not mean that the property and methods of a derived class need to be exactly the same as the base class. What would be the point? Using the Virtual and Override attributes, we can modify the interface of derived classes. [ComponentInterface] class AnimationDebugNode : NadaComponent { [Virtual] var Node : AnimationNode; function Initialize(init : CogInitializer) { } } class SelectiveDebugNode : AnimationDebugNode { [Override] var Node : SelectiveNode; } class DirectBlendDebugNode : AnimationDebugNode { [Override] var Node : DirectBlend; } class CrossBlendDebugNode : AnimationDebugNode { [Override] var Node : CrossBlend; } Parameters in Attributes Attributes can also take parameters; below is the template generated for creating a new Command by Zilch: [Command(autoRegister:true)] // This template file sets a parameter, autoRegister, to true. class MyNewCommand : NadaComponent { function Initialize(init : CogInitializer) { Zilch.Connect(this.Owner, Events.CommandExecute, this.OnCommandExecute); } function OnCommandExecute(event : CommandEvent) { Console.WriteLine(\"MyNewCommand Command Executed\"); } } At this time, only Extension, Tool, and Command attributes take parameters. Extension requires the type you are using to extend the attribute, as a parameter. Tool and Command have the optional parameter to automatically register the component with the engine. To manually register, you would add these components to an archetype and then add the Tool or Command editor tag via the Library Window, respectively. Registering manually gives you access to the archetype, making it possible to leverage component-based design in the construction of new Tools and Commands. Related Materials Manual inheritance variables_and_data_types wysiwyg"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/boolean_operators.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/boolean_operators.html",
    "title": "The Negation Operator ! | ZilchEngine",
    "keywords": "NOTE: It is highly suggested you read conditionals before this page, as the concepts of conditionals are used through out to demonstrate Boolean Operators. The boolean type has special operators that work with it. The Negation Operator ! The ! operator, called the negation operator, is typically the simplest of the boolean operators as it changes the value of its operand to true if it was false, and changes the value to false if it was true. var a = true; Console.WriteLine(\"a starts as `a`\"); a = !a; Console.WriteLine(\"a is negated and is now `a`\"); a = !a; Console.WriteLine(\"a is negated again and is now `a` again\"); a starts as true a is negated and is now false a is negated again and is now true again Comparison Operators All comparison operators take a left side and right side operand and evaluate to a boolean value. Equality == Often certain code should only run under specific conditions. The == operator, called the Equality operator, determines if the value of two operands are equalivalent and returns true or false. var a = true; var b = true; var c = false; Console.WriteLine(\"a is equal to b: `a == b`\"); Console.WriteLine(\"a is equal to c: `a == c`\"); Console.WriteLine(\"b is equal to c: `b == c`\"); Console.WriteLine(\"a, b, and c are equal: `a == b == c`\"); a is equal to b: true a is equal to c: false b is equal to c: false a, b, and c are equal: false While the Equality operator is not exclusively used with booleans it does always result in a boolean value. Equality == true true true true false false false true false false false true Inequality != The != operator, called the inequality operator, is the logical inverse of the equality operator return true if the operands are not the equal and false if they are. var a = true; var b = true; var c = false; Console.WriteLine(\"a is not equal to b: `a != b`\"); Console.WriteLine(\"a is not equal to c: `a != c`\"); Console.WriteLine(\"b is not equal to c: `b != c`\"); Console.WriteLine(\"a, b, and c are not equal: `a != b != c`\"); a is not equal to b: false a is not equal to c: true b is not equal to c: true a, b, and c are not equal: false Notice that a != b != c results in false. This is because == and != are evaluated left to right. So first a != b returns false as both variables have a value of true. Because a != b evaluates to false and c has a value of false a != b != c is reduced to false != c. The reduced form evaluates to false since both operands have a value of false. Inequality != true true false true false true false true false false false false Less Than & Greater Than < & > The < and > operators, called the less or greater then operators respectively, evaluate if one operand has a smaller/larger value than the other. var i = 0; var j = 1; var k = 0; Console.WriteLine(\"i is less than j: `i < j`\"); Console.WriteLine(\"i is less than k: `i < k`\"); Console.WriteLine(\"j is less than k: `j < k`\"); Console.WriteLine(\"i is greater than j: `i > j`\"); Console.WriteLine(\"i is greater than k: `i > k`\"); Console.WriteLine(\"j is greater than k: `j > k`\"); i is less than j: true i is less than k: false j is less than k: false i is greater than j: false i is greater than k: false j is greater than k: true Notice that i is not less or greater than k as 0 is not less or greater than 0. Less Than or Equal & Greater Than or Equal (<= & >=) The <= and >=, called the less than or equal to and greater than or equal to operators, determine if the value of the left operand is lesser than, greater than, or equal to the right operand. var i = 0; var j = 1; var k = 0; Console.WriteLine(\"i is less or equal to than j: `i <= j`\"); Console.WriteLine(\"i is less or equal to than k: `i <= k`\"); Console.WriteLine(\"j is less or equal to than k: `j <= k`\"); Console.WriteLine(\"i is greater than or equal to j: `i >= j`\"); Console.WriteLine(\"i is greater than or equal to k: `i >= k`\"); Console.WriteLine(\"j is greater than or equal to k: `j >= k`\"); i is less than or equal to j: true i is less than or equal to k: true j is less than or equal to k: false i is greater than or equal to j: false i is greater than or equal to k: true j is greater than or equal to k: true Logical Operators Logical operators take a left and a right side areguement, both of which must evaluate to boolean values, and evaluates them returning another boolean value. and && The && operator, called the and operator, takes two boolean values and evaluates them, returning true only if both operands evaluate to true. This can be very useful as often one may find that a condition in script may depend on two seperate factors. var i = true; var j = false; if(i) { if(j) { Console.WriteLine(\"Both i and j are true\"); } else { Console.WriteLine(\"Inner Else: Either i or j is false\"); } } else { Console.WriteLine(\"Outer Else: Either i or j is false\"); } Inner Else: Either i or j is false This can be simplified using the && operator to evaluate both i and j within the same if statement. var i = true; var j = false; if(i && j) { Console.WriteLine(\"Both i and j are true\"); } else { Console.WriteLine(\"Either i or j is false\"); } Either i or j is false The nested if version of the above code does allow information about whether it is i or j which is false to be gathered, but in many cases the which doesn't matter, just that one of them is false is enough. And && true true true true false false false true false false false false (NOTE)Short Circuiting the Right Side Operand: Since logical and is an operator which is resolved left to right is can always be assumed that the left operand will be evaluated to either true or false before the righthand operand is evaluated at all. This is important as if the first operand does not evaluate to true the operator will immeidiately evaluate to false short circuiting the right side an causing it to not resolve and evaluate the expression of the right side operand at all. A good usage example is when checking object validity before accessing members such as components. or || The || operator, called the or operator, takes two boolean values and evaluates them, returning true if either operands evaluates to true. var i = true; var j = false; if(i || j) { Console.WriteLine(\"Either i or j is true\"); } else { Console.WriteLine(\"Neither i or j is true\"); } Either i or j is true And || true true true true false true false true true false false false Related Materials Manual conditionals Code Reference boolean"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/casting.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/casting.html",
    "title": "Implicit and Explicit | ZilchEngine",
    "keywords": "Fundamentally, casting is converting from one type to another. As demonstrated in the code snippet below, a Function that takes a grade and returns pass/fail can be thought of as a conversion from a real to a boolean. function IsPassing(grade : Real) : Boolean { if(grade >= 70) return true; else return false; } The logic of that particular conversion is defined as a function and intended for a specific situation, but cast operations are more general-case and defined by Nada. Implicit and Explicit There are two types of casting, implicit and explicit. Implicit casting occurs during the assignment of a variable of one type, with a value of a different type. Implicit casting is a mechanism that Nada uses when a Variable of one type is set to data of another type. Explicit casting is a mechanic used by the user with the as keyword. Any cast that can happen implicitly can be done explicitly. WARNING: Even with explicit casting, there are still cast operations that are invalid and will trigger compile-time exceptions. var myReal : Real = 1.0; var myDoubleReal : DoubleReal = myReal; // implicit casting var myInteger : Integer = myReal as Integer; // explicit casting In the example above, myDoubleReal is being set to myReal, which invokes an implicit cast from real to doublereal. When myReal as Integer is evaluated, explicit casting is invoked to convert a real to an integer. The format for explicit casting is <value> as <new type>. NOTE: Explicit casting should only be used when one is aware of all of the nuances of the cast. Casting Between Numeric and Boolean Types The following base data types are considerered Numeric and Boolean: | integer | | doubleinteger | | real | | doublereal | | boolean | All cast operations using only these types are valid, meaning either explicit or implicit. The code snippit below demonstates implicit casting between numeric types. var myInteger : Integer = 1; var myDoubleInteger : DoubleInteger = myInteger; var myReal : Real = myInteger; var myDoubleReal1 : DoubleReal = myInteger; var myDoubleReal2 : DoubleReal = myDoubleInteger; var myDoubleReal3 : DoubleReal = myReal; Notice that implicit casting is allowed when converting to a numeric set, from a smaller data size to a larger one. The value of myInteger can be implicitly casted to a doubleinteger, which holds twice the number of bits as an integer. The value of myInteger can also be implicitly casted to a real. Real values can hold whole numbers and a decimal portion, whereas integers can only be whole numbers. (NOTE)From a Mathematics Perspective The integer set is a subset of the real set. For more information on mathematical sets, visit the Wikipedia Set (Mathematics) page. Truncation When a real value is converted to an integer value explicitly, the value will be truncated. This means the decimal part of the real value will be lost, and without rounding. Console.WriteLine(1.1 as Integer); Console.WriteLine(2.99 as Integer); Console.WriteLine(-3.99 as Integer); 1 2 -3 Upcasting and Downcasting When casting between classes related through inheritance, one class must be a base class of the other. class A {} class B : A {} class C : B {} The code snippet below uses the Classes with Inheritance snippet. var a : A = A(); var b : B = B(); var c : C = C(); // implicit var ba : A = b; var ca : A = c; var cb : B = c; // explicit var ab : B = a as B; var ac : C = a as C; var bc : C = b as C; Notice how all the implicit casts involve converting from a derived class to a base class. This is known as upcasting. Downcasting involves taking a base class and casting it to a derived class, which must be done explicitly. Downcasting is also a type of dynamic casting, which is validated at runtime. Observe that the objects a, b, and c are all references being casted, and not values. If a base class reference is downcasted to a derived class reference and the value referenced is of the base class type, then the cast failed at runtime. A failed dynamic cast will result in the value null. The code snippet below uses the Classes with Inheritance snippet. var a_ref_b : A = B(); // upcast invoked implicitly var b_ref_a : B = A() as B; // downcast invoked explicitly var b_ref_b : B = a_ref_b as B; // downcast invoked explicitly Console.WriteLine(a_ref_b == null); Console.WriteLine(b_ref_a == null); Console.WriteLine(b_ref_b == null); false true false a_ref_b is a reference of type A to a value of type B, which uses an implicit upcast. b_ref_a is a reference of type B to a value of type A, which uses an explicit downcast. Notice how b_ref_a has the value null at runtime, the result of a //failed dynamic cast//. On the other hand, a_ref_b is successfully cast since it has a value of type B. Null Casts The value null can be cast to any reference type implicitly. The code snippet below uses the Classes with Inheritance snippet. var a1 : A = null; // implicit cast var a2 : A = null as A; // explicit cast (unnecessary) NOTE: Interpreting null as an invalid state for object references is a common pattern in programming. Any Casts Any type can be cast implicitly to an any, and an any value can be implicitly cast to any type. The any type is used as a generic reference to any instantiated class or struct. var integerOne : any = 1; var myInteger : Integer = integerOne; // any cast var myReal : Real = integerOne; // runtime exception Notice how the attempt to cast integerOne, which is an any, to a real results in a runtime exception. An any must first be cast to the type of the value it holds, even before other implicit conversions. Same Casts Same casts are casts that convert a value of one type to the same type. All same casts can be done implicitly and are unnecessary. var myReal : Real = 1.0; // implicit same cast var myInteger : Integer = 1 as Integer; // explicit same cast Related Materials Manual Function Variable inheritance Code Reference integer doubleinteger real doublereal boolean any"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/classes.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/classes.html",
    "title": "Class Contents | ZilchEngine",
    "keywords": "Classes and structs define the type of certain objects in Nada, and the class keyword can create user-defined data types. The Variables and Functions defined in a class or struct are all stored and referenced from instantiations. In contrast with how Structs handle Memory Management, classes are copied by-reference. Class Contents Classes in Nada must be defined in global scope. The format for classes and structs are as shown below: struct SimpleStruct {} class SimpleClass {} Any members that belong to SimpleStruct or SimpleClass will be defined within their curly braces. Struct Members in Classes Because structs are copied by-value, structs cannot have class members. As shown in the code snippet below, any other permutation of containment is valid. struct StructInStruct { var MyStruct : SimpleStruct; } struct ClassInStruct { var MyClass : SimpleClass; } // ERROR class StructInClass { var MyStruct : SimpleStruct; } class ClassInClass { var MyClass : SimpleClass; } The class MyClass is a member of ClassInStruct, which is a struct. Having a class in a struct will cause Nada to throw a compile-time exception. Static vs Non-Static Members Variables and functions inside a class or struct are known as members. Most member variables must be accessed through instantiations of the object. The one exception are member variables with the Static Attribute. class MyClass { // standard variable instantiation and initialization var MyReal : Real = 0; // static variable [Static] var MyStaticBoolean : Boolean = false; // static function [Static] function MyStaticFunction() {} } Accessing static members can be done with MyVariableClass.MyStaticReal or MyVariableClass.MyStaticFunction, while MyVariableClass().MyReal is a way of accessing a non-static member. Member Variable Declaration Member variables define the data in a class. The rules for defining member variables differ from how local variables are defined. class MyClass { // variable instantiation only is allowed var MyDoubleReal : DoubleReal; // ERROR: type deduction not allowed on member variables var MyBoolean = false; } Notice how MyDoubleReal isn't initialized. At the class scope, uninitialized member variables will be set to the default values of their types. Also note that member variables must be explicitly typed. MyBoolean is set to false, but Nada will still throw a compiler error if the type is omitted. Member Functions Member functions hold executable code, can take input parameters, and can return data. Member functions without the [Static] attribute also have access to the instantiated object that invoked them. class MyClass { var MyReal : Real = 1.2; function MyFunc() { var localReal = this.MyReal; } [Static] function MyFunc() { var localReal = this.MyReal; // ERROR } } Notice how MyReal, a member variable of MyClass, is accessed in MyFunc using the this keyword. this refers to the instantiated object. If the function is static, then this cannot be used as there is no instantiation of MyClass. Also notice how there are two versions of MyFunc, one static and one not. This is valid because static members must always be accessed through the class with the format <class>.<function>. Constructors and Destructors Structs/Classes can have constructor and destructors, which are special functions with no return type. Constructors are called when an object is instantiated, and the destructor is called when the object is deleted. class ExplicitDefault { constructor() {} } class ImplicitDefault {} class Driver { function MyFunction() { ExplicitDefault(); // call default constructor ImplicitDefault(); // call default constructor (implicitly defined) } } The class ExplicitDefault has a single constructor that takes no parameters. This constructors type is known as the //default constructor//. Notice how the constructor is called by the class name in the statement ExplicitDefault(); Also notice how ImplicitDefault is constructed with the default constructor in the statement ImplicitDefault();. As long as there are no constructors defined, the default will always be defined by nada. class ExplicitCustom { constructor(r : Real) {} } class ExplicitCustomAndDefault { constructor() {} constructor(r : Real) {} } class Driver { function MyFunction() { ExplicitCustom(); // ERROR ExplicitCustom(1.0); ExplicitCustomAndDefault(); ExplicitCustomAndDefault(1.0); } } The class ExplicitCustom defines a single constructor that takes a single real. This means that ExplicitCustom cannot be default constructed, therefore the statement ExplicitCustom(); fails to compile. The default constructor can still be readded by explicitly defining it alongside other constructors, as shown in the class ExplicitCustomAndDefault. NOTE: Explcitly defining a constructor is not required in Nada as long as every data member of the class has a default constructor. Destructors are called when all handles to an object are destroyed. The exception is when an object is not a copy by reference type, in which case the destructor isn't called. struct MyStruct { var Id : Integer; constructor(id : Integer) { this.Id = id; } destructor() { Console.WriteLine(this.Id); } } class MyClass : MyStruct {} class Driver2 { [Static] function MyFunction() { var v1 = MyStruct(1); var v2 = local MyStruct(2); var v3 = new MyStruct(3); var v4 = MyClass(4); var v5 = new MyClass(5); } // end of the scope, all unreferenced objects are destroyed } 3 4 5 In the example above, MyClass inherits from MyStruct. MyClass has the same members as MyStruct, and the only difference between the two is that MyClass is a class. Observe how 3, 4, and 5 are printed, which means that the destructor got called on v3, v4, and v5. All struct destructors were ignored, while all class destructors were called. The one exception is v3, which is of the type ref MyStruct and has the copy by-reference quality. Related Materials Manual Variables Functions memory_management attributes inheritance Static Code Reference real"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/comparison_operators.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/comparison_operators.html",
    "title": "== & != Operators | ZilchEngine",
    "keywords": "Comparison operators take two operands and evaluate to a boolean value which describes a relationship between the given values. Comparison operators are frequently used with conditionals. == & != Operators The == (equality) operator compares two operands and returns true if they are the same and false if they are not. The != (inequality) operator performs the inverse operation, returning false if they are the same and true if they are not. Left Operand Operator Right Operand Result true == false false true != true false true != false true The equality operator is very useful when trying to identify unknown data, or verifying existing data. if(unknownObject == this.TargetObject) { Console.WriteLine(\"Found Target\"); } if(this.Owner.Player.TeamId == hitObject.Player.TeamId) Console.WriteLine(\"Friendly Fire!\"); Keep in mind that the values of the operands must be exactly equal. When comparing decimal values, the differences may be very small but still exist, i.e. 3.14159 == 3.141591 will evaluate to false. Similarly 2.236068 == 2.23607 will evaluate to false, as the values differ by 0.0000002. It is common to use an epsilon value (i.e. 0.0000001) when comparing values that are more precise then the comparison needs to be. The != operator is commonly used to verify data exists before attempting to use it. if(unknownObject != null) { Console.WriteLine(`unkownObject` is valid); if(unknownObject.Transform != null) Console.WriteLine(unkownObject.Transform.Translation); else Console.WriteLine(\"`unkownObject` does not have a Tranform component\"); } Object Comparison As seen in the first code block, object comparison is fairly common. However, there are a few details to be aware of when comparing objects by value vs. by reference. NOTE: To read about the details about by-value and by-reference objects, read the manual page. Object Comparison by Value Take the following struct as a by-value example: struct ValueObj { var ValueOne : Boolean; var ValueTwo : Integer; var ValueThree : Boolean; } In Nada, structs are value types, so when they're compared using the == or != operators, the value(s) within the type are what is compared. This means that the == and != operators cannot be used with references to structs to determine if the operands are the same struct instance. var a = ValueObj(); var b = a; var c = ValueObj(); Console.WriteLine(\"a & b are equal: `a == b`\"); b.ValueOne = true; Console.WriteLine(\"a & b are equal: `a == b`\"); Console.WriteLine(\"a & c are equal: `a == c`\"); Console.WriteLine(\"b & c are equal: `b == c`\"); a & b are equal: true a & b are equal: false a & c are equal: true b & c are equal: false In this case, the ValueObj instances are constructed and compared by value. So despite b being a copy of a, when b.ValueOne is set to false, the value of a.ValueOne does not change, and the values of the two objects are no longer equal. Furthermore, it can be seen that even when ValueObj instance c, a new value type instance, is constructed, the ValueObj is only copied and compared by value. Object Comparison by Reference Take the following class as a by-reference example: class ReferenceObj { var ValueOne : Boolean; var ValueTwo : Integer; var ValueThree : Boolean; } In Nada, classes are reference types, so when they're compared using the == or != operators, what are actually compared are the addresses of the objects in memory. This means that the == and != operators cannot be used with class references to determine if the operands contain the same values; instead, they reveal whether the two objects are the same class instance. var a = ReferenceObj(); var b = a; var c = ReferenceObj(); Console.WriteLine(\"a & b are equal: `a == b`\"); b.ValueOne = false; Console.WriteLine(\"a & b are equal: `a == b`\"); Console.WriteLine(\"a & c are equal: `a == c`\"); Console.WriteLine(\"b & c are equal: `b == c`\"); a & b are equal: true a & b are equal: true a & c are equal: false b & c are equal: false In this case, the ReferenceObj instances are constructed and compared by reference, so b is actually a copy of the reference a to the constructed ReferenceObj. This means that when b.ValueOne is set to true, the ReferenceObj instance that a references is modified, as a and b are in fact referencing the same ReferenceObj instance. Furthermore, looking at c, one can see that when a new reference type instance is constructed, it is only copied and compared by reference, so even when two instances contain the same value(s), they will not be considered equal. Floating-Point Comparison Due to floating-point error, it is best to avoid comparing two extremely precise or large values of floating-point types (such as Real) with the == and != operators. Consider: Console.WriteLine(2000000000.0 == 2000000042.0); true This is not a quirk of the engine, it's a quirk of modern computing. Instead of using these operators, it is best to use a function like Math.ApproximatelyEqual (which can then be negated using the ! operator to check for inequality) for floating-point types. For example, instead of something like this: if (this.Transform.WorldTranslation.Y == this.JumpHeight) { // } ... try something like this: if (Math.ApproximatelyEqual(this.Transform.WorldTranslation.Y, this.JumpHeight, 0.01)) { // } > & < Operators The > (greater than) operator returns true if the left operand is greater than// the right operand. The < (less than) operator returns true if the left operand is //less than the right operand. Left Operand Operator Right Operand Result 1 > 1 false 2 > 1 true 0 < 1 true 1 < 1 false 2 < 1 false < is often used to compare simulation values to detemine if a threshold has failed to be reached. if(height < 5) Console.WriteLine(\"You must be at least 5ft tall to ride this attraction\"); > is often used to compare simulation values to detemine if a threshold has been exceeded. if(cost > 10) Console.WriteLine(\"That restaurant is not within my dinner budget\"); >= & <= Operators The >= (greater than or equal to) operator returns true if the left operand is greater than or equal to// the right operand. The <= (less than or equal to) operator returns true if the left operand is //less than or equal to the right operand. Left Operand Operator Right Operand Result 1 >= 1 true 2 >= 1 true 0 <= 1 true 1 <= 1 true 2 <= 1 false <= is often used to compare simulation values to detemine if a threshold has failed to be exceeded. if(cost <= 10) Console.WriteLine(\"That restaurant is within my dinner budget\"); > is often used to compare simulation values to detemine if a threshold has been exceeded. if(height >= 5) Console.WriteLine(\"You are at least 5ft tall, you may ride this attraction\"); Related Materials Manual operators_precedence_chart Tasks {T556}"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/conditionals.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/conditionals.html",
    "title": "if | ZilchEngine",
    "keywords": "Conditionals allow programs to ask questions and act or not act based of the results. if An if conditional evaluates a given statement that evaluates to a boolean value and executes code in a block scope defined underneath if it evaluates to true. var boolValue = true; if(boolValue) { Console.WriteLine(\"boolValue is true\"); } boolValue = false; if(boolValue) { Console.WriteLine(\"boolValue is still true\"); } Console.WriteLine(\"End of the example\"); boolValue is true End of the example boolValue, which initially stores true, is checked in the first if block. Since if is given the value true, the following block scope is executed and the Console.WriteLine function is called. It is good practice to have a program log it's activity for debugging certain values. The 'Console window' snippet above shows that \"boolValue is true\" and \"End of the example\" are printed. Notice that the line Console.WriteLine(\"boolValue is still true\") exists as well, but \"boolValue is still true\" is not printed. This is because the second if is given the value false, instructing the program to not execute any code inside that conditional's block scope. Unnecessary Conditionals Because if conditionals take boolean values, a literal value can also be used: if(true) { Console.WriteLine(\"This is a tautology\"); } if(false) { Console.WriteLine(\"This is a contradiction\"); } This is a tautology The first if conditional is known as a tautology, while the second is a contradiction. A tautology is always true, and the code block will always execute. A condtradiction is always false, and its code block will never be executed. While these patterns have no practical purpose in a program, the ability to 'disable' a conditional can be a useful debugging tool, making minimal changes to the code: if(true /*myVar*/) { Console.WriteLine(\"Is this line run?\"); } myVar is a variable defined somewhere, but the check to see if it has the value true has been commented out and replaced with the literal true in order to explicitlly test the code within the scope of the if block. Else An if conditional on its own has the power to decide between action and inaction, but often a decision is made between two different actions. The else conditional is used to execute code when the if condition fails. if(false) { Console.WriteLine(\"The if ran\"); } else { Console.WriteLine(\"The else ran\"); } The else ran Under the code block of the first if, there is a code block paired with the Keyword else. The value false if given to the if conditional, and so the else block is executed. In any if-else pair, exactly one of the two code blocks will run. Else If While often for any given conditional there are only two outcomes, sometimes there are more. The else if keyword combinations allows the chaining of conditional statements. var valone = false; var valtwo = false; if(valone) { Console.WriteLine(\"valone is true\"); } else if(valtwo) { Console.WriteLine(\"valtwo is true\"); } else { Console.WriteLine(\"neither valone or valtwo are true\"); } neither valone or valtwo are true In the example above valone is evaluated as false in the first if conditional. Since the first if fails the script continues to the else if and evaluates valtwo as false causing the script to continue to the else condition. Condensed Conditionals Conditionals don't always require the use of scope operators. If the code block underneath is only one line long, the { and } become unnecessary. var valone = false; var valtwo = false; if(valone) Console.WriteLine(\"valone is true\"); else if(valtwo) Console.WriteLine(\"valtwo is true\"); else Console.WriteLine(\"neither valone or valtwo are true\"); neither valone or valtwo are true The above rewrite of the last code block illustrates how scoping brackets can be removed to make code more compact. WARNING: Removing scope operators isn't always good practice, because they need to be added when a code block is more than one statement. Omitting scope operators can unintentionally change the scope of some code, and yet the script can still sucessfully compile. Uncondensing else if The else if conditional is actually an else conditional with an if-else pair afterwards. The fact that scope operators can be removed is the reason that else if is valid. Using this logic we can rewrite the last example with explcit scopes to make this clearer. var valone = false; var valtwo = false; if(valone) { Console.WriteLine(\"valone is true\"); } else { if(valtwo) { Console.WriteLine(\"valtwo is true\"); } else { Console.WriteLine(\"neither valone or valtwo are true\"); } } neither valone or valtwo are true else if may seem like a seperate keyword than if and else but it is actually just syntactical suger to make code easier to follow. Boolean Operations While conditionals a useful their real power comes when used in combination with boolean_operators. It is highly suggested you review this page. Related Material Manual keywords boolean_operators Code Reference boolean"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/constructbyvaluevsbyref.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/constructbyvaluevsbyref.html",
    "title": "Local | ZilchEngine",
    "keywords": "(NOTE)Advanced Users Only: The use of the new and local keywords is not something most users need to be concerned with, as it is almost entirely #deprecated. Heap or stack allocation is almost always handled automatically by the engine based off whether the constructed type is a class or struct, however, new and local still remain in the language for explicit allocation practices. Users attemptting to use new or local keywords should be aware that they override the standard allocation functionality of Nada, but reference counted garbage collection will still happen for objects explicitly constructed with new and local. Local When working with by-value types that have constructors, such as structs or more complex stack primitive data types, the keyword local may be used: var up : Real3 = local Real3(0.0, 1.0, 0.0); var stackStructInstance : CustomStruct = local CustomStruct(); The compiler will infer the use of local for by-value types: // This is also valid. var up : Real3 = Real3(0.0, 1.0, 0.0); var stackStructInstance : CustomStruct = CustomStruct(); New When working with classes, references, or other or anything located on the heap with a constructor, use the new keyword: var heapObject : CustomClass = new CustomClass(); var heapStructInstance : CustomStruct = new CustomStruct(); Once again the compiler will infer the use of new for by-ref types: // This is also valid. var heapObject : CustomClass = CustomClass(); Since structs are by-value, in order to get a reference you must specify new. // This does not compile var heapStructInstance : CustomStruct = CustomStruct(); The value being assigned to 'heapStructInstance' must be of type 'CustomStruct'. Its type is 'CustomStruct'. Related Material Manual keywords classes memory_management"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/delegates.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/delegates.html",
    "title": "Named Parameters | ZilchEngine",
    "keywords": "Delegates allows you to hold a function pointer in a variable, and use them at a later time. The following three classes will work together to demonstrate creating, defining, and calling delegates. class DelegateHolder { var Name : String = \"Unnamed\"; var Greeting : delegate() = null; constructor(name: String) { this.Name = name; } function Introduce() { Console.WriteLine(\"Hi I'm `this.Name`\"); } } The DelegateHolder class contains a delegate member variable Greeting that is set in the constructor to the member function Introduce(). class MyMathLib { [Static] function Exponent(baseNum : Integer, exponent : Integer) : Integer { var num = 1; // Start at baseNum ^ 0 while(exponent > 0) { num = num * baseNum; --exponent; } return baseNum; } } The MyMathLib class contains just a single static function that returns the product of exponentiation. This function will be used to demonstrate how to use a delegate in the next and final class. class DelegateDriver : NadaComponent { function Initialize(init : CogInitializer) { this.DelegateSamples(); } function DelegateSamples() { var gh = new DelegateHolder(\"gh\"); var ef = new DelegateHolder(\"ef\"); // Making a delegate: var getName : delegate() = gh.Greeting; // Using a delegate: getName(); // Hi I'm gh // Assigning a member function to a delegate: getName = ef.Greeting; // Passing a delegate into a function: DelegateDriver.DelegateCaller(getName); // Hi I'm ef getName(); // Hi I'm ef // Assigning a static function to a delegate: getName = DelegateDriver.DelegateTest; getName(); // 256 DelegateDriver.DelegateCaller(getName); // 256 // Making a delegate: var doMath : delegate(a: Integer, b: Integer): Integer = DelegateDriver.Add; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 8 Console.WriteLine(doMath(2,6)); // 8 doMath = DelegateDriver.Multiply; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 15 Console.WriteLine(doMath(2,6)); // 12 doMath = DelegateDriver.Subtract; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 2 Console.WriteLine(doMath(2,6)); // -4 } [Static] function Add(a: Integer, b: Integer): Integer { return a+b; } [Static] function Multiply(a: Integer, b: Integer): Integer { return a*b; } [Static] function Subtract(a: Integer, b: Integer): Integer { return a-b; } [Static] function BinaryIntOpsCaller(a: delegate(a: Integer, b: Integer):Integer):Integer { return a(5, 3); } [Static] function DelegateCaller(a: delegate()) { a(); } [Static] function DelegateTest() { var doMath : delegate(lhs : Integer, rhs : Integer): Integer = MyMathLib.Exponent; Console.WriteLine(doMath(2, 8)); } } The DelegateDriver class covers a number of different ways to define and call a delegate. Lines 10 and 11 create two DelegateHolder objects, gh and ef, while line 14 creates a delegate variable that's set to the delegate variable found in object gh: var gh = new DelegateHolder(\"gh\"); var ef = new DelegateHolder(\"ef\"); var getName : delegate() = gh.Greeting; Line 17 demonstrates directly calling a delegate using a delegate variable, while line 20 reassigns that delegate to the delegate variable found in object ef: getName(); getName = ef.Greeting; Line 24 passes the delegate variable into a function, DelegateCaller, which is defined further down the script�that calls the delegate function of any delegate passed into it: getName = DelegateDriver.DelegateTest; Line 27 assigns a static function to the delegate variable, DelegateTest, which defines its own delegate function assigned the to Exponent function in MyMathLib: getName = DelegateDriver.DelegateTest; Line 30 then passes in the re-assigned variable back into the DelegateCaller function, showing that the Exponent function is still called: DelegateDriver.DelegateCaller(getName); Line 33 creates a new delegate variable assigning it to another static function, while lines 35 - 44 demonstrates passing a delegate (that is redefined a couple of times) into a function that expects a delegate as a parameter: var doMath : delegate(a: Integer, b: Integer): Integer = DelegateDriver.Add; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 8 Console.WriteLine(doMath(2,6)); // 8 doMath = DelegateDriver.Multiply; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 15 Console.WriteLine(doMath(2,6)); // 12 doMath = DelegateDriver.Subtract; Console.WriteLine(DelegateDriver.BinaryIntOpsCaller(doMath)); // 2 Console.WriteLine(doMath(2,6)); Attaching DelegateDriver to an object and running the project results in the following print statements in the Console Window: ---------------- Begin Game --------------- Hi I'm gh Hi I'm ef Hi I'm ef 256 256 8 8 15 12 2 -4 Named Parameters IMPORTANT: At this time the names chosen for the parameters are part of the signature. In order for two function signatures to be the same the names chosen for the parameters must match: class MyMathLib { [Static] // Note named parameters are lhs and rhs: function Exponent(lhs: Integer, rhs: Integer): Integer { return lhs^rhs; } } Consider these tests: class Driver { function DelegateTest() { // Here the delegate has named parameters a and b: var doMath : delegate(a: Integer, b: Integer): Integer = MyMathLib.Exponent;// This won't compile. } } The value being assigned to 'doMath' must be of type 'delegate (a : Integer, b : Integer) : Integer'. Its type is 'delegate (lhs : Integer, rhs : Integer) : Integer'. class Driver { function DelegateTest() { // When declaring a delegate you cannot exclude the parameter names: var doMath : delegate(Integer, Integer): Integer = MyMathLib.Exponent;// This won't compile. } } Function declaration 'delegate' has an invalid argument list. We found 'UpperIdentifier' but we expected to find ')'. class Driver { function DelegateTest() { // Here, after making the parameter names match, does it work: var doMath : delegate(lhs: Integer, rhs: Integer): Integer = MyMathLib.Exponent; Console.WriteLine(doMath(2,8)); } } ---------------- Begin Game --------------- 256 Member Function Delegates IMPORTANT: Delegates that point at member functions can create memory leaks if they make cycles. See memory_management for more. IMPORTANT: Delegates pointing to member functions will throw runtime errors if the instance it was bound with was destroyed: // Here are three Objects with the ability to hold delegates: var ab = new DelegateHolder(\"ab\"); var b = new DelegateHolder(\"b\"); ab.Greeting = b.Introduce; delete b; ab.Greeting(); // This throws a runtime error Attempted to access a member of a null handle: Attempted to call a member function on a null object Null Delegates IMPORTANT: It is an illegal operation to call a null delegate, so be sure to initialize your delegates before calling! // Here are three Objects with the ability to hold delegates: var ab: delegate(a: Integer, b: Integer): Integer = null; ab(3, 6);// This throws a runtime error Attempted to invoke a null delegate Related Materials Manual memory_management classes attributes"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/enums.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/enums.html",
    "title": "Enum Rules | ZilchEngine",
    "keywords": "An enum, or enumerated type, is a set custom identifiers that are enumerated. An enumerated type may be defined with the enum keyword: enum ControllerButtons {Start, Select, Up=0, Down, Left, Right, A=0, B=1} // no semicolon The names line up with incrementing Integers where the default starting value is 0. The values can be manually set in which case the following values will increment off of that manually defined value. Note that to access these Integer values, the enum must be casted to an Integer: Console.WriteLine(\"ControllerButtons.Start = `ControllerButtons.Start as Integer` \" ); Console.WriteLine(\"ControllerButtons.Select = `ControllerButtons.Select as Integer` \" ); Console.WriteLine(\"ControllerButtons.Up = `ControllerButtons.Up as Integer` \" ); Console.WriteLine(\"ControllerButtons.Down = `ControllerButtons.Down as Integer` \" ); Console.WriteLine(\"ControllerButtons.Left = `ControllerButtons.Left as Integer` \" ); Console.WriteLine(\"ControllerButtons.Right = `ControllerButtons.Right as Integer` \" ); Console.WriteLine(\"ControllerButtons.A = `ControllerButtons.A as Integer` \" ); Console.WriteLine(\"ControllerButtons.B = `ControllerButtons.B as Integer` \" ); ---------------- Begin Game --------------- ControllerButtons.Start = 0 ControllerButtons.Select = 1 ControllerButtons.Up = 0 ControllerButtons.Down = 1 ControllerButtons.Left = 2 ControllerButtons.Right = 3 ControllerButtons.A = 0 ControllerButtons.B = 1 Enum Rules There a number of rules that must be followed when defining enums. If these rules are not followed, an error will be thrown, as can be seen in the examples below. Type Name and Value Capitalization Identifiers for the enum type name and the enumerated values must be capitalized. // This will not compile. enum Directions {up, down, left, right} Enum declaration 'Directions' does not have a closing '}'. We found 'LowerIdentifier' but we expected to find '}'. // This won't compile either. enum directions {Up, Down, Left, Right} Enum declaration is missing a name. Upper-camel case names are required here (use 'Directions' instead of 'directions'). Unique Identifiers Identifiers for the enumerated values must be unique. // This will not compile. enum Directions {Up, Down, Up, Down} A value of the same name 'Up' has already been declared in the enum 'Directions'. Names must only be used once. Definition Scope Enums cannot be defined inside classes, structs, or other enums. // Classes cannot contain enums. class EnumWrapper { // This won't compile. enum ControllerButtons {Start, Select, Up=0, Down, Left, Right, A=0, B=1} } Class declaration 'EnumWrapper' does not have a closing '}'. We found 'enum' but we expected to find '}'. Enums and Integers As in other languages, Integers make up the backbone of how enums work, and thus they work together in many situations. Casting Because of this, Nada will implicitly cast from an enum to an Integer when necessary: Given this: enum ControllerButtons {Start, Select, Up=0, Down, Left, Right, A=0, B=1} class Controller { [Static] // This function accepts an enum type. function AcceptsEnum(param: ControllerButtons) { Console.WriteLine(\" turned into `param`!\"); } [Static] // This function accepts an integer type. function AcceptsInt(param: Integer) { Console.WriteLine(\" turned into `param`!\"); } } We can test the calls to these functions to see the interplay of casting: var paramInt = 3; var paramEnum = ControllerButtons.Right; // This works, as you'd expect Console.Write(paramEnum); Controller.AcceptsEnum(paramEnum); // But if you want to accept an Integer in an enum's place you MUST cast. Console.Write(paramInt); Controller.AcceptsEnum(paramInt as ControllerButtons); ---------------- Begin Game --------------- Right turned into Right! 3 turned into Right! // Attempting to pass an Integer without casting to an enum // will cause a compiler error Console.Write(paramInt); Controller.AcceptsEnum(paramInt); The function 'AcceptsEnum' exists, but could not be resolved since the types of the arguments used did not match. The arguments you gave were: AcceptsEnum(Integer) The possible choices were: AcceptsEnum(param : ControllerButtons) // This also works as you'd expect. Console.Write(paramInt); Controller.AcceptsInt(paramInt); // The enum type parameter is implicitly casted to an Integer and is then passed to the function. Console.Write(paramEnum); Controller.AcceptsInt(paramEnum); ---------------- Begin Game --------------- 3 turned into 3! Right turned into 3! Enum-Integer Operations Enums can perform all operations as if they were Integers. For instance, you can perform all of the normal Integer math operations as implicit conversion will happen as necessary: // Here you can see use of the +, -, *, /, (), ^ and % Integer operators. var math = (ControllerButtons.Start + ControllerButtons.Right) ^ ControllerButtons.Left % ControllerButtons.Right - ControllerButtons.Right * ControllerButtons.Select; // When the math evaluates to an unaliased number, the variable, although still of the enum type, // prints out its integer value. Console.WriteLine(math); Console.WriteLine(typeid(math).Name); ---------------- Begin Game --------------- -3 ControllerButtons Notice that the typeid is not an Integer but ControllerButtons. An Integer value was printed because there was no alias in the enum that maps to -3. Because the type is still that of the enum, it can be passed to the Controller.AcceptsEnum() function without issue. When an operation includes both an enum and an Integer the result is always promoted to the enum type. To get an Integer either Declare the variable you are storing the result in as an Integer: var result : Integer Cast it: result as Integer Caveat Although enums cast to Integers, they will not cast to Integers to perform cross-enum operations. // This won't compile. Console.WriteLine(ControllerButtons.Down + Directions.Down); The binary '+' operator 'Positive / Add' is not valid with 'ControllerButtons' and 'Directions'. Related Materials Manual casting functions Code Reference enum_reference integer"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/flags.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/flags.html",
    "title": "Flags Rules | ZilchEngine",
    "keywords": "Flags are very similar to enums except that they are ordered like a bit field (i.e. increasing in powers of two starting at 1 by default). Flags can be defined with the flags keyword: flags Pizza { Sauce, Cheese, Pepperoni, Sausage, Peppers, Onion, Mushroom, Pineapple, CanadianBacon, Artichokes } The names flags enumeration line up with Integral Powers of two, the default starting value is 1: Console.WriteLine(\"Pizza.Sauce as Integer: `Pizza.Sauce as Integer`\"); Console.WriteLine(\"Pizza.Cheese as Integer: `Pizza.Cheese as Integer`\"); Console.WriteLine(\"Pizza.Pepperoni as Integer: `Pizza.Pepperoni as Integer`\"); Console.WriteLine(\"Pizza.Sausage as Integer: `Pizza.Sausage as Integer`\"); Console.WriteLine(\"Pizza.Peppers as Integer: `Pizza.Peppers as Integer`\"); Console.WriteLine(\"Pizza.Onion as Integer: `Pizza.Onion as Integer`\"); Console.WriteLine(\"Pizza.Mushroom as Integer: `Pizza.Mushroom as Integer`\"); Console.WriteLine(\"Pizza.Pineapple as Integer: `Pizza.Pineapple as Integer`\"); Console.WriteLine(\"Pizza.CanadianBacon as Integer: `Pizza.CanadianBacon as Integer`\"); Console.WriteLine(\"Pizza.Artichokes as Integer: `Pizza.Artichokes as Integer`\"); Pizza.Sauce as Integer: 1 Pizza.Cheese as Integer: 2 Pizza.Pepperoni as Integer: 4 Pizza.Sausage as Integer: 8 Pizza.Peppers as Integer: 16 Pizza.Onion as Integer: 32 Pizza.Mushroom as Integer: 64 Pizza.Pineapple as Integer: 128 Pizza.CanadianBacon as Integer: 256 Pizza.Artichokes as Integer: 512 Flags are meant to work together; consider the following: var hawaiian : Pizza = Pizza.Sauce + Pizza.Cheese + Pizza.CanadianBacon + Pizza.Pineapple; Console.WriteLine(hawaiian); // Using bitwise and, '&', to determine if the hawaiian pizza has pepperoni on it if ((hawaiian & Pizza.Pepperoni) != 0) { Console.WriteLine(\"Hawaiian pizza has `Pizza.Pepperoni` on it.\"); } else { Console.WriteLine(\"Hawaiian pizza does not have `Pizza.Pepperoni` on it.\"); } ---------------- Begin Game --------------- Sauce | Cheese | Pineapple | CanadianBacon Hawaiian pizza does not have Pepperoni on it. Notice how it prints all of the active flags Basically, flags are enums that assign the next value by multiplying the previous value by two. For instance, given: flags Cookie { ChocolateChips, Raisins, Oatmeal, MacadamiaNuts = 3, Peanuts, Pecans, Caramel, Ginger, Cinnamon, Sugar = 3 } The values are different: Console.WriteLine(\"Cookie.ChocolateChips as Integer: `Cookie.ChocolateChips as Integer`\"); Console.WriteLine(\"Cookie.Raisins as Integer: `Cookie.Raisins as Integer`\"); Console.WriteLine(\"Cookie.Oatmeal as Integer: `Cookie.Oatmeal as Integer`\"); Console.WriteLine(\"Cookie.MacadamiaNuts as Integer: `Cookie.MacadamiaNuts as Integer`\"); Console.WriteLine(\"Cookie.Peanuts as Integer: `Cookie.Peanuts as Integer`\"); Console.WriteLine(\"Cookie.Pecans as Integer: `Cookie.Pecans as Integer`\"); Console.WriteLine(\"Cookie.Caramel as Integer: `Cookie.Caramel as Integer`\"); Console.WriteLine(\"Cookie.Ginger as Integer: `Cookie.Ginger as Integer`\"); Console.WriteLine(\"Cookie.Cinnamon as Integer: `Cookie.Cinnamon as Integer`\"); Console.WriteLine(\"Cookie.Sugar as Integer: `Cookie.Sugar as Integer`\"); Cookie.ChocolateChips as Integer: 1 Cookie.Raisins as Integer: 2 Cookie.Oatmeal as Integer: 4 Cookie.MacadamiaNuts as Integer: 3 Cookie.Peanuts as Integer: 6 Cookie.Pecans as Integer: 12 Cookie.Caramel as Integer: 24 Cookie.Ginger as Integer: 48 Cookie.Cinnamon as Integer: 96 Cookie.Sugar as Integer: 3 Notice how after MacadamiaNuts is set to 3, the increment is no longer on powers of 2 The underlying structure is integer; therefore, you could interpret Integers as a flags type: var random: Pizza = 583 as Pizza; Console.WriteLine(random); Console.WriteLine(7 as Cookie); Sauce | Cheese | Pepperoni | Mushroom | Artichokes ChocolateChips | Raisins | Oatmeal | MacadamiaNuts | Peanuts | Sugar Notice how flags print both enumerated values if the flags share the same underlying integer value. Flags Rules Identifier Capitalization Identifiers for the flags type name and the enumerated values must be capitalized. // This will not compile. flags Directions {up, down, left, right} Enum declaration 'Directions' does not have a closing '}'. We found 'LowerIdentifier' but we expected to find '}'. // Neither will this. flags directions {Up, Down, Left, Right} Enum declaration is missing a name. Upper-camel case names are required here (use 'Directions' instead of 'directions'). Unique Identifiers Identifiers for the enumerated values must be unique. // This will not compile. flags Directions {Up, Down, Up, Down} A value of the same name 'Up' has already been declared in the enum 'Directions'. Names must only be used once. Definition Scope Flags cannot be defined inside classes, structs, or other enums. // Classes cannot contain flags. class FlagsWrapper { // This won't compile. flags Directions {Up, Down, Left, Right}; } Class declaration 'FlagsWrapper' does not have a closing '}'. We found 'flags' but we expected to find '}'. Representation If there is no enumerated value the enum is represented as an Integer: Console.WriteLine((64) as Cookie); 64 Flags and Integers As in other languages, Integers make up the backbone of how flags work, and thus they work together in many situations. Casting Because of this, Nada will implicitly cast from a flag to an Integer when necessary: class FlagsExample { [Static] // This function accepts an flags type. function AcceptsFlags(param: Pizza) { Console.WriteLine(\" turned into `param`!\"); } [Static] // This function accepts an integer type. function AcceptsInt(param: Integer) { Console.WriteLine(\" turned into `param`!\"); } } We can test the calls to these functions to see the interplay of casting: var paramInt = 128; var paramFlags = Pizza.Pineapple; // This works, as you'd expect Console.Write(paramFlags); FlagsExample.AcceptsFlags(paramFlags); // But if you want to accept an Integer in an enum's place you MUST cast. Console.Write(paramInt); *FlagsExample.AcceptsFlags(paramInt); * Doesn't compile FlagsExample.AcceptsFlags(paramInt as Pizza); Pineapple turned into Pineapple! 128 turned into Pineapple! // Attempting to pass an Integer without casting to an enum // will cause a compiler error Console.Write(paramInt); FlagsExample.AcceptsFlags(paramInt); The function 'AcceptsFlags' exists, but could not be resolved since the types of the arguments used did not match. The arguments you gave were: AcceptsFlags(Integer) The possible choices were: AcceptsFlags(param : Pizza) // This also works as you'd expect. Console.Write(paramInt); FlagsExample.AcceptsInt(paramInt); // The flags type parameter is implicitly casted to an Integer and is then passed to the function. Console.Write(paramFlags); FlagsExample.AcceptsInt(paramFlags); 128 turned into 128! Pineapple turned into 128! Flag-Integer Operations Flags can perform all operations as if they were Integers. For instance, you can perform all of the normal math operations as implicit conversion will happen as necessary from the enum type to Integer: // Here you can see use of the +, -, *, /, (), ^ and % Integer operators. var pizza = (Pizza.Sauce + Pizza.Cheese) ^ Pizza.Sausage % Pizza.Mushroom - Pizza.Artichokes * Pizza.Peppers; // When the math evaluates to an unaliased number, the variable, although still of the enum type, // prints out its integer value. Console.WriteLine(pizza); Console.WriteLine(typeid(pizza).Name); Sauce | Onion (-8159) Pizza You can see the typeid is not an Integer but Pizza. An Integer value was printed because there were flags with no alias in that maps all aspects of -8159. Because the type is still of the flags, you could pass it to our FlagsExample.AcceptsFlags function without issue. When an operation includes both a flags and an Integer the result is always promoted to the flags type. If you want an Integer either Declare the variable you are storing the result in as an Integer: var result : Integer Cast it: result as Integer Caveat Although flags cast to Integers, they will not cast to Integers to perform cross-flags operations. // This won't compile. Console.WriteLine(Pizza.Pineapple + Cookie.Sugar); The binary '+' operator 'Positive / Add' is not valid with 'Pizza' and 'Cookie'. Related Materials Manual enums Code Reference flags_reference integer"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/functions.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/functions.html",
    "title": "Function Rules | ZilchEngine",
    "keywords": "A function is a named block of code (with its own scope that performs a task. Ideally, one function should perform just one task. A function may return a value of a specific type based on the operation performed in the function or it may return nothing at all. Functions can also take in values of a specific type, which are called parameters, that are used and/or changed by the operation of the function. Functions are declared using the function keyword: // Note: // -function keyword is used // -function name is capitalized // -function name is followed by () // -when present parameters go in between () // -parameter names must start with a lowercase character // -parameters must have their type specified // -when a return type is present a colon ':' follows the ')' & the returned type follows the ':' function MyFunctionName(param1: MyParamType1, param2: MyParamType2) : MyReturnType {// Scope of the function in wrapped in {} // function operations within this scope. // return keyword used to pass back return value specified. return MyReturnType(param1 + param2); } Function Rules There are a number of important rules that functions in Nada must follow. If these rules are not followed, an error will be thrown, as can be seen in the examples below. No Global Functions Nada does not support global functions. They must be contained within the scope of either a class or struct. Thus, the above would actually be encased like this: class MyClassName { function MyFunctionName(param1: MyParamType1, param2: MyParamType2) : MyReturnType { // Perform function operations here. return MyReturnType(param1 + param2); } } or this: struct MyStructName { function MyFunctionName(param1: MyParamType1, param2: MyParamType2) : MyReturnType { // Perform function operations here. return MyReturnType(param1 + param2); } } Otherwise you may see an error like this Parsing could not be completed (we ran into something we didn't understand). The token we hit was 'function' with token type 'Function'. The Static Keyword Static functions can be implemented using the [Static] attribute. Operations performed by functions which are static should be independent of independent of any particular data of the class. This is important as static functions can also be called with out access to an instance of the class by referencing the function through the non-instantied type: class MyClass { [Static] // Marking it static allows you to reference the function without creating an instance. function ClassName():String { return \"MyClass\"; } } If we were to test it: Console.WriteLine(MyClass.ClassName()); the result would be MyClass NOTE: Unlike other languages static functions cannot be called from an instance, only from the class name. Function Naming The first letter of a function name MUST be capitalized. While the rest of the name may remain un-capitalized, function names are traditionally written using upper camel case (e.g. MyFunctionName instead of Myfunctionname). // Lowercase function name will cause a compiler error. function myFunctionName() // This won't work.. { // Perform function operations here. } Function declaration is missing a name. Upper-camel case names are required here (use 'MyFunctionName' instead of 'myFunctionName'). Parameter and Variable Naming Parameters and locally-scoped (to the function scope in this case) MUST start with a lowercase character. While the rest of the name may remain un-capitalized, parameter and local variables are traditionally written using lower camel case (e.g. myParamName instead of myparamname). // Capitalized parameter identifiers will cause a compiler error. function MyFunctionName(Param1: MyParamType) // This won't work. { // Capitalized locally-scoped variables will also cause a compiler error. var Count: Integer = 10; // This won't work. } Function declaration 'MyFunctionName' has an invalid argument list. We found 'UpperIdentifier' but we expected to find ')'. In this error, UpperIdentifier refers to the uppercase letter 'P' used in Param1. As this is unacceptable for a parameter name, the error states that it expects to find the closing parenthesis instead. Return Types Return types are appended to the function signature after the argument list separated by the : operator. When this is left off the return type is assumed to be Void. You can use the return keyword to return a value from the function; however, if the function signature has a Void return type, the return statement must be omitted. // Leaving off the return value, assumes nothing is returned. function MyFunctionName() { // 8 will NOT be returned since the signature does not specify a // return type (a compiler error will occur) return 8; } The return statement was not expected to return a '[ErrorType]' value, since the function does not declare it (no ':' at the end). Code Paths Occasionally you will run into situations such as this: If we look at the possible logical flows of the FunctionThatReturns it should be noted that either the if or else case will run, never both. However, if the else case were to run the function would never hit a return statement. Normally this would not be an issue, but in this case the FunctionThatReturns defines a return type and there is a way for the function to fail to do so. This is not ok as it essentially amounts to a dead end in code. This issue throws and exception until all code paths return a value of the correct type. Related Materials Manual attributes classes variables_and_data_types classes structs"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/hashmap.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/hashmap.html",
    "title": "Declaration | ZilchEngine",
    "keywords": "A HashMap is a templated data structure that can map unique keys of type A to values of type B (where A and B can be the same type). Declaration NOTE: The types HashMap and KeyValue not currently appear in the nada_base_types list and does not currently show up in code completion suggestions (T552) during initial declaration. HashMap declaration is similiar to the declaration of any templated type in Nada. When a HashMap is created, by default, it has no elements. var namesToObjects = HashMap[String, Cog](); var idToCost = HashMap[Integer, Real](); var spawnerToEnemyType = HashMap[Cog, Archetype](); var enemyType = HashMap[Archetype, Integer](); HashMaps have a variety of uses. One may use them to keep track of objects at runtime by an alternate name, or to keep count of how many of each enemy archetype a spawner has created at runtime. Below are some simple example of HashMap functionality which map unique integer keys to non-unique string values. Initialization It is common for a HashMap to be populated at runtime, but it is also possible to define elements within an initializer list. var hash = HashMap[Integer, String]() { {1, \"one\"}, {2, \"two\"}, {3, \"three\"} }; this.PrintHashMap(hash); HashMap[Integer, String] (20744110) { {2, two} {1, one} {3, three} } Notice that the order in which the elements are printed is not the order in which they were added to the HashMap. This is due to HashMaps having no inherent order, unlike Arrays. Instead of the pairs being printed in an indexed order they are printed in an arbitrary order based on the hash of the pair. NOTE: The HashMap templated type is currently lacking templated print functionality similiar to Arrays. The PrintHashMap function used in this page is implemented below: function PrintHashMap(hash : HashMap[Integer, String]) { Console.WriteLine(\"`hash` \\n{\"); foreach(var pair in hash.All) { Console.WriteLine(\" {`pair.Key`, `pair.Value`}\"); } Console.WriteLine(\"}\"); } HashMap Access HashMap elements can be accessed for reading or writing in a few different ways which have different primary use cases. The [] Operator The [] (pronounced subscript) operator is the primary way to access any value// within a HashMap. When a valid //key is passed to the subscript operator the corresponding value is returned from the HashMap. The [] operator can also be used to assign new values to keys within the HashMap. var hash = HashMap[Integer, String]() { {1, \"one\"}, {2, \"two\"} }; hash[3] = \"three\"; Console.WriteLine(hash[1]); Console.WriteLine(hash[2]); Console.WriteLine(hash[3]); one two three IMPORTANT: If an invalid key is passed to the [] operator a runtime exception will be thrown: Get Functions Another way to access the KeyValue pairs of a HashMap is to use the get functions. HashMap.Get HashMap.Get behaves the same as the [] operator, as it is the function actually called by the [] operator. However, being a function, Get can be referenced by a delegate. var hash = HashMap[Integer, String]() { {1, \"one\"}, {2, \"two\"}, {3, \"three\"} }; Console.WriteLine(hash.Get(1)); Console.WriteLine(hash.Get(2)); Console.WriteLine(hash.Get(3)); one two three HashMap.GetOrDefault HashMap.GetOrDefault behaves the same as Get, but instead of throwing an exception when passed an invalid key it returns a default// value that is the same type as the //values of the HashMap. var hash = HashMap[Integer, String]() { {1, \"one\"}, {2, \"two\"}, {3, \"three\"} }; Console.WriteLine(hash.GetOrDefault(1, \"default\")); Console.WriteLine(hash.GetOrDefault(2, \"default\")); Console.WriteLine(hash.GetOrDefault(3, \"default\")); Console.WriteLine(hash.GetOrDefault(4, \"default\")); Console.WriteLine(hash.GetOrDefault(5)); one two three default (null) String HashMap.GetOrError GetOrError has the same functionality as Get, the only difference being that it is not called by the [] operator. Adding to a HashMap There are multiple ways to add KeyValue pairs to HashMaps. Add, Set, and the [] operator can all be used to add KeyValue pairs to the HashMap. HashMap.Add Add takes a key and //value//, adding the pair to the HashMap. If the given key already exists then a runtime exception will be thrown. var hash = HashMap[Integer, String](); hash.Add(1, \"one\"); hash.Add(2, \"two\"); hash.Add(3, \"three\"); this.PrintHashMap(hash); HashMap[Integer, String] (20744110) { {2, two} {1, one} {3, three} } It should be noted that the Add function is called for each KeyValue pair when a HashMap is populated using an initializer list. HashMap.Set Set is very similar to Add. Set takes a key// and //value//, adding the pair to the HashMap if the key does not exist. If the key does exist then the //value paired with the given key will be replaced with the //given value//. var hash = HashMap[Integer, String](); hash.Set(1, \"one\"); hash.Set(2, \"two\"); hash.Set(2, \"three\"); this.PrintHashMap(hash); HashMap[Integer, String] (20744110) { {2, three} {1, one} } HashMap.SetOrOverwrite The relationship of Set and SetOrOverwrite is simliar to that of Get and GetOrError in that they have the same behavior. However, like Get, Set is called by the [] operator during assignment. var hash = HashMap[Integer, String](); hash.SetOrOverwrite(1, \"one\"); hash.SetOrOverwrite(2, \"two\"); hash.SetOrOverwrite(2, \"three\"); this.PrintHashMap(hash); HashMap[Integer, String] (20744110) { {2, three} {1, one} } HashMap.SetOrIgnore SetOrIgnore behaves the same as Set except if the given key already exists the function returns leaving the HashMap unmodified. var hash = HashMap[Integer, String](); hash.SetOrIgnore(1, \"one\"); hash.SetOrIgnore(2, \"two\"); hash.SetOrIgnore(2, \"three\"); this.PrintHashMap(hash); HashMap[Integer, String] (20744110) { {2, two} {1, one} } HashMap.SetOrError SetOrError follows a similiar behavior to GetOrError. If the key passed to SetOrError already exists in the HashMap then an exception will be thrown. HashMap Container Operations HashMap.Clear The Clear function simply removes all KeyValue pairs from the HashMap. var hash = HashMap[Integer, String](); hash[1] = \"one\"; hash[2] = \"two\"; hash[3] = \"three\"; this.PrintHashMap(hash); hash.Clear(); this.PrintHashMap(hash); HashMap[Integer, String] (20712538) { {2, two} {1, one} {3, three} } HashMap[Integer, String] (20712538) { } HashMap.Contains Contains takes a parameter matching the key type of the HashMap and returns true if the given key exists in the HashMap. var hash = HashMap[Integer, String](); hash[1] = \"one\"; hash[2] = \"two\"; hash[3] = \"three\"; this.PrintHashMap(hash); Console.WriteLine(\"This HashMap contains the key 2: `hash.Contains(2)`\"); Console.WriteLine(\"This HashMap contains the key 4: `hash.Contains(4)`\"); HashMap[Integer, String] (20713030) { {2, two} {1, one} {3, three} } This HashMap contains the key 2: true This HashMap contains the key 4: false HashMap Range Functions There are a number of HashMap properties providing iterable ranges that are particularly useful for examining each pair in a HashMap. HashMap.All Contains an iterable range of all KeyValue pairs in the HashMap. function PrintHashMap(hash : HashMap[Integer, String]) { Console.WriteLine(\"`hash` \\n{\"); foreach(var pair in hash.All) { Console.WriteLine(\" {`pair.Key`, `pair.Value`}\"); } Console.WriteLine(\"}\"); } The PrintHashMap function is an excellent example of how one may use All. HashMap.Keys & HashMap.Values Keys and Values return iterable ranges of containing the keys and values in the HashMap correspondingly. HashMap.Count Count returns the number of pairs in the HashMap. Related Materials Manual Arrays Reference Arrays integer string Task T1317"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/inheritance.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/inheritance.html",
    "title": "The base Keyword | ZilchEngine",
    "keywords": "Inheritance allows a child// class to automatically receive all of the data and functionality defined within the //base class. class Feline { constructor() { } } // A colon designates an identifier for a base class follows. class Lion : Feline { // a constructor is not necessary when one is inherited from the base class. } var cat = new Feline(); var simba = new Lion(); // Instantiated from the inherited constructor In the above example the variable simba can be instantiated as a Lion using the constructor from Feline. The base Keyword The base keyword is for use when defining an inherited class; it allows you to call the constructor of the base class being inherited from before running an explicitly defined constructor. class Animal { var Legs : Integer = 4; constructor() { } constructor(legs : Integer) { this.Legs = legs; } function ToString() : String { var builder = new StringBuilder(); builder.Write(\"Legs: \"); builder.Write(this.Legs); return builder.ToString(); } } The class animal defines a non-default constructor which takes a number of legs for the animal as a parameter. class Human : Animal { constructor() : base(2) { } } The class Human which inherits from Animal can use Animal's constructor by using the base keyword. In this situation either the default or non-default constructor from Animal could be called using based. Which constructor is called is determined by the parameters passed to the () after thebase keyword. Because 2 is passed to the base keyword the non-default constructor of Animal is called before any implementation within the defined default constructor of Human. var animal : Animal = new Animal(); Console.WriteLine(animal.ToString()); // Legs: 4 var jerry = new Human(); Console.WriteLine(jerry.ToString()); // Legs: 2 In this runtime example both Animal and Human are instantiated using their default constructor. ---------------- Begin Game --------------- Legs: 4 Legs: 2 As can be seen in the console output the Human default constructor calls the non-default constructor of Animal and passes it 2. Classes & Structs Although Nada currently does not throw an error, erratic and unexpected behavior will result from having a class inherit from a struct and vice versa. i.e. // Mismatching the struct/class between parent and child struct MyBaseStruct { constructor() { } } class MyClass : MyBaseStruct { constructor() : base() { } } // Leads to issues such as the inability to cast to the base class type. var incompatible: MyClass = new MyClass(); Console.WriteLine(typeid(incompatible).Name); // MyClass Console.WriteLine(typeid(incompatible as MyBaseStruct).Name); // This won't compile. The Virtual Keyword Virtual is used to give Base classes the ability to determine some functions as being able to be overridden by its derived classes. The new Speak function defined in Animal will serve as an example: class Animal { var Legs:Integer = 4; constructor() { } constructor(legs : Integer) { this.Legs = legs; } function ToString() : String { var builder = new StringBuilder(); builder.Write(\"Legs: \"); builder.Write(this.Legs); return builder.ToString(); } [Virtual] function Speak() : String { return \"...\"; } } By default, animals don't say anything, so a string that says ... is returned. It is known that there are animals that do speak, so the [Virtual] attribute is added to the function to let other developers know that if a class is is derived from Animal, the functionality of Speak may be overridden. class Human : Animal { constructor() : base(2) { } [Override] function Speak() : String { return \"Hello\"; } } Humans do speak, so changeing the funcitonality of Human.Speak to say something other than ... makes perfect sense. The [Override] attribute applied to Speak marks this implementation of the Speak function to replace Animal.Speak which is marked as [Virtual]. This can also be extended to other classes like a Cat: class Cat : Animal { // Cats have 4 legs, so let's update the constructor constructor() : base(4) { } [Override] function Speak() : String { return \"Meow\"; } } Now, this is great in the fact that we can now do something like the following: var animal = Animal(); Console.WriteLine(animal.Speak()); var human = Human(); Console.WriteLine(human.Speak()); var cat = Cat(); Console.WriteLine(cat.Speak()); ... Hello Meow The real magic of inheritance comes in the idea that a class of a derived class can be stored in a variable that matches the type of the base class. var humanIsAnAnimal : Animal = Human(); Console.WriteLine(humanIsAnAnimal.Speak()); Even though the variable is of type Animal, the Human version of the function is called: Hello This is because whenever a virtual method is called, the run-time type of the object is checked for an overriding member. The overriding member in the most derived class will then be called, which might be the original function if the derived class(es) have not overridden it. This can be quite useful with an array of Animals. var a : Animal = Animal(); var b : Human = Human(); var c : Animal = Human(); var d : Cat = Cat(); var array : Array[Animal] = Array[Animal](){a,b,c,d}; foreach (var animal in array) { Console.WriteLine(animal.Speak()); } ... Hello Hello Meow Calling Parent Functions It's also possible to call the parent version of a function from a child class. In order to do this, the object must be cast to the base type and then use the non-virtual operator (~>) to call the base version: var d : Cat = Cat(); (d as Animal)~>Speak(); ... Related Materials Manual attributes"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/keywords.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/keywords.html",
    "title": "The following are keywords used in Nada: | ZilchEngine",
    "keywords": "Nada reserved keywords. The following are keywords used in Nada: | as | base | break | class | constructor | | continue | debug | delegate | delete | destructor | | do | else | enum | false | flags | | for | foreach | function | get | if | | in | loop | new | null | ref | | return | sends | set | struct | throw | | true | typeid | value | var | while | | this | local | scope | | Below are keywords unused by Nada, but they are still reserved keywords: | abstract | alias | alignof | assert | auto | | case | catch | checked | const | default | | dynamic | explicit | export | extern | finally | | fixed | friend | global | goto | immutable | | implicit | import | yield | include | inline | | interface | internal | is | typeof | lock | | module | mutable | namespace | operator | out | | override | package | params | partial | positional | | private | protected | public | readonly | register | | require | where | sealed | signed | sizeof | | stackalloc | static | switch | timeout | try | | typedef | typename | unchecked | unsafe | unsigned | | using | virtual | volatile | |"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/looping.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/looping.html",
    "title": "The Loop Keyword | ZilchEngine",
    "keywords": "Looping is a technique used to execute code an arbitrary number of times. The Loop Keyword The loop keyword defines the most basic type of looping structure in Nada. This is most useful when processing each element in a container, where the container size may not be known. var i = 0; var sum = 0; loop { sum += i; Console.WriteLine(sum); if (i >= 3) return; ++i; } 0 1 3 The values of sum printed are 0, 1, and 3 because sum += 0, sum += 1, and sum += 2 are all executed in sequence with a call to Console.WriteLine after each. Whatever code is in the block following loop will be repeatedly executed until the loop is escaped with return, break, or continue. return is a directive that leaves the function, and therefore can be used to exit a loop. While and Do While While the loop keyword is sufficient in executing code an arbitrary ammount of times, there are other types of loop blocks that make for cleaner code. var i = 0; var sum = 0; while(i < 3) { sum += i; Console.WriteLine(sum); ++i; } 0 1 3 The above snippet will sum together numbers in sequence like in the Loop code snippet, but this time using the while keyword. while will run when i is 0, 1, and 2, and the sequence of sums will be the same as in the Loop code snippet. var i = 0; var sum = 0; do { sum += i; Console.WriteLine(sum); ++i; } while(i < 3) 0 1 3 The above snippet also produces the same result as the While code snippet, but with do while instead of while. The do while structure is similar to a while loop, but with the looping condition is checked after the loop is run. One should be mindful of the implications of do while, that whatever is in the code block following do will run at least once. Still, the do while block is executed when i is 0, 1, and 2. var i = 100; var sum = 0; do { sum += i; Console.WriteLine(sum); ++i; } while(i < 3) 100 Notice how the above code snippet is a modification of Do While 1, showing how choosing the wrong type of loop can result in logical errors. The initial value of i is now 100, and therefore the summation range is [100,3]. In the field of mathematics, [100,3] is an empty interval, and the proper sum would be 0. Since a do while is used here, the result is instead 100. If the above example instead used a while loop, the code block would never execute and the result would be 0. For loop A common use for looping is to iterate over a set, whether it's numbers or elements in a container. The for loop provides an even shorter syntax than the while loop. var myArray = Array[Integer](); var sum = 0; for (var j = 0; j < 3; ++j) { myArray.Add(j); } Console.WriteLine(myArray); for(var i = 0; i < 3; ++i) { sum += myArray.Get(i); Console.WriteLine(sum); } {0, 1, 2} 0 1 3 Notice how the above code snippet and the While code snippet loops produce the same result: 0, 1, and 3. First i is initialized to 0. Then in a loop, the i < 3 condition is checked, sum is increased and printed, and i is incremented at the end of the iteration. The for loop follows the format for(<initialization>; <condition>; <iteration>). In addition, the above code snippet uses an array. An array is a container with the indexable quality, which means the i-th element can be directly accessed. This access is done by calling the function myArray.Get. For Each loop The foreach loop is reserved for iterating over containers, and is shorter than its equivalent for loop. var myArray = Array[Integer](); var sum = 0; for (var i = 0; i < 3; ++i) { myArray.Add(i); } Console.WriteLine(myArray); foreach (var val in myArray) { sum += val; Console.WriteLine(sum); } {0, 1, 2} 0 1 3 Any array that is indexable is also //iteratable//. The Array container in Nada can be iterated over as shown in foreach (var val in myArray). Take note that the index isn't accessable in a foreach loop, and that foreach should only be used when the order that elements are iterated over isn't relevant. Navigating Loops There are two ways to exit from a loop. When the loop condition is evaluated to false, the loop will end. The other way is to use either return or break. As explained on the function page, return will exit the current function while break will leave the next highest loop. The following code snippet uses myArray from the For Each code snippet. var target : Integer = 1; for (var index : Integer = 0; index < myArray.Count; ++index) { if(myArray.Get(index) == target) { Console.WriteLine(index); break; } } Console.WriteLine(\"Loop Finished\"); 1 Loop Finished The above code snippet looks for the index of the value 1 in myArray. The array holds {0, 1, 2} from the For Each code snippet, so the index of the value 1 is 1. Once the break statement is reached, Nada will jump directly to the final }. This is the closing brace of the for loop block. Nested Loops Any loop inside another loop is considered nested. Be aware in these situations that break will exit out of only one loop, while return will leave all of them. for (var i = 0; i < 3; ++i) { for (var j = 0; j < 3; ++j) { if(j >= i) break; Console.WriteLine(\"(`i`, `j`)\"); } } (1, 0) (2, 0) (2, 1) Notice how the break statement only exits the inner for loop. The string passed into Console.WriteLine will evaluate to (1, 0), (2, 0), and (2, 1). In other words, the result is printed when j < i. Continue The continue keyword operates similarly to break. While break will jump to the end of the loop's scope and exit the loop, continue will only jump to the end of the loop's scope. for(var i = 0; i < 5; ++i) { if(i == 2) continue; Console.WriteLine(i); } 0 1 3 4 Notice how Console.WriteLine(i) executes for each i in the range [0, 4] with the exception of 2. When i == 2, continue is reached and the next iteration is reached. Also note that even when using continue in a for loop, the iterative statement ++i is still executed. Condensed Loops In the case that a loops only contains one statement within its scope (simliar to conditionals ) then no {} brackets are needed. for(var i = 0; i < 3; ++i) Console.WriteLine(i); Console.WriteLine(\"-\"); 0 1 2 - Here you can see that the second instance of Console.WriteLine(i); is only executed once as it falls outside the scope of the for loop. Related Material Manual functions strings Code Reference array_t"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/memory_management.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/memory_management.html",
    "title": "Types of Memory Storage | ZilchEngine",
    "keywords": "This section covers the basics of memory management in Nada. Specifically, the topics covered include: Types of Memory Storage, #allocating-memory, and #freeing-memory Types of Memory Storage By-Value There are two main types of storage, by-value and by-reference (or by-ref for short). By-value is stored on the local stack and the storage is cleaned up once it goes out of scope. When passed into a function it copies data by-value. Structs and primitives are by-value. struct ByValue { var ID: Integer = 0; constructor(guid: Integer) { this.ID = guid; } [Static] function IncrementID(a: ByValue) { a.ID += 1; } function ToString() : String { return \"ID: `this.ID`\\n\"; } } // If we were to test it: var byValA: ByValue = local ByValue(1111111); Console.Write(\"byValA \"); Console.WriteLine(byValA.ToString()); // byValA ID: 1111111 // by-value copy does not update the passed in argument. ByValue.IncrementID(byValA); // Since it was copied, the changes were to a // local variable. The local variable is destroyed at Console.Write(\"byValA \"); // the end of the function's scope. Console.WriteLine(byValA.ToString()); // byValA ID: 1111111 byValA ID: 1111111 byValA ID: 1111111 By-Reference By-reference is stored on the heap and the storage is cleaned up once there are no longer references to it, or the handle is explicitly deleted in code. When passed into a function it copies it by-reference. Classes and structs promoted with the ref keyword are by-reference. By-Ref Storage in a Struct and a Class struct ByValue { var ID: Integer = 0; constructor(guid: Integer) { this.ID = guid; } [Static] function IncrementID(a: ref ByValue) { a.ID += 1; } function ToString() : String { return \"ID: `this.ID`\\n\"; } } class ByRef { var ID: Integer = 0; constructor(guid: Integer) { this.ID = guid; } [Static] function IncrementID(a: ByRef) { a.ID += 1; } function ToString() : String { return \"ID: `this.ID`\\n\"; } } // If we were to test ByValue: var byValC: ref ByValue = new ByValue(3333333); Console.Write(\"byValC \"); Console.WriteLine(byValC.ToString()); // byValC ID: 3333333 ByValue.IncrementID(byValC); // Similar to a pointer, by-ref argument allows for Console.Write(\"byValC \"); // persistent changes to its internals: Console.WriteLine(byValC.ToString()); // byValC ID: 3333334 // If we were to test ByRef: var byRefA: ByRef = new ByRef(5555555); Console.Write(\"byRefA \"); Console.WriteLine(byRefA.ToString()); // byRefA ID: 5555555 ByRef.IncrementID(byRefA); // Since classes are made to be passed by-reference // this works without adding the ref keyword Console.Write(\"byRefA \"); // (adding it would make it not compile!) Console.WriteLine(byRefA.ToString()); // byRefA ID: 5555556 byValC ID: 3333333 byValC ID: 3333334 byRefA ID: 5555555 byRefA ID: 5555556 Allocating Memory Null Null is a special type of its own: Console.Write(typeid(null).Name); // Null NOTE: A by-ref type can be set to null, but a by-value type cannot. Creating variables by-value and by-ref Local When working with by-value types that have constructors, such as structs or more complex stack primitive data types, the keyword local may be used: var up: Real3 = local Real3(0.0, 1.0, 0.0); var stackStructInstance: CustomStruct = local CustomStruct(); The compiler will infer the use of local for by-value types: // This is also valid. var up: Real3 = Real3(0.0, 1.0, 0.0); var stackStructInstance: CustomStruct = CustomStruct(); New When working with classes, references, or other or anything located on the heap with a constructor, use the new keyword: var heapObject: CustomClass = new CustomClass(); var heapStructInstance: ref CustomStruct = new CustomStruct(); Once again the compiler will infer the use of new for by-ref types: // This is also valid. var heapObject: CustomClass = CustomClass(); Since structs are by-value, in order to get a ref you must specify new. // This does not compile var heapStructInstance: ref CustomStruct = CustomStruct(); The value being assigned to 'heapStructInstance' must be of type 'ref CustomStruct'. Its type is 'CustomStruct'. IMPORTANT: Nada does not currently have a dereferencing operator. Although you can still use the ref type with the dot operator to access functionality, those typed with ref will not be equivalent to the non-ref type. Anything expecting a// non-ref //type will not accept a// ref //type without dereferencing. Consider the following: var heapObject: ref CustomStruct = new CustomStruct(); // The following will not compile because they are different types: // CustomStruct != ref CustomStruct var stackObject: CustomStruct = heapObject; constructors Constructors are required when calling local or new. The only times you wouldn't have a constructor is when your class or struct lacks instanced data, or you are using a primitive data type that can be created from a literal. class MyClass { constructor() { // Initialize members here. } } A class or struct may possess one or more constructors. Like functions they can be overloaded via their named_parameters. Special syntax is also used when constructing a derived class, see inheritance for more. Freeing Memory Nada does not have a full-fledged garbage collector, but it does have ref-counted handles. When you use local to make things on the stack they are cleaned up upon leaving the scope. When you use new to construct objects on the heap they are cleaned up when: You call delete on the handle. No references to the object exist. Important things to note: Nada cannot detect cycles. These must be deleted explicitly. // Cycles will not get cleaned up without explicitly deleting. var gh: ARefHolder = new ARefHolder(\"gh\"); var ef: ARefHolder = new ARefHolder(\"ef\"); // Simply having one point at another is not // a cycle, it cleans up just fine. gh.Handle = ef; // Both gh & ef will clean up at the end of the scope. var ab: ARefHolder = new ARefHolder(\"ab\"); var ba: ARefHolder = new ARefHolder(\"ba\"); ab.Handle = ba; ba.Handle = ab; Console.WriteLine(\"Note ba's handle is valid: `ba.Handle`\"); // Cleans up when you explicitly delete one of the // Objects as it becomes null and nulls all references // to it as ARefHolder is a NadaType. delete ab; Console.WriteLine(\"Note ba's handle has been made null: `ba.Handle`\"); var cd: ARefHolder = new ARefHolder(\"cd\"); var dc: ARefHolder = new ARefHolder(\"dc\"); cd.Handle = dc; dc.Handle = cd; // Making a reference type null does not delete it. // The object is still alive in dc's handle // and since that handle has an object that refers // back to it; the cycle remains uncollected. (memory leak) cd = null; var ij: ARefHolder = new ARefHolder(\"ij\"); var ji: ARefHolder = new ARefHolder(\"ji\"); ij.Handle = ji; ji.Handle = ij; // Making null the cyclic handle breaks the cycle // allowing ref-counting to take care of the clean up: ij.Handle = null; var abc: ARefHolder = new ARefHolder(\"abc\"); var bca: ARefHolder = new ARefHolder(\"bca\"); var cab: ARefHolder = new ARefHolder(\"cab\"); abc.Handle = bca; bca.Handle = cab; cab.Handle = abc; // Without deleting any of the objects // e.g. delete abc; // or breaking the cycle // e.g. abc.Handle = null; // abc, bca, and cab will leak. delegates containing an instance member function hold the this handle to the object, and thus will keep ref-counted objects alive. class Utility { [Static] function NullDelegate() { } } class DelegateHolder { var Name:String = \"Unnamed\"; var Greeting: delegate() = Utility.NullDelegate; constructor(name: String) { this.Name = name; } function Introduce() { Console.WriteLine(\"Hi I'm `this.Name`\"); } destructor() { onsole.WriteLine(\"Dtor: `this.Name`\"); } } class Driver { function DelegateLeaking() { // Here are five Objects with the ability to hold delegates: var leaky = new DelegateHolder(\"Leaky\"); var tarp = new DelegateHolder(\"Tarp\"); var waterproof = new DelegateHolder(\"Waterproof\"); var mop = new DelegateHolder(\"Mop\"); var morph = new DelegateHolder(\"Morph\"); // This one has another object's delegate. // There is no cycle so they are all cleaned up // via ref-counting at the end of the scope. tarp.Greeting = waterproof.Introduce; // This instance holds a delegate to its own function. // The delegate, referring to a member function, includes // a handle to the instance it is associated with. // This creates a cycle between the delegate and the // the instance. leaky.Greeting = leaky.Introduce; // This will leak. mop.Greeting = mop.Introduce; morph.Greeting = morph.Introduce; // To not leak you'd have to either manually delete: delete mop; // or break the cycle by changing // what the delegate points to: morph.Greeting = tarp.Introduce; // Upon completion the console prints out: // Dtor: Mop // Dtor: Morph // Dtor: Tarp // Dtor: Waterproof // The Dtor for Leaky is never called; it is a // memory leak in this snippet. } } Deleting variables // Using ByValue and ByRef as defined above & the Utility class: class Utility { [Static] function SafeToString(a: ref ByValue, name: String) { Console.Write(name); if (a == null) { Console.WriteLine(\" is null\"); } else { Console.WriteLine(a.ToString()); } } [Static] function SafeToString(a: ByRef, name: String) { Console.Write(name); if (a == null) { Console.WriteLine(\" is null\"); } else { Console.WriteLine(a.ToString()); } } } // Examples of deleting: // 1. Delete a by-value struct instance: var byValA: ByValue = local ByValue(1111111); // Unable to delete a non reference type; delete byValA; // This line won't compile. // 2. Delete an instance of a struct promoted to by-reference: var byValB: ref ByValue = new ByValue(1111111); var byValC: ref ByValue = byValB; var byValD: ref ByValue = byValB; var byValK: ref ByValue = byValC; // Utility function calls ToString method, when ref is valid. // If invalid, it indicates it is null. Utility.SafeToString(byValB, \"byValB\"); // byValBID: 1111111 Utility.SafeToString(byValC, \"byValC\"); // byValCID: 1111111 Utility.SafeToString(byValD, \"byValD\"); // byValDID: 1111111 Utility.SafeToString(byValK, \"byValK\"); // byValKID: 1111111 // Simply use the delete keyword on the handle. delete byValB; // Since these are all handles to NadaTypes, all references // are made null. Utility.SafeToString(byValB, \"byValB\"); // byValB is null Utility.SafeToString(byValC, \"byValC\"); // byValC is null Utility.SafeToString(byValD, \"byValD\"); // byValD is null Utility.SafeToString(byValK, \"byValK\"); // byValK is null // 3. Delete an instance of a class: var byRefA: ByRef = new ByRef(22222222); var byRefB: ByRef = byRefA; var byRefC: ByRef = byRefA; var byRefK: ByRef = byRefC; Utility.SafeToString(byRefA, \"byRefA\"); // byRefAID: 22222222 Utility.SafeToString(byRefB, \"byRefB\"); // byRefBID: 22222222 Utility.SafeToString(byRefC, \"byRefC\"); // byRefCID: 22222222 Utility.SafeToString(byRefK, \"byRefK\"); // byRefKID: 22222222 delete byRefA; // Since these are all handles to NadaTypes, all references // are made null. Utility.SafeToString(byRefA, \"byRefA\"); // byRefA is null Utility.SafeToString(byRefB, \"byRefB\"); // byRefB is null Utility.SafeToString(byRefC, \"byRefC\"); // byRefC is null Utility.SafeToString(byRefK, \"byRefK\"); // byRefK is null Important things to note: Nada always sets the deleted handle to null after deletion. Only if the handle points to a NadaType// does it make null the other objects referencing it. It //cannot automatically do things for objects bound through C++. In order to have C++ BoundTypes work the same as NadaTypes it must be handled in C++ by the object bound. Deleting in Nada forwards delete calls to C++ bound objects. Thus, when you call delete in Nada on a C++ BoundType, that bound type will have the C++ delete called allowing it to call its destructor. Destructors class MyClass { constructor() { // Initialize members here. } destructor() { // Do any object clean-up here. } } Destructors allow you to do any necessary clean up on your part, such as free memory. You can only have one, and there are no parameters or return values. It's important to know that stack allocated instances (i.e. non-ref by-value types, or non-ref primitives) have no guarantee they'll call the destructor. Only those objects with handles that do not leak are guaranteed to have their destructors called. Related Materials Manual Classes Structs Functions Keywords named_parameters inheritance delegates"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/operators_precedence_chart.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/operators_precedence_chart.html",
    "title": "| ZilchEngine",
    "keywords": "Below is a complete list of the operands sorted by order of operation. Precedence Operator Description Associativity 1 () function call LeftToRight ------------ --------------- [] index operator . dot operator 2 as casting operator ------------ 3 + unary plus RightToLeft ------------ --------------- - unary minus ++ pre-increment -- pre-decrement ! not ~ bitwise negation @ property delegate 4 ^ exponent LeftToRight ------------ --------------- 5 * multiplication ------------ / division % modulo, remainder 6 + addition ------------ - subtraction 7 << bitshift left ------------ >> bitshift right 8 < less than ------------ <= less than or equal to > greater than >= greater than or equal to 9 == equality ------------ != inequality 10 & bitwise and ------------ 11 $ bitwise xor ------------ 12 | bitwise or ------------ 13 && logical and ------------ 14 || logical or ------------ 15 = assignment RightToLeft ------------ --------------- += assignment of sum -= assignment of difference *= assignment of product /= assignment of quotient %= assignment of remainder ^= assignment of power <<= assignment of bitwise left shift >>= assignment of bitwise right shift &= assignment of bitwise and $= assignment of bitwise xor |= assignment of bitwise or"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/properties.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/properties.html",
    "title": "Parts of a Property's definition | ZilchEngine",
    "keywords": "Get-Sets are syntactic sugar. They define two functions that look like variable usage. class Example { // This is a field. var SquareSideLength: Real = 2.0; // This is a property. var Perimeter : Real { get { return this.SquareSideLength * 4.0; } set { this.SquareSideLength = value * 0.25; } } } class Driver { function Test() { // If we were to test it: var square = Example(); // Nothing stops a user from setting the underlying value. square.SquareSideLength = 3.0; Console.WriteLine(square.Perimeter); // 12.0 Console.WriteLine(square.SquareSideLength); // 3.0 square.Perimeter = 1.0; // SquareSideLength = 0.25 Console.WriteLine(square.Perimeter); // 1.0 Console.WriteLine(square.SquareSideLength); // 0.25 square.Perimeter = 8.0; // SquareSideLength = 2.0 } } ---------------- Begin Game --------------- 12 3 1 0.25 This get-set could easily be replaced by functions. The following is its equivalent: class Example { var SquareSideLength: Real = 2.0; function GetPerimeter(): Real { return this.SquareSideLength * 4.0; } function SetPerimeter(value: Real) { this.SquareSideLength = value * 0.25; } } class Driver { function Test() { // If we were to test it we'd get the exact same results: var square = Example(); // Nothing stops a user from setting the underlying value. square.SquareSideLength = 3.0; Console.WriteLine(square.GetPerimeter()); // 12.0 Console.WriteLine(square.SquareSideLength); // 3.0 square.SetPerimeter(1.0); // SquareSideLength = 0.25 Console.WriteLine(square.GetPerimeter()); // 1.0 Console.WriteLine(square.SquareSideLength); // 0.25 square.SetPerimeter(8.0); // SquareSideLength = 2.0 } } ---------------- Begin Game --------------- 12 3 1 0.25 NOTE: Get-sets are not fields, and thus they have no storage of their own. If data state is needed you'll have to make another field on the class to which you may refer. Although get-sets are not fields, fields can auto-generate the property interface using property_delegates. Parts of a Property's definition // The type specified refers to BOTH the return type of the getter // and the parameter type of the setter. var Perimeter : Real // Despite ``var`` keyword, Properties have no storage. { // get denotes the getter; it must return the type specified above. get { return this.SquareSideLength * 4.0; } // Body of getter is wrapped in {} // set denotes the setter; it must accept the type specified above. // value is a keyword that denotes the right hand side of the // assignment operator as passed in from the user. set { this.SquareSideLength = value * 0.25; } // Body of setter is wrapped in {} } Related Materials Manual property_delegates"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/property_delegates.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/property_delegates.html",
    "title": "Property Delegates as Function Parameters | ZilchEngine",
    "keywords": "Property Delegates can be generated from any field using the @ symbol. Fields are variables, but not all variables are fields. Local variables do not have the ability to be accessed via a property and they cannot be used in conjunction with the property delegate operator like fields can. class Cat { var Lives: Integer = 9; function Example() { // @, the property delegate operator, takes this.Lives // and creates a property delegate from it. var prop = @this.Lives; Console.WriteLine(typeid(prop).Name); // Property[Integer] Console.WriteLine(prop.Get()); // 9 prop.Set(7); Console.WriteLine(prop.Get()); // 7 Console.WriteLine(this.Lives); // 7 } } Property[Integer] 9 7 7 Property Delegates as Function Parameters Choosing to take a property delegate as a parameter allows the user to propagate side-effects to the parameters that would otherwise be lost on copies passed in by-value. class PropertyDelegateTest : NadaComponent { [Property] var MyProperty : Real = 5.0; function Initialize(init : CogInitializer) { Console.WriteLine(\"Before Drivers: `this.MyProperty`\") // this.DriverControl(this.MyProperty); Console.WriteLine(\"Between Drivers: `this.MyProperty`\") this.Driver(@this.MyProperty); Console.WriteLine(\"After Drivers: `this.MyProperty`\") } function Driver(prop : Property[Integer]) { prop.Set(15); Console.WriteLine(\"Inside Driver: `prop.Get()`); } function DriverControl(prop : Integer) { prop = 2; Console.WriteLine(\"Inside DriverControl: `prop`); } } Before Drivers: 5.0 Inside Driver: 15.0 Between Drivers: 15.0 Inside DriverControl: 2.0 After Drivers: 15.0 In this example it can be seen that when the property delegate of MyProperty is passed into the function Driver() it can be used to set the value of the member variable. This is because desprite the delegate itself being passed by value into the function it still contains a reference to MyProperty. However, when MyProperty is passed directly into the function DriverControl() it is also passed by value. The assignment of prop in DriverControl() is actually setting the value of the a local copy of MyProperty. When the function completes and reaches the end of its scope prop will cease to exist."
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/reflection.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/reflection.html",
    "title": "typeid | ZilchEngine",
    "keywords": "Reflection describes an objects ability to \"reflect\" on itself, generally this means to understand it's type and relationships to other types. Although Nada does not boast a robust reflection library it does have a basic typeid for by-value types and property_delegates: typeid var i = 0; var di = 0d; var real = 0.0; var double = 0.0d; var word = \"\"; var refType = null; var boolTrue = true; var boolFalse = false; var prop = new Property[Real](); Console.Write(\"integer, 0 is of type: \"); Console.WriteLine(typeid(i).Name); // integer, 0 is of type: Integer Console.Write(\"doubleinteger, 0d is of type: \"); Console.WriteLine(typeid(di).Name); // doubleinteger, 0d is of type: DoubleInteger Console.Write(\"real, 0.0 is of type: \"); Console.WriteLine(typeid(real).Name); // real, 0.0 is of type: Real Console.Write(\"doublereal, 0.0d is of type: \"); Console.WriteLine(typeid(double).Name); // doublereal, 0.0d is of type: DoubleReal Console.Write(\"string, \\\"\\\" is of type: \"); Console.WriteLine(typeid(word).Name); // string, \"\" is of type: String Console.Write(\"null, null is of type: \"); Console.WriteLine(typeid(refType).Name); // refTypeHandle, null is of type: Null Console.Write(\"boolean, true is of type: \"); Console.WriteLine(typeid(boolTrue).Name); // boolean, true is of type: Boolean Console.Write(\"boolean, false is of type: \"); Console.WriteLine(typeid(boolFalse).Name); // boolean, false is of type: Boolean Console.Write(\"Real property delegate is of type: \"); Console.WriteLine(typeid(prop).Name); // Real property delegate is of type: Property[Real] ---------------- Begin Game --------------- integer, 0 is of type: Integer doubleinteger, 0d is of type: DoubleInteger real, 0.0 is of type: Real doublereal, 0.0d is of type: DoubleReal string, \"\" is of type: String null, null is of type: Null boolean, true is of type: Boolean boolean, false is of type: Boolean Real property delegate is of type: Property[Real] String Interpolation Those types that are memory_management or delegates types can be inspected with string Interpolation: class Utility { constructor() { } [Static] function HelloWorld() { Console.WriteLine(\"Hello World\"); } function Add(a: Integer, b: Integer): Integer { return a+b; } } class Driver { function TypeidForRefAndDelegates() { var del = Utility.HelloWorld; var temp = new Utility(); var del2 = temp.Add; var vectorRef = new Real3(0.0, 1.0, 2.0); Console.Write(\"delegate(), Utility.HelloWorld can be string interpolated to read: \"); Console.WriteLine(\"`del`\"); Console.Write(\"delegate(a:Integer, b:Integer):Integer, Utility.Add\"); Console.Write(\" can be string interpolated to read: \"); Console.WriteLine(\"`del2`\"); Console.Write(\"ref Real3, (0.0, 1.0, 2.0) is of type: \"); Console.WriteLine(\"`vectorRef`\"); } } ---------------- Begin Game --------------- delegate(), Utility.HelloWorld can be string interpolated to read: Utility.HelloWorld() delegate(a:Integer, b:Integer):Integer, Utility.Add can be string interpolated to read: Utility.Add(a : Integer, b : Integer) : Integer ref Real3, (0.0, 1.0, 2.0) is of type: ref Real3 Console.DumpValue Useful in understanding the current state of a Nada object, Console.DumpValue prints out the names of the variables and their type, if a class, or their value if a basic, built-in data type. class TopLevel { var MyVariable: MidLevel = null; constructor() { } } class MidLevel { var MyVariable: BottomLevel = BottomLevel(false); constructor() { } } struct BottomLevel { var IsBottom: Boolean = true; var UpAxis: Real3 = Real3(0.0, 1.0, 0.0); constructor(param: Boolean) { this.IsBottom = param; } } class ReflectionDriver { [Static] function Dumping() { var top = TopLevel(); var mid = MidLevel(); var bot = BottomLevel(true); Console.DumpValue(top); Console.DumpValue(mid, 8); // The second parameter indicates the depth of recursion cut-off Console.DumpValue(bot); } } ---------------- Begin Game --------------- TopLevel MyVariable: (null) MidLevel MidLevel MyVariable: BottomLevel IsBottom: False UpAxis: (0, 1, 0) X: 0 Y: 1 Z: 0 BottomLevel IsBottom: True UpAxis: (0, 1, 0) Notice how the MidLevel dumps more information than the BottomLevel with comparable information, due to the second parameter. Related Materials Manual property_delegates memory_management delegates string classes"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/strings.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/strings.html",
    "title": "Making Strings | ZilchEngine",
    "keywords": "String is a Nada type used to represent text as a sequence of characters. Making Strings In Nada, a string literal is made by enclosing zero or more characters in double quotation marks: var greeting = \"hello world\"; var colorCode = \"#F9EF1A\"; var empty = \"\"; String Interpolation String interpolation is a way of evaluating an expression and inserting it directly into a string literal. In Nada, string interpolation is done using the grave accent character, ####. Anything in a string literal that is entered between two ####s is evaluated, and the result of that evaluation is used instead. For example: var xp = Integer.PositiveMax; var message = \"Gained `xp` experience points.\"; Console.WriteLine(message); message = \"Turn `Math.ToDegrees(Math.ACos(0.2)) - 15.0` degrees to starboard.\"; Console.WriteLine(message); message = \"This component is attached to `this.Owner`.\"; Console.WriteLine(message); Gained 2147483647 experience points. Turn 63.463 degrees to starboard. This component is attached to <Cog 'LevelSettings' [425]>. String interpolation presents a handy means of joining two strings: var str0 = \"GAME\"; var str1 = \"OVER\"; Console.WriteLine(\"`str0` `str1`\"); GAME OVER It can also be used to effectively \"append\" to a string: var evenDigits = \"\"; var oddDigits = \"\"; for (var i = 0; i < 10; ++i) { if (i % 2 == 0) evenDigits = \"`evenDigits` `i`\"; else oddDigits = \"`oddDigits` `i`\"; } Console.WriteLine(\"Even base-ten digits: `evenDigits`\"); Console.WriteLine(\"Odd base-ten digits: `oddDigits`\"); Even base-ten digits: 0 2 4 6 8 Odd base-ten digits: 1 3 5 7 9 Note that strings in Nada are immutable, which means they cannot be altered after they have been created. Thus, strictly speaking, no true appending takes place. In the above code block, where it appears that evenDigits is being appended via string interpolation, a new string is actually created using the previous value of evenDigits and the value of i, and that new string is assigned back to the evenDigits variable. (NOTE) Since this means of string appending involves the creation of another new string each time it occurs, it is less efficient than using a StringBuilder, which is intended for just this purpose. In certain situations, such as a deeply nested loop, this performance difference may be significant. Escape Sequences Some characters are entered in a string literal via special sequences of characters called //escape sequences//. In Nada, all escape sequences consist of a backslash followed by another character. // \\\" -- double quotation marks Console.WriteLine(\"Say \\\"hello\\\" to Dr. Cosmo for me.\"); Console.WriteLine(); // \\` -- grave accent Console.WriteLine(\"Press the \\` key to open the console\"); Console.WriteLine(); // \\\\ -- backslash Console.WriteLine(\"C:\\\\Logs\\\\Analytics\\\\ForestLevel.Analytics.gamedata\"); Console.WriteLine(); // \\n or \\r -- newline Console.WriteLine(\"BEWARE\\n OF\\r DOUG\"); Console.WriteLine(); // \\t -- horizontal tab Console.WriteLine(\"+---+---+---+\"); Console.WriteLine(\"1\\t12\\t123\\t|\"); Console.WriteLine(\"+---+---+---+\"); Say \"hello\" to Dr. Cosmo for me. Press the ` key to open the console C:\\Logs\\Analytics\\ForestLevel.Analytics.gamedata BEWARE OF DOUG +---+---+---+ 1 12 123 | +---+---+---+ Strings and StringRanges StringRange is a separate but related class to String. It is an iterable range that can be used in a For Each loop. A string can be implicitly cast to StringRange, so a string can be passed into any function that expects a StringRange. However, a StringRange cannot be implicitly cast to String: var string = \"\"; var stringRange = StringRange(); this.FunctionTakingString(string); // okay *this.FunctionTakingString(stringRange); * error this.FunctionTakingString(stringRange.ToString()); // okay this.FunctionTakingStringRange(string); // okay this.FunctionTakingStringRange(stringRange); // okay Static String Functions As with all static functions, the static functions of the String class are not invoked from instances of the class, but instead are found in the String namespace itself. Compare Compare returns an Integer indicating the relative sort order of the two given strings; that is, whether one string would be sorted before another when comparing the character codes of the two strings: var str0 = \"abc\"; var str1 = \"def\"; Console.WriteLine(String.Compare(str0, str1)); Console.WriteLine(String.Compare(str1, str0)); Console.WriteLine(String.Compare(str0, str0)); -1 1 0 This results in more or less the same ordering as one would use to sort entries in an English dictionary, except that because it goes by character codes, uppercase letters are sorted before lowercase letters, etc.: var str0 = \"cat\"; var str1 = \"dog\"; var str2 = \"DOG\"; Console.WriteLine(String.Compare(str0, str1)); Console.WriteLine(String.Compare(str0, str2)); -1 1 This method is handy for sorting arrays of strings. Sort is an Array method that sorts an array in place using a given comparison function: var strings = Array[String](); strings.Add(\"hi\"); strings.Add(\"greetings\"); strings.Add(\"nice to see you\"); strings.Add(\"good morning\"); Console.WriteLine(strings); strings.Sort(String.Compare); // the Compare function is passed as a delegate Console.WriteLine(strings); {hi, greetings, nice to see you, good morning} {good morning, greetings, hi, nice to see you} Concatenate Concatenate can be used to join two existing strings: Console.WriteLine(String.Concatenate(\"exa\", \"mple\")); example FormatC FormatC produces a string using C-style string formatting syntax: var score = 12340; Console.WriteLine(String.FormatC(\"Score: %08d\", score)); var hull = 100.0 * 43.0 / 64.0; // actual value 67.1875 Console.WriteLine(String.FormatC(\"Hull integrity at %.2f percent\", hull)); Score: 00012340 Hull integrity at 67.19 percent FormatC uses the same syntax as the C printf function, with the following notes: the p format specifier can only be used with references to objects of reference types the n format specifier cannot be used the # flag can only be used with the o, x, and X specifiers the . precision marker must have its precision value specified FromRune FromRune returns a one-character string that consists of the given rune, which can either be passed in directly, or be specified by its code point: Console.WriteLine(String.FromRune(65)); Console.WriteLine(String.FromRune(Rune(90))); A Z IsNullOrEmpty and IsNullOrWhitespace IsNullOrEmpty returns true if the given string is either null or the empty string, \"\", and false otherwise. IsNullOrWhitespace works just the same way, except that it also returns true if the given string consists only of whitespace characters: Console.WriteLine(String.IsNullOrWhitespace(\" \\n \\t \")); true Join Join combines two, three, or four strings into one, placing a given separator string between them in the result: var word0 = \"Eeny\"; var word1 = \"Meeny\"; var word2 = \"Miney\"; var word3 = \"Moe\"; var separator = \", \"; Console.WriteLine(String.Join(separator, word0, word1, word2, word3)); Eeny, Meeny, Miney, Moe String Properties All All converts the string into a StringRange. In Nada, strings can be implicitly cast to StringRanges, so it is typically not necessary to use this property: // Contains takes a StringRange Console.WriteLine(\"homeowner\".Contains(\"meow\")); Console.WriteLine(\"homeowner\".Contains(\"meow\".All)); true true Begin and End Begin gets the RuneIterator at the start of the string, and End gets the RuneIterator at the end of it: var fileName = \"SnowLevel.Analytics.gamedata\"; var levelName = fileName.SubString(fileName.Begin, fileName.FindFirstOf(\".\").Begin); var extension = fileName.SubString(fileName.FindLastOf(\".\").End, fileName.End); Console.WriteLine(levelName); Console.WriteLine(extension); SnowLevel gamedata ByteCount and Count ByteCount gets the number of bytes in the string. For a string that contains one or more characters outside of the ASCII range, this will be different from the number of runes represented by the string (see ComputeRuneCount below). Consider the following code example, attached to a cog that has a SpriteText component whose Text property is set to the French word //gar�on//: var englishString = \"string\"; var frenchString = this.Owner.SpriteText.Text; Console.WriteLine(\"The English string has `englishString.ByteCount` bytes\"); Console.WriteLine(\"The French string has `frenchString.ByteCount` bytes\"); The English string has 6 bytes The French string has 7 bytes The Count property gets the same value as ByteCount, and exists for legacy purposes. Empty and IsNotEmpty Empty gets whether the string contains any characters at all: var userNameInput = \"\"; if (userNameInput.Empty) Console.WriteLine(\"Please enter a name.\"); else Console.WriteLine(\"Welcome, `userNameInput`.\"); Please enter a name. IsNotEmpty is always the exact opposite of Empty. String Methods String methods are found on string instances, including literals: Console.WriteLine(\"hello world\".ToUpper()); HELLO WORLD CompareTo A string's CompareTo method returns an Integer indicating its relative sort order when compared with a given StringRange. It works much like the static Compare function seen above, except that it compares a given StringRange to the string on which this method is being invoked. ComputeRuneCount The ComputeRuneCount method calculates the number of runes represented by the string by iterating through it from its Begin iterator to its End. As noted above, a string that contains one or more characters outside of the ASCII range will have a different rune count from its byte count: var englishString = \"string\"; var frenchString = this.Owner.SpriteText.Text; Console.WriteLine(\"The English string has `englishString.ComputeRuneCount()` runes\"); Console.WriteLine(\"The French string has `frenchString.ComputeRuneCount()` runes\"); The English string has 6 runes The French string has 6 runes Contains The Contains method checks whether a string contains a given substring: var sentence = \"DR. COSMO: \\\"I'm looking for a person named Brianna.\\\"\"; var name0 = \"Brian\"; var name1 = \"Anna\"; Console.WriteLine(sentence); if (sentence.Contains(name0)) Console.WriteLine(\"* BRIAN: \\\"Did someone mention me?\\\"\"); if (sentence.Contains(name1)) Console.WriteLine(\"* ANNA: \\\"My ears are burning.\\\"\"); DR. COSMO: \"I'm looking for a person named Brianna.\" * BRIAN: \"Did someone mention me?\" As this example shows, Contains is case-sensitive, but it does not match only complete words. Brianna contains Brian, and it does contain anna, but not Anna. EndsWith and StartsWith The EndsWith method checks whether a string ends with a given substring: var fileNameToOpen = \"DesertLevel.Analytics.gamedata\"; var validFileExtension = \".gamedata\"; if (fileNameToOpen.EndsWith(validFileExtension)) Console.WriteLine(\"Opening `fileNameToOpen`....\"); else Console.WriteLine(\"`fileNameToOpen` is not a valid file\"); Opening DesertLevel.Analytics.gamedata.... The StartsWith method works the same way, except that it checks the beginning of the string instead the end. Replace The Replace method returns a new string, with all occurrences of a given old substring replaced with a given new substring: var dialogueFromFile = \"Oh, [HERO_NAME]! Your friend [VILLAIN_NAME] was looking for you.\"; var heroName = \"Brianna\"; var villainName = \"Dr. Cosmo\"; var dialogue = dialogueFromFile.Replace(\"[HERO_NAME]\", heroName); dialogue = dialogue.Replace(\"[VILLAIN_NAME]\", villainName); Console.WriteLine(dialogue); Oh, Brianna! Your friend Dr. Cosmo was looking for you. Split The Split method scans a string for a given delimiter StringRange of one or more characters. The substrings that were found separated by occurrences of that delimiter, if any, are returned as an iterable range. The delimiter itself is not present in the split results: var dataFromFile = \"0,0,2,0,5,4,1,1,0,0,0,1,1,3,5,1\"; var splitResults = dataFromFile.Split(\",\"); // splitResults now contains \"0\", \"0\", \"2\", \"0\", \"5\", \"4\", and so on var total = 0; foreach (var result in splitResults) total += Integer.Parse(result); Console.WriteLine(\"Data Total: `total`\"); Data Total: 24 NOTE: Parse is a static Integer function. It takes a StringRange and interprets it as if it were an Integer, and returns that value. Equivalent static functions exist in other classes, such as Real, DoubleInteger, etc. SubString, SubStringBytes, and SubStringFromRuneIndices The SubString method returns the snippet of a string that is bounded by the two given RuneIterators. This may be the entire string itself, or it may be a smaller portion thereof: var name = \"The Evil Dr. Cosmo\"; var firstSpace = name.FindFirstOf(\" \"); // firstSpace refers to the space directly after \"The\" var title = name.FindFirstOf(\"Dr.\"); // title refers to the \"Dr.\" between \"Evil\" and \"Cosmo\" var lastSpace = name.FindLastOf(\" \"); // lastSpace refers to the space directly before \"Cosmo\" var part0 = name.SubString(name.Begin, firstSpace.Begin); // \"The\" var part1 = \"Handsome but Misunderstood\"; var part2 = name.SubString(title.Begin, title.End); // \"Dr.\" var part3 = \"Eugene\"; var part4 = name.SubString(lastSpace.End, name.End); // \"Cosmo\" var part5 = \"IV\"; var revisedName = \"`part0` `part1` `part2` `part3` `part4` `part5`\"; Console.WriteLine(revisedName); The Handsome but Misunderstood Dr. Eugene Cosmo IV See also FindFirstOf See also FindLastOf Besides SubString, there are two other String methods that return substrings: SubStringBytes returns a string's substring that starts at the given byte index and runs for the given byte length: var str = \"abcdefghij\"; // 0123456789 // start ^ // 12345 // ^ 5 bytes long var sub = str.SubStringBytes(3, 5); Console.WriteLine(sub); defgh IMPORTANT: A string that contains characters that are outside of the ASCII range will not have a matching rune count and byte count. Using SubStringBytes on such a string may produce undesired behavior. SubStringFromRuneIndices returns a string's substring that starts at the given starting rune index and ends one past the given ending rune index: var str = \"abcdefghij\"; // 0123456789 // start ^ ^ one past the end var sub = str.SubStringFromRuneIndices(2, 9); Console.WriteLine(sub); cdefghi NOTE: Finding a given rune by its index requires a linear search through a string. Because SubStringFromRuneIndices requires two such searches, this method can be slower than SubString. In certain situations, such as a deeply nested loop, this performance difference may be significant. ToLower and ToUpper The ToLower method returns a copy of the original string with all of its letters converted to lowercase. Any character that is not an uppercase alphabetical character is unchanged: var sentence = \"gEt ReKT scRUb\"; var forbiddenWord = \"scrub\"; var lower = sentence.ToLower(); if (lower.Contains(forbiddenWord)) Console.WriteLine(\"You have been reported for bad manners.\"); else Console.WriteLine(sentence); You have been reported for bad manners. The ToUpper method is just like ToLower, except that it converts letters to uppercase: var name = \"Johnny\"; var upperName = name.ToUpper(); var dialogue = \"`upperName`: \\\"This is `name`.\\\"\"; Console.WriteLine(dialogue); JOHNNY: \"This is Johnny.\" Trim, TrimEnd, and TrimStart The Trim method returns a copy of the original string with all of its whitespace characters removed from its beginning and end: var untrimmedID = \" f08b47e1 \"; Console.WriteLine(\"Your ID is `untrimmedID`. Write it down.\"); var trimmedID = untrimmedID.Trim(); Console.WriteLine(\"Your ID is `trimmedID`. Write it down.\"); Your ID is f08b47e1 . Write it down. Your ID is f08b47e1. Write it down. TrimEnd and TrimStart work just the same as Trim, except that TrimEnd only trims whitespace characters from the end of the string, and TrimStart only trims from the start of the string. Related Materials Manual Looping Code Reference String StringRange StringBuilder StringSplitRange Rune RuneIterator"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/swizzle.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/swizzle.html",
    "title": "Understanding a Swizzle | ZilchEngine",
    "keywords": "Swizzling is accessing the values within vector types ( Real2, Integer3, etc.) in any order. The term swizzling originated as the name for a technique used for doing the same thing, but within shaders. Understanding a Swizzle To swizzle a vector, refer to its values as if they were data members, using the letters X, Y, Z, and W for the corresponding elements. These can be combined in any permutation or combination. var a = Real3(0,1,2); Console.WriteLine(\"Example 1: a.X: `a.X`\"); Console.WriteLine(\"Example 2: a.XYZ: `a.XYZ`\"); Console.WriteLine(\"Example 3: a.XY: `a.XY`\"); Console.WriteLine(\"Example 4: a.YX: `a.YX`\"); Console.WriteLine(\"Example 5: a.XXY: `a.XXY`\"); Console.WriteLine(\"Example 6: a.ZYXZ: `a.ZYXZ`\"); Example 1: a.X: 0 Example 2: a.XYZ: (0, 1, 2) Example 3: a.XY: (0, 1) Example 4: a.YX: (1, 0) Example 5: a.XXY: (0, 0, 1) Example 6: a.ZYXZ: (2, 1, 0, 2) In this example a is a simple real3: Example 1 constructs a Real containing the value of a.X Example 2 constructs a by-value copy of a. Example 3 constructs a real2 containing the X and Y values of a. Example 4 constructs a real2 with X as the value of a.Y, and Y as the value of a.X. Example 5 constructs a real3 where the X and Y are set to the value of a.X and Z is set to the value of a.Y. Example 6 constructs a real4 with the same X, Y, and Z values as the original vector a, but whose W value is the value of a.Z. Assigning With Swizzles Extracting portions of a vector as seen above is a fairly common operation even outside of shader development. An example may be centering the camera object while not affecting its zoom in a 2D game. //0 out the XY axis and maintain the Z axis values var cameraOffset = this.Camera.Transform.LocalTranslation; cameraOffset.XY = Real2.Zero; this.Camera.Transform.LocalTranslation = cameraOffset; If we tried to assign into the swizzle constructed by-value from the member variable, however, it would not work: this.Camera.Transform.LocalTranslation.XY = Real2(); In this example .XY returns a by-value copy of the LocalTranslation's X and Y values as a Real2. So in this example when we assign the Real2() into it we are assigning into a copy instead of the member variable itself. Related Materials Manual constructbyvaluevsbyref properties Reference real2 real3 real4 transform Task T950"
  },
  "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/variables_and_data_types.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/nada_in_zilch/variables_and_data_types.html",
    "title": "Variables | ZilchEngine",
    "keywords": "Variables Variables are used to store data, and are declared using the var keyword. Each variable in nada has a name, a type, and a value which must be declared within a class using the following syntax. var Name : Type = value; var Greeting : String = \"Hello\"; var Sum : Real = 1 + 2; var Up : Real3 = Real3(0,1,0); var is the keyword used to indicate that the statement on this line declares a variable. Greeting is the name of the first variable, an identifier used to reference the string type value \"Hello\". Both Greeting and Sum follow the following format: var Name : Type = \"Value\"``;. | Token | Description | | var | Keyword used to indicate the statement declares a variable. | | Name | Name of the variable. | | : | Delimiter indicating the next identifier in the line is the type of the variable being declared. | | Type | Type of the variable being declared. | | = | Assignment operator used to initialize the variable to a value. | | \"Value\" | Value for the variable to be initialized to. | | ; | Delimiter indicating the end of the statement. | NOTE: Identifier names must be alphanumeric and may include underscores. They cannot start with a number, and no other symbols are allowed. Remember to choose identifier names that don't clash with the Keywords or Nada Base Types. Depending on the context, or Scope, the required syntax for instantiating and initializing a variable can vary. The codeblock above will only compile if placed at the scope of a class or struct. (NOTE)Literal Types: Literal values are values explicitly defined by the user in script. 1 + 2 is an example of two literal values that evaluate to the non-literal value 3. Below is a table of more literal values and their associated nada_base_types. Literal Value(s) Type 1, 2, etc. Integer 1d, 2d, etc. DoubleInteger 1.0, 2.0, etc. Real 1.0d, 1.0d, etc. DoubleReal true/false Boolean \"Hello\", \"Goodbye\", etc. String null Null Scope A scope is a region in which certain elements of the language, such as variables and functions, are defined. Any scope can contain multiple nested scopes. A real-life example of scope could be a building and the rooms inside it. Whatever is in the scope of a room is also //in//, but not //at//, the scope of the building, because the room's scope exists inside the scope of the building. In Nada, the three most common levels of scope are global, object, and block. Global Scope Everything in script exists in// the global scope; however, not everything is created //at// the global scope. Libraries such as Zilch and Math exist //at// the global scope and are therefore accessible from any scope in script. The Zilch and Math libraries are objects defined at the global scope. Classes and Structs are the only Nada constructs that can be defined //at the global scope. var R1 : Real; //Error, can not declare variables at the global scope class MyClass : NadaComponent //We can declare definitions of objects such as classes at the global scope { } Notice in this example that the attempted instantiation of a variable at the global scope will throw an exception. Object Scope Classes and Structs define their own scope and are one of the few constructs that exist at// the Global Scope. Variables defined //at the object scope are called member variables and will exist as long as the object exists. class MyClass { var Pi : Real = Math.Pi; //compiles var Theta : Real; // compiles var A = 4.0; //compiles var B = -5.0; //does not compile var C = PerspectiveMode.Orthographic; //does not compile } Notice in the example above that Math in// the global scope is accessed //from the class scope while initializing MyClass.Pi. Implicit Initialization Notice above that MyClass.Theta is not given an explicit initial value. This means that implicit initialization will take place, assigning Theta an initial value of the default type value of the type real, which in this case is 0. Implicit initialization of a variable is only possible when defining a member variable. The final restriction for member variables is that they must begin with an upper case letter. Inferred Typing In the code block above MyClass.A is not given an explcit type. In this situation the type real is inferred from the the type of its initialization value 4.0. Only literal, type casted, or manually constructed values may be use for inferred typing when initializing a member variable. Statements such as var B = -5.0; will not compile because they contain an expression. NOTE: You can not use implicit initialization and inferred typing on the same variable. Block Scope functions, conditionals, and loops must have their scopes defined within an object scope. Variables defined within a block scope only exist until the scope is finished being executed. Variables defined within a block scope are called local variables. NOTE: Local variables can be implicitly initialized and have their types inferred just as member variables can. The Scope Operator In addition to to logical constructs defining scope, Nada allows the user to define arbitrary scopes using the scope keyword. class MyClass { var M1 : Real = 1.0; function MyFunction() { var r1 = this.M1; scope { var r2 = r1; } var r3 = r1; r3 = r2; //ERROR } } In the above example begins with var r1 = this.M1; and then demonstrates the use of the {icon university}[[zilch_engine_documentation/zilch_editor_documentation/zeroma nual/nada_in_zilch/keywords/|scope]] keyword. Inside the inner block scope is the line var r2 = r1;. Because r1 is declared in an outer scope it can be used to initialize r2. The line var r3 = r1; follows the closing } of the inner block scope. Because r1 was declared at the same scope as r3, it can be used as r3's initialization value. However, the next line, r3 = r2;, will result in an error. r2 was declared in the inner block scope. When that scope closes, r2 is destroyed. As a result, r2 is no longer a valid variable, and so it cannot be used to initialize r3. (NOTE)Data Lifetimes: It should be noted that when most variables go out of the scope they are declared in they stop existing. This is true for value types such as real and Structs. However, if a reference type such as a constructed Class instance still has a valid reference being held outside of the instantiation scope it will remain alive in memory. Caching Variables Caching accessed data into locally scoped variables is a common practice that can improve the efficiency, readability, and flexibility of code. Often users may find themselves needing a value that will be used multiple times throughout the scope it is calculated/accessed in. class Intercept : NadaComponent { [Dependency] var RigidBody : RigidBody; [Property] var PlayerCogPath : CogPath = CogPath(); [Property] var Velocity : Real = 5.0; [Property] var MinDistance : Real = 5.0; [Property] var PredictionTime : Real = 1.0; function Initialize(init : CogInitializer) { this.Owner.RigidBody.DynamicState = RigidBodyDynamicState.Kinematic; Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { var playerCog = this.PlayerCogPath.Cog; var playerPos = playerCog.Transform.Translation; var myPos = this.Owner.Transform.Translation; var distance = Math.Distance(myPos, playerPos); if(distance <= this.MinDistance) { var playerVelocity = playerCog.RigidBody.Velocity; var predictedPos = playerPos + (playerVelocity * this.PredictionTime); var myMoveDir = Math.Normalize(predictedPos - myPos); var newPos = myPos + (myMoveDir * this.Velocity * event.Dt); this.Owner.Transform.Translation = newPos; } } } In the above example playerCog, playerPos, and myPos are all examples of caching accessed values to local variables. These pieces of data are needed multiple times in calculations made later in the OnLogicUpdate function. By caching these values, not only does writing and reading the calculations become easier, it reduces the number of member data accesses that are necessary via the . operator. function OnLogicUpdate(event : UpdateEvent) { if(Math.Distance(this.Owner.Transform.Translation, this.PlayerCogPath.Cog.Transform.Translation) <= this.MinDistance) { this.Owner.Transform.Translation = this.Owner.Transform.Translation + (Math.Normalize(this.PlayerCogPath.Cog.Transform.Translation + (this.PlayerCogPath.Cog.RigidBody.Velocity * this.PredictionTime) - this.Owner.Transform.Translation) * this.Velocity * event.Dt); } } This example implements the exact same behavior as the previous OnLogicUdpate function, but does not cache any variables locally. As can be seen the line count has been reduced, but these few lines are much harder to interpret and contain many duplicate member access operations. While this may seems like a small issue, it is one that may add up rather quickly over time. Related Materials Manual Classes functions Keywords Scope Conditionals Loops Code Reference nada_base_types real string Zilch Math Tasks T472"
  },
  "docs/zilch_editor_documentation/zilchmanual/networking.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/networking.html",
    "title": "| ZilchEngine",
    "keywords": "stuffs"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics.html",
    "title": "PhysicsSpace | ZilchEngine",
    "keywords": "The physics system allows collision and inertia to be defined on objects. This is primarily achieved by the Collider and RigidBody components. Additional manipulation of object movement can be achieved though PhysicsEffects and Joints. PhysicsSpace The PhysicsSpace is where all physics components live and interact together. The PhysicsSpace contains data to describe how objects should interact together. It also contains helper functions to query information about a space, such as cast operations. RigidBody RigidBody defines the inertia properties (e.g. mass, velocity) of an object. This helps to define how an object moves in a scene and how it interacts with other objects. Collider Colliders define the shape of an object. This tells the PhysicsEngine how to compute collisions and, in conjunction with RigidBody, how to resolve them. Collision Overview A high-level overview of the rules that physics uses to detect and resolve collisions. PhysicsEffects and Regions Effects contain pre-defined methods of applying forces to objects. These effects can be applied per object, per region, and even per space. Casting Casting allows custom user queries to check for collision in certain regions or directions. This helps facilitate common game-logic queries. PhysicsMaterial PhysicsMaterials describe surface properties for a Collider such as density and restitution. MassOverride Override or take a screenshot of an objects mass. Joints Joints are an advanced topic to define constrained movement of objects. This can range from simple movement restrictions to defining larger articulate bodies. Hierarchies Complicated physics objects can be built from how hierarchies are arranged with Colliders and RigidBodies. Troubleshooting Common issues the user might run into when working with physics. PhysicsSolverConfig The PhysicsSolverConfig resource allows customization of constraint solving (advanced)."
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/colliders.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/colliders.html",
    "title": "The Collider Interface | ZilchEngine",
    "keywords": "The Collider component is used to define a shape for collision detection. Together with the RigidBody component, this creates a game object for physics to move around. There are several pre-defined Collider types, as well as a few customizable types to choose from. BoxCollider SphereCollider CylinderCollider EllipsoidCollider CapsuleCollider MeshCollider ConvexMeshCollider MultiConvexMeshCollider HeightMapCollider The Collider Interface A Collider is an interface component. This means only derived Collider types can be added to an object, not the base type. The Collider interface allows accessing common properties, such as ghost, between all Colliders without knowing the specific derived type. Colliders and RigidBodies Colliders are used in combination with a RigidBody to give an object mass. The simplest object is one that has both a Collider and a RigidBody. See Hierarchies for more details. In either case, a Collider exposes the ActiveBody property to know what RigidBody a collider should apply forces to. Physics Material The PhysicsMaterial on a Collider is used to determine how collision resolution should be handled. Knowing: (NOTE) mass = volume * density the density on the material is used with the Collider's volume (implicit from the shape and size) to contribute mass and inertia to a RigidBody. Additionally the material defines surface properties such as friction and restitution which describe how energy is lost in a collision. Ghost Colliders While a collider is often used to define a shape for collision resolution, it is also common to disable collision resolution through the {nav icon=check-square-o, name=\"Ghost\"} property. The ghost property only disables collision resolution while continuing to detect collision. This is useful to create trigger regions where a user can check if something enters or exits an area. Additionally, ghost Colliders are often used to apply forces in an area with the Region component and PhysicsEffects. Collision Groups Sometimes a Collider should only collide with some objects. In this case the ghost property is not sufficient. One of the provided alternatives is to use the {nav icon=wrench, name=\"CollisionGroup\"} property, which defines a group to be used in a CollisionTable. This allows customizing what group pairs go through collision detection and resolution. See Collision Groups and Collision Tables for more details. Collision Information A Collider has two main methods of providing contact information (i.e. what other Colliders are in contact with this one). The most common way to do this is through Collision Events, which are sent to both objects involved in the contact by default. Additionally, a Collider exposes a range of current contacts to iterate through. In the same way, Joints can also be iterated through. Related Materials Manual rigidbody.md physicsmaterial.md collisiongroupsandtables.md collisionevents.md physicseffectsandregions.md hierarchies.md joints.md Reference Collider RigidBody PhysicsEffect Region CollisionEvent CollisionTable CollisionGroup PhysicsMaterial Joint"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/colliders/boxcollider.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/colliders/boxcollider.html",
    "title": "Size | ZilchEngine",
    "keywords": "BoxCollider defines a rectangular box shape (cuboid) for collision. The size of the box is determined by the combination of the box's Size property and the Transform's Scale . (NOTE) Recommended Reading: The Collider page should be read before this page. Size A BoxCollider exposes the Size property to determine the pre-transform size of this box. This is most commonly done to match the collision to graphics before scale is applied. Additionally, this is sometimes used to set the size of a root object's collision without running into non-uniform scale issues. Related Materials Manual colliders.md Reference BoxCollider Collider"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/colliders/capsulecollider.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/colliders/capsulecollider.html",
    "title": "Radius | ZilchEngine",
    "keywords": "CapsuleCollider defines a capsule shape for collision. The base size of the capsule is determined by the Radius and Height properties. Scale is applied afterwards to determine the final capsule's size. Capsules are often used as a combination of cylinders and ellipsoids for collision, primarily for long thin shapes. An ellipsoid tends to be undesired when stretched on one axis due its curved sides. A cylinder fixes this but loses the curved caps of the ellipsoid. A capsule combines these by having a cylinder that can be scaled in one axis while containing smooth edge caps. Capsules are also commonly used for a player. The player's height can be scaled without affecting its width. Additionally, the curved caps help to avoid edge catching issues. (NOTE) Recommended Reading: The Collider page should be read before this page. Radius Radius defines the radius of the capsule in local space. Height Height defines the local space height of the cylinder. The height is defined as the distance from the center of the bottom sphere to the center of the top sphere. Direction Direction enum is used to configure which local-space axis the height of the capsule runs along. This allows aligning a capsule with an asset that was configured about a different axis. Scaling Mode and Non-Uniform Scale Like most other Collider types, CapsuleCollider will maintain a perfect capsule shape when non-uniform scale is present. That is to say that the spherical caps on the end of the capsule will always be perfect spheres, never ellipsoids. This creates a dilemma when non-uniform scale is applied to the height axis. There's two different behaviors that a user could expect that is controlled via ScalingMode enum: ScalingMode.PreserveScale PreserveScale applies scale to the full height of the capsule (including the end caps). The easiest way to understand this mode is by comparing it to a cylinder with the same total height as the capsule, both of which are pictured on the left. After scaling both objects their total heights should be the same as pictured on the right. To fully understand what this is doing requires a numerical example. In the above picture, the capsule has a height of 1 and a radius of 0.5. The capsule's total height is 2 (height + 2 * radius). After scaling, the total height should now be 4, however no scale was applied in the y-axis so the radius must stay at 0.5. This means that the capsule's world height must be 3 after scaling (height = 4 - 2 * radius). ScalingMode.PreserveHeight PreserveHeight applies scale just to the capsule's height (not including the end caps). The easiest way to understand this is to compare to a cylinder with the same height as the capsule (pictured on the left). After scaling, the internal cylinder of the capsule matches the scaled cylinder (pictured on the right). This mode does not preserve the total scale of the capsule though. The original capsule had a total height of 2. Since no scale was applied in the y-axis, the radius has to stay at 0.5. Now the scaled capsule has a height of 2 with a radius of 0.5 which produces a total height of 3. This mode is often desired when a model is attached to a cog that should match the inner cylinder. Additionally, this can be useful when game-logic cares about the positioning of the cap centers as opposed to the tips of the capsule. Related Materials Manual colliders.md cylindercollider.md ellipsoidcollider.md edgecatching.md Reference CapsuleCollider CylinderCollider EllipsoidCollider Collider"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/colliders/convexmeshcollider.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/colliders/convexmeshcollider.html",
    "title": "Related Materials | ZilchEngine",
    "keywords": "(NOTE) Recommended Reading: The Collider page should be read before this page. ConvexMeshCollider defines a convex hull for collision detection based upon a ConvexMesh resource. WARNING: A future version will likely combine all physics mesh types together. Unlike MeshCollider, convex meshes have a volume which means inertia properties can be computed. ConvexMeshColliders are complex shapes that are still efficient for physics. They are commonly used with dynamic rigid bodies to create an object with a complicated surface. If a mesh is non-convex, the convex hull of the shape is used for collision detection. This means that the geometry will be an approximation of the surface. Pictured above is an illustration of the convex hull of an object. Note that the collision is bigger than the original shape. Related Materials Manual colliders.md meshcollider.md Reference ConvexMeshCollider ConvexMesh MeshCollider Collider"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/colliders/cylindercollider.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/colliders/cylindercollider.html",
    "title": "Radius | ZilchEngine",
    "keywords": "CylinderCollider defines a cylindrical shape for collision. The base size of the cylinder is determined by the Radius and Height properties. Scale is applied afterwards to determine the final cylinder's size. (NOTE) Recommended Reading: The Collider page should be read before this page. Radius Radius defines the radius of the cylinder in local space. Height Height defines the total local space height of the cylinder. The height is defined as the distance from the bottom disc to the top disc. Direction The Direction enum property is used to configure which local-space axis the height of the cylinder runs along. This allows aligning a cylinder with an asset that was configured about a different axis. Non-Uniform Scale When non-uniform scale is applied, the CylinderCollider will always stay a perfect cylinder. The height of the cylinder will fully respect the object's scale, but the radius will come from the larger of the two remaining scale values. Related Materials Manual colliders.md Reference CylinderCollider Collider"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/colliders/ellipsoidcollider.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/colliders/ellipsoidcollider.html",
    "title": "Radii | ZilchEngine",
    "keywords": "EllipsoidCollider defines an ellipsoid shape for collision. The base size of the ellipsoid is determined by three radius values. Scale is applied afterwards to determine the final ellipsoid's size. (NOTE) Recommended Reading: The Collider page should be read before this page. Radii Radii defines three radius values for the ellipsoid in local space. Each component of this vector defines its respective axis' radius. Non-Uniform Scale EllipsoidCollider fully respects non-uniform scale (sheer aside). Related Materials Manual colliders.md Reference EllipsoidCollider Collider"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/colliders/heightmapcollider.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/colliders/heightmapcollider.html",
    "title": "Thickness | ZilchEngine",
    "keywords": "(NOTE) Recommended Reading: The Collider page should be read before this page. HeightMapCollider defines collision for a HeightMap. Physics more efficiently represent collision for a HeightMap than a generic mesh. NOTE: HeightMapCollider is assumed to be static and should not be used with a dynamic RigidBody. Thickness HeightMapCollider exposes the Thickness property to turn each triangle of the height map into a prism. This helps avoid tunneling with fast moving objects. Related Materials Manual colliders.md rigidbody.md Reference HeightMapCollider HeightMap RigidBody"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/colliders/meshcollider.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/colliders/meshcollider.html",
    "title": "Related Materials | ZilchEngine",
    "keywords": "(NOTE) Recommended Reading: The Collider page should be read before this page. MeshCollider defines a surface mesh for world geometry based upon a PhysicsMesh resource. WARNING: A future version will likely combine all physics mesh types together. MeshCollider defines a surface for collision; there are no volume or inertia properties to be computed. This means that a MeshCollider is assumed to be static and should not be used in conjunction with a dynamic RigidBody (static is fine). The primary use of MeshCollider is to define static world geometry that is too complicated to represent in a more efficient way for physics. NOTE: As MeshCollider is assumed to be static, collision detection is not performed between two MeshColliders. Related Materials Manual colliders.md rigidbody.md Reference MeshCollider Collider RigidBody"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/colliders/multiconvexmeshcollider.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/colliders/multiconvexmeshcollider.html",
    "title": "Troubleshooting | ZilchEngine",
    "keywords": "(NOTE) Recommended Reading: The Collider page should be read before this page. MultiConvexMeshCollider defines a collection of convex hulls for collision detection based upon a MultiConvexMesh resource. WARNING: A future version will likely combine all physics mesh types together. MultiConvexMeshCollider allows more complicated shapes to be represented than a ConvexMeshCollider while still retaining performance. Physics needs convex shapes for efficiency so this Collider represents non-convex shapes as a collection of sub convex meshes. Currently, the editor for this mesh type only works for 2D shapes (sprites). 3D meshes can be made, but only through script. Future plans include implementing 3D approximate convex decomposition. Troubleshooting As the MultiConvexMeshCollider contains multiple convex pieces, seams can exist between the pieces. This can cause edge catching issues when objects slide across the surface. Additionally, an object can get sandwiched in the interior between two sub-meshes. Related Materials Manual colliders.md convexmeshcollider.md edgecatching.md Reference MultiConvexMeshCollider MultiConvexMesh ConvexMeshCollider Collider"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/colliders/spherecollider.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/colliders/spherecollider.html",
    "title": "Radius | ZilchEngine",
    "keywords": "SphereCollider defines a sphere shape for collision. The size of the sphere is determined byRadius and the Transform's Scale . (NOTE) Recommended Reading: The Collider page should be read before this page. Radius A SphereCollider exposes the Radius property which determines the pre-transform radius of the sphere. The SphereCollider will always be a perfect sphere, even when non-uniform scale is present. It does this by taking the largest scale value to determine the radius in world-space. Related Materials Manual colliders.md Reference SphereCollider Collider"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/collisionoverview.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/collisionoverview.html",
    "title": "Collision Detection and Resolution | ZilchEngine",
    "keywords": "Collision Detection and Resolution The physics system has a set of governing rules for how collisions are detected and resolved. It is important first to distinguish between detection and resolution. Collision detection is the act of determining if two {icon university}[[../Colliders | Collider's]] collide. Collision resolution is the act of updating velocity, position, etc... to realistically simulate an impact. If no collision is detected then no resolution can happen. Basic Collision Types The physics system has a few basic rules to determine which of these collision stages a pair of objects can reach. Collision detection is not possible without a Collider as a Collider defines a shape. A DynamicState property controls how the physics system views a RigidBody. These states show a basic view of the collision detection stages in physics: | | No Rigid Body | Dynamic Rigid Body | Static Rigid Body | Kinematic Rigid Body | | |---------------- | ---------------------- | ------------------- | ----------------------- | | No Rigid Body | Not Detected | Dynamic Rigid Body | Resolved | Resolved | Static Rigid Body | Not Detected | Resolved | Not Detected | Kinematic Rigid Body | Not Resolved | Resolved | Not Resolved | Not Resolved There are more complicated rule sets that go into fully determining if objects should detect and resolve collision. The simplest examples are the Ghost checkBox and CollisionGroup resource properties on Collider. Collision Response Factors There's a few ways to alter how collisions are resolved. The primary way is through a Collider's Material property which defines density, friction, and restitution. RigidBody also contains properties that affect collision resolution. A RigidBody's mass is auto-computed from the relevant Colliders' volume and density. To override this manually see MassOverride. Additionally, various mass properties can be \"locked\". The {nav icon=list, name=Mode2d} property will restrict the object to simulate 2d movement. Additionally, the RotationLocked checkBox property locks the rotation of a body without changing linear movement restrictions. This is common on objects like a player where rotation would result in undesired game mechanics. Resolution: RigidBodyDynamicState RigidBody defines the DynamicState enum property that changes how the dynamics, or resolution, for an object is handled. The default state of a RigidBody is dynamic (i.e. the body is free to move and resolve as normal). Commonly, a body needs to be locked in space to behave as some fixed world geometry. One way to do this is to remove the RigidBody. Additionally a RigidBody's DynamicState enum can be changed to Static. This object will be treated as an infinite mass object that doesn't move. The difference between these two forms of static is mostly internal performance. The general rule of thumb is: if it always exists and never moves, remove the RigidBody; otherwise, mark it static. A RigidBody can also be set to Kinematic. Kinematic is an infinite mass object like Static; however, it also gives the physics system extra information about how to resolve collisions. A static object is never expected to move, so if it is teleported by the user into contact with other objects, then the physics system doesn't know how to properly resolve the collision as no velocity was involved. A kinematic object tells the physics system to approximate the velocity in the collision based upon the last and current position of the object. This is typically used for moving platforms or other moving, infinite mass objects. Collision Information Information about collisions can be found in two ways. The most common is to listen for CollisionEvents. Additionally, Collider exposes the Contacts property range. Collision Groups Advanced control of collision filtering and events can be configured through the use of CollisionTables and CollisionGroups. Advanced There are several advanced topics that can affect how physics deals with collision. Hierarchies can be used to make complicated physical objects from simple pieces. Joints allow additional constraints on how an object is allowed to move. Troubleshooting Collisions Sometimes collisions don't happen or behave differently than a user would expect. WhyAreTheyNotColliding is a helper function to figure out why a collision didn't happen. Edge Catching is a common issue when trying to make a player that can cause jarring movement. Related Materials Manual rigidbody.md colliders.md physicsmaterial.md massoverride.md collisionevents.md collisiongroupsandtables.md joints.md Reference Collider RigidBody PhysicsMaterial MassOverride CollisionEvent CollisionGroup CollisionTable DynamicState"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/collisionoverview/collisionevents.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/collisionoverview/collisionevents.html",
    "title": "Collision Event Types | ZilchEngine",
    "keywords": "CollisionEvents are the primary way that physics sends collision information to users. Three main event types are sent out for collisions: starting, persisting, and ending. Collision events are often used in gameplay, such as applying damage if an impact was large enough. Sometimes it is necessary to alter information about the two objects involved in a collision, such as their velocity. Other common examples include creating audio effects or graphics effects in response to a collision, such as a scraping sound and sparks of a sliding metal object. Collision Event Types There are three primary collision events sent out. These events are typically sent to both objects involved and to the PhysicsSpace. If you're having trouble receiving events then see WhyAreTheyNotColliding. CollisionStarted is sent out on the first frame two objects come into contact. CollisionPersisted is sent every frame two objects are in contact. This event is not sent on the first frame of collision. CollisionEnded is sent the frame that contact is broken. At this point the two objects are no longer in contact. This event is also sent if an object is destroyed. CollisionEvents Order The physics system will send out all CollisionEvents after resolving all collisions in the space. This means that some of the information in the event is //old//. This is most obvious when inspecting an object's position and velocity as both will reflect the post-collision resolution information. This is necessary to give final collision information like the final applied impulse. If pre-collision resolution information is desired, see PreSolveEvent of CollisionTables. Properties There's a few properties worth discussing in detail on CollisionEvents. Object vs. OtherObject A collision event is sent with one object as the focus; that is to say that most information will have a primary object and a secondary object. This is necessary to know what direction other properties, such as the collision normal, face. If the event is received from the physics space then this ordering is not defined. ContactPoints A CollisionEvent exposes a range of contact points. For physics to solve a collision, several points of contact may be necessary. Often in game logic, one contact point is sufficient; for convenience, the FirstPoint property is exposed. ContactPoints expose information about what happened in a collision: Local and World Points: Contact points expose both a local and world space point on each object. Contact Normal: The normal of a collision describes the primary direction that collision is resolved in. ContactPoint exposes WorldNormalTowardsOther which is the normal from the WorldPoint on this// object towards the //other// object. This can be useful for pushing the //other// object away from //this//. To get the world normal towards //this object just negate this property. Impulses: The physics system solves collisions with impulses, i.e. an instantaneous force. To properly solve a collision there are three values: the normal impulse and two friction impulses. The normal impulse is the scalar impulse value that is applied in the direction of the contact normal to resolve the collision. This can be used to measure the strength of an impact between the two objects. Keep in mind that an impulse contains the inverse mass sum of the two objects involved. The two friction impulses are applied in tangential directions to the normal impulse to slow down an object. ContactPoint exposes FrictionImpulse , which is the total friction magnitude that was applied. Additionally, ComplexImpulse is exposed, which contains the normal, friction1, and friction2 values in the x, y, and z components of the vector respectively. Related Materials Manual whyaretheynotcolliding.md physicsspace.md collisiongroupsandtables.md Reference CollisionEvent ContactPoint PreSolveEvent PhysicsSpace"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/collisionoverview/collisiongroupsandtables.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/collisionoverview/collisiongroupsandtables.html",
    "title": "CollisionGroup | ZilchEngine",
    "keywords": "CollisionGroups and CollisionTables are intertwined resources in the physics system. A CollisionGroup defines a label for a colliders.md to be used within a CollisionTable. A CollisionTable defines filters for pairs of CollisionGroups. These filters allow extra control over what collisions can take place. Additionally, filters can be configured to send extra events. CollisionGroup A CollisionGroup defines a group (or label) for a Collider to take part in. This only serves to group certain Colliders together but doesn't change any behavior unless the active CollisionTable is configured to do so. CollisionTable A CollisionTable is a resource property set on PhysicsSpace that defines pair-wise CollisionGroup relationships known as CollisionFilters. These filters control if a collision happens and if extra events are sent between group pairings. CollisionFilters A CollisionFilter can be used to control if collisions happen between pairs of CollisionGroups. There are three primary states of a CollisionFilter: Resolve: The default state for a filter. Says that collision resolution should happen as normal. SkipResolution: Collision detection should be run as normal but resolution should not happen. This allows configuring pairs to be ghost collisions while still getting events. SkipDetection: Collision detection should be skipped. Skipping collision detection also implies skipping collision resolution. This option is typically only set for performance reasons. This can also be used to prevent collision events from being sent to make gameplay logic easier. Additional information can be configured on a CollisionFilter to send out events through the use of CollisionFilterBlocks. CollisionFilterBlocks A CollisionFilterBlock is a sub-component on CollisionFilter used to control what kinds of events are sent out between groups. The current supported block types are: CollisionStartBlock: Sends out the GroupCollisionStarted event when this grouping has a CollisionStarted. CollisionPersistedBlock: Sends out the GroupCollisionPersisted event when this grouping has a CollisionPersisted. CollisionEndBlock: Sends out the GroupCollisionEnded event when this grouping has a CollisionEnded. PreSolveBlock: Sent out before collision is resolved. Allows altering information before a collision has happened. All blocks can configure which groups in the filter to send to. The SendEventsTo properties control which objects in the pairing should get the event. The A and B referred to are in the same order as the GroupA and GroupB properties of the filter. If a filter has GroupA and GroupB as the same value, then this order is not defined. Additionally, filter blocks contain the EventOverride property that lets the user send out a custom event name instead of the default names. Note that these names do not currently show up in the Events namespace and must be connected to with a string literal. The PreSolveBlock is a special block that should be used sparingly. As PreSolveEvent before collisions are resolved. This event does not expect any drastic changes to the scene, such as removing components. Any complex behavior other than changing property values may crash the engine. Troubleshooting One of the most common issues when using CollisionGroups and CollisionTables is forgetting to set the correct CollisionTable resource on the PhysicsSpace. Additionally, see WhyAreTheyNotColliding for other common collision issues. Related Materials Manual collisionevents.md physicsspace.md colliders.md whyaretheynotcolliding.md Reference CollisionGroup CollisionTable CollisionFilter CollisionEvent CollisionGroupEvent PreSolveEvent CollisionFilterBlock CollisionStartBlock CollisionPersistedBlock CollisionEndBlock PreSolveBlock"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/hierarchies.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/hierarchies.html",
    "title": "Advanced Hierarchies: Nested RigidBodies | ZilchEngine",
    "keywords": "Hierarchies allows physics to building complicated objects from simpler pieces Basic understanding To understand the basics of hierarchies, it's first important to conceptually understand what a RigidBody and {icon university}[[../Colliders | Collider's]] role is. A Collider defines a shape and contains certain physical attributes such as density, volume, friction, etc... A RigidBody gives an object inertia (e.g. mass, velocity, etc...). This gives a few meanings to objects in a hierarchy. If an object doesn't have a Collider, then it doesn't have volume or density, which means it can't contribute to the mass of a RigidBody. If an object doesn't have a RigidBody, then it may have collision properties, but it cannot be moved by physics interaction. This gives four simple objects configurations: No RigidBody no Collider: Physics doesn't do anything. Collider only: Physics detects collision and resolves collision, but this object cannot be moved by physics. RigidBody only: The object is treated as a point-mass that cannot be collided with. Mass is assumed to be 1 for forces. Both: A regular object that computes mass from the Collider and will be affected by forces, collisions, etc... The next easiest tree to look at is one with only Colliders. As each Collider only represents another collision volume, this tree would logically be the same as independent objects in the scene, ignoring how the transform data is computed. Physics will not move these objects, other objects can collide as normal, and each Collider defines its own materials for resolution. The first interesting example is an object with a RigidBody at the root and Collider children. In this hierarchy, the root has a RigidBody and Collider which implies that the root has velocity and mass. The children just have Colliders which imply that they have collision and could contribute to mass. As a root in the hierarchy typically moves children with it, physics chooses to \"attach\" the child Colliders to the RigidBody, i.e. the entire hierarchy acts as one RigidBody with multiple collision shapes. Each Collider still retains the properties of its material, such as friction and restitution. If one Collider has a larger mass (from the density and volume) then the root RigidBody's total mass properties will reflect this. Advanced Hierarchies: Nested RigidBodies From here a larger nested tree can be built with the same basic structure to make a more complicated object. The tree can even have Cogs in the middle without a Collider. The real question is how do nested RigidBodies affect physics? This ends up depending on the DynamicState of the RigidBody. Dynamic RigidBodies When a RigidBody is marked as being Dynamic, it signifies that it should be an independent entity that is free to move and resolve as normal. This means that any dynamic RigidBody in the middle of a hierarchy behaves as if its sub-tree was a completely independent object. By keeping the objects in the hierarchy, logical organization is preserved while still allowing free movement. Archetypes can be made from a larger collection of individual objects (e.g. cars and their tires). Additionally, a RigidBody can be quickly toggled to another DynamicState enum. Static RigidBodies If a RigidBody is marked as Static then it behaves as if there's no RigidBody in that sub-tree. This is particularly useful if a sub-tree starts static but then switches to dynamic at a later point in time. Kinematic RigidBodies If a RigidBody is marked as Kinematic then it behaves like a Static body in the tree with one main exception: kinematic implies that an object can apply forces to other objects but cannot receive forces. In this case a kinematic sub-tree can push other objects but will not receive forces back. This can be useful to define a sub-portion of tree for a player to push objects without being pushed back. Non-Uniform Scale One common problem with building hierarchies is when a parent object is non-uniformly scaled. This introduces what is known as a skew. Skews are currently not supported by the physics system and will be stripped out of any transformation. Typically all root objects should be configured with uniform scales. Massless Children A common scenario when building complicated hierarchies is wanting to add a collision volume for game logic reasons without affecting the overall mass properties of the hierarchy. To do this, the physics systems supports a special configuration on the PhysicsMaterial. If a material's density is set to 0 (this has to be manually typed) then the object doesn't contribute to a RigidBody's total mass. Troubleshooting When building a larger hierarchy, each Collider is still treated as a distinct object for collision detection. This means that it's possible for another object to get sandwiched between two flush Colliders (e.g. a table and its legs). Currently no solution is available to prevent this behavior. Related Materials Manual rigidbody.md colliders.md physicsmaterial.md Reference Hierarchy RigidBody Collider PhysicsMaterial RigidBodyDynamicState"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/joints.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/joints.html",
    "title": "Shared Properties | ZilchEngine",
    "keywords": "Joints are a representation of a physics concept known as constraints. A constraint is a mathematical rule that defines (or constrains) how objects are allowed to move. A Joint is a collection of one or more constraints that define a more common interaction. In Zilch, a Joint is typically an independent object that connects two ObjectLink. Shared Properties Before looking at individual joints, there's a few useful shared properties: Active checkBox Any joint can be toggled in order to temporarily disable it. CollideConnected checkBox Sometimes it's useful to disable collision between the two objects the joint is connected to (e.g. articulated bodies). MaxImpulse The max impulse (instantaneous force) allowed for the joint to solve any of its constraints. 'JointExceedImpulseLimit' is sent when this happens. AutoSnaps checkBox It's common to auto-delete a joint when the MaxImpulse is exceeded. This property provides this behavior without requiring scripting. Joint Add-ons Before discussing each individual Joint, there's several helper components that are important to understand. These components affect how a joint will affect the connected objects. These components can be added to any Joint, but may not always make sense for a specific one. JointLimit A limit restricts a certain portion of the joint to only be active part of the time. This is typically sets some min/max distance/angle where the joint will allow free movement. NOTE: When the limit is for angles it is specified in radians. JointMotor A motor takes a portion of the joint and adds energy to it. This is often used to drive a portion of the joint when no external forces are acting upon it. A motor allows setting a target speed and a max impulse it can use to try and achieve this. JointSpring A spring takes a portion of the joint and makes it soft, or non-rigid. This can be useful to simulate a spring or make the limits of a joint springy. Springs are defined by a frequency in Hertz (oscillations per second) and a damping ratio. The damping ratio defines how much energy should be damped out of the system where 0 means no damping and 1 is critical (perfect) damping. Extra AddOns There are a few extra joint add-ons that are less frequently used. JointConfigOverride This allows configuring individual joint properties for solving. Typically you shouldn't touch this if you don't understand it. JointDebugDrawConfig The debug draw config is used to give additional debug drawing information to the joint. This is mostly to allow configuring which object's perspective to draw information from. Not all joints currently observe this component. JointTypes The physics systems supports most common mechanical joint types. StickJoint A stick joint, or distance joint, defines that two points on the objects should be a certain distance apart. This is common for creating rope-like objects. PositionJoint A position joint locks two points on the objects to be at the same position. This is common for a ball-and-socket like joint. WeldJoint A weld joint locks the the relative position and rotation of two objects together. For a rigid connection, hierarchies should be used instead as joints are not completely stiff. If run-time behaviors, such as auto-snapping with a max impulse, are desired then using a weld is easier than hierarchies. PrismaticJoint A prismatic joint (or slider) locks the rotation of two objects together and two of the linear axes. This allows relative translation of the objects along one axis. This is often used to create pistons or sliders. RevoluteJoint A revolute joint (or hinge) locks the positions of two objects together and two of the rotational axes. This allows relative rotation of the objects along one axis. This is often used to create doors, wheels, seesaws, etc.... WheelJoint A wheel joint is a revolute joint with a spring on one of the translational axes. This allows the axis to act like a suspension. UniversalJoint A universal joint locks the positions of two objects together and one of the rotational axes. This allows relative rotation about two axes. This joint is currently in a prototype state. UprightJoint The upright joint locks the rotation about one axis of two objects together. This is often used to keep an object always pointing up (or close enough). GearJoint The gear joint connects two joints of two objects together. The expected joint types to connect are prismatic or revolute. This makes the two joints transfer energy between each other to make more complicated joints. PulleyJoint A pulley joint connects two stick joints on two objects together. This restricts the relative length of the two joints together to create a pulley system. CustomJoint A custom joint is for advanced users. This allows you to define your own constraints via Jacobians and other constraint definitions. 2D Joints A few joints have 2D versions that should be used when making a 2D game instead of their 3D counterpart. The 2D versions makes certain assumptions about axes that don't need to be solved which result in faster performance and increased stability. Related Materials Manual colliders.md Reference Joint StickJoint PositionJoint WeldJoint PrismaticJoint PrismaticJoint2d RevoluteJoint RevoluteJoint2d WheelJoint WheelJoint2d UniversalJoint UprightJoint GearJoint PulleyJoint CustomJoint JointEvent CustomJointEvent JointLimit JointMotor JointSpring JointDebugDrawConfig JointConfigOverride CustomConstraintInfo Collider"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/massoverride.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/massoverride.html",
    "title": "Related Materials | ZilchEngine",
    "keywords": "By default, a MassOverride component is used to override these values. There's two primary uses for mass override: to lock the mass and to set the mass. MassOverride is commonly used to save the mass values of a RigidBody. During game development, the size of objects may need to be altered while keeping behavior the same. Unfortunately, the size of a collider is used to compute the mass of a RigidBody. To help alleviate this, the MassOverride component can be used to save a RigidBody's current mass properties regardless of all attached colliders and materials. This cached mass can be re-computed at any time from the current RigidBody's values. Another common use of MassOverride is to manually set the mass. Sometimes the user wants to tweak an object's mass without changing size or altering a material. This can be achieved through the Mass property. It is important to note that mass is represented by linear and angular (inertia tensor) values. Tweaking the mass will currently apply a ratio change to the inertia tensor, which is only exposed via script for now. Large alterations to the mass property can have undesired effects on rotation. Related Materials Manual rigidbody.md colliders.md Reference MassOverride RigidBody Collider"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicscasting.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicscasting.html",
    "title": "PhysicsCasting | ZilchEngine",
    "keywords": "PhysicsCasting One of the most common run-time interactions with a PhysicsSpace is casting, which queries for all objects within a region of space. This allows common operations such as line-of-sight queries, volume queries, and so on. Typically a cast will take 3 arguments: The shape to cast How many results to receive at max. This is needed for internal optimizations in physics. For Ray/Segments, the results will be sorted by the t-value. The CastFilter describes how to filter out results when casting. Common operations include skipping objects of certain configurations (Static, Kinematic, CollisionGroups, etc...). Currently, the physics systems supports a few common casting types: Ray Casting ray casting checks for all shapes in a direction. Ray casts are common for things like line-of-sight tests. Segment Casting A segment cast is like a ray cast except it has an end position. Segment casts are used when there is a known max distance for the cast. Sphere Casting sphere casting checks to see what objects are within a sphere. Useful for simple volume queries such as finding all objects within an explosion radius. Aabb Casting aabb casting checks what objects are within an axis-aligned box. Sometimes a box is a better shape for casting, especially when the query area is long an thin. Frustum Casting frustum casting checks what objects are within a frustum. Useful for queries that come from a camera where perspective should be taken into account. Collider Casting Sometimes a more complicated shape query is desired. Collider casting allows the user to say: \"What if this collider was over there\". This is commonly used for a simple preventative collision check. CastFirst Ray and Segments have an additional \"CastFirst\" operation for convenience. These cast functions implicitly have a max object count of 1. DispatchWithin In addition to regular casting, the physicsspace.md contains other common cast related functions. Sometimes casts are performed just to send events to all shapes within a region. This is common for a generic interaction system where each object may or may-not handle some event. Instead of casting and iterating over all results, the PhysicsSpace has the \"DispatchWithin\" functions. Currently only Sphere and Aabb dispatch functions exist. Sweeping While a cast can be used as a preventative check, sometimes the accuracy is not enough. This is where the SweepCollider function comes in. Sweeping can be thought of as extending a collider's volume in a direction to find the exact times that a collision would happen with static objects. This allows writing Time-of-Impact logic to avoid missing any collisions. NOTE: Swept casts are expensive operations and should be used only when important, such as a player. Related Materials Manual physicsspace.md colliders.md collisiongroupsandtables.md Reference CastFilter CastResult SweepResult Ray Segment Aabb Sphere Frustum PhysicsSpace CollisionGroup Collider"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions.html",
    "title": "Overview | ZilchEngine",
    "keywords": "Overview PhysicsEffects apply common types of forces to objects. How an effect is applied varies depending on what kind of object it's attached to. Not all attachment modes make logical sense for all effect types. In order, an effect will check for these conditions: levelsettings: All objects in the level have this effect applied to them. See IgnoreSpaceEffects for exceptions. Region : All objects in contact with this collision volume (Collider assumed) will have the effect applied to them. Typically, the relevant Collider should be set to Ghost. RigidBody: If a RigidBody exists without a Region, the effect will apply to the RigidBody's center of mass. Collider: If a Collider exists then it is assumed that the effect should apply to the nearest parent RigidBody in the hierarchy. If relevant, the effect will also apply the force at the Collider's position (such as ThrustEffect). PhysicsSpace : When a physics effect is attached to a space it'll apply to all objects in that space. This option is less preferred to LevelSettings. Hierarchy : If an effect does fall into one of the above criteria, it is assumed to apply to the nearest parent RigidBody in the hierarchy. In the remainder of this page, the wording \"global effect\" will be used to refer to both LevelSettings and PhysicsSpace effect mode types. PhysicsEffects The currently available PhysicsEffects are: GravityEffect: Applies an acceleration to an object in a direction. ForceEffect: Applies a force to an object in a direction. PointGravityEffect: Applies an acceleration towards the center of the effect. PointForceEffect: Applies a force away from the center of the effect. ThrustEffect: Applies a point force on an object based upon the position of the effect. DragEffect: Applies linear/angular drag/damping to slow down object movement. FlowEffect: Applies force to make an object move at a constant speed in a direction. Commonly used to make \"tractor beam\" like movement. TorqueEffect: Applies a torque (angular force) to an object. VortexEffect: Applies a force to make an object circle around a vortex center. WindEffect: Applies a directional force proportional to the approximate surface area of the object in the wind direction. BuoyancyEffect: Applies a buoyancy force to all objects in collision with this shape. CustomPhysicsEffect : Allows user defined effects via script events. IgnoreSpaceEffects Occasionally some objects should not have certain global effects applied to them, such as gravity or drag. One solution to this is to remove the relevant effects from LevelSettings/Space and add the effect to every RigidBody instead. This quickly becomes impractical as the number of objects increases. Instead the problem can be approached from the opposite direction: telling certain objects to ignore global effects. The IgnoreSpaceEffects component tells an object to not apply global forces of certain types. Troubleshooting Sometimes a PhysicsEffect will not behave as desired. When trying to troubleshoot what is going wrong there are a few key considerations: What application mode is being used? Is this behaving as a Region effect? LevelSettings? etc... What space is the effect being applied in? Most effects have some kind of local space property that determines if the effect takes into account the object's Transform. If unexpected behavior happens when an object rotates then look for a property like this. When trying to apply a Region effect, it's common to forget to make the relevant Collider ghost. In this scenario objects will still get the effect applied when in contact but will additionally undergo collision resolution. If the effect happens once but doesn't happen again, it may have a RigidBody component that is causing it to move (e.g. by gravity). Related Materials Manual rigidbody.md colliders.md physicsspace.md levelsettings Hierarchy Reference RigidBody Collider PhysicsSpace Region IgnoreSpaceEffects PhysicsEffect Transform"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/buoyancyeffect.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/buoyancyeffect.html",
    "title": "Application Modes | ZilchEngine",
    "keywords": "The BuoyancyEffect component applies a buoyancy force to an object. Buoyancy is approximately defined as: (NOTE) F = -G * (V/p) Where G is a gravity force, V is the volume of the object submerged in the fluid, and p is the density of the fluid. The Detail property is used to determine how many samples should be used to approximate the volume of the submerged object. Application Modes BuoyancyEffect can only be applied as a Region effect. Related Materials Manual physicseffectsandregions.md Reference BuoyancyEffect PhysicsEffect Region"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/customphysicseffect.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/customphysicseffect.html",
    "title": "Application Modes | ZilchEngine",
    "keywords": "The CustomPhysicsEffect component allows users to define their own physics effects through callback events. Forces can be applied to any object independently of this component, but this component will determine what objects forces should be applied to using the defined application modes (level, region, etc...). This effect sends out two events: CustomPhysicsEffectPrecalculatePhase and ApplyCustomPhysicsEffect, both of which use the CustomPhysicsEffectEvent class. CustomPhysicsEffectPrecalculatePhase should be used to cache any unchanging values for the frame, such as the world-space values for the effect. ApplyCustomPhysicsEffect is sent out for each object that should have a force applied to it. Application Modes It is up to a user to define what application modes the CustomPhysicsEffect works with. Related Materials Manual physicseffectsandregions.md Reference CustomPhysicsEffect CustomPhysicsEffectEvent PhysicsEffect"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/drageffect.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/drageffect.html",
    "title": "Drag vs. Damping | ZilchEngine",
    "keywords": "The DragEffect component applies forces to slow down the linear and angular velocity of an object. This is often used globally on the space to simulate air resistance, but can also be used for slowing movement in a water region, making one object slow down quickly, etc... Drag vs. Damping DragEffect exposes properties for setting both drag and damping coefficients. A drag force is defined as: (NOTE) F = -//b//v where v is the object's velocity and b is the drag coefficient. This is a linear drag approximation ([[https://en.wikipedia.org/wiki/Drag_(physics)#Very_low_Reynolds_numbers:_Stokes.27_drag | Stoke's drag]]) that applies a force opposite of the objects velocity. Valid values of b range from 0 to 1/dt and can be through of as approximately how many seconds it'll take the object to stop when no other forces are applied. Damping defines a drag acceleration to be applied by the equation: (NOTE) A = -//b//v The only difference between drag and damping is whether the resultant acceleration takes the object's mass into account. Drag will slow down some objects more than others while damping will slow down all objects the same, regardless of mass. Angular drag is defined similarly to linear drag as: (NOTE) T = -kw where w is the angular velocity, k is the angular drag coefficient, and T is the resultant torque. Angular damping similarly defines an angular acceleration instead of force. Application Modes The DragEffect component is expected to work with all application modes. Drag applied to the space or level will affect all objects within. Used as a Region effect, drag will slow down all objects in contact with the Region. On a RigidBody the effect will slow down that object alone. Collider and Hierarchy effects will behave the same as a RigidBody effect. Related Materials Manual physicseffectsandregions.md rigidbody.md colliders.md Reference DragEffect PhysicsEffect RigidBody Collider Region"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/floweffect.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/floweffect.html",
    "title": "Application Modes | ZilchEngine",
    "keywords": "The FlowEffect component applies forces to make an object move at a target speed in a given direction. This is often used to make an object move in the flow of another, such as a river or a tractor beam. Unlike a ForceEffect which applies a constant force in a direction, FlowEffect applies a variable force to make an object move at a constant speed in the flow direction. MaxFlowForce allows the user to control how much force can be applied to reach this target speed. This can also be thought of as controlling the acceleration of objects within the field. Note: the flow portion of the effect only affects movement in the flow direction, not in the inward force direction. Additionally, FlowEffect has the AttractToFlowCenter checkBox property to pull objects towards the flow center. This attractional force is similarly defined by a target speed and a max force. Note: this force only affects movement in the inward direction, not in the flow direction. Application Modes FlowEffect is only expected to be used as a Region effect. Other application modes are undefined. Related Materials Manual physicseffectsandregions.md forceeffect.md Reference FlowEffect ForceEffect PhysicsEffect Region"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/forceeffect.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/forceeffect.html",
    "title": "Application Methods | ZilchEngine",
    "keywords": "The ForceEffect and GravityEffect components are direction effects that apply linear forces to push an object in a direction. The only difference between the gravity and force effect is whether an acceleration or force is applied. A GravityEffect will apply a constant acceleration to an object, i.e. the object's mass will not affect the acceleration. ForceEffect will take the object's mass into account. The rest of this page will use force to refer to the acceleration or force depending on the effect type attached. The force// applied is a constant linear //force based upon the direction and strength of the effect. By default, the effect will be applied in the local space of the object it's attached to. This means that rotating the object will affect the direction of the //force//. Application Methods GravityEffect and ForceEffect are assumed to work with all application methods of PhysicsEffects. If the effect is on the Space or LevelSettings then the force will apply to all objects in the level. If the effect is on a Region then it'll apply to all objects in the region. Otherwise, the effect will apply to the center of mass of the RigidBody (no angular //force//). Collider and Hierarchy application methods do not differ from the RigidBody mode. Related Materials Manual physicseffectsandregions.md rigidbody.md colliders.md Reference ForceEffect GravityEffect PhysicsEffect RigidBody Collider"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/pointforceeffect.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/pointforceeffect.html",
    "title": "Effect Interpolation | ZilchEngine",
    "keywords": "PointGravityEffect and PointForceEffect are effects that apply linear forces towards a central point based upon an inner and outer strength. This is commonly used to create spherical effects such as planetary gravity or explosive shockwaves. There's two main differences between the PointGravityEffect and PointForceEffect. The first is whether a positive strength points inwards or outwards. PointGravityEffect points inwards with a positive strength while PointForceEffect points outwards. The other difference is whether the applied force// is actually a force or an acceleration. PointGravityEffect applies an acceleration to objects, i.e. the resultant acceleration is independent of the object's mass. PointForceEffect applies a force to object, i.e. the object's mass is taken into account. The rest of this page will use //force to refer to the acceleration or force depending on the effect type attached. The center of a point force's effect is the object's translation by default. This position can be moved with {nav icon=pencil-square-o, name=\"LocalPositionOffset\"}, typically to align the position with some visual center on the object. Effect Interpolation The force applied to an object is always linear (no angular //force//) and is computed as an interpolation between the two strength values based upon the object's distance from the effect's center. This is best illustrated with some graphs. When the distance is less than {nav icon=pencil-square-o, name=\"MinDistance\"}, the effect will always apply {nav icon=pencil-square-o, name=\"MinStrength\"} as a constant force// value. When in-between the min and max distance values, the //force will be an interpolation between the min and max strength values. Linear interpolation is pictured above. Quadratic interpolation can also be used for smoother interpolation. When the distance from the effect center is beyond {nav icon=pencil-square-o, name=\"MaxDistance\"}, how the effect is computed is based upon the {nav icon=list, name=\"EndCondition\"} property. The NoEffect value will not apply any force beyond {nav icon=pencil-square-o, name=\"MaxDistance\"}. ClampToMax will always apply {nav icon=pencil-square-o, name=\"MaxStrength\"} regardless of how far away the object is. ContinueFalloff will extrapolate the curve beyond {nav icon=pencil-square-o, name=\"MaxDistance\"} using the interpolation method specified by {nav icon=list, name=\"InterpolationMode\"}. NOTE: a force is only computed if the effect's Collider has collision, regardless of {nav icon=list, name=\"EndCondition's\"} value. With the two ring strength values it's possible to make a wide variety of point effects. Some possibilities include: A standard gravity can be made by setting the inner strength larger than the outer strength. The two effects can be set with opposite signs so as to attract to the center of the ring instead of the effect's center. An explosion can be made by setting the inner ring's strength large than the other ring's. Application Modes Point effects are only expected to be used as Region effects. Other application modes are undefined. Related Materials Manual physicseffectsandregions.md Reference PointForceEffect PointGravityEffect PhysicsEffect Region PhysicsEffectInterpolationType"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/thrusteffect.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/thrusteffect.html",
    "title": "Application Methods | ZilchEngine",
    "keywords": "The ThrustEffect component applies a directional force at the center of the attached object. Note that this is different than applying the force through the object's center of mass. If the attached object's center differs from the center of mass then this will apply both a linear and angular force. This effect is often used for thrusters on a ship or other point forces that need to apply torque. Application Methods The ThrustEffect component expects to be used as a Collider or Hierarchy effect. These application methods allow the thrust's center to be defined independently of the center of mass of the RigidBody If used as a RigidBody effect then this is no different than ForceEffect. Other application modes are undefined. Related Materials Manual physicseffectsandregions.md forceeffect.md rigidbody.md colliders.md Reference ThrustEffect PhysicsEffect"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/torqueeffect.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/torqueeffect.html",
    "title": "Application Modes | ZilchEngine",
    "keywords": "The TorqueEffect component applies a torque to an object. Torque is also known as angular force. Torque is applied about an axis with a strength. The resultant force will cause an object to spin about the axis according to the right-hand rule. By default, torque is applied in the local space of the object. Application Modes Torque is only assumed to be used as a RigidBody effect. This will cause the object to twist about its center of mass. Other application modes are undefined. Related Materials Manual physicseffectsandregions.md rigidbody.md Reference TorqueEffect PhysicsEffect RigidBody"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/vortexeffect.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/vortexeffect.html",
    "title": "Application Modes | ZilchEngine",
    "keywords": "The VortexEffect component applies two forces to an object to simulate a spinning vortex. An attractive linear force pulls objects towards the center of the disc. A perpendicular linear force twists objects around the center of the disc. The same interpolation scheme as PointForceEffect is used by VortexEffect to compute the inward strength and twist strength. Application Modes VortexEffect is only expected to work as a Region effect. All other application modes are undefined. Related Materials Manual physicseffectsandregions.md pointforceeffect.md Reference VortexEffect PointForceEffect PhysicsEffect Region"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/windeffect.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicseffectsandregions/windeffect.html",
    "title": "Application Modes | ZilchEngine",
    "keywords": "The WindEffect component applies a force in the WindDirection proportional to the approximate surface area of the object. This force can result in both linear and angular forces. The WindEffect is primarily used for simulating wind. WindEffect is also useful when a force should consider the surface area as well as the mass of an object, such as with an explosion. Application Modes WindEffect expects to be applied as a Region, space, or Level effect. In these cases, the effect is applied to all objects in the application area. Other effect methods are undefined. Related Materials Manual physicseffectsandregions.md Reference WindEffect PhysicsEffect Region space"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicsmaterial.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicsmaterial.html",
    "title": "Density | ZilchEngine",
    "keywords": "A PhysicsMaterial describes material properties to use for a Collider. These properties affect how collisions are resolved between collider types. Some PhysicsMaterial properties are used to define the surface of an object. In reality, these surface properties are not defined per object, but per object pair. The physics system computes a combined value for these properties as an approximation of the real life values. Density Density is used to compute a Collider's mass. This mass contributes to a {icon university}[[../RigidBody | RigidBody's]] total mass. Mass is computed as: (NOTE) mass = density * volume Physics uses density so mass is auto-computed when colliders change size. This is partially due to people having bad intuition for how mass scales. Sometimes a Collider should not contribute a mass for accumulation on a RigidBody. In this case the density can be manually set to 0. Restitution Restitution is a value typically in the range of 0 to 1 that determines how much energy in a collision is lost in the direction of the normal. Commonly this is thought of as how bouncy a surface is. A restitution of 0 signifies that all energy should be lost, i.e. no bounce. A restitution of 1 signifies that no energy should be lost, i.e. a perfect bounce. Values larger than 1 can be set to add energy but is not recommended. The combined restitution is computed as the max of the two restitution values. Friction Friction determines how much energy in a collision is lost in the plane of the collision (the plane tangent to the collision normal). The upper bound of the friction force is computed as: F=u*N where N is the total force in the normal direction and u is the friction scalar. Currently, dynamic and static friction are set to be equal. The combined friction is computed as the square-root of the product of the two values, i.e. F=sqrt(Fa*Fb). Restitution Importance RestitutionImportance determines which object's restitution should be used in collision resolution. When two objects are colliding, the restitution of the object with the higher importance value will be used. If both objects have the same importance value, the max of the two restitutions is applied. Friction Importance FrictionImportance determines which object's friction should be used in collision resolution. When two objects are colliding, the friction of the object with the higher importance value will be used. If both objects have the same importance value, the combined friction is used (see above). Related Materials Manual rigidbody.md colliders.md Reference PhysicsMaterial RigidBody Collider"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicssolverconfig.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicssolverconfig.html",
    "title": "Velocity Restitution Threshold: Collision vs. Contact | ZilchEngine",
    "keywords": "The PhysicsSolverConfig resource allows a certain level of customization in how physics solves PhysicsSolverPositionCorrection types. WARNING: If you don't understand the topic of constraints then you probably shouldn't change the properties of this resource. Velocity Restitution Threshold: Collision vs. Contact When performing collision resolution, physics has to distinguish between collisions and contacts. In this case, a collision refers to a large impact whereas a contact refers to a near resting contact. These are important to distinguish between when applying restitution; otherwise, resting objects will jitter. The physics solver uses this threshold value to compare against the relative velocity of the objects in contact. If the relative velocity is lower than this threshold then no restitution is applied. Iteration Count Physics solvers are typically iterative in how they solve constraints (contacts, joints, etc...). The more iterations used the more stable a scene tends to be, but at the cost of decreased performance. Independent iteration counts are exposed for impulse solving and position solving (if configured to solve positions). Position Correction Type Physics typically solves with discrete time-steps which allows position error to appear in joints. Zilch's physics system provides two methods to fix position error: Baumgarte fixes position error by applying a \"penalty force\". This typically produces constraints that feel soft and spongy. PostStabilization fixes position error by solving the position constraints directly. This makes stiffer constraints but often at the cost of speed and occasionally stability. This property configures the default solving method for all constraints unless overridden as described below. Joint/Contact Configurations JointConfigOverride component and uses its properties. Note that this component cannot be applied to contacts. Next, the joint will check its space's PhysicsSolverConfig to see if a block for its joint type exists. If this block exists then it'll use the specified values. Finally, any global fallback values will be used such as the position correction type. In the case of properties like slop, each joint type has its own defaults to use when no block exists. Joint Blocks A configuration block can be added for any joint type that determines how the physics system solves that constraint type. This allows changing certain joint types at a global level to solve differently from others. Related Materials Manual joints.md collisionoverview.md physicsspace.md Code Reference Joint JointConfigOverride ConstraintConfigBlock PhysicsSpace PhysicsSolverPositionCorrection"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicsspace.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicsspace.html",
    "title": "| ZilchEngine",
    "keywords": "physicsspace is a component that manages all physics objects within a space. Queries: Casting/Events Most commonly, a user will be working with the PhysicsSpace at run-time through function calls. The most common example of this is to query some collision information about the scene through what is called a cast function. A cast function lets a user query what collision shapes are in a certain region. The most common of these casts is a RayCast which is often used for line-of-sight testing, bullets, and so on. Additional information on casting can be found on this manual page. In addition to casting, PhysicsSpace supports a limited set of \"event casting\"; that is, sending a user defined event to all objects with a certain volume. This can be achieved with the \"DispatchWithin\" functions. Collision Filtering Another important run-time feature of the PhysicsSpace is allowing object pairs to be filtered out of collision through the use of the AddPairFilter and AddHierarchyPairFilter functions. These functions allow per object ignoring of collision (no events will be received) when CollisionTables are not sufficient, such as ignoring collision with a player and their projectiles. Important Properties There are two important properties to help control behavior of the physics system: {nav icon=check-square-o, name=\"Mode2d\"} sets a global state that determines if objects behave in 2d, i.e. they cannot move along the z-axis and they can only rotate about the z-axis. Individual {icon university}[[../RigidBody | RigidBody's]] can override this if desired. {nav icon=pencil-square-o, name=\"CollisionTable\"} lets the user specify CollisionGroup pairs and how colliders.md with these groups should interact with collision. This is the most efficient way to setup collision filtering so as to not resolve collisions or receive events. Advanced Properties Additionaly, there are several other properties on the physics space that are for more advanced users. {nav icon=pencil-square-o, name=\"SubStepCount} lets the physics space run multiple iterations for every timestep to increase simulation fidelity. {nav icon=pencil-square-o, name=\"PhysicsSolverConfig\"} allows defining various properties about how collisions are solved with the PhysicsSolverConfig resource (e.g. baumgarte constants). The static and dynamic broadphase type can be configured for run-time. This is most commonly done to switch the static broadphase to something that allows cheaper dynamic addition/removal of objects at the cost of slightly slower queries. {nav icon=check-square-o, name=\"Deterministic\"} tells the PhysicsSpace to do extra work to produce the same result from the same inputs every time. This is slightly more expensive and can be disabled if needed. {nav icon=check-square-o, name=\"AllowSleep} should almost always be on, except when trying to debug if there is a logical sleeping bug. Debugging A common issue during development is to have two objects not collide when the user thinks they should. To help aid debugging this, physics exposes the WhyAreTheyNotColliding function. This function returns a text string as to why the physics system currently thinks these two objects are not colliding. Related Materials Manual physicscasting.md rigidbody.md colliders.md collisiongroupsandtables.md whyaretheynotcolliding.md physicssolverconfig.md Reference Collider PhysicsSpace RigidBody CollisionTable CollisionGroup"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicstroubleshooting.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicstroubleshooting.html",
    "title": "[[./WhyAreTheyNotColliding | Why are my objects not colliding?]] | ZilchEngine",
    "keywords": "Here are common issues that a user can run into with physics and ways to address them [[./WhyAreTheyNotColliding | Why are my objects not colliding?]] Help find out why objects aren't colliding when they should. Tunneling Why do objects sometimes pass right through each other when moving too fast? Edge Catching An object seems to get stuck occasionally. What is this and how is it fixed?"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicstroubleshooting/edgecatching.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicstroubleshooting/edgecatching.html",
    "title": "Physics Primer: Discrete Collision Detection | ZilchEngine",
    "keywords": "Sometimes a physics object will seem to get stuck on a smooth surface. This is often caused by an issue known as edge-catching. This issue is most common when creating a player. In a game, the ground is often piece-wise, i.e. made of a collection of individual pieces. In this example, assume that the ground is a collection of boxes. Now a rotation locked player is implemented with a BoxCollider to move via simple velocity changes (velocity is the drawn arrow). Sometimes the player will stop moving even though input is setting a velocity. This behavior is caused by the seams on the ground. For an explanation of why this happens a quick physics primer is necessary. Physics Primer: Discrete Collision Detection Physics engines are often implemented with discrete collision detection. This is easiest to think of as a picture flip-book where physics teleports each object from frame-to-frame. This presents a problem to physics as objects will already be overlapping by the time collision is detected. To fix collisions, physics has to approximate the best direction in which to push the objects apart. The approach taken is to find the minimum translational distance required to push the objects apart. Given the above configuration, all 4 primary directions can be checked for the minimum translational distance. It should be clear that pushing the box up requires less work than the other four directions. Edge Catching Sometimes physics incorrectly guesses what the best distance is. This commonly happens when gravity is combined with player input and collision happens at a corner. Even though two boxes are next to each other with no seam between, physics detects collision between each box in isolation. A step-by-step illustration is provided: First look at a movable box resting at the seam between two boxes. For this illustration the focus will be on the red box and the blue box on the right. Forces for the frame are applied to the red box. First, gravity pulls the red box down. Additionally, an input force pushes the red box to the right. After updating position from forces, the physics system will see this scenario. The red box is in contact with both ground surfaces and collision needs to fix the overlap by pushing it out. Each ground surface will independently determine the minimum translational distance. The left box will correctly push up. The right box will unfortunately push to the left since this requires the least movement. Now physics resolves collisions and puts the red box right back where it started. Given the same forces, the red box will repeat this cycle and be stuck on this seam in the ground. Fixing Edge Catching Unfortunately there is no perfect generic solution to the edge catching problem. There are two main approaches to work around the problem: Change your collision: The root issue here is that a seam does exist. One way to fix this is to remove the seam by merging the surface's collision. It's near impossible to remove all seams in a game though, and it is often more practical to change the player's collision shape. Commonly, a player uses a CapsuleCollider instead of a BoxCollider to avoid seams. In the above illustration, the box on the left has a minimum translational distance that will push it to the left. The capsule however, has a minimum translational distance that is up and to the left. This will allow the capsule to move to the right a bit and escape the cycle of edge catching after a few frames. While this method mostly fixes edge catching, it tends to produce small bumps when crossing edges. This is because of the portion of the minimum translational distance that still points against the player's velocity. Use the SweptController: Zilch provides a character controller that uses //swept collision//. Swept collision is different than discrete collision because it detects exactly when a collision happens. This prevents a player from ever colliding with an internal edge because it must first collide with the surface. There's two issues with the swept controller. It's more computationally expensive. This isn't an issue for a few number of objects, such as the player, but wouldn't be practical for every object. It only works with Kinematic objects. Using the swept controller means manually translating the player and not working through velocity and forces. This swept object will no longer react to PhysicsEffects, collision resolution won't do anything, and Joints won't affect it. For some games this may make the SweptController impractical. Related Materials Manual physicstroubleshooting.md physicsspace.md colliders.md boxcollider.md capsulecollider.md physicseffectsandregions.md Reference PhysicsSpace Collider BoxCollider CapsuleCollider PhysicsEffect Region"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicstroubleshooting/tunneling.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicstroubleshooting/tunneling.html",
    "title": "Discrete Collision Detection | ZilchEngine",
    "keywords": "Sometimes when a small object is moving fast it might seem to pass through other objects. This is an artifact in physics engines known as tunneling. Before explaining this, understanding some basic concepts in physics engines is important. Discrete Collision Detection Game physics engines are commonly implemented using a discrete collision detection model. In a discrete model, objects teleport from frame-to-frame. One way to view this is as a picture flip-book; in each subsequent picture the object teleports to its new position. Pictured above is an illustration of discrete physics. Notice how there are gaps in the object's movement trail due to a lowered framerate. Typically a physics engine runs at a much higher framerate which is why motion seems smooth. Tunneling As an object becomes smaller and moves faster it becomes more likely to tunnel. Tunneling is when an object misses a collision due to moving too fast. In the above picture, the red ball is moving at a constant speed to the right with a framerate of 1 fps. In this example no collision is detected as the ball teleports past the wall without ever coming into contact with it. Tunneling happens even if the framerate is high. The faster and smaller an object the more likely tunneling is to happen. Additionally, tunneling doesn't just result in collisions being missed. Sometimes tunneling can result in wrong collisions. In the above picture the ball does end up hitting the wall; however, it hits on the opposite side. In this way the collision will be detected but in the wrong direction. Fixing Tunneling The easiest way to fix tunneling is to limit the size and speed of an object. If an object can't move faster than its \"radius\" each frame then it won't tunnel. Another way to avoid tunneling is to increase the framerate of the simulation. PhysicsSpace exposes SubStepCount which allows the user to run physics at a higher framerate. The final way to avoid tunneling is to use continuous collision detection. Currently, continuous collision detection is only available through PhysicsSpace's SweepCollider function which is meant for character controllers. See the SweptController script for an example. Future plans include making this an option on rigid bodies. NOTE: Continuous collision detection is significantly more computationally expensive than discrete. Related Materials Manual physicstroubleshooting.md collisionoverview.md physicsspace.md Reference PhysicsSpace"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/physicstroubleshooting/whyaretheynotcolliding.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/physicstroubleshooting/whyaretheynotcolliding.html",
    "title": "Related Materials | ZilchEngine",
    "keywords": "A common issue during development is to have two objects not collide when the user thinks they should. To help aid debugging this, PhysicsSpace exposes the WhyAreTheyNotColliding function. This function takes a pair of objects and returns a string signifying why the physics space doesn't think they're colliding. Here's a short list of a few common reasons: There isn't a collision: The objects might just not be colliding. This is often the case when making a 2D game and the objects are on different z-layers. Try to look at the property grid or change the camera angle to verify this. The collider is static: See the Collision Overview page for what goes through collision detection and collision resolution. No messages are sent: Ensure that the Collider's SendsEvent checkBox property is true and that a CollisionTable is not interfering with these events. Additionally, if using the SweptController make sure: CustomCollisionEventTracker component is attached to the same object as the SweptController SweptController's ForwardEvents checkBox property is set to true The listener didn't connect to the event: Make sure that the object that is supposed to get a collision event actually connected to the event. The listener connected incorrectly: There's two common scenarios for this. Make sure that the correct event type was connected to. Make sure that the listener connected to the right object. Was this the correct cog? Should this have been the PhysicsSpace? Related Materials Manual physicstroubleshooting.md colliders.md collisionoverview.md collisiongroupsandtables.md Reference Collider PhysicsSpace CustomCollisionEventTracker CollisionGroup CollisionTable"
  },
  "docs/zilch_editor_documentation/zilchmanual/physics/rigidbody.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/physics/rigidbody.html",
    "title": "RigidBodyDynamicState | ZilchEngine",
    "keywords": "The RigidBody component defines the inertia (mass, velocity, etc...) of a rigid object (i.e. one that cannot be deformed by forces). RigidBody approximations are used in physics to simplify common behaviors for both performance and stability. RigidBodyDynamicState RigidBody defines the DynamicState property that changes how the dynamics (or resolution) for an object is handled. The default state of a RigidBody is dynamic (i.e. the body is free to move and resolve as normal). Commonly, a body needs to be locked in space to behave as some fixed world geometry. One way to do this is to remove the RigidBody. Additionally a RigidBody's DynamicState enum can be changed to Static. This object will be treated as an infinite mass object that doesn't move. The difference between these two forms of static is mostly internal performance. The general rule of thumb is: if it always exists and never moves, remove the RigidBody; otherwise, mark it Static. A RigidBody can also be set to Kinematic. Kinematic is an infinite mass object like Static; however, it also gives the physics system extra information about how to resolve collisions. A static object is never expected to move, so if it is teleported by the user into contact with other objects, then the physics system doesn't know how to properly resolve the collision as no velocity was involved. A kinematic object tells the physics system to approximate the velocity in the collision based upon the last and current position of the object. This is typically used for moving platforms or other moving, infinite mass objects. Mode2D {nav icon=list, name=Mode2D} defines whether a RigidBody should behave like a 2D or 3D object. If an object is 3D, it can translate and rotate in all three dimensions. If an object is 2D then its movement is restricted to the xy-plane and can only rotate about the z-axis. By default, a RigidBody will use the {nav icon=check-square-o, name=\"Mode2D\"} state of the PhysicsSpace so that an entire space can be changed at once, but an individual RigidBody can be set independently from the space. It is important to note that Mode2D only affects how the physics system will treat the object. A user can still manually translate or rotate an object on any axis, but physics will be unable to move a RigidBody on the locked axes, even if forces or velocity act on them. RotationLocked Sometimes, physics shouldn't be able to rotate an object. In this case, the RotationLocked checkBox property can be used to restrict rotation while still allowing all linear forces to affect the object. This can be especially useful on a player object when rotation complicates game logic. NOTE: Sometimes dynamics will seem odd (e.g. friction, resolution) on locked objects. This is because humans tend to have bad intuition for physics on objects that can't rotate as this doesn't occur in real life. Sleeping Sleeping is an optimization for physics. If an object hasn't moved in a while then physics will not perform some operations unless the object is interrupted (woken up). As this can sometimes cause gameplay bugs, it is a toggleable property. To help debug, there is also a global AllowSleep checkBox property on the PhysicsSpace. Common bugs involving sleeping include: Relying on events to be sent out even when objects are asleep Forces not affecting the object (even from script) For this reason, it is not uncommon to turn off sleeping on a player controlled object. Additionally, an object can be manually woken up through the ForceAwake function in script. Sometimes game logic may rely on sleeping. One such example of this is waiting for all objects to fall asleep to trigger the end of a turn or level in a game. For example, an environment-destruction game where the player's turn ends when all pieces of the environment stop moving and fall asleep. This can be checked both by querying the current state of the RigidBody and by listening for events. On rare occasion, a RigidBody may need to be forced to sleep (e.g. after some global timer) through the ForceAsleep function. Movement via Script A RigidBody is expected to be moved through the use of physics instead of manually being teleported via the Transform. There are a few common methods to do this: Forces: forces allow pushing an object over time while taking into account the object's mass. The same force applied to a heavy object will cause a slower change in momentum. Forces are accumulated each frame (such as gravity and drag) and are applied once physics updates. Velocity: velocity describes how many units per second this object will move. This can be manually changed in script to control how an object moves. Changing the velocity directly will not take into account the object's mass. Impulses: an impulse is like a hybrid of a force and velocity. An impulse is defined as an instantaneous force, i.e. a force that will be instantly applied to velocity. Use impulses to immediately update an object's velocity while still taking mass into account. All of these are applied by default to the center of mass of the RigidBody. This means that linear values will not affect angular values and vice versa. The linear and angular values, however, can be independently applied (angular force is called torque). Additionally, there is an ApplyAtPoint and ApplyAtOffset function for all three application methods. These apply a force/velocity/impulse at a world point or world offset vector that will result in changes to both linear and angular momentum. Related Materials Manual physicsspace.md Reference PhysicsSpace RigidBody Transform DynamicState"
  },
  "docs/zilch_editor_documentation/zilchmanual/scripting.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/scripting.html",
    "title": "nada_in_zilch | ZilchEngine",
    "keywords": "nada_in_zilch Scripting is the basis of making gameplay as it is how you define rules for your game and players to follow. If you feel like you need more practice, in depth explanation, or you are not very familiar with programming visit the nada_in_zilch section. Events & Connections Component based design depends heavily on a simple and flexible way to pass information between components. This section covers how to use events in zero to allow components to speak to each other. Debug Drawing There are multiple ways to debug your game in Zilch aside from the standard Console.Writeline function. The WYSIWYG (What-You-See-Is-What-You-Get) Approach to Configurable Properties There are several things you can do to change the experience of using the editor, by creating your own RunInEditor scripts."
  },
  "docs/zilch_editor_documentation/zilchmanual/scripting/debugdrawing.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/scripting/debugdrawing.html",
    "title": "DebugDraw | ZilchEngine",
    "keywords": "Debug drawing is a feature in Zilch that allows you to draw lines and shapes within the editor for the purpose of debugging your game. DebugDraw objects have simple interfaces to draw simple, solid color primitives that are intended for communicating information visually to the developer. While there are many different shapes that may be debug drawn, this page limits itself to describing lines and triangles. DebugDraw The DebugDraw object draws all the debug objects in a level once per frame. Each debug draw object is turned into a graphical which uses either the DebugDraw resource or DebugDrawOnTop resource RenderGroup. The user will never make the draw call directly; instead, all debug objects to be rendered must be added to the debug draw call using the DebugDraw.Add() function: // Create a DebugLine instance with a point and a radius, and add it to the DebugDraw call var dLine = DebugLine(Real3(0,0,0), Real3(5, 5, 0)); dLine.HeadSize = 1.0; dLine.Color = Real4(0.2, 0.4, 0.8, 1.0); DebugDraw.Add(dLine); // Create a DebugSphere instance and add it to the DebugDraw call var dSphere = DebugSphere(Real3(0,0,0), 4.0); dSphere.Colored = true; DebugDraw.Add(dSphere); The preceding code block as rendered in a 2D level The preceding code block as rendered in a 3D level (viewed from an angle) DebugLine DebugLine draws a line between two points, a start and an end. Lines can also be arrows by using the BoxHeads checkBox property, which adds a cone on the end of the line. These two points provide the minimum required settings when adding a debug line object. The DebugLine-specific member variables along with descriptions of each are listed below: Parameter Description Start Defines the starting position of the line End Defines the end position of the line Color Defines the color of the line HeadSize Defines the size of the head at the top of the line (default shape is an arrow) BoxHeads checkBox A Boolean that when set to true changes the heads to boxes DualHeads checkBox A Boolean that when set to true places Heads on both ends of the line The following NadaScript shows how a debug object's member variables may be defined with properties as well as updated according to game logic: class RotateLine : NadaComponent { [Dependency] var Transform : Transform; [Property] var DrawLine : Boolean = false; [Property] var LineEnd : Real3; [Property] var RotDegrees : Real = 90.0; [Property] var LineColor : Real4 = Real4(0.2, 0.4, 0.8, 1.0); [Property] var LineArrowSize : Real = 1.0; var Angle : Real; // The angle by which to rotate the line function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { if(this.DrawLine) { // Create a DebugLine instance var debugLine = DebugLine(this.Owner.Transform.Translation, this.LineEnd); // Set debug line start to the object's translation debugLine.Start = this.Owner.Transform.Translation; // Set target angle to the desired rotation multiplied by Dt this.Angle += Math.ToRadians(this.RotDegrees) * event.Dt; // Rotate the debug line's end based on the target angle var endX = (this.LineEnd.X * Math.Cos(this.Angle)) - (this.LineEnd.Y * Math.Sin(this.Angle)); var endY = (this.LineEnd.Y * Math.Cos(this.Angle)) + (this.LineEnd.X * Math.Sin(this.Angle)); // Set the new end point debugLine.End = Real3(endX, endY, 0); // Set line color and head size debugLine.Color = this.LineColor; debugLine.HeadSize = this.LineArrowSize; // Add the line to the DebugDraw call DebugDraw.Add(debugLine); } } } The preceding NadaScript rendered in a 2D level DebugTriangle DebugTriangle draws a triangle defined by three vertices (the member variables Point0, Point1, and Point2). The DebugTriangle-specific member variables along with descriptions of each are listed below: Parameter Description {nav icon=pencil-square-o, name=Point0} Defines the first vertex of the triangle {nav icon=pencil-square-o, name=Point1} Defines the second vertex of the triangle {nav icon=pencil-square-o, name=Point2} Defines the third vertex of the triangle Color Defines the color of the border/fill of the triangle The following ZIlchScript illustrates in a simple manner how consecutive triangles may be debug drawn: class DrawTriangles: NadaComponent { // The vertices for the triangle pairs [Property] var Vertex1: Real3; [Property] var Vertex2 : Real3; [Property] var Vertex3 : Real3; [Property] var Vertex4 : Real3; // The two colors to use for each triangle pair [Property] var ColorA : Real4; [Property] var ColorB : Real4; // Number of triangle pairs to draw [Property] var NumberOfTriangles : Real; function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { // Store the x-coordinate values for each vertex var x1 = this.Vertex1.X; var x2 = this.Vertex2.X; var x3 = this.Vertex3.X; var x4 = this.Vertex4.X; // Get the difference between two x-coordinates that share the same y-coordinate var diff = this.Vertex2.X - this.Vertex1.X; // Loop as many times as there should be pairs of triangles for(var i = 0; i < this.NumberOfTriangles; ++i) { // Increase the x-coordinate by the difference this.Vertex1.X += diff; this.Vertex2.X += diff; this.Vertex3.X += diff; this.Vertex4.X += diff; // Create and add the first triangle var triA = DebugTriangle(this.Vertex1, this.Vertex2, this.Vertex4); triA.Color = this.ColorA; DebugDraw.Add(triA); // Create and add the second triangle var triB = DebugTriangle(this.Vertex2, this.Vertex3, this.Vertex4); triB.Color = this.ColorB; DebugDraw.Add(triB); } // Reset the original x-coordinate values this.Vertex1.X = x1; this.Vertex2.X = x2; this.Vertex3.X = x3; this.Vertex4.X = x4; } } The preceding NadaScript rendered in a 2D level Related Materials Manual rendergroups"
  },
  "docs/zilch_editor_documentation/zilchmanual/scripting/eventsandconnections.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/scripting/eventsandconnections.html",
    "title": "Pre-Defined Engine Events | ZilchEngine",
    "keywords": "Events are the main way that objects and components talk to each other in the Zilch Engine. When a component has information that it wants to share, the easiest way is to package the information into an Event, and then dispatch it. Then, any component that wants to have that information can listen for it by connecting a member function to the event. In the Zilch Engine, there are two main categories of events: the pre-defined Engine events (such as as an Update event or a Collision event) that are that ready-made for you to connect to, and Custom NadaScript Events that the user creates. The Custom Events allow the user to decide when and where to send them out, what information is sent with them, and what listens for the event after it's sent. This page will briefly cover each of the two categories, but will focus specifically on Custom Events(see event_reference for built-in events). Pre-Defined Engine Events At the bottom of this page is a comprehensive list of the pre-defined engine events. The LogicUpdate Event, Collision Events (which comes in three variations: Started, Ended, and Persisted), Keyboard Events, and Mouse Events. Custom NadaScript Events These are the events that the user will create and dispatch themselves. A primary reason to use custom events is that they move the focus away from whatever triggers an action (such as collision or a frame update) to the object that is responding to the event occurring (i.e. the player's health and the HUD element displaying the player's health that is changed as a result of colliding with an enemy). There are a number of benefits to this approach, including: One event dispatch on an object can cause many behaviors to occur. i.e. PlayersDamagedEvent is dispatched on the player object The player's hp lowers in the Health component attached to the player The object representing the player's health in the HUD scales to reflect the player's new health The AnimationController changes the player sprite to the DamagedAnimation Multiple components on different objects can all respond to the same event dispatch. Events can make it easier to understand and modify your code as particular behavior responses are more closely related to the objects they affect, while also encouraging logical decoupling. Keep in mind that the user will only want to use custom events when there is more than one component \"listening\" for the event. The user will get the most use out of custom events when the events that are created are things that affect multiple objects in your game. Using a custom event when only one object is listening adds an unnecessary layer of abstraction, whereas a simple, direct function call to enact the desired behavior change is much simpler. Using Custom Events in a Game Let's go through a quick analogy for events. Imagine a world just like ours, but where vampires and ghosts also happen to exist alongside humans. In this instance, the custom event we are concerned with is the rising of the sun in the morning. In this world we're imagining, the appearance of the sun causes specific behaviors in some of the objects that exist in the world, but for others, it means nothing at all. For the humans, the sun rising means it is time to wake up; for the vampires, it can mean instant death if they happen to be outside; for the ghosts, it means they are banished back to the grave; for rocks, however, it means nothing at all. Humans, vampires, and ghosts all have an interest in the sun rising and will respond to it in different ways. Rocks couldn't care less. (NOTE)Exceptions to the Rule: When might one want to use a custom event when there is only one object listening? Here is at least one example worth covering: When the user has a large number of instances of the same object that need to respond to some change. Using the example above, say that the world is overrun with vampires. There are hundreds swarming over an area. Once could put all instances of the vampire into an array and call the behavior-changing function on each one, but in this case it is simpler, and most likely more efficient, to just have the vampire archetype from which the instances are created have a component that listens for a \"sun rises\" event and changes their behavior accordingly. This scenario could translate into a game as follows: * When the sun rises, a custom event is \"sent out\" to the entire game space. * One must then decide what objects should be \"listening\" for this event. In the example, all humans, vampires, and ghosts. * These objects that are listening for the event respond to it in different ways, however, requiring the user to define how each separate object responds when they \"hear\" the event (to be written in behavior-changing functions--in the components attached to the listening objects--that are called as a result of the component \"hearing\" the event). * All the other objects that are not affected by the event (rocks, buildings, etc...) have no need to listen to the event. Since they don't care about the event, they will have no component that even acknowledges the event was sent. Decoupling and Custom Events To understand how Custom Events can help with Decoupling one's code, it is helpful to first have a working definition of Coupling. Two elements within a project are considered coupled if a change in one element directly leads to a change in the other element. For example, if the player object has a child object that moves one-to-one with every movement of the player (and the player moves one-to-one with every movement of the child), the movement of those two objects could be considered tightly coupled. If, on the other hand, the child's movement is not reliant upon the movement of the player, the movement of the two objects is decoupled (otherwise known as loose or low coupling); that is, the action of either object does not have a direct, corresponding effect on the other. Custom Events allow you to decouple elements within one's game so that the emphasis lies more with those objects that are listening for an event, causing some change in behavior. The behavior change caused by listening to the event is not directly tied to the sending of the event; on the contrary, the objects that listen for the event can respond to hearing that event in completely different ways that do not affect each other and are not influenced by the sending of the event (the exception in this case being if you are attaching data with an event, as will be shown below). Event Dispatching Events are dispatched per object. The objects that events can be dispatched on can include the Space, the Level Settings of a level, the owner of the component dispatching the event (i.e. this.Owner), as well as any other specific object to which one has a reference. Events dispatched onto the Space object will be heard by every object that is listening to the Space for that particular event. In short, the listener that is connecting to an event must match up that connection exactly in the way in which the event was dispatched. (NOTE)Consider the Following: There are two red Players, Player1 and Player2. They both connect to ChangeColorToBlueEvent so they can respond with their OnChangeColorToBlueEvent functions (that, in fact, change their color blue.) When Player1 signs up for the ChangeColorToBlueEvent, it listens for the one dispatched by the Space object. When Player2 signs up for the same ChangeColorToBlueEvent, it listens for the one dispatched out by the Game object. Later when the ChangeColorToBlueEvent is fired from the Space, Player1 changes to the color Blue having received the event, while Player2 stays red. Creating and Using Custom Script Events The creation and usage of custom events in Zilch is a multi-step process that follows a simple mechanism that relies upon correctly matching up event dispatches with event connections. The following sections will detail the way in which to correctly create, attach data to, dispatch, and connect to custom events. WARNING: Occasionally, you will need to store information received in an event for later use. You may be tempted to store a reference to the event object itself. This is a bad practice and should never be done. You should instead copy the information within the received event object by value into variables of their corresponding types. If you were to store a reference to the event object itself the reference would lose its validity as soon as all event listeners have executed and the event is deallocated. This situation would result in the event reference to point at an address in memory that may be currently be in use by another part of the engine since it is no longer being used by the event. Accessing the broken event reference in the state will result in undefined behavior. Creating the Event Definition The following code-block demonstrates both how to create a custom event as well as how to include data to send with the event. While it is rare that one will send no data, it is not necessary to include data when creating the event. In these cases, the dispatching of the event itself is the data. In most cases, however, data will be included that will have relevance to the behavior change desired by the object that is connecting to the event (i.e. on a \"enemy destroyed\" event, one might send the amount of points the player receives for destroying the enemy). // Define a custom NadaEvent class MyCustomEvent : NadaEvent { //Data to be sent with the event //that will be used by the object connecting to the event var InfoToSend : String = \"\"; var NumberToSend : Integer = 0; var RealToSend : Real = 0.0; } Send an Event Sending an event is a four part process. Create an event. Attach data to the event. (optional) Use the sends keyword to add the name of the event you're sending to the Events namespace. Using the appropriate event-sender, dispatch the event. Create the Event //Create an instance of the Custom Event var myCustomEvent = MyCustomEvent(); Attach Data to the Event NOTE: Users can only add data to the member variables defined in the event's class. To add more data, the user needs to alter the event's class to include more member variables. class MyCustomEvent : NadaEvent { //Attach Data myCustomEvent.InfoToSend = \"data\"; myCustomEvent.NumberToSend = 5; } class EventDispatcher : NadaComponent { var DataThatWillNotBeAdded : Real = 10.5; //This data WILL NOT be sent with the event //as it is not added within the event-defining class myCustomEvent.RealToSend = this.DataThatWillNotBeAdded; } Using the Sends Keyword The sends keyword helps users in two ways. First, it registers the string type ID so that it's associated with the event type itself (allowing one to send and connect using the Events.MyCustomEvent syntax) while also keeping the event //type safe//; that is, an error will be thrown on the event response function if one tries to connect to an event that doesn't precisely match the method in which the event was dispatched. Users can only use the sends keyword within the outermost class-scope (of either the class defining the custom event or the class in which it is dispatched), outside of any function within that class. In other words, it must be used outside of Initialize, OnLogicUpdate, or any other function. Placing it within the class that creates the event itself is a good way to keep track of it is registered, but ultimately it is up to the user where they wish to put it so long as it not used inside any function. The following two code-blocks show two ways to use the sends keyword correctly: class MyCustomEvent : NadaEvent { //Using the sends keyword correctly within the class //that defines that custom event sends MyCustomEvent : MyCustomEvent; } class EventDispatcher : NadaComponent { //Using the sends keyword correctly within the class //that dispatches the custom event sends MyCustomEvent : MyCustomEvent; function Initialize(init : CogInitializer) { } } The following code-block will show an incorrect way use the sends keyword: class EventDispatcher : NadaComponent { function Initialize(init : CogInitializer) { //Incorrect usage of sends keyword within a function sends MyCustomEvent : MyCustomEvent; } } Dispatch the Event Always be mindful of sending the events from the source one's subscribers are expecting to hear it from. class MyCustomEvent : NadaEvent { //Registers the string type ID to be associated with the event type sends MyCustomEvent : MyCustomEvent; } class EventDispatcher : NadaComponent { //Property for selecting the CogPath of the object for which to //dispatch the event [Property] var ObjectToDispatchToPath : CogPath = null; //Cog variable for which to assign the Cog of the CogPath variable var ObjectToDispatchTo : Cog = null; function Initialize(init : CogInitializer) { //Sets Cog variable for the object to dispatch //to the Cog from CogPath variable this.ObjectToDispatchTo = this.ObjectToDispatchToPath.Cog; //Create an instance of the event var myCustomEvent : MyCustomEvent = new MyCustomEvent(); //Dispatches the Event onto multiple objects from component //Dispatch onto `this.Owner` this.Owner.DispatchEvent(Events.MyCustomEvent, myCustomEvent); //Dispatch onto LevelSettings this.LevelSettings.DispatchEvent(Events.MyCustomEvent, myCustomEvent); //Dispatch onto other, specific object this.ObjectToDispatchTo.DispatchEvent(Events.MyCustomEvent, myCustomEvent); //Dispatch onto `this.Space` this.Space.DispatchEvent(Events.MyCustomEvent, myCustomEvent); //Dispatch onto `this.GameSession` this.GameSession.DispatchEvent(Events.MyCustomEvent, myCustomEvent); } } Listening for an Event In order to respond to an event, the user must identify which event-sender you are listening to: Space, LevelSettings, GameSession, Object from which the event is dispatched (along with the object's parent or children), another specific object, etc. Which event the user cares about: Events.LogicUpdate, Events.MyCustomEvent, etc. And how the user plans to respond: OnLogicUpdate, OnMyCustomEvent, etc. (NOTE)Dispatching Onto Space vs LevelSettings: One thing to keep in mind when dispatching onto either the Space or LevelSettings is the scope of each. Remember that the LevelSettings object is also scoped to the Level that it is in. This is important to consider when using custom events because if the level is changed, the particular LevelSettings object for that level will no longer exist as well as any events that were dispatched onto LevelSettings. The Space on the other hand, could continue to exist between the changing of levels and any events that dispatch onto the Space will still exist. Many different functions in various components can connect to the same dispatched event. All that is required is that each object have a function that is connected correctly to the single event that has been dispatched on that object. IMPORTANT: Make sure the event connection is made in a place that will only run once. If the event ends up connecting multiple times//, the object it's dispatched onto will //respond multiple times to a single //event//. While connecting to an event is usually done in a component's Initialize function, it doesn't have to. The connection may be dependent on other factors or variables, especially if the user wants the object to connect only after something significant has happened. In these cases, one may choose to place the connection outside of the Initialize function and within the scope of a conditional statement checking for certain criteria. Connecting //Listening for Custom Events //Listening for Dispatch onto `this.Owner` Zilch.Connect(this.Owner, Events.MyCustomEvent, this.OnMyCustomEvent); //Listening for Dispatch onto `this.Space` Zilch.Connect(this.Space, Events.MyCustomEvent, this.OnMyCustomEvent); //Listening for Dispatch onto `this.LevelSettings` Zilch.Connect(this.LevelSettings, Events.MyCustomEvent, this.OnMyCustomEvent); //Listening for Dispatch onto `this.GameSession` Zilch.Connect(this.GameSession, Events.MyCustomEvent, this.OnMyCustomEvent); Responding to an Event In order to actually respond to the event, the user needs to define the function provided in the call to Zilch.Connect. ere, one can gain access to the data that is sent with the event, for use in altering behavior or setting properties. //This function gets called because this is the one //we connected to when we listened to the event function OnMyCustomEvent(myCustomEvent : MyCustomEvent) { //Use as much or as little information passed by the event this.Owner.ComponentName.PropertyName = myCustomEvent.InfoToSend; this.Owner.ComponentName.Value = myCustomEvent.NumberToSend; } Disconnecting Disconnecting makes it so one is no longer notified when the event occurs. If multiple functions are linked to the same event, these too will be disconnected. There is no way to disconnect only one connection to the event; if one is disconnected, all are disconnected. //Disconnecting From Events Zilch.Disconnect(this.Owner, Events.MyCustomEvent, this); Another important thing to keep in mind regarding Disconnecting is that is object-specific and event-specific but not receiver-specific. That is why in the code-block immediately above, only this is passed in as the final argument instead of the delegate itself (i.e. this.OnMyCustomEvent). Related Material Reference event_reference Collision Events Keyboard Events Mouse Events"
  },
  "docs/zilch_editor_documentation/zilchmanual/scripting/wysiwyg.html": {
    "href": "docs/zilch_editor_documentation/zilchmanual/scripting/wysiwyg.html",
    "title": "Related Materials | ZilchEngine",
    "keywords": "Properties are one of the easiest ways to make components more reusable. While some properties affect runtime behavior, others are simply items that help set the initial state of one's components. One can see the WYSIWYG (what-you-see-is-what-you-get) effect with some of the built-in components. Here the Sprite 's orientation is changed the moment the FlipX checkBox box is checked in the editor. As a demonstration, the following custom NadaScript will emulateFlipX checkBox while using a Property: class Flipper : NadaComponent { [Dependency] // Need the Transform component to perform the flip var Transform : Transform; [Dependency] var Orientation : Orientation; [Serialized] // This is the backing field that saves the value. var FlipXs : Boolean = false; [Editable] // This is displayed in the Properties Window, but doesn't save var FlipX : Boolean = false; function Initialize(init : CogInitializer) { // If they chose to Flip, do so now if(this.FlipX) this.Flip(); } function Flip() { this.Transform.RotateWorld(Math.AxisAngle(this.Orientation.WorldUp, Math.Pi)); } } While this works, it doesn't flip when FlipX checkBox is altered at runtime. By only calling Flip() during initialization, it runs once and then never again. Although other scripts can access and call Flip() themselves, this function doesn't update FlipX checkBox, which means it doesn't represent the state of the object, like it does in the Sprite component. To link the call of flip with the setting of the variable, we'll use a Get-Set for editing and a field for the backing variable. i.e. Update Flipper.z to the following: [RunInEditor] class Flipper : NadaComponent { [Dependency] // Need the Transform component to perform the flip var Transform : Transform; [Dependency] var Orientation : Orientation; [Serialized] // This is the backing field that saves the value. var FlipXs : Boolean = false; [Editable] // This is displayed in the Properties Window, but doesn't save var FlipX : Boolean { get { return this.FlipXs; } set { // Using a get-set allows us to add functionality when the value is set; // in this case, performing the flip when the value is changed. if (this.FlipXs != value) { this.Flip(); this.FlipXs = value; } } } function Initialize(init : CogInitializer) { // If they chose to Flip, do so now if(this.FlipX) this.Flip(); } function Flip() { this.Transform.RotateWorld(Math.AxisAngle(this.Orientation.WorldUp, Math.Pi)); } } Employing RunInEditor , Serialized , and Editable we've created the WYSIWYG feel, and the sprite can now be flipped at editor runtime. This design pattern can be reused to create the polished WYSIWYG feel with most scripted components. Related Materials Manual NadaScript Sprites RunInEditor Get-Set RunInEditor Serialized Editable"
  },
  "docs/zilch_for_educators.html": {
    "href": "docs/zilch_for_educators.html",
    "title": "Intro | ZilchEngine",
    "keywords": "NOTE: This page is intended as a workshop for a trained instructor to teach potential Zilch Engine Educators. Intro This section outlines a workshop on entry level game development education through the Zilch Engine. Welcome Instructor background Trainee background Goals Basic Zilch Engine comprehension Basic intructional knowledge of curriculum. Feed back Identify educator goals Identify requirements and constraints of the educational context Zilch Engine The Zilch Engine is a professional grade 3D game engine developed in DigiPen's R&D department. Let's start with with an overview of some highlevel Launcher Builds Editor UI Text Editor Customization Tags Commands Architecture Components Objects Resources Tools Graphics Physically Based Rendering Physics Kinematic Dynamic Audio 3D Scripting (Nada) Simple Advanced Demos Physics Demo rFRIC Rube Goldbergs Vapor Aquarius Frozen Masquerade Orpheus Super Space Blank The Lift ZilchHub ZilchHub is the open source platform/site for Zilch Engine developement and education. Open source platform Tasks Projects Documentation Source Support Bug Reporting Feature Requests Demos Open Source Contribution Editor Documentation Website/Platform (Phabricator) Tutorials The tutorial section is the bulk of the content intended for new students. Much of the workshop Tutorial Sequence Beginner I Beginner II Manual Projects The following are suggested projects to be implemented after completing each set of the #basic_tutorials. Rube Goldberg Machine After completing the #beginner_i tutorials students should be able to implement a simple version of a Rube Goldberg machine. Unlike the following projects the Rube Goldberg machine in not modelled after any paticular game and has many degrees of freedom. It is suggested that you require students to utilize the instances of each of the following features taught in the #beginner_i tutorials. Physics Effects Applied to LevelSettings object Applied to a Region Physics Materials Restitution Friction High Priority Hierarchies Pong After completing the #beginner_ii tutorials students should be able to implement a simple version of Pong. Paddles Basic Input Object Movement Collision Detection Physics Materials Ball Physics Materials Random Direction Score SpriteText Asteroids After completing the #beginner_iii tutorials students should be able to implement a simple version of Asteroids. Player Ship Input Movement Firing Screen Wrapping 2D Rotation Asteroids Archetypes Construction Runtime Spawning Timers Position 2D Platformer After completing the #beginner_iv tutorials students should be able to implement a simple 2D platformer. Player Input Movement (use the swept controller) Health Jumping Checkpoints Respawning Simple Enemies Patrol Destroy/Respawn on Collision External Materials and Resources Audio Audacity Art Open Game Art Kenney Sprite Assets Acceptable Asset Licenses CC0 (Creative Commons V0) MIT Editor Reference Text Editor Hotkeys"
  },
  "docs/zilch_for_educators/asteroids_project.html": {
    "href": "docs/zilch_for_educators/asteroids_project.html",
    "title": "Learning Objectives | ZilchEngine",
    "keywords": "This page outlines the steps need to create a basic version of the classic game Asteroids. You should make sure you understand the content of the #basic_tutorials tagged with #beginner_iii before beginning this project. NOTE: Like other project pages this tutorial does not cover every tiny step the user must complete and instead summarizes. This requires the reader to understand basic concepts from preceeding tutorials to complete the project. Learning Objectives Reaffirm the learning objectives of #beginner_iii tutorials. Level Setup Command : New Project Remove the GravityEffect from the LevelSettings object. Remove the DragEffect from the LevelSettings object. The Player Player Archetype Command : CreateSprite Rename the new sprite to Player Add component RigidBody to the Player object Add component Orientation to the Player object Set Orientation.DefaultOrienationBases to ForwardZUpY Upload the Player object to a new archetype called Player Player Movement Command : Add Resource Create a NadaScript resource using the Component template template and name it PlayerMovement Add component PlayerMovement to the Player object Upload the Player object to a new archetype called Player Properties Define properties of type Keys in PlayerMovement for the forward, backward, left, right, and shoot keys for the player Define properties of type Real called Speed and RotationSpeed Moving Connect to LogicUpdate in the PlayerMovement component. In PlayerMovement in OnLogicUpdate Declare a local movement variable Check if the Forward and Backward input keys defined above are down using Zilch.Keyboard.KeyIsDown() If the Forward is down add Orientation.WorldForward to movement If the Backward is down subtract Orientation.WorldForward to movement Normalize movement Set RigidBody.Velocity to movement * this.Speed Rotating In PlayerMovement in OnLogicUpdate Declare a local rotation variable Check if the Left and Right input keys defined above are down using Zilch.Keyboard.KeyIsDown() If the Left is down add Orientation.WorldUp to rotation If the Right is down subtract Orientation.WorldUp to rotation Declare a local variable rotationSpeedRadians and initialize it to RotationSpeed converted to radians. Use Transform.RotateWorld() to rotate the object by rotation * rotationSpeedRadians * event.Dt Player Shooting Command : Add Resource Add a NadaScript resource using the Component template template and name it ObjectSpawner Add component ObjectSpawner to the Player object Command : Add Resource Add a NadaScript resource using the Component template template and name it CreateOnInput Add component CreateOnInput to the Player object Upload the Player object to a new archetype called Player Properties In ObjectSpawner Define a property of type Archetype named ArchetypeToSpawn Define a property of type Real named InitialVelocity Define a property of type Boolean named UseRandomDirection (defaulting to false) In CreateOnInput Define a property of type Keys in ObjectSpawner named SpawnKey Spawning Projectiles In the ObjectSpawner component Create a new function named SpawnObject() In SpawnObject() Create a ArchetypeToSpawn object at the position of the Player object If ObjectSpawner.UseRandomDirection is true then get a normalized random direction, or if UseRandomDirection is false use Orientation.WorldForward for the direction of the object's inital velocity. Set the initial velocity of the object. In the CreateOnInput component. Connect to LogicUpdate In OnLogicUpdate Check if SpawnKey is down using Zilch.Keyboard.KeyIsDown() If SpawnKey is down then call ObjectSpawner.SpawnObject() Set the velocity of the newly created Projectile object to this.InitialVelocity * this.Owner.Orientation.WorldForward The Projectile Command : Add Resource Create a NadaScript resource using the Component template template and name it DestroyOnCollision Add component DestroyOnCollision to the Projectile object Under the Sprite component change the VertexColor Upload the Projectile object to a new archetype called Projectile DestroyOnCollision Properties In DestroyOnCollision Define a property of type Boolean named DestroyOwner (defaulting to false) Define a property of type Boolean named DestroyOther (defaulting to false) Destroying On Collision In DestroyOnCollision Connect to the CollisionStarted event In OnCollisionStarted If DestroyOther is true call event.OtherObject.Destroy() If DestroyOwner is true call this.Owner.Destroy() Play the game At this point the ship should be able to move, rotate, and shoot. Astroids Command : CreateSprite Rename the new sprite to Asteroid Add component RigidBody to the Asteroid object Add component BoxCollider to the Asteroid object Add component DestroyOnCollision to the Asteroid object Upload the Asteroid archetype Spawning Asteroids Command : CreateSprite Rename the new sprite to AsteroidSpawner Add component Orientation to the AsteroidSpawner object Add component ObjectSpawner to the AsteroidSpawner object CreateOnInterval Component Add a NadaScript resource using the Component template template and name it CreateOnInterval Add component CreateOnInterval to the AsteroidSpawner object Move the AsteroidSpawner object outside the viewport so the GameCamera object can not see it Upload the AsteroidSpawner object to a new archetype called AsteroidSpawner Properties In CreateOnInterval Define a property of type Real in CreateOnInterval named SpawnRate Define a property of type Boolean in CreateOnInterval named StartOnInit defaulting to true Define a non-property member variable of type ActionsSet in CreateOnInterval named SpawnSequence Interval Spawning In CreateOnInterval Declare a function named StartSpawnSequence In StartSpawnSequence Construct a new ActionSequence using this.Owner.Actions and assign it to the member variable SpawnSequence Construct a Delay action using SpawnSequence and SpawnRate Construct a Call action using SpawnSequence and ObjectSpawner.SpawnObject Construct a Call action using SpawnSequence and StartSpawnSequence In the Initialize function If StartOnInit is true Call StartSpawnSequence The ScreenWrap Component Add a NadaScript resource using the Component template template and name it ScreenWrap Add component ScreenWrap to the Asteroid resource and Player resource archetypes ScreenWrapping The ScreenWrap component should look like this class ScreenWrap : NadaComponent { [Dependency] var Transform : Transform; [Property] var Camera : CogPath = CogPath(); function Initialize(init : CogInitializer) { Zilch.Connect(this.Space, Events.LogicUpdate, this.OnLogicUpdate); } function OnLogicUpdate(event : UpdateEvent) { //Get the viewport component var viewport = this.Camera.Cog.CameraViewport; //prevent dividing by zero when the viewport resolution is (0,0) on game close if(Math.LengthSq(viewport.ViewportResolution) == 0.0) return; //get the normalized viewport var worldPos = this.Transform.WorldTranslation; var screenPos = viewport.WorldToScreen(worldPos); var viewportPos = viewport.ScreenToViewport(screenPos); var normalizedViewportPos = viewportPos / viewport.ViewportResolution; //screen wrap in normalized viewport space if(normalizedViewportPos.X > 1.0) normalizedViewportPos.X = 0.0; else if(normalizedViewportPos.X < 0.0) normalizedViewportPos.X = 1.0; if(normalizedViewportPos.Y > 1.0) normalizedViewportPos.Y = 0.0; else if(normalizedViewportPos.Y < 0.0) normalizedViewportPos.Y = 1.0; //convert the wrapped viewport position to world space viewportPos = normalizedViewportPos * viewport.ViewportResolution; screenPos = viewport.ViewportToScreen(viewportPos); worldPos = viewport.ScreenToWorldZPlane(screenPos, worldPos.Z); //set the object's position this.Transform.WorldTranslation = worldPos; } } Drag and drop an instance of the Asteroid Asteroid resource and Player resource in the level Under ObjectSpawner Set the Camera CogPath property to reference the Gamecamera object At this point you should have a small ship navigating the screen, shooting, screenwrapping, and destroying asteroids."
  },
  "docs/zilch_source_documentation.html": {
    "href": "docs/zilch_source_documentation.html",
    "title": "| ZilchEngine",
    "keywords": "Welcome to the Zilch Engine C++ source documentation."
  },
  "docs/zilch_source_documentation/components.html": {
    "href": "docs/zilch_source_documentation/components.html",
    "title": "| ZilchEngine",
    "keywords": "Component Example ################# The following example guides you through making a component in C++ and exposing it to Zilch so that it can be added to a Cog, serialized, and interact with other components. The bare minimum requirements for making a component are as follows: You must publicly inherit from Component You must use the ZilchDeclareType macro within the public section of the class You must implement the InitializeMeta function and bind the base Component class Our macros currently expect the component to be within the Zilch namespace Within the CustomComponent.hpp header file: # pragma once namespace Zilch { class CustomComponent : public Component { public: ZilchDeclareType(CustomComponent); static void InitializeMeta(MetaType* meta); }; } It is our coding style to not tab in the namespace. We also generally rely upon all compilers supporing #pragma once (though you can use include guards if you wish). Within the CustomComponent.cpp file: # include \"Precompiled.hpp\" #include \"CustomComponent.hpp\" namespace Zilch { ZilchDefineType(CustomComponent); void CustomComponent::InitializeMeta(MetaType* meta) { BindBase(Component); BindSetup(SetupMode::DefaultSerialization); } } The inclusion of Precompiled.hpp is only required if your project is using precompiled headers. All projects within Zilch have this option enabled. The ZilchDeclareType macro within the hpp file must be matched by ZilchDefineType in the cpp file. These macros create a reflection MetaType for your class so that we can use it within script, create it via a factory, and display it in a property grid. For more information on meta binding, visit the meta_binding section. InitializeMeta is called once when your component's MetaType gets initialized. BindBase tells your type that it inherits from the Component class. The BindSetup call with DefaultSerialization lets the engine know that when we create your component from a factory we'll immediately set all your member variables to their default values via the SerializeNameDefault macro (see Serialization below). Last but not least, we must register our component with the factory and ensure that all the meta/reflection information is also initialized. This is done with one simple macro call to RegisterComponent(CustomComponent);. This call should be made within your project's initialization area. For example in the Engine project you would add RegisterComponent within Engine\\Initialization.cpp. The easiest way to find where to initialize a component within a particular project is to look for another component defined within that project and then find its RegisterComponent(X) call. Component Interface Within the component there are a few virtual functions which can be overridden. Serialize which is responsible for saving and loading your component Initialize which will be run once upon your component being added or loaded (after Serialize) OnAllObjectsCreated which is run after all objects within a context have had Initialize called upon them For example, when loading a level Or when creating an archetype (all objects within that archetype) DebugDraw will be called when your object is selected (use the Z::gDrawer interface) OnDestroy which will be called when your component is removed or the object is being destructed Be very careful with this event, as there are many unsafe things you can do here Accessing another component can be unsafe Accessing another object (such as a child) Creating an object here, etc Add the following code to CustomComponent.hpp right after InitializeMeta: // These functions are in the order they will be invoked: void Serialize(Serializer& stream) override; void Initialize(CogInitializer& initializer) override; void OnAllObjectsCreated(CogInitializer& initializer) override; void DebugDraw() override; void OnDestroy(uint flags) override; You may implement these functions as you see fit. Empty implementations are OK, and they do NOT need to invoke the base class version of the function. The following includes some common example implementations of the above functions: void CustomComponent::InitializeMeta(MetaType* meta) { BindBase(Component); BindSetup(SetupMode::DefaultSerialization); // This means we require the component Transform // before our component can be added // This also guarantees that it is safe to hold onto mTransform BindDependency(Transform); BindMemberProperty(mLives); BindMemberEnumProperty(ButtonState, mState); // If we had a GetSize and SetSize... BindGetSetProperty(Size); // Binding resources currently requires both Get/Set functions // For example, if we had a GetFace and SetFace which took a Material... BindGetSetResourceProperty(Material, Face); // These methods will be callable by script BindMethod(Speak); } void CustomComponent::Serialize(Serializer& stream) { // Our serialization handles both directions (saving and loading) SerializeNameDefault(mLives, 9); SerializeEnumName(ButtonState, mState); SerializeResourceName(mFace, MaterialManager); } void CustomComponent::Initialize(CogInitializer& initializer) { // You might grab another component on your object // Remember that component could not have Initialize called on it // if it were added AFTER your component (see Dependencies) mTransform = GetOwner()->has(Transform); } void CustomComponent::OnAllObjectsCreated(CogInitializer& initializer) { // Find another object within the space (everything should be created by here) Cog* player = GetSpace()->FindObjectByName(\"Player\"); } void CustomComponent::DebugDraw() { // Draw a red sphere at our position gDrawer->Add(Debug::Sphere(mTransform->GetWorldTranslation(), 0.5f).Color(Color::Red)); } void CustomComponent::OnDestroy(uint flags) { // Disconnect ourselves from any lists we've been added to } Last but not least, if you would like your component to be automatically documented by doxygen, you must use tripple slashes /// for comments above any classes, functions, properties, or members you want to be documented. The file header that doxygen requires should look something like: *///////////////////////////////////////////////////////////////////////////* /// /// \\file CustomComponent.hpp /// /// Authors: Your Name /// *///////////////////////////////////////////////////////////////////////////* Remember to also put this header in your cpp file and rename .hpp to .cpp"
  },
  "docs/zilch_source_documentation/crashes.html": {
    "href": "docs/zilch_source_documentation/crashes.html",
    "title": "| ZilchEngine",
    "keywords": "Before doing anything with crash dumps you should do 2 things: 1. Checkout the DevTools repo 2. Checkout a special depo of zero (or you could re-use one but it's best to make another) and add the environmental variable ZERO_SOURCE to point at the root of that depo. The majority of what you care about is in the Readme.txt file under the SourceIndexer folder. Follow these steps to setup source indexing on your local machine. Currently the symbol server is only available on the local Engineering network. Now to briefly describe how these things work (part of this is how the build server works). There are 3 things needed to debug crash dumps: Symbols (pdb), Source, and the exe. These are handled by 2 separate processes: Symbol Server and Source Indexing. Symbol Server The symbol server caches copies of dlls, exes, pdbs and so on by a hashset to be looked up later. When opening a crash dump, if you set up the symbol server stuff as mentioned in the Readme.txt, visual studio will contact the symbol server and grab the correct copies of exes, dlls, and pdbs and cache them locally in some temp directory. This happens on the build server by running symstore.exe and giving it the path to the editor's output and the name to group it under (the name is just to make it easier to find stuff in the symbol store) as well as where the symbol server is. If you want to run this on a random machine you must first create the symbol server; look up documentation for symstore.exe. Source Indexing Even with the symbol server setup, we still don't get source for a file at that revision. This is handled via another step called source indexing. The pdb is actually a file format that can store various files under stream names. There is a special stream named \"SRC_SRV\" that stores information about how to get a copy of a file from source control. For source indexing, you write to this stream a file that contains something along the lines of: FileName at %Revision% comes from the mercurial repository at %ZERO_SOURCE% with the command hg checkout FileName at %Revision% > %OutLocation%. This is currently done via the SourceIndexer program in the DevTools repository. This program takes in a source tree location and a collection of repository locations to pull from and embeds them in the pdb. Note that the source indexing needs to be embedded into the pdb before the symbol server is run. Also note that at the moment there are hard-coded repository names in the SourceIndexer program that should ideally be removed later. Crash dumps for zero are currently downloadable from http://zerocrash.digipen.edu. This website needs a large update though as it's really slow..."
  },
  "docs/zilch_source_documentation/custom_event_names.html": {
    "href": "docs/zilch_source_documentation/custom_event_names.html",
    "title": "| ZilchEngine",
    "keywords": "Custom Event Names We start by making a externed string in our header file: namespace Zilch { namespace Events { DeclareEvent(FlagCaptured); } } And within the cpp file we must define the string: namespace Zilch { namespace Events { DefineEvent(FlagCaptured); } } By placing the event within the Events namespace, we can conveniently access any events name via Events::FlagCaptured. Custom Event Types To create an event type that we can send (this is not required) we can make a new class that inherits from Event: class FlagEvent : public Event { public: ZilchDeclareType(FlagEvent); static void InitializeMeta(MetaType* meta); // Any data you wish to put here }; Notice that this class uses the ZilchDeclareType macro. This means that it is important that we use the counterpart ZilchDefineType within the cpp, and that we must absolutely be sure to call BindBase on Event as well as InitializeMetaOfType(FlagEvent) elsewhere in the initialization portion of our code. See meta_binding for more details. ZilchDefineType(FlagEvent); void FlagEvent::InitializeMeta(MetaType* meta) { BindBase(Event); // Any members we want bound to script } Sending / Receiving Events Sending an event is generally: FlagEvent toSend; target->GetDispatcher()->Dispatch(Events::FlagCaptured, &toSend); The target in this case is whoever we want to send the event on. In some places we have helper functions like DispatchEvent to make this more convenient (such as on component): FlagEvent toSend; DispatchEvent(Events::FlagCaptured, &toSend); When making an event connection so we can receive an event you may use: Zilch::Connect(target, Events::FlagCaptured, this, &self_type::OnFlagCaptured); The target in this case is an object that is going to have that event sent to it. We pass in this because we want to listen for the event. The type self_type is automatically declared on our class by ZilchDeclareType. The &self_type::OnFlagCaptured is C++ syntax for getting a member function pointer. Technically Zilch::Connect can connect any two objects (it doesn't even have to be yourself), however since your own object is most common, we have a macro to simplify this: ConnectThisTo(target, Events::FlagCaptured, OnFlagCaptured); Event Dispatcher/Receiver In order to send events we must have an EventDispatcher, and in order to receive events we must have an EventReceiver. To make life simple, most classes can just inherit from EventObject which contains both of these and has all the basic functions on it. Note that Cog itself is actually an EventObject as are many other classes in the engine. WARNING: Component is not an EventObject, however it redirects its EventDispatcher and EventReceiver to the owning Cog. This means that if you send an event to a particular component it actually just sends to the entire Cog. Similarly, if you listen for an event on a component, you are actually listening to the event on the entire Cog. All events in Zilch are sent and received by string names. We are able to keep this calls very efficient because we implemented our own String class with the following features: Strings are immutable and cannot be changed after they are created We pre-compute the hash and string length of every string we create Strings are reference counted (passing by value does not require allocation) Our HashMap is specifically optimized to make String lookup efficient Many event systems will pass multiple arguments and invoke functions directly: void MyCallback(float frameTime, int frameNumber, World* world); We chose not to do this pattern because it breaks user's code easily if we need to add/remove/change the parameters in any ways. To mitigate this we chose to use a base class Event for the event data. All events sent must publicly inherit from Event. Note that you are not required to create a new derived class in order to send an event. Events are automatically disconnected if either the sender or receiver is destructed."
  },
  "docs/zilch_source_documentation/editor.html": {
    "href": "docs/zilch_source_documentation/editor.html",
    "title": "| ZilchEngine",
    "keywords": "The editor is created once and manages: All windows and docking (done through the base MultiDock class) The current level(s) being edited All running game sessions Selection Operation queue (undo/redo) Commands Tools Project loading Why we restart editor when loading projects (meta flush) Commands Requires documentation Commands from Data Commands are loaded from the Data\\Commands.data file in the Zilch repository. These commands are then bound in C++ to specific functions on the editor. Cog Commands CogCommands are just Cogs that are marked as a command object, and when the command is invoked, the 'ExecuteEvent' event will be sent on the cog. This allows for users to create custom commands without learning a new system. They use what they're used to and just respond to a different event. The command Cogs are all created in a single Space (named \"CommandSpace\") that lives under the editors game session. There are two ways a CogCommand can be created: A Component with the [Command] attribute with the attribute parameter 'autoCommand' set to true. An Archetype with tag \"Command\". Command Context This gives commands more information about the circumstances they were invoked in, such as which viewport has focus when the command is invoked. Command 'Active' state Used for Tools and toggle-able commands. Example: Tools have Commands that enable them, so when the tool is selected, that command is now considered 'Active' until another tool is selected. This allows the IconButton in the Ui to display that the tool is active. Gizmos Requires documentation Basic Gizmos Requires documentation Tools Requires documentation Events Connect to this.Owner for all events. They will all be sent directly to the tool when the tool is selected. Events.ToolActivate - Sent when the tool has been selected Events.ToolDeactivate - Sent when the tool has been de-selected Events.ToolDraw - Sent every frame to debug draw Events::MouseDown Events::MouseMove Events::MouseUpdate Events::LeftMouseDown Events::LeftMouseUp Events::DoubleClick Events::RightMouseDown Events::RightMouseUp Events::MiddleMouseDown Events::MouseScroll Events::KeyDown Events::KeyUp Operations Requires documentation Custom Tools Requires documentation Viewports Requires documentation EditorViewport Requires documentation GameViewport Requires documentation Notifications Requires documentation Windows Text Editor Requires documentation Main Property Grid Requires documentation Resource Library Requires documentation Object View Requires documentation Console Requires documentation Tools Window Requires documentation Resource Editors Requires documentation Downloads Requires documentation Automation Stress Test Coming soon Animator Requires documentation Rich Animation Requires documentation Fbx -> RichAnimation issues Animation Editor AnimationEditorData Controls Requires documentation Track View Requires documentation Scrubber Requires documentation Graph Requires documentation Dope Sheet Requires documentation Controls Requires documentation"
  },
  "docs/zilch_source_documentation/engine.html": {
    "href": "docs/zilch_source_documentation/engine.html",
    "title": "| ZilchEngine",
    "keywords": "digraph { node [shape=rectangle, fontsize=10, height=0, fontname=Verdana]; edge [fontsize=10, fontname=Verdana]; \"Engine\" -> \"Systems\" [label=\"owns\"]; \"Systems\" -> \"ShellSystem\"; \"Systems\" -> \"TimeSystem\"; \"Systems\" -> \"PhysicsSystem\"; \"Systems\" -> \"GraphicsSystem...\"; \"Engine\" -> \"Game Sessions\" [label=\"owns\"]; \"Game Sessions\" -> \"Spaces\" [label=\"owns\"]; \"Spaces\" -> \"Cogs\" [label=\"owns\"]; \"Spaces\" -> \"LevelSettings\" [label=\"own\"]; \"Game Sessions\" -> \"Editor GameSession\"; \"Game Sessions\" -> \"Game1 GameSession...\"; \"Editor\" -> \"Editor GameSession\" [label=\"uses\"]; \"Editor GameSession\" -> \"Editor Spaces\" [label=\"uses\"]; \"Editor Spaces\" -> \"Tools (Cogs)\" [label=\"uses\"]; \"Editor Spaces\" -> \"Commands (Cogs)\" [label=\"uses\"]; } Philosophy The driving philosophy behind Zilch has generally been to re-use as much code as possible in different locations. This is the reason we use component based design. Its much easier to share code by adding components then it is in an inheritance model. Zilch also maintains its WYSIWYG style by reusing code between the editor and game-play. All components that we write in C++ generally have to acknowledge that they can be used in both editor and game, which is an advantage since they can display the best data to the editor (such as a Microphone component debug drawing its virtual ears). Because it is difficult to trust the user to write code that works perfectly in both editor and game, by default we 'proxy' their Nada components in the editor. The proxy is basically a fake object that looks exactly like their object, but does not run their code (all the same properties). We do expose the ability for users to make their scripts run in editor if they would like. Recent Refactors One major example of refactors we've done in the name of code reuse: Tools. The tools in Zilch (Translation, Rotation, TileMap, etc) used to all derive from a base class called Tool. Starting out, we originally had a bunch of virtual functions you would override for MouseMove/Down/Up over the main editor's Viewport. This worked ok, but after we started using events everywhere (for mouse input, keyboard input, etc) we eventually refactored these tool virtual to be events, getting rid of the virtuals on the base class and reusing events we already had. From there we ran into the issue that users wanted to write their own tools. We could expose the base class Tool to script (such as a NadaTool) but we realized that there is a lot of functionality the user wants. They want to be able to give the tool an icon, define properties on the tool, live edit the tool's script while the engine is running, proxy the tools if there is a Nada compile error upon loading, etc. We realized that the Cog (our game object) already supported all this functionality, so why not just make the tool into an Archetype, effectively removing the Tool base class. We then realized that the user could add components to tools which makes them incredibly extensible (they can now send events, lookup other components, etc). Moreover, working with Cogs is a paradigm users are already used to, so now there's even less to teach them. Useful Libraries Behind the scenes at the core of Zilch is the Meta system, which exposes methods and members of C++ objects to both the GUI and Nada. To maximise code reuse, we rely heavily upon the property grid GUI. The property grid automatically generates GUI based on the members of an object (either from C++ or from Nada). The property grid is also built to handle component based design (adding and removing components at its core). By using the property grid, users don't have to create custom GUIs for every type of object/component/tool they add to the engine. Having said that, sometimes it is advantageous to write custom UI, such as in the case of the Animator tool which requires time-lines and key-frames. With the Meta system, we can query for type information such as how many members a type has and what their names are, how many methods and what parameters they take, etc. We also have a serialization system that serializes out to our own format (though it is somewhat similar to JSON). We maximise code reuse by using bi-directional serialization, which means we use a single function to both save and load an object, instead of writing two separate functions. We also support serialization from Meta, which is the quickest way to save and load all of an objects properties. In the future, we may switch to serialization being entirely from Meta, because it would simplify some of our paths and reuse more code. Almost everything in Zilch is written from scratch (with the exceptions of a few minor libraries such as libpng, zlib, freetype, etc). These libraries dive deeply into the specifies of file formats and unit test them very well, so we opted to use these libraries where they make sense. Aside from that, everything including the physics, graphics, scripting, networking, and even eventually the sound engine will be written by our team. Engine Classes Engine The Engine class is created once (allocated and stored into gEngine). Calling Run on the engine starts the main loop, and it will continue running until Terminate is called. The Engine invokes the Update function every frame, which walks through all the Systems that were added to the engine in the WinMain/Startup function. Many of our objects in Zilch use delayed destruction (such as Cog) which means when we call Destroy on them, they are marked for deletion and added to a list to be deleted later. The Engine deletes these objects upon its Update every frame. The Engine is also responsible for pumping events that come from other threads in its Update. System A System is effectively a component that gets added to the Engine. Examples include the PhysicsEngine, SoundSystem, etc. The SoundSystem is a particularly good example of a system because it has one time initialization and destruction logic, such as starting up the mixing thread. Moreover, the SoundSystem must be updated every frame to receive threaded notifications from the mix sound thread. Some Systems, such as the TimeSystem and the PhysicsEngine mostly manage updating space components such as the TimeSpace and PhysicsSpace. By updating them when we update each system, we ensure that all spaces have their LogicUpdate run, then all spaces have their physics updated. Note that order of the Systems is very important to reduce input lag. Cog The Cog is our base composition class to which components can be added. Space and GameSession both inherit from Cog. Cogs are typically created via the Factory (gFactory) which handles looking up types by name and then creating them (including components). Cogs use delayed destruction, which means they don't instantly get deleted upon calling Destroy, but rather get destroyed at the beginning of the next frame. Component Component is our base class for all components. Cog contains an ArrayMap of components (mapped by type id for quick typed lookup). We generally only allow there to be one component of a particular type per Cog. Components are mostly WYSIWYG in the editor, in that the actual components we code up in C++ are exactly the same ones running in the editor. The only major difference is that the editor is generally paused which stops physics and other time based systems from running. Proxy Components Proxy components are a special class of components that pretend to look like another component by duplicating a component's meta. The proxy component is a property bag (map of strings to variants) and can store anything. Proxy components are useful because they don't run any code in the editor. All script components are proxied when they are added in the editor, but in the actual game they are substituted for the actual component. Engine Components Requires documentation Transform Object Link Area Game Session The GameSession manages all created Spaces, and is effectively an instance of a running 'game'. Every time you press F5 in the editor or run a standalone exported project, a GameSession is created. If you press Ctrl+F5, multiple GameSessions will be ran at the same time, which is useful for networking tests. GameSession inherits from Cog and can therefore have components (including NadaScripts) attached to it. The GameSession gets events sent on it, such as GameStarted where you can create spaces and load levels. The editor has a GameSession that you can edit and add components to (which will be used in the game). You can also attach [RunInEditor] scripts to the editor GameSession. The GameSession will destroy all child Spaces when it is destroyed. Space Spaces are one of the main features that sets Zilch apart from other engines. A Space contains a collection of Cogs (game objects). Each Space is independent of another Space. For example, you can have a physics object at (0,0,0) in one space, and a physics object at (0,0,0) in another space and the two objects will not interact or collide. We've found that Spaces are a great way to do UI, because you can run a separate space from your game that has UI objects in it. In many other game engines, the UI is either something entirely special, or you have to parent objects to your Camera which is cumbersome when you want to change cameras. Spaces can be given a name and are always created through the GameSession (which owns the Spaces). Named spaces can be found via the GameSession's FindSpaceByName. Because Space also inherits from Cog, you can add components and scripts to it. Although you can just create objects in a Space, the primary usage case is calling LoadLevel, which loads a collection of objects into the Space. The first time LoadLevel is called it is instantaneous (right after the call, all the objects are created). The subsequent times LoadLevel is called on the same space, it will be delayed by one frame. This is to avoid the issue of two objects existing at the same time with the same names and so on due to delayed destruction. Users will typically either listen to the LoadLevel event to perform level logic, or they will always create new spaces and call LoadLevel only on new spaces to ensure it is always instantaneous. Level Settings The LevelSettings object is actually part of the Level resource (just another object) but is worth mentioning in the context of the Space. The LevelSettings should always be the first Cog in the Space's list, and is therefore guaranteed to be initialized before any other object. Moreover, many built in components use the LevelSettings object as a way to define global effects for the entire level. For example, I can add a ForceEffect to the LevelSettings and then all objects in the current level will get that force applied. This isn't built in or special behavior of the LevelSettings, but rather the PhysicsEngine looks for any force effects first on the Cogs, then on the LevelSettings, and then on the Space. This is a common pattern. LevelSettings is also very core to writing user logic, so we put that property on both Space and Cog. You can directly access LevelSettings by doing 'this.LevelSettings' instead of trying to find it by name. Factory The factory (Z::gFactory) is responsible for constructing a type from a serialzied name such as a Cog, Space, or any components like Transform. Currently, the factory mostly only handles Cog related types, however our Meta can also be used as a factory. CogInitializer The CogInitializer is a type passed to each cog that is being initialized. When we create Cogs, we could be creating multiple, ie loading Cogs from a level, loading an Archetype which has a hierarchy with children, etc. Multiple Cogs loaded at the same time is known as a serialization context (we commonly refer to it as 'all objects within the context'). The CogInitializer stores a bunch of data that is useful to each cog being created, for example the parent GameSession or Space it is being created within. We also send the AllObjectsInitialized event on the CogInitializer once the entire initialization phase is completed for all objects within the context. Handles Cogs use a safe handle system that allows us to look up a cog by id and version: a pattern also called 'slot map'. The CogId class encompasses the id and version (two integers). CogId can implicitly convert to a Cog* and will be null if the object no longer exists. We originally used to directly store Cog* in many places, but we found that it was almost always a bad idea to assume the object still existed (dangling pointers). The user can delete objects, spaces can be unloaded, actions can delete objects, etc. We now almost always store references to objects in C++ as CogIds. We do work with Cog* on the stack because we know that with delayed destruction, the objects WILL NOT be deleted until the beginning of the next frame. Moreover, in script all references to Cogs are actually CogIds just to keep scripts safe. As a side note, whenever we pass around MetaHandles to Cogs, we're essentially just stuffing a CogId into the MetaHandleData. Archetype Archetypes are a data resource that stores a serialized Cog. Archetypes can be referenced within a Level and can also be created and loaded into a space. The advantage of Archetypes is that they allow instancing the same object in multiple places (sharing) and when the Archetype definition is changed in editor, all instances of that Archetype change. Archetypes are stored as text serialization, however we cache them using binary serialization so that subsequent creation of the same Archetype is very fast. This cache must be dumped any time a change to script is made (such as the order of members) because the binary serialization is linear: members are directly read in the order they are saved in. When an Archetype is uploaded in a Level in the editor, we run special code to update all live instances of that Archetype in the same level. When an Archetype is modified it gets a special flag that says it is locally modified within that level, meaning the object is basically copied into the level and is not instanced. Hierarchy Cog Hierarchies allow for any Cogs to be parented to other Cogs. When a parent Cog is destroyed, all of its children are destroyed, and so on. It is up to the components to give meaning to parenting. For example, Transform knows that when it gets childed to another Transform, it will act as a relative object and concatenate matricies. Physics Colliders and RigidBodies also have special behavior for childed objects, such as multiple collision volumes for a single object. Hierarchy uses an intrusive list to maintain the list of children and the hierarchy link is on the Cog itself. Initialization Order of Cogs Related to hierarchies is the initialization order of Cogs. Cogs are initialized from first to last object in the object view, and from parent to child. This is why LevelSettings is the first object to be initialized. The order of initialization is important because scripts may rely on this order. Moreover, we found that if script components were initialized in the same phase as C++ components, then they were often able to access data before it was fully initialized and crash the engine. This lead to separating script initialize into its own phase. Though it sounds obnoxious, we actually have effectively 4 phases of initialization. The first is calling Initialize on every component in C++. In the Initialize phase, we can only assume that other components that are above ours have been Initialized. Specifically we can rely on our component's dependencies being initialized. Then we invoke OnAllObjectsCreated on every C++ component, a phase where we know all components have been Initialized. Note that we must run ALL Initializes first and then ALL OnAllObjectsCreated in order for them to actually be correct. After that, we run ScriptInitialize on all script components, therefore we know all C++ components are fully initialized. Lastly, we send the AllObjectsInitialized event on CogInitializer which anyone can listen to. CogPath In the beginning of Zilch we needed a way to refer to other objects by id, and this id would have to persist through serialization (data saved to disk). This was useful if we wanted one object to point at another, eg a following script, and then we could save that link in the level. This problem is easily solvable if both objects you are linking are contained within the same file (two objects in a level, two objects in a single archetype, etc). However, once the objects were split apart into different files the problem becomes nearly impossible to solve properly. This case was especially common when a user would make a Zombie script and then use the Cog id's to point at the Player. As soon as the Zombie was uploaded to its own archetype, it would lose its own reference to the Player because the Zombie file by itself could no longer properly refer to the Player saved in the level. Many other popular editors exhibit this same behavior, but we deemed it undesirable. CogPaths were a partial solution to this problem. By using the names of objects and the hierarchy order, we gave the users a unique way to identify which object they were referring to. CogPaths also combine using the id so that they can best try to save, load, and continue pointing at the same object you originally picked without losing a reference. CogPaths use string lookups to find children Cogs, and special operators to find parents, children by index, children by archetype name, etc. The syntax of CogPaths also allows the user to find objects in different named spaces, which is very useful for UI. Events Zilch uses an event system at its core which allows any class to send and receive events. An event is basically just a callback (function pointer) plus an event data structure with all the relevant information to the event that occurred. For example, you can listen for the KeyDown event on the global Keyboard object, which tells you what key was pressed, as well as other helpful features such as if Ctrl, Shift, or Alt were pressed too. The event system is critical to the performance of Zilch because it discourages writing poll-based logic. Having a bunch of objects that update every frame and check to see if a key gets pressed is generally much less efficient than having a single object getting updated (the Keyboard) that then calls into everyone when a key gets pressed. Moreover, events allow for some level of dynamic dispatch. You can send an event to anyone and they may or may not handle it (think of it like a message). I can do a ray-cast and send the Open event to the first object I hit, which may do nothing, or it may open a door or a chest. Events can also be forwarded or bubbled up / down a hierarchy, which is very useful for UI. The common class that everyone inherits from to automatically get event handling is the EventObject class. Engine Events Requires documentation Systems There are many different Systems that we add to the engine. One of the more important ones it the TimeSystem. The TimeSystem has a intrusive linked list of all TimeSpace components (which are components that get added to each Space). When the TimeSystem updates, we compute the amount of time passed since the last frame, and then we walk through and update each TimeSpace. The TimeSpace update will dispatch critical events such as LogicUpdate, FrameUpdate, etc. Many different components (including user scripts) rely on LogicUpdate being sent on the space. Actions Requires documentation Job System Requires documentation Project Requires documentation Object Store Requires documentation Resources Requires documentation Engine Resources Requires documentation Archetype Level TextResource SampleCurve Paths ResourceTable DocumentResource Animations Requires documentation Animation Property Track Event Track Rich Animation See Editor Rich Animation Animation Editor See Editor Section Animation Graph Events: Animation Nodes: Pose Node Basic Node Direct Blend Node Cross Blend Node Selective Node Chain Node N-blend Node Graph Visualization Simple Animation Requires documentation Input / Shell System Requires documentation Tweakables Requires documentation"
  },
  "docs/zilch_source_documentation/enums.html": {
    "href": "docs/zilch_source_documentation/enums.html",
    "title": "| ZilchEngine",
    "keywords": "One problem in C++ is that there is no way to get a stringified name for each value within an enum. This makes it difficult to display enumeration options in a property grid or bind them to script. To solve this problem, we use a DeclareEnum# macro that we generate (where # is how many values the enum has): DeclareEnum3(State, Idle, Patrol, Dead); In the above example, we have created an enum with the name State and 3 values: Idle, Patrol, and Dead. In C++ this is roughly equivalent to: namespace State { enum Enum { Idle = 0, Patrol = 1, Dead = 2 }; } Enum and is wrapped within a namespace. This is because we thought it was beneficial to always refer to an enum via its name, eg State::Idle instead of creating a global constant Idle. This also means that if you wish to use the type of the enum you must do State::Enum. We also have another type which is State::Type that is simply just an unsigned integer which is convenient for accepting flags in C++. If you wish to bind a data member on a class that is an enum, you can use BindMemberEnumProperty. There are other variations that may require getters/setters, such as BindGetSetEnumProperty, BindGetEnumProperty, and BindCustomGetSetEnumProperty. Internally, these macros are mostly the same as their normal bind data member or property counterparts, however each of them invokes the macro BindEnum at the beginning. BindEnum creates the reflection MetaType for that enum (once only). For more information see meta_binding."
  },
  "docs/zilch_source_documentation/getting_started.html": {
    "href": "docs/zilch_source_documentation/getting_started.html",
    "title": "| ZilchEngine",
    "keywords": "Before diving into Zilch Source, it is important to become familiar with Zilch itself as a game engine. Please visit getting_started. For more information specifically about the Nada C++ API, visit: nada.digipen.edu Requirements Windows 7 or higher Visual Studio 2010 (2012/2013/2015 will work but require 2010 compiler) Express versions will work with Zilch and can be used Commercially http://go.microsoft.com/?linkid=9709969 (2010 ISO) Tortoise HG http://tortoisehg.bitbucket.org/download/ If you are not familiar with mercurial, visit http://hginit.com Pulling the ZilchEngine repository is all that is required to start building Zilch (all dependencies are included). When we start-up Zilch on Windows, we use a .cmd file because the locations of libraries may be redefined by environmental variables. We've tried to keep it as simple as possible: downloading the Zilch source and opening it via the .cmd should bring you to Visual Studio, and you can immediately build and run from there. You should set Win32Editor as the start-up project. Win32Editor implements the classic WinMain (and on other platforms we would have a similar system). The WinMain performs some Windows specific tasks such as setting up the crash handler or Visual Studio Output window, and then creates the engine by calling Startup. The Startup function is mostly generic and will probably be re-factored for different platforms, however currently the different systems that we initialize are very dependent on which Os you are running on so we left it there (Joysticks, Touch System, etc). Startup is also responsible for creating the Editor or running a game if this is a standalone exported project. The Editor currently has a lot of functionality on it and over time we'll be replacing parts of it with script, and separating a lot of different functionality out into separable modules. Custom Components Requires documentation Dependencies Serialization Meta Binding Editor vs Game Creating a Space and Cog Requires documentation Custom Resources Requires documentation Data resources Complex / binary resources Meta Binding Requires documentation Serialization Requires documentation Tools Requires documentation Commands Requires documentation Resource Editors Requires documentation Gizmos Requires documentation Debug Draw Requires documentation Selection"
  },
  "docs/zilch_source_documentation/making_an_installer.html": {
    "href": "docs/zilch_source_documentation/making_an_installer.html",
    "title": "| ZilchEngine",
    "keywords": "These steps are what the build machine does to make a build. This assumes you have msbuild installed (normally through Visual Studio), Innosetup, and currently Winrar, although a different kind of zipping utility can be used. Note that I will use mix using cmd style environment variables: %EnvironmentVarName and msbuild style environment variables: $(EnvironmentVarName). How to build an Zilch for an installer (not actually making the installer, just the exe): The first thing you have to do to build Zilch is have a copy of it. You must check out the ZilchCore depo. This should check out the necessary sub-depos of Tools, ExtensionLibraries, StandardLibraries, and Nada. To actually make the installer you also need to checkout the DevTools repo into the Zilch folder, that is you should have Zilch/DevTools/OpenDevTools.cmd. For a clean build, make sure that any old build artifacts are deleted for the configuration you are running. That is, go to wherever $(ZILCH_OUTPUT) is defined and delete the folders $(ZILCH_OUTPUT)/Int/$(Platform)/$(Configuration) and $(ZILCH_OUTPUT)/Out/$(Platform)/$(Configuration). For example, $(Platform) is Win32 and $(Configuration) is Release. Actually build the configuration. In Visual Studio this is just done by opening and building. To use msbuild via command line you must first open via the visual studio command prompt or first run vcvars32.bat which is located at %VS100COMNTOOLS%/../../VC/bin/vcvars32.bat (or whatever version of visual studio, where VS100 is 2010). The arguments for msbuild are: msbuild Zilch.sln /p:Configuration=$(Configuration) /p:Platform=$(Platform) /t:rebuild. Expand $(Configuration) and $(Platform) yourself to whatever the correct names are. For making an actual build use Win32 and Release. You should now have ZilchEditor.Exe located at $(ZILCH_OUTPUT)/Out/$(Platform)/$(Configuration)/Win32Editor How to make an installer from an already built exe: Make sure the devtools depo is checked out Make sure that you run SetUpBuildEnvironment.cmd under Zilch/DevTools. This setups up the location of $(ZILCH_OUTPUT) and $(ZILCH_SOURCE) for use in further steps Run the BuildMaker.exe tool. It is located in DevTools/BuildMaker. You can either run the pre-cached exe in this folder or open the project and build it. To make a build run the command: BuildMaker.exe -outputSuffix Out/$(Platform)/$(Configuration)/Win32Editor -prefix ZilchEngineSetup -branch default. The -prefix command is the prefix to assign to the exe's name. This will invoke innosetup and make the ZilchEngineSetup.Version.Date.exe under the folder Zilch/Build/Output. For details on how this works see the section on the inno setup build script. To make the .zilchbuild file currently you must install Zilch and then zip up the install directory. Ideally you should also delete the unins00.exe and other uninstaller portions first. The current command line to do this (ignoring the deletion of the uninstall exe) is for winrar. WinRar.exe: a -r -ep1 -m5 \"$(OutputDir)/ZilchEngine.zip\" \"$(InstallDir)\\*. $(OutputDir) is wherever you want to save the output zip to and $(InstallDir) is likely to be C:\\Program Files (x86)\\ZilchEditor. The arguments for winrar archive the entire directory with a good compression and it recursively iterates all folders while keeping the folder structure (in case you need to do this in another zipping program). This zip should then be renamed to match the exe's name (with the version and date). How to archive data for symbol servers and source indexing: These steps are how to save data for debugging at a later date from a built exe. Note that this works after building the Zilch's exe and must be performed on the same exe (and pdb and so on) as the one used to make the installer. Make sure the devtools repo is checked out. Make sure that you run SetUpBuildEnvironment.cmd under Zilch/DevTools. This setups up the location of $(ZILCH_OUTPUT) and $(ZILCH_SOURCE) for use in further steps Add source indexing to the pdb. Source indexing adds information to the pdb to check out the correct version of a file for the date the exe was made. A small tools was added to make this easier. The current arguments are: SourceIndexer.exe -depo \"$(ZILCH_SOURCE)\" -depo \"$(ZILCH_SOURCE)\\Nada\" -depo \"$(ZILCH_SOURCE)\\ExtensionLibraries\" -depo \"$ZILCH_SOURCE)\\ExtensionLibraries\\StandardLibraries\" -pdb \"$(ZILCH_OUTPUT)/Out/$(Platform)/$(Configuration)/Win32Editor/ZilchEditor.pdb\" Basically you need to add every location that a repository exists (including sub-repos) and then provide the location of the pdb to edit. For more information on how to use/test this see Readme.txt in Zilch/DevTools/SourceIndexer. This modifies the pdb in place to contain all extra symbol information. Do not release this pdb to other people as it tells them how to check out source code. Add the symbols to the symbol server. The symbol server is a local \"server\" that stores information to be looked up by visual studio at a later date for debugging crash dumps. Search for symstore for more information on command line args. The current arguments we use to store are: symbstore add /f \"($ZILCH_OUTPUT)/Out/$(Platform)/$(Configuration)/Win32Editor\" /s \"$(SymbolServerLocation)\" /t ZilchEditor /compress The $(SymbolServerLocation) is the local location of the symbol server. /t gives a name to the items being added (change accordingly) and /compress compresses the symbols by a significant factor. The symstore.exe is located under Zilch/DevTools/SourceIndexer/symstore. Additional tools useful for debugging this process are lcoated in the srcsrv folder next to it. How to run a project unit test: First assume that we already have an exe for Zilch somewhere defined via $(ZilchExe). Before running all tests it is a good idea to delete all cached content for Zilch to avoid any build artifacts. This is accomplished by deleting the folder %Temp%/ZilchContent. For each project you want to test: Delete the old project folder so as to avoid any accidental build artifacts. Check out the project via mercurial. The exact location doesn't matter. Run the project via the args: $(ZilchExe) -file $(ZilchProjPath) -RunUnitTests -logStdOut -ProjectName $(ProjectName) -Builder $(BuilderName) -ProjectName and -Builder are arguments that affect where screenshots are saved to. This depends on the project's exact implementation, but most go to \\((Temp)/ZilchScreenshots/\\)(Builder)/$(ProjectName). To diff screenshots currently you must run the ImageDifferTest.py script in the buildbot depo with the location of the saved previous results and the new results. Zilch's InnoSetupScript: The inno setup script is located at Zilch/Build/ZilchEngineInstall.exe. Do note that we expect $(ZILCH_SOURCE) and $(ZILCH_OUTPUT) to be defined. Read the first comment to show how to replace #defines via command line arguments. Now for some important locations: The [Files] tag defines what folders/files we package up. This currently includes everything in the Tools, Resource, and Data folders next to Zilch. Additionally we grab the Win32Editor folder's contents, ignoring certain file types (see the Excludes: section). [Registry] defines the additional registry keys we make. These are to define the file association, the icon, and the open command. [Run] deletes the old content cache. This should be less necessary now that content is cached into a folder based upon the version number. [Code] section runs some commands to uninstall Zilch if it was already installed and to close any open copies. Zilch Launcher: Checkout and build the launcher the same as with Zilch, the only difference is that the output exe and dll go to the Win32ZilchLauncher folder. Make sure the devtools repo is checked out. Run the ZilchLauncherVersionIdUpdater: This program does 3 things, first of all it copies all of the necessary files into one location to make it easier to generate an installer and zip (it makes the zip for you). It also will contact the server and check the current ZilchLauncherVersionId.txt file (located currently under data/www/Builds/StandAlones and then generate a local copy of the file with a newer version number. Finally it'll actually run the inno setup script. The current arguments for this are: ZilchLauncherVersionIdUpdater.exe --ZilchOutDir \"$(ZILCH_OUTPUT)/Out/$(Platform)/$(Configuration)/Win32ZilchLauncher\" --SourceDir \"$(ZILCH_SOURCE)\" --OutDir \"$(PackageOutDir)\" where the $(PackageOutDir) is wherever you want to save the package to. To actually update what's on the server you must then copy the ZilchLauncherVersionId.txt file and the ZilchLauncherPackage.zip file to data/www/Builds/StandAlones folder on the server. You should also copy the ZilchLauncherSetup.exe to data/www/Builds folder. To debug crashes with the launcher SourceIndexing and the SymbolServer should also be run. This is basically the same, just provided the correct different names and paths. Zilch Launcher Innoscript: [Registry] section is almost the same, the main new items are the subkey's of Upgrade and Run which add new right-click context menus. There's alos a section down below that adds the ValueName: \"Icon\" which adds custom icons for these items. [Files] since the package is made with all of the needed files, we only have to include this folder."
  },
  "docs/zilch_source_documentation/meta_binding.html": {
    "href": "docs/zilch_source_documentation/meta_binding.html",
    "title": "| ZilchEngine",
    "keywords": "Many other languages have a concept known as reflection which lets you look up information about classes and functions written in that same language. For example, you can look up how many members a class has, or what the type of a member named \"Lives\" is. C++ lacks this feature however we are able to build our own version of it in language which we call Meta. We use a collection of complex templates and macros to simplify this process."
  },
  "docs/zilch_source_documentation/platform.html": {
    "href": "docs/zilch_source_documentation/platform.html",
    "title": "| ZilchEngine",
    "keywords": "This section is important for anyone doing cross platform work The Platform library provides file IO, threading, timers, sockets, and other common operating system primitives. Platform by itself is mostly a collection of headers (interface only) with a PIMPL style pattern to hide the implementation of each primitive. In specific it provides: File Read/write stream, seeking, etc File Path Concatenation of paths and helpers with OS specific / or \\ File System Iteration over directories/files, file existence, delete / move files, etc Floating Point Control Turning on or off processor specific float extensions Process Execution of an external process with stdin/out hooks (not via the sell) Socket Thread Thread Synchronization Mutex, Critical Section, Semaphore, Events, etc Timer Highest resolution timer supported by the OS External Library Loading (.dll, .so) Crash Handler Directory Watcher Project Layout Some code exists within Platform where we determined it was similar enough on most operating systems (e.g. Berkeley sockets). We have separate projects for each operating system, e.g. WindowsPlatform, PosixPlatform, etc. These platforms implement each primitive interface to the best of their ability. The reason we chose to use separate implementation projects was to avoid the explosion of #if/#endif. Any code that is considered 'helper' code that would be exactly the same among all platforms can be directly implemented in Platform. The PosixPlatform is ideally usable among Unix like platforms with minor #ifdef modifications (Linux, OsX, iOS, Android). The EmptyPlatform is ideally a stub that can be copied onto brand new platforms (with all functions stubbed out to do nothing) just to get code up and running quickly. Private Implementation One particular point of interest is the ZilchDeclarePrivateData macros inside of PrivateImplementation.hpp. Typically the PIMPL pattern is implemented via a pointer on the class to a forward declared private data structure. This pattern typically requires allocation of some sort. To avoid allocation, we instead created a byte buffer on each primitive that is sized to the largest size of all platforms we implement. ZilchDeclarePrivateData will create this buffer, and other macros allow us easy access to the buffer. Static asserts are used to ensure that the buffer will never be too small for the contents placed within it. Though this pattern does avoid allocation, we may in the future opt for a more classic PIMPL pattern to allow objects to vary more widely in size and just for ease of use. Shell Library Platform differs from the Shell library (e.g. WindowsShell or any other platform Shell) in two ways. Platform does not rely on virtual functions for its abstraction, and it separates the interface from implementation via header and cpp files. The Shell library uses an abstract base class with virtual functions that get overridden for the current platform. Moreover, the Shell also may not exist such as when running from a console or server. In the future, the Shell may change to be more like the Platform library. How To Extend Platform Any time a new primitive needs to be implemented that touches OS specific code, it is often best done in Platform. The simplest approach to add a new primitive is to copy the Thread or File header, clear them out, and start from there. Go into EmptyPlatform and copy either the Thread or File cpp, and stub it out to match the hpp interface. From there, copy it into WindowsPlatform, PosixPlatform, and any other platforms. Be sure to adjust 'ZilchDeclarePrivateData' on the header to account for enough space for all the private data. Global functions are useful for quick helpers (such as getting the OS user-name, where no primitive needs to be allocated and stored). Another consideration is what errors we return from the OS when using primitives. In the beginning we either opted to ignore errors (asserting when they would happen) or to return bools. This proved to be insufficient because often we needed to give feedback to the user. For example, we attempt to open a file in their game's Content directory, but it fails due to security permissions. The assert would catch this on developer computers only because asserts are stripped in Release mode. These situations typically happen in the wild, and not on developer machines. A bool would at least give us information as to why it failed, but that's not enough for the user to correct a situation. The best approach was to use the 'Status' object. is basically a standardized way for us to return pseudo exceptions without using exception handling. We generally take the Status object by reference as the first parameter, and we set it to either success or failure with an error message provided by the OS. Callers can easily check status for failure, as well as print messages to the console or do popups in the GUI. In the future, all primitives will be moved to status (status may also get an option to automatically assert on failure, just to give more control to the caller)."
  },
  "docs/zilch_source_documentation/widgets.html": {
    "href": "docs/zilch_source_documentation/widgets.html",
    "title": "| ZilchEngine",
    "keywords": "Needs docs..."
  },
  "docs/zilch_source_documentation/zilch_code.html": {
    "href": "docs/zilch_source_documentation/zilch_code.html",
    "title": "| ZilchEngine",
    "keywords": "##General Principles Simplify Organized by what it does Embrace change Minimize dependencies Encapsulate what varies Readability is very important Core Engine Features Component base engine Game object management Serialization system Data driven object construction Reflection system for editing, scripting, and messaging Signal/Event system Math library Platform independence Resource system Error handling Physical Code Structure Engine is divided into separate libraries that are separate projects. Libraries are organized in order from the most foundational (containers, math, etc.), to the engine (graphics, physics, etc.) to custom game code (game logic, scripts, etc.). Each higher level layer only depends on more fundamental layers. Fundamental Libraries Base libraries have no dependencies used by all other libraries. Essentially extensions to C++. Common - Core C++ library including Containers, Assertion, and Memory management. Custom container solution optimized for games Custom assertion system ErrorIf(expr, \"msg\") Memory support custom Pools, Heaps, and Stacks Math - Floating point vector math library including matrices, vectors, and quaternions. General Libraries Used by all core systems and other tools. Serialization - Library for saving and loading data in JSON, text, and binary. Resource - Resource management and building. MetaLibrary - Reflection system used for property binding (PropertyGrid) and Event Connections. Geometric Libraries Used by all core systems and other tools (such as exporters). Intersection - Low level shape Intersection library used by physics primarily. Broad Phase - Spatial partitioning library used by graphics, physics, and AI for scene management and frustum culling. Platform Libraries Used for platform independence. All platform dependent code is located here. Platform - Contains platform dependent functions for file access and threading. WindowsPlatform - Right now the only working platform library. Others to be added in the future. Engine Libraries Base for communication between systems and defines core components shared between systems. Contains the core which updates all systems. Other Engine elements Time management Base Components Connection System Animation system System Libraries Core Systems - Run the major simulation systems of the game engine. Graphics - Hardware accelerated graphics rendering. Physics - Constraint based dynamics engine. Sound- Hardware accelerated sound engine. Extensions Additional code that is not required for the core engine to run. Widget - UI System used by editor. Editor - Editor code and logic. On certain platforms, an extension may not be needed (the editor on a game console) or for a particular game (car physics in a puzzle game). Rather than bloat the core, these are optional. Game Object System ###Game Objects (Cogs) To create an object either use the ObjectSpace component or the Factory. Cogs must be created from archetypes which are strings in the form of \"filename.data\" Cogs must be created in a space. Except for a space object itself Components The game object composition class (Cog) is a collection of components provided by the different systems. Every component class inherits from a base component class and has reference/pointer to its owning composition. When the game object composition is destroyed, it destroys all of its components. Creating A Cog Archetype* shipArchetype = ArchetypeManager::Find(\"Ship\"); Cog* cog = space->Create(shipArchetype) 'has' Operator Used to get components from compositions by type name. It is type safe and will return NULL or a valid component. Model* model = cog->has(Model); if(model) { model->SetColor(Vec4(0,1,0,1)); } Handles / CogId The engine uses handles to safely refer to Cogs. CogIds do not keep the object alive. CogIds must be checked for NULL. Once a CogId is checked it is safe to use that object for the rest of the frame. void SomeFunction(CogId target) { if(Cog* cog = target) { if(Transform* transform = cog->has(Transform)) { transform->SetTranslation(Vec3(0,10,0)); } } } also works on CogIds void SomeFunction(CogId target) { if(Transform* transform = target.has(Transform)) { transform->SetTranslation(Vec3(0,10,0)); } } Meta Data Engine has a C++ Meta Object Reflection System. A Meta Object provides a map of member functions, member properties, and member objects. Used for property viewing/editing, reflection, and many editor features. Used for scripting engine to bind C++ functions. Binding Binding is done by a static member function called InitializeMeta() on a class. The function is called when the class is registered or when InitializeMetaOfType is called. All the binding functions are Macros to make binding easy and compact. Meta Data Contents Properties A Getter and Setter function for field or data member. From the outside just a data member but setting may have side effects. Used for editing on the property grid. Example Position, HP, Color, etc. Methods Member functions on objects. Used for event connections, scripting, and simple commands. Example OpenDoor, PlayAnimation, Spawn, Unlock etc. Dependencies For components, what other components MUST be present for a component to function. Used to provide safe component addition and removal in the editor. Also, documents relationships between components. Events A list of events that can be dispatched on this object. Used by the editor to form connections. Component Interfaces Multiple Components may provide the same interface functionality and it does not make sense to have more that one. Examples: Collider, Joints, etc Editor enforces only one component that has a particular interface. For example only one collider component (like BoxColllider) can be present. void ComponentExample::InitializeMeta(MetaClass* meta) { // Must have transform BindDependency(Transform); // Bind shield strength member variable BindMemberProperty(mShieldStrength); // Bind the member function ActivateShield() BindMethod(ActivateShield); // This object can send the event ShieldDown BindEvent(ShieldDown, GameEvent); // This class implements the ShieldProvider interface BindInterface(ShieldProvider); } Bind Member vs Property BindMemberProperty Binds any member variable of a class. Used for quick binding (no get and set function). BindGetSetProperty Binds getter and setter function to act as a property. Allows programmable behavior (for example fetching a resource or updating position) Expects the getter and setter to be named Get'PropertyName' and Set'PropertyName' Other Special Properties Enumerations Enums automatically make a pull down on a the property grid. Must be declared with DeclareEnum macro. Range Properties Displays a slider on the property grid. Resource Properties Automatically uses the resource system to display a list of resources. Serialization Converting an object to and from a file, buffer, network, server, etc. Normally moving from a runtime object to a file or buffer and back. AKA saving and loading. Save and load levels, copy and paste, all of data file loading, including many resources. If data needs to be loaded from a file it goes through the serialization. Example Serialization Code class ComponentExample { public: float mHitPoints; Vec3 mDirection; }; void ComponentExample::Serialize(Serializer& stream) { // Expands to stream.SerializeFieldDefault(\"mHitPoints\", mHitPoints, 100.0f) // and we implicitly remove the 'm' in the data file SerializeNameDefault(mHitPoints, 100.0f); SerializeNameDefault(mDirection, Vec3::cXAxis); } Example Serialization Result ComponentExample = { float HitPoints = 20, vec3 Direction = [1,0,0] } Data File Types Text Human readable basic JSON like format. You can view an object Text by copying it to the clipboard. Binary Optimized binary format, compact and fast to load used for caching. Splitting Saving and Loading The save function handles both saving and loading to reduce the amount of code. Splitting saving and loading can be done based on the serialization direction. Versioning is also handled by the system for text files. Object Serialization Phases Construct the object Constructed - Object has been built from the factory but is not active. Serialization and data setting The object is serialized and then data attributes are adjusted. Initialize the object Object really comes into existence using all the serialized data. Object is destroyed Special Serialization To be serialized, Enums must be declared with DeclareEnum. Resources also have specialized serialization. Serialization of Cogs When a cog is serialized, it uses the data file to find the components it needs. All components are registered to the factory. The factory looks up components by string, constructs them, and then serializes them. When all components are created and serialized the composition is initialized. Initialization ###Component Initialization Do not do anything in a component constructor except initialize values. All the real work is done in Initialize. Get pointers to other components Add component to various system Watch out for order of initialization Dependant components are initialized first. Example Initialization Code void GraphicsComponent::Initialize(CogInitializer& init) { // Getting other components mTransform = GetOwner()->has(Transform); // Adding to the graphics space (or maybe system) GraphicsSpace* graphics = GetSpace()->has(GraphicsSpace); graphics->AddModel(this); }; Events Events are used to communicate between Systems, Game Objects, and Spaces. This is a listener pattern similar to signal/slots, flash events, or delegates from C#. An object connects to a target object, then listens for a particular event to be dispatched Calls the specified function on listening object Connect Connect(targetObject, Events::EventName, receivingObject, &ObjectType::FuncName); For example, the object that is involved in a collision event will have a function called when the event occurs and are constant strings. Usually this is the class doing the connection is a member function pointer othat will be called when the event fires. Connecting Example Code void GraphicsComponent::Initialize(CogInitializer& init) { // ConnectToThis expands to Connect(target, event, this, &classname::function) // Connect to our own Cog ConnectToThis(GetOwner(), Events::VisibilityChanged, OnVisibilityChanged); // We want to be updated every frame (regardless of being paused)... ConnectToThis(GetSpace(), Events::FrameUpdate, OnFrameUpdate); } Declaring Events Creates a constant string used to hook up events. Prevents allocation of multiple string objects. Makes it easy to hook up events. Event Objects When an event occurs an event object is sent. All event objects inherit from the base Event object. Many events use the same event object For example most mouse events (Move, Click, etc) send the event object MouseEvent This makes it easy to refactor and add new data without changing a lot of code. Connection Connections are cleaned up automatically when either object destroyed. Example Event Connections void ComponentExample::Initialize(CogInitializer& init) { ConnectToSelf(GetOwner(), Events::CollisionStarted, OnCollisionStarted); } void ComponentExample::OnCollisionStarted(CollsionEvent* event) { event->OtherObject->Destroy(); } Container Library A game oriented replacement for STL. Most of the same containers. Mostly the same interface. Several key game oriented features. C++ stl Equivalents std::vector -> Array std::unordered_map -> HashMap std::unordered_set -> HashSet No std::map (use HashMap) No std::list (use InList) Intrusively Linked List Intrusive containers are useful for efficiency Most heavily used container besides Array. The next and previous pointers are stored on the object itself. Ranges Containers use ranges in place of iterators for most moving in a container. Ranges are more secure and easier to work with than iterators. int Sum(Array<int>& values) { int total = 0; for(Array<int>::range r = values.all(); !r.empty(); r.popFront()) { total += r.front(); } return total; } int Sum(Array<int>& values) { int total = 0; forRange(int a, values.all()) { total += a; } return total; } String vs std::string std::string suffers from trying to be everything to everyone and is often large Greatly improves hashing, indexing, equality, and string passing Game engines mostly just pass strings around and index with them so immutable strings are ideal Working with Strings Strings are immutable so they can not be modified so how do you change them? Assign a new string! For large amount of string appending use StringBuilder StringRange Essentially replace const char* Internally two pointers to begin and end. Safer faster and easier to work with than null terminated string. Contents are always immutable. C style strings should effectively never be used. Memory and Allocations STL allocators are very complicated to use. Engine containers use a simplified version of allocators that is faster, more flexible, and easier to use. The allocator itself is not templated and can be virtual. Each container has a instance of an allocator. These work with the memory system to track all allocations. Benefits Containers optimized for POD types. Designed to do minimal code generation Shallow function calls to increase performance Easy to read and understand (stl tends to be obfuscated) Intrusive containers Supports aligned data types Supports object sharing and memory pooling to prevent fragmentation Controled memory useage / containers do not allocate memory before it is needed. Include Structure Engine uses pragma once instead of inclusion guards (clearer, faster, and support by all needed compilers) All include statements start from one of the roots (Systems or Utility) Examples: \"Graphics/Model.hpp\" \"Containers/Array.hpp\" It works on all platforms Engine used precompiled headers for all projects. Asserts Engine uses a custom assert system Does not use the usual assert syntax Primary function is ErrorIf(expression) Also has printf functionality ErrorIf(pointer == NULL, \"Could not find object named %s\", objectName.c_str()) Exceptions are not used"
  },
  "docs/zilch_source_documentation/zilch_overview.html": {
    "href": "docs/zilch_source_documentation/zilch_overview.html",
    "title": "| ZilchEngine",
    "keywords": "Engine is divided into Systems that are updated every frame. Game objects, called Cogs, are a composition of Components provided by the systems. Game objects are created from data files by the Factory and placed in Spaces (aka worlds). Objects communicate through Events and through direct access to other objects. Component Based Engine The game object composition class (Cog) is a collection of components provided by the different systems. The components provide units of functionality for the composition. A component can be data, behavior, and/or a link to a system. When the game object composition is destroyed, it destroys all of its components. .. image:: Zilch/ComponentBasedEngine.png Dynamic Composition All compositions are composed dynamically No \"Main Camera\", \"Floor\", or \"Ball\" class is defined in C++. Compositions come from data files The files \"MainCamera.data\", \"Floor.data\", and \"Ball.data\" define which components the composition uses and the data those components need. So objects can be built at runtime by designers! Example Compositions Sample Cog Data File Cog = { Transform = { float[] Translation = [ 8.5, 10, 1 ] , float[] Scale = [ 1, 1, 1 ] , float[] Rotation = [ 0, 0, 0.0, 1 ] , }, Model = { string MaterialName = \"Caution\" , string MeshName = \"Cube\" , }, } Core Engine Components Transform - Position, Rotation, and Scale. Timeline - Animation of properties and events. Hierarchy - Component used to place objects in directed acyclic graphs (trees). Common System Components Defined by different systems (PhysicsSystem, GraphicsSystem, etc) Collider - Defines the shape of the object and provides collision with other objects. Rigid Body - Allows the object to move around and rotate in physics. Model - Draws a 3d mesh at the transforms location. Component Dependencies Components can depend on other components (or interfaces) in the composition. Components register their dependencies and look up their dependencies when they are created. The editor enforces the dependencies to prevent the creation of bad compositions. Example Dependencies Many components (model, collider, camera, etc.) depend on the Transform component for position, rotation, and scale. The Camera Controller depends on the Camera component. The Light Cookie component (used to apply a light stencil) depends on the Light component. Spaces The engine can support multiple \"worlds\" or Spaces. Spaces are game objects compositions with components corresponding to the different systems (PhysicsSpace, GraphicsSpace, SoundSpace). Used by the editor and for level chunks. Spaces in Practice Usually two spaces \"UI\" and \"EditorWorld\". Sometimes a \"PreviewSpace\" is used to preview game objects. When the game is played from the editor it creates a separate space so the \"EditorWorld\" is not affected. There is no global world object. All game objects have a reference/pointer back to their current space. Data Systems and Archetypes Game objects are created from data files by the Factory, which uses the serialization system to read the data. Game object data files are Archetypes (aka prefabs or templates). Archetypes are normally created and modified in the editor. This is how designers create game objects. Archetypes in the Editor An individual game object is created in the editor by selecting an archetype and placing it. If that archetype is modified, any placed game object with that archetype will be modified when the changed archetype is uploaded. If desired, the archetype link to a specific game object can be broken, so that changes to the archetype will not affect that object. Events Events are used to communicate between Systems, Game Objects, and Spaces. This is a listener pattern (similar to signal/slots, flash events, or delegates from C#). An object connects to a target object, then listens for a particular event to be dispatched (which will call the specified function on listening object). Elements of Events EventId - The event Id is a string that identifies the event. Event Object - The event class is the data sent in the event. The same event class may be used for multiple events. The Dispatcher - Object the event occurred on. The Listener - Object that listens for the event. Connection - Contains references to both objects and the bound function to call on the listener. An object can connect to itself. Event Bubbling When an event occurs it can Bubble to classes above it in the hierarchy. This is very important for UI objects. Example: A hand bone on a character gets hit. The event is bubbled up to the root bone and then to the character game object, where an AI component is listening (and responds by deciding to run away). Event Examples When a button is pressed it dispatches a \"Pressed\" event of type MouseEvent. ObjectB (the menu) receives the event and opens a window. When ObjectA collides it sends out a \"ContactStarted\" event of type CollisionEvent. ObjectB receives the event and plays a sound at the collision's location. Resources Shared objects that are used by game objects. Most have to be processed by the resource system, and some are just simple data files. Examples: Materials, Meshes, Textures, Sounds, and Archetypes. A Resource is requested from the ResourceSystem through its name (in the editor) or through its ResourceId (in code). Resource Libraries A collection of resources organized however users of the editor wish. Libraries are stored in a shared folder on a computer that the engine is installed on and can be shared by different projects. Users of the editor decide which libraries they need for their project, while the editor handles loading the resources in each library automatically. Resource Library Types SourceLibrary - the raw unprocessed version of the resources (.psd, .maya, .fbx, .wav, etc) ProcessedLibrary - the processed version of the resources ready to be loaded. These are different for different platforms. Resource Packages Each Space automatically generates a ResourcePackage that includes all the Resources it uses, regardless of which libraries those resources are in. A given level could consist of multiple Spaces, each with its own Resource Package (useful for streaming). Resources are intelligently cached by the engine, so you do not have to worry about duplicating resources in different packages. Custom Resource Packages Custom Resource Packages can be created in the editor, where exact resources from any library can be specified. This is normally done when game objects or resources are dynamically created in C++ code (which means the automatically generated resource packages don't know about them)."
  },
  "index.html": {
    "href": "index.html",
    "title": "This is the HOMEPAGE. | ZilchEngine",
    "keywords": "This is the HOMEPAGE. Refer to Markdown for how to write markdown files. Quick Start Notes: Add images to the images folder if the file is referencing an image."
  },
  "samples/getting-started.html": {
    "href": "samples/getting-started.html",
    "title": "Getting Started | ZilchEngine",
    "keywords": "Getting Started"
  },
  "samples/introduction.html": {
    "href": "samples/introduction.html",
    "title": "Introduction | ZilchEngine",
    "keywords": "Introduction"
  }
}